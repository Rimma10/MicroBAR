
KeyboardMouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e34  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000018  00800100  00800100  00000ea8  2**0
                  ALLOC
  2 .debug_aranges 000002d0  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000831  00000000  00000000  00001178  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00004a26  00000000  00000000  000019a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000127e  00000000  00000000  000063cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00003fef  00000000  00000000  0000764d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000420  00000000  00000000  0000b63c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00002115  00000000  00000000  0000ba5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000024a9  00000000  00000000  0000db71  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000388  00000000  00000000  0001001a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
   0:	dd c0       	rjmp	.+442    	; 0x1bc <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   2:	00 00       	nop
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
   4:	f8 c0       	rjmp	.+496    	; 0x1f6 <__bad_interrupt>
   6:	00 00       	nop
   8:	f6 c0       	rjmp	.+492    	; 0x1f6 <__bad_interrupt>
   a:	00 00       	nop
   c:	f4 c0       	rjmp	.+488    	; 0x1f6 <__bad_interrupt>
   e:	00 00       	nop
  10:	f2 c0       	rjmp	.+484    	; 0x1f6 <__bad_interrupt>
  12:	00 00       	nop
  14:	f0 c0       	rjmp	.+480    	; 0x1f6 <__bad_interrupt>
  16:	00 00       	nop
  18:	ee c0       	rjmp	.+476    	; 0x1f6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	ec c0       	rjmp	.+472    	; 0x1f6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	ea c0       	rjmp	.+468    	; 0x1f6 <__bad_interrupt>
  22:	00 00       	nop
  24:	e8 c0       	rjmp	.+464    	; 0x1f6 <__bad_interrupt>
  26:	00 00       	nop
  28:	89 c3       	rjmp	.+1810   	; 0x73c <__vector_10>
  2a:	00 00       	nop
  2c:	e4 c0       	rjmp	.+456    	; 0x1f6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	e2 c0       	rjmp	.+452    	; 0x1f6 <__bad_interrupt>
  32:	00 00       	nop
  34:	e0 c0       	rjmp	.+448    	; 0x1f6 <__bad_interrupt>
  36:	00 00       	nop
  38:	de c0       	rjmp	.+444    	; 0x1f6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	dc c0       	rjmp	.+440    	; 0x1f6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	da c0       	rjmp	.+436    	; 0x1f6 <__bad_interrupt>
  42:	00 00       	nop
  44:	d8 c0       	rjmp	.+432    	; 0x1f6 <__bad_interrupt>
  46:	00 00       	nop
  48:	d6 c0       	rjmp	.+428    	; 0x1f6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	d4 c0       	rjmp	.+424    	; 0x1f6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	d2 c0       	rjmp	.+420    	; 0x1f6 <__bad_interrupt>
  52:	00 00       	nop
  54:	d0 c0       	rjmp	.+416    	; 0x1f6 <__bad_interrupt>
  56:	00 00       	nop
  58:	ce c0       	rjmp	.+412    	; 0x1f6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	cc c0       	rjmp	.+408    	; 0x1f6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	ca c0       	rjmp	.+404    	; 0x1f6 <__bad_interrupt>
  62:	00 00       	nop
  64:	c8 c0       	rjmp	.+400    	; 0x1f6 <__bad_interrupt>
  66:	00 00       	nop
  68:	c6 c0       	rjmp	.+396    	; 0x1f6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	c4 c0       	rjmp	.+392    	; 0x1f6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	c2 c0       	rjmp	.+388    	; 0x1f6 <__bad_interrupt>
  72:	00 00       	nop
  74:	c0 c0       	rjmp	.+384    	; 0x1f6 <__bad_interrupt>
  76:	00 00       	nop
  78:	be c0       	rjmp	.+380    	; 0x1f6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	bc c0       	rjmp	.+376    	; 0x1f6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	ba c0       	rjmp	.+372    	; 0x1f6 <__bad_interrupt>
  82:	00 00       	nop
  84:	b8 c0       	rjmp	.+368    	; 0x1f6 <__bad_interrupt>
  86:	00 00       	nop
  88:	b6 c0       	rjmp	.+364    	; 0x1f6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	b4 c0       	rjmp	.+360    	; 0x1f6 <__bad_interrupt>
  8e:	00 00       	nop
  90:	b2 c0       	rjmp	.+356    	; 0x1f6 <__bad_interrupt>
  92:	00 00       	nop
  94:	b0 c0       	rjmp	.+352    	; 0x1f6 <__bad_interrupt>
  96:	00 00       	nop

00000098 <MouseReport>:
  98:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
  a8:	15 00 25 01 95 03 75 01 81 02 95 01 75 05 81 01     ..%...u.....u...
  b8:	05 01 09 30 09 31 15 ff 25 01 35 ff 45 01 95 02     ...0.1..%.5.E...
  c8:	75 08 81 06 c0 c0                                   u.....

000000ce <KeyboardReport>:
  ce:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
  de:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
  ee:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
  fe:	25 65 05 07 19 00 29 65 95 06 75 08 81 00 c0        %e....)e..u....

0000010d <DeviceDescriptor>:
 10d:	12 01 10 01 00 00 00 08 eb 03 4d 20 01 00 01 02     ..........M ....
 11d:	00 01                                               ..

0000011f <ConfigurationDescriptor>:
 11f:	09 02 42 00 02 01 00 c0 32 09 04 00 00 02 03 01     ..B.....2.......
 12f:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
 13f:	00 01 07 05 02 03 08 00 01 09 04 01 00 01 03 01     ................
 14f:	02 00 09 21 11 01 00 01 22 36 00 07 05 83 03 08     ...!...."6......
 15f:	00 01                                               ..

00000161 <LanguageString>:
 161:	04 03 09 04                                         ....

00000165 <ManufacturerString>:
 165:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
 175:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

0000017f <ProductString>:
 17f:	3a 03 4c 00 55 00 46 00 41 00 20 00 4d 00 6f 00     :.L.U.F.A. .M.o.
 18f:	75 00 73 00 65 00 20 00 61 00 6e 00 64 00 20 00     u.s.e. .a.n.d. .
 19f:	4b 00 65 00 79 00 62 00 6f 00 61 00 72 00 64 00     K.e.y.b.o.a.r.d.
 1af:	20 00 44 00 65 00 6d 00 6f 00 00 00 00               .D.e.m.o....

000001bc <__ctors_end>:
 1bc:	11 24       	eor	r1, r1
 1be:	1f be       	out	0x3f, r1	; 63
 1c0:	cf ef       	ldi	r28, 0xFF	; 255
 1c2:	d0 e2       	ldi	r29, 0x20	; 32
 1c4:	de bf       	out	0x3e, r29	; 62
 1c6:	cd bf       	out	0x3d, r28	; 61

000001c8 <__do_copy_data>:
 1c8:	11 e0       	ldi	r17, 0x01	; 1
 1ca:	a0 e0       	ldi	r26, 0x00	; 0
 1cc:	b1 e0       	ldi	r27, 0x01	; 1
 1ce:	e4 e3       	ldi	r30, 0x34	; 52
 1d0:	fe e0       	ldi	r31, 0x0E	; 14
 1d2:	00 e0       	ldi	r16, 0x00	; 0
 1d4:	0b bf       	out	0x3b, r16	; 59
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <__do_copy_data+0x14>
 1d8:	07 90       	elpm	r0, Z+
 1da:	0d 92       	st	X+, r0
 1dc:	a0 30       	cpi	r26, 0x00	; 0
 1de:	b1 07       	cpc	r27, r17
 1e0:	d9 f7       	brne	.-10     	; 0x1d8 <__do_copy_data+0x10>

000001e2 <__do_clear_bss>:
 1e2:	11 e0       	ldi	r17, 0x01	; 1
 1e4:	a0 e0       	ldi	r26, 0x00	; 0
 1e6:	b1 e0       	ldi	r27, 0x01	; 1
 1e8:	01 c0       	rjmp	.+2      	; 0x1ec <.do_clear_bss_start>

000001ea <.do_clear_bss_loop>:
 1ea:	1d 92       	st	X+, r1

000001ec <.do_clear_bss_start>:
 1ec:	a8 31       	cpi	r26, 0x18	; 24
 1ee:	b1 07       	cpc	r27, r17
 1f0:	e1 f7       	brne	.-8      	; 0x1ea <.do_clear_bss_loop>
 1f2:	65 d1       	rcall	.+714    	; 0x4be <main>
 1f4:	1d c6       	rjmp	.+3130   	; 0xe30 <_exit>

000001f6 <__bad_interrupt>:
 1f6:	04 cf       	rjmp	.-504    	; 0x0 <__vectors>

000001f8 <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 1f8:	8b b1       	in	r24, 0x0b	; 11
 1fa:	8f 70       	andi	r24, 0x0F	; 15
 1fc:	80 6a       	ori	r24, 0xA0	; 160
 1fe:	8b b9       	out	0x0b, r24	; 11
 */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
 200:	08 95       	ret

00000202 <EVENT_USB_Device_Disconnect>:
 202:	8b b1       	in	r24, 0x0b	; 11
 204:	8f 70       	andi	r24, 0x0F	; 15
 206:	80 61       	ori	r24, 0x10	; 16
 208:	8b b9       	out	0x0b, r24	; 11
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
 20a:	08 95       	ret

0000020c <Keyboard_ProcessLEDReport>:
 */
void Keyboard_ProcessLEDReport(const uint8_t LEDStatus)
{
	uint8_t LEDMask = LEDS_LED2;

	if (LEDStatus & HID_KEYBOARD_LED_NUMLOCK)
 20c:	80 fd       	sbrc	r24, 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <Keyboard_ProcessLEDReport+0x8>
 210:	20 e2       	ldi	r18, 0x20	; 32
 212:	01 c0       	rjmp	.+2      	; 0x216 <Keyboard_ProcessLEDReport+0xa>
 214:	20 e3       	ldi	r18, 0x30	; 48
	  LEDMask |= LEDS_LED1;

	if (LEDStatus & HID_KEYBOARD_LED_CAPSLOCK)
 216:	81 fd       	sbrc	r24, 1
	  LEDMask |= LEDS_LED3;
 218:	20 68       	ori	r18, 0x80	; 128

	if (LEDStatus & HID_KEYBOARD_LED_SCROLLLOCK)
 21a:	82 fd       	sbrc	r24, 2
	  LEDMask |= LEDS_LED4;
 21c:	20 64       	ori	r18, 0x40	; 64
 21e:	8b b1       	in	r24, 0x0b	; 11
 220:	8f 70       	andi	r24, 0x0F	; 15
 222:	28 2b       	or	r18, r24
 224:	2b b9       	out	0x0b, r18	; 11

	/* Set the status LEDs to the current Keyboard LED status */
	LEDs_SetAllLEDs(LEDMask);
}
 226:	08 95       	ret

00000228 <Mouse_HID_Task>:

/** Mouse task. This generates the next mouse HID report for the host, and transmits it via the
 *  mouse IN endpoint when the host is ready for more data.
 */
void Mouse_HID_Task(void)
{
 228:	ff 92       	push	r15
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
 22e:	23 b1       	in	r18, 0x03	; 3
 230:	9c b1       	in	r25, 0x0c	; 12
	uint8_t JoyStatus_LCL = Joystick_GetStatus();

	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 232:	80 91 0f 01 	lds	r24, 0x010F
 236:	84 30       	cpi	r24, 0x04	; 4
 238:	09 f0       	breq	.+2      	; 0x23c <Mouse_HID_Task+0x14>
 23a:	3f c0       	rjmp	.+126    	; 0x2ba <Mouse_HID_Task+0x92>
	  return;

	/* Check if board button is pressed, if so mouse mode enabled */
	if (Buttons_GetStatus() & BUTTONS_BUTTON1)
 23c:	62 99       	sbic	0x0c, 2	; 12
 23e:	24 c0       	rjmp	.+72     	; 0x288 <Mouse_HID_Task+0x60>
 240:	90 95       	com	r25
 242:	89 2f       	mov	r24, r25
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	80 73       	andi	r24, 0x30	; 48
 248:	90 70       	andi	r25, 0x00	; 0
 24a:	95 95       	asr	r25
 24c:	87 95       	ror	r24
 24e:	92 2f       	mov	r25, r18
 250:	90 95       	com	r25
 252:	90 7e       	andi	r25, 0xE0	; 224
 254:	98 2b       	or	r25, r24
	{
		if (JoyStatus_LCL & JOY_UP)
 256:	97 ff       	sbrs	r25, 7
 258:	02 c0       	rjmp	.+4      	; 0x25e <Mouse_HID_Task+0x36>
		  MouseReportData.Y =  1;
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	03 c0       	rjmp	.+6      	; 0x264 <Mouse_HID_Task+0x3c>
		else if (JoyStatus_LCL & JOY_DOWN)
 25e:	94 ff       	sbrs	r25, 4
 260:	03 c0       	rjmp	.+6      	; 0x268 <Mouse_HID_Task+0x40>
		  MouseReportData.Y = -1;
 262:	8f ef       	ldi	r24, 0xFF	; 255
 264:	80 93 0a 01 	sts	0x010A, r24

		if (JoyStatus_LCL & JOY_RIGHT)
 268:	93 ff       	sbrs	r25, 3
 26a:	02 c0       	rjmp	.+4      	; 0x270 <Mouse_HID_Task+0x48>
		  MouseReportData.X =  1;
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	03 c0       	rjmp	.+6      	; 0x276 <Mouse_HID_Task+0x4e>
		else if (JoyStatus_LCL & JOY_LEFT)
 270:	96 ff       	sbrs	r25, 6
 272:	03 c0       	rjmp	.+6      	; 0x27a <Mouse_HID_Task+0x52>
		  MouseReportData.X = -1;
 274:	8f ef       	ldi	r24, 0xFF	; 255
 276:	80 93 09 01 	sts	0x0109, r24

		if (JoyStatus_LCL & JOY_PRESS)
 27a:	95 ff       	sbrs	r25, 5
 27c:	05 c0       	rjmp	.+10     	; 0x288 <Mouse_HID_Task+0x60>
		  MouseReportData.Button |= (1 << 0);
 27e:	80 91 08 01 	lds	r24, 0x0108
 282:	81 60       	ori	r24, 0x01	; 1
 284:	80 93 08 01 	sts	0x0108, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 288:	83 e0       	ldi	r24, 0x03	; 3
 28a:	f8 2e       	mov	r15, r24
 28c:	f0 92 e9 00 	sts	0x00E9, r15
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 290:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the Mouse Report Endpoint */
	Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

	/* Check if Mouse Endpoint Ready for Read/Write */
	if (Endpoint_IsReadWriteAllowed())
 294:	85 ff       	sbrs	r24, 5
 296:	11 c0       	rjmp	.+34     	; 0x2ba <Mouse_HID_Task+0x92>
	{
		/* Write Mouse Report Data */
		Endpoint_Write_Stream_LE(&MouseReportData, sizeof(MouseReportData), NULL);
 298:	08 e0       	ldi	r16, 0x08	; 8
 29a:	11 e0       	ldi	r17, 0x01	; 1
 29c:	c8 01       	movw	r24, r16
 29e:	63 e0       	ldi	r22, 0x03	; 3
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	40 e0       	ldi	r20, 0x00	; 0
 2a4:	50 e0       	ldi	r21, 0x00	; 0
 2a6:	58 d5       	rcall	.+2736   	; 0xd58 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 2a8:	80 91 e8 00 	lds	r24, 0x00E8
 2ac:	8e 77       	andi	r24, 0x7E	; 126
 2ae:	80 93 e8 00 	sts	0x00E8, r24

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();

		/* Clear the report data afterwards */
		memset(&MouseReportData, 0, sizeof(MouseReportData));
 2b2:	f8 01       	movw	r30, r16
 2b4:	11 92       	st	Z+, r1
 2b6:	fa 94       	dec	r15
 2b8:	e9 f7       	brne	.-6      	; 0x2b4 <Mouse_HID_Task+0x8c>
	}
}
 2ba:	1f 91       	pop	r17
 2bc:	0f 91       	pop	r16
 2be:	ff 90       	pop	r15
 2c0:	08 95       	ret

000002c2 <Keyboard_HID_Task>:
/** Keyboard task. This generates the next keyboard HID report for the host, and transmits it via the
 *  keyboard IN endpoint when the host is ready for more data. Additionally, it processes host LED status
 *  reports sent to the device via the keyboard OUT reporting endpoint.
 */
void Keyboard_HID_Task(void)
{
 2c2:	0f 93       	push	r16
 2c4:	1f 93       	push	r17
 2c6:	33 b1       	in	r19, 0x03	; 3
 2c8:	8c b1       	in	r24, 0x0c	; 12
	uint8_t JoyStatus_LCL = Joystick_GetStatus();

	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 2ca:	20 91 0f 01 	lds	r18, 0x010F
 2ce:	24 30       	cpi	r18, 0x04	; 4
 2d0:	09 f0       	breq	.+2      	; 0x2d4 <Keyboard_HID_Task+0x12>
 2d2:	4f c0       	rjmp	.+158    	; 0x372 <Keyboard_HID_Task+0xb0>
	  return;

	/* Check if board button is not pressed, if so mouse mode enabled */
	if (!(Buttons_GetStatus() & BUTTONS_BUTTON1))
 2d4:	62 9b       	sbis	0x0c, 2	; 12
 2d6:	25 c0       	rjmp	.+74     	; 0x322 <Keyboard_HID_Task+0x60>
 2d8:	80 95       	com	r24
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	80 73       	andi	r24, 0x30	; 48
 2de:	90 70       	andi	r25, 0x00	; 0
 2e0:	95 95       	asr	r25
 2e2:	87 95       	ror	r24
 2e4:	93 2f       	mov	r25, r19
 2e6:	90 95       	com	r25
 2e8:	90 7e       	andi	r25, 0xE0	; 224
 2ea:	98 2b       	or	r25, r24
	{
		/* Make sent key uppercase by indicating that the left shift key is pressed */
		KeyboardReportData.Modifier = HID_KEYBOARD_MODIFER_LEFTSHIFT;
 2ec:	82 e0       	ldi	r24, 0x02	; 2
 2ee:	80 93 00 01 	sts	0x0100, r24

		if (JoyStatus_LCL & JOY_UP)
 2f2:	97 ff       	sbrs	r25, 7
 2f4:	03 c0       	rjmp	.+6      	; 0x2fc <Keyboard_HID_Task+0x3a>
		  KeyboardReportData.KeyCode[0] = HID_KEYBOARD_SC_A;
 2f6:	20 93 02 01 	sts	0x0102, r18
 2fa:	05 c0       	rjmp	.+10     	; 0x306 <Keyboard_HID_Task+0x44>
		else if (JoyStatus_LCL & JOY_DOWN)
 2fc:	94 ff       	sbrs	r25, 4
 2fe:	03 c0       	rjmp	.+6      	; 0x306 <Keyboard_HID_Task+0x44>
		  KeyboardReportData.KeyCode[0] = HID_KEYBOARD_SC_B;
 300:	85 e0       	ldi	r24, 0x05	; 5
 302:	80 93 02 01 	sts	0x0102, r24

		if (JoyStatus_LCL & JOY_LEFT)
 306:	96 ff       	sbrs	r25, 6
 308:	02 c0       	rjmp	.+4      	; 0x30e <Keyboard_HID_Task+0x4c>
		  KeyboardReportData.KeyCode[0] = HID_KEYBOARD_SC_C;
 30a:	86 e0       	ldi	r24, 0x06	; 6
 30c:	03 c0       	rjmp	.+6      	; 0x314 <Keyboard_HID_Task+0x52>
		else if (JoyStatus_LCL & JOY_RIGHT)
 30e:	93 ff       	sbrs	r25, 3
 310:	03 c0       	rjmp	.+6      	; 0x318 <Keyboard_HID_Task+0x56>
		  KeyboardReportData.KeyCode[0] = HID_KEYBOARD_SC_D;
 312:	87 e0       	ldi	r24, 0x07	; 7
 314:	80 93 02 01 	sts	0x0102, r24

		if (JoyStatus_LCL & JOY_PRESS)
 318:	95 ff       	sbrs	r25, 5
 31a:	03 c0       	rjmp	.+6      	; 0x322 <Keyboard_HID_Task+0x60>
		  KeyboardReportData.KeyCode[0] = HID_KEYBOARD_SC_E;
 31c:	88 e0       	ldi	r24, 0x08	; 8
 31e:	80 93 02 01 	sts	0x0102, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 328:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the Keyboard Report Endpoint */
	Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

	/* Check if Keyboard Endpoint Ready for Read/Write */
	if (Endpoint_IsReadWriteAllowed())
 32c:	85 ff       	sbrs	r24, 5
 32e:	12 c0       	rjmp	.+36     	; 0x354 <Keyboard_HID_Task+0x92>
	{
		/* Write Keyboard Report Data */
		Endpoint_Write_Stream_LE(&KeyboardReportData, sizeof(KeyboardReportData), NULL);
 330:	00 e0       	ldi	r16, 0x00	; 0
 332:	11 e0       	ldi	r17, 0x01	; 1
 334:	c8 01       	movw	r24, r16
 336:	68 e0       	ldi	r22, 0x08	; 8
 338:	70 e0       	ldi	r23, 0x00	; 0
 33a:	40 e0       	ldi	r20, 0x00	; 0
 33c:	50 e0       	ldi	r21, 0x00	; 0
 33e:	0c d5       	rcall	.+2584   	; 0xd58 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 340:	80 91 e8 00 	lds	r24, 0x00E8
 344:	8e 77       	andi	r24, 0x7E	; 126
 346:	80 93 e8 00 	sts	0x00E8, r24

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();

		/* Clear the report data afterwards */
		memset(&KeyboardReportData, 0, sizeof(KeyboardReportData));
 34a:	88 e0       	ldi	r24, 0x08	; 8
 34c:	f8 01       	movw	r30, r16
 34e:	11 92       	st	Z+, r1
 350:	8a 95       	dec	r24
 352:	e9 f7       	brne	.-6      	; 0x34e <Keyboard_HID_Task+0x8c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 354:	82 e0       	ldi	r24, 0x02	; 2
 356:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 35a:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the Keyboard LED Report Endpoint */
	Endpoint_SelectEndpoint(KEYBOARD_OUT_EPNUM);

	/* Check if Keyboard LED Endpoint Ready for Read/Write */
	if (Endpoint_IsReadWriteAllowed())
 35e:	85 ff       	sbrs	r24, 5
 360:	08 c0       	rjmp	.+16     	; 0x372 <Keyboard_HID_Task+0xb0>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 362:	80 91 f1 00 	lds	r24, 0x00F1
	{
		/* Read in and process the LED report from the host */
		Keyboard_ProcessLEDReport(Endpoint_Read_8());
 366:	52 df       	rcall	.-348    	; 0x20c <Keyboard_ProcessLEDReport>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 368:	80 91 e8 00 	lds	r24, 0x00E8
 36c:	8b 77       	andi	r24, 0x7B	; 123
 36e:	80 93 e8 00 	sts	0x00E8, r24

		/* Handshake the OUT Endpoint - clear endpoint and ready for next report */
		Endpoint_ClearOUT();
	}
}
 372:	1f 91       	pop	r17
 374:	0f 91       	pop	r16
 376:	08 95       	ret

00000378 <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
 378:	1f 93       	push	r17
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
	uint8_t* ReportData;
	uint8_t  ReportSize;

	/* Handle HID Class specific requests */
	switch (USB_ControlRequest.bRequest)
 37e:	80 91 11 01 	lds	r24, 0x0111
 382:	81 30       	cpi	r24, 0x01	; 1
 384:	21 f0       	breq	.+8      	; 0x38e <EVENT_USB_Device_ControlRequest+0x16>
 386:	89 30       	cpi	r24, 0x09	; 9
 388:	09 f0       	breq	.+2      	; 0x38c <EVENT_USB_Device_ControlRequest+0x14>
 38a:	44 c0       	rjmp	.+136    	; 0x414 <EVENT_USB_Device_ControlRequest+0x9c>
 38c:	27 c0       	rjmp	.+78     	; 0x3dc <EVENT_USB_Device_ControlRequest+0x64>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 38e:	80 91 10 01 	lds	r24, 0x0110
 392:	81 3a       	cpi	r24, 0xA1	; 161
 394:	09 f0       	breq	.+2      	; 0x398 <EVENT_USB_Device_ControlRequest+0x20>
 396:	3e c0       	rjmp	.+124    	; 0x414 <EVENT_USB_Device_ControlRequest+0x9c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 398:	80 91 e8 00 	lds	r24, 0x00E8
 39c:	87 7f       	andi	r24, 0xF7	; 247
 39e:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Determine if it is the mouse or the keyboard data that is being requested */
				if (!(USB_ControlRequest.wIndex))
 3a2:	80 91 14 01 	lds	r24, 0x0114
 3a6:	90 91 15 01 	lds	r25, 0x0115
 3aa:	89 2b       	or	r24, r25
 3ac:	21 f0       	breq	.+8      	; 0x3b6 <EVENT_USB_Device_ControlRequest+0x3e>
 3ae:	c8 e0       	ldi	r28, 0x08	; 8
 3b0:	d1 e0       	ldi	r29, 0x01	; 1
 3b2:	13 e0       	ldi	r17, 0x03	; 3
 3b4:	03 c0       	rjmp	.+6      	; 0x3bc <EVENT_USB_Device_ControlRequest+0x44>
 3b6:	c0 e0       	ldi	r28, 0x00	; 0
 3b8:	d1 e0       	ldi	r29, 0x01	; 1
 3ba:	18 e0       	ldi	r17, 0x08	; 8
					ReportData = (uint8_t*)&MouseReportData;
					ReportSize = sizeof(MouseReportData);
				}

				/* Write the report data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 3bc:	ce 01       	movw	r24, r28
 3be:	61 2f       	mov	r22, r17
 3c0:	70 e0       	ldi	r23, 0x00	; 0
 3c2:	0b d4       	rcall	.+2070   	; 0xbda <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 3c4:	80 91 e8 00 	lds	r24, 0x00E8
 3c8:	8b 77       	andi	r24, 0x7B	; 123
 3ca:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearOUT();

				/* Clear the report data afterwards */
				memset(ReportData, 0, ReportSize);
 3ce:	ce 01       	movw	r24, r28
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	70 e0       	ldi	r23, 0x00	; 0
 3d4:	41 2f       	mov	r20, r17
 3d6:	50 e0       	ldi	r21, 0x00	; 0
 3d8:	24 d5       	rcall	.+2632   	; 0xe22 <memset>
 3da:	1c c0       	rjmp	.+56     	; 0x414 <EVENT_USB_Device_ControlRequest+0x9c>
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 3dc:	80 91 10 01 	lds	r24, 0x0110
 3e0:	81 32       	cpi	r24, 0x21	; 33
 3e2:	c1 f4       	brne	.+48     	; 0x414 <EVENT_USB_Device_ControlRequest+0x9c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 3e4:	80 91 e8 00 	lds	r24, 0x00E8
 3e8:	87 7f       	andi	r24, 0xF7	; 247
 3ea:	80 93 e8 00 	sts	0x00E8, r24
 3ee:	04 c0       	rjmp	.+8      	; 0x3f8 <EVENT_USB_Device_ControlRequest+0x80>
				Endpoint_ClearSETUP();

				/* Wait until the LED report has been sent by the host */
				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 3f0:	80 91 0f 01 	lds	r24, 0x010F
 3f4:	88 23       	and	r24, r24
 3f6:	71 f0       	breq	.+28     	; 0x414 <EVENT_USB_Device_ControlRequest+0x9c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 3f8:	80 91 e8 00 	lds	r24, 0x00E8
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				/* Wait until the LED report has been sent by the host */
				while (!(Endpoint_IsOUTReceived()))
 3fc:	82 ff       	sbrs	r24, 2
 3fe:	f8 cf       	rjmp	.-16     	; 0x3f0 <EVENT_USB_Device_ControlRequest+0x78>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 400:	10 91 f1 00 	lds	r17, 0x00F1
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 404:	80 91 e8 00 	lds	r24, 0x00E8
 408:	8b 77       	andi	r24, 0x7B	; 123
 40a:	80 93 e8 00 	sts	0x00E8, r24

				/* Read in the LED report from the host */
				uint8_t LEDStatus = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
 40e:	e4 d0       	rcall	.+456    	; 0x5d8 <Endpoint_ClearStatusStage>

				/* Process the incoming LED report */
				Keyboard_ProcessLEDReport(LEDStatus);
 410:	81 2f       	mov	r24, r17
 412:	fc de       	rcall	.-520    	; 0x20c <Keyboard_ProcessLEDReport>
			}

			break;
	}
}
 414:	df 91       	pop	r29
 416:	cf 91       	pop	r28
 418:	1f 91       	pop	r17
 41a:	08 95       	ret

0000041c <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the USB_ConfigurationChanged event. This is fired when the host sets the current configuration
 *  of the USB device after enumeration, and configures the keyboard and mouse device endpoints.
 */
void EVENT_USB_Device_ConfigurationChanged(void)
{
 41c:	ef 92       	push	r14
 41e:	ff 92       	push	r15
 420:	0f 93       	push	r16
 422:	1f 93       	push	r17
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	61 ec       	ldi	r22, 0xC1	; 193
 428:	42 e0       	ldi	r20, 0x02	; 2
 42a:	a1 d0       	rcall	.+322    	; 0x56e <Endpoint_ConfigureEndpoint_Prv>
 42c:	08 2f       	mov	r16, r24
	/* Setup Mouse HID Report Endpoint */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MOUSE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
	                                            HID_EPSIZE, ENDPOINT_BANK_SINGLE);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 42e:	82 e0       	ldi	r24, 0x02	; 2
 430:	60 ec       	ldi	r22, 0xC0	; 192
 432:	42 e0       	ldi	r20, 0x02	; 2
 434:	9c d0       	rcall	.+312    	; 0x56e <Endpoint_ConfigureEndpoint_Prv>
 436:	e8 2e       	mov	r14, r24
 438:	83 e0       	ldi	r24, 0x03	; 3
 43a:	61 ec       	ldi	r22, 0xC1	; 193
 43c:	42 e0       	ldi	r20, 0x02	; 2
 43e:	97 d0       	rcall	.+302    	; 0x56e <Endpoint_ConfigureEndpoint_Prv>
 440:	10 e0       	ldi	r17, 0x00	; 0
 442:	ff 24       	eor	r15, r15
 444:	0e 21       	and	r16, r14
 446:	1f 21       	and	r17, r15
 448:	01 70       	andi	r16, 0x01	; 1
 44a:	10 70       	andi	r17, 0x00	; 0
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	08 23       	and	r16, r24
 450:	19 23       	and	r17, r25
 452:	01 2b       	or	r16, r17
 454:	11 f4       	brne	.+4      	; 0x45a <EVENT_USB_Device_ConfigurationChanged+0x3e>
 456:	90 e9       	ldi	r25, 0x90	; 144
 458:	01 c0       	rjmp	.+2      	; 0x45c <EVENT_USB_Device_ConfigurationChanged+0x40>
 45a:	90 e6       	ldi	r25, 0x60	; 96
 45c:	8b b1       	in	r24, 0x0b	; 11
 45e:	8f 70       	andi	r24, 0x0F	; 15
 460:	98 2b       	or	r25, r24
 462:	9b b9       	out	0x0b, r25	; 11
}
 464:	1f 91       	pop	r17
 466:	0f 91       	pop	r16
 468:	ff 90       	pop	r15
 46a:	ef 90       	pop	r14
 46c:	08 95       	ret

0000046e <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 46e:	84 b7       	in	r24, 0x34	; 52
 470:	87 7f       	andi	r24, 0xF7	; 247
 472:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 474:	88 e1       	ldi	r24, 0x18	; 24
 476:	0f b6       	in	r0, 0x3f	; 63
 478:	f8 94       	cli
 47a:	80 93 60 00 	sts	0x0060, r24
 47e:	10 92 60 00 	sts	0x0060, r1
 482:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	20 e8       	ldi	r18, 0x80	; 128
 48a:	0f b6       	in	r0, 0x3f	; 63
 48c:	f8 94       	cli
 48e:	20 93 61 00 	sts	0x0061, r18
 492:	80 93 61 00 	sts	0x0061, r24
 496:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
 498:	84 b1       	in	r24, 0x04	; 4
 49a:	8f 71       	andi	r24, 0x1F	; 31
 49c:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
 49e:	8d b1       	in	r24, 0x0d	; 13
 4a0:	8f 7c       	andi	r24, 0xCF	; 207
 4a2:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
 4a4:	85 b1       	in	r24, 0x05	; 5
 4a6:	80 6e       	ori	r24, 0xE0	; 224
 4a8:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
 4aa:	8e b1       	in	r24, 0x0e	; 14
 4ac:	80 63       	ori	r24, 0x30	; 48
 4ae:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 4b0:	8a b1       	in	r24, 0x0a	; 10
 4b2:	80 6f       	ori	r24, 0xF0	; 240
 4b4:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 4b6:	8b b1       	in	r24, 0x0b	; 11
 4b8:	8f 70       	andi	r24, 0x0F	; 15
 4ba:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	USB_Init();
}
 4bc:	29 c1       	rjmp	.+594    	; 0x710 <USB_Init>

000004be <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
 4be:	d7 df       	rcall	.-82     	; 0x46e <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 4c0:	8b b1       	in	r24, 0x0b	; 11
 4c2:	8f 70       	andi	r24, 0x0F	; 15
 4c4:	80 61       	ori	r24, 0x10	; 16
 4c6:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
 4c8:	78 94       	sei

	for (;;)
	{
		Keyboard_HID_Task();
 4ca:	fb de       	rcall	.-522    	; 0x2c2 <Keyboard_HID_Task>
		Mouse_HID_Task();
 4cc:	ad de       	rcall	.-678    	; 0x228 <Mouse_HID_Task>
		USB_USBTask();
 4ce:	96 d4       	rcall	.+2348   	; 0xdfc <USB_USBTask>
 4d0:	fc cf       	rjmp	.-8      	; 0x4ca <main+0xc>

000004d2 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
 4d2:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 4d4:	93 30       	cpi	r25, 0x03	; 3
 4d6:	c1 f0       	breq	.+48     	; 0x508 <CALLBACK_USB_GetDescriptor+0x36>
 4d8:	94 30       	cpi	r25, 0x04	; 4
 4da:	30 f4       	brcc	.+12     	; 0x4e8 <CALLBACK_USB_GetDescriptor+0x16>
 4dc:	91 30       	cpi	r25, 0x01	; 1
 4de:	51 f0       	breq	.+20     	; 0x4f4 <CALLBACK_USB_GetDescriptor+0x22>
 4e0:	92 30       	cpi	r25, 0x02	; 2
 4e2:	09 f0       	breq	.+2      	; 0x4e6 <CALLBACK_USB_GetDescriptor+0x14>
 4e4:	3c c0       	rjmp	.+120    	; 0x55e <CALLBACK_USB_GetDescriptor+0x8c>
 4e6:	0b c0       	rjmp	.+22     	; 0x4fe <CALLBACK_USB_GetDescriptor+0x2c>
 4e8:	91 32       	cpi	r25, 0x21	; 33
 4ea:	19 f1       	breq	.+70     	; 0x532 <CALLBACK_USB_GetDescriptor+0x60>
 4ec:	92 32       	cpi	r25, 0x22	; 34
 4ee:	09 f0       	breq	.+2      	; 0x4f2 <CALLBACK_USB_GetDescriptor+0x20>
 4f0:	36 c0       	rjmp	.+108    	; 0x55e <CALLBACK_USB_GetDescriptor+0x8c>
 4f2:	29 c0       	rjmp	.+82     	; 0x546 <CALLBACK_USB_GetDescriptor+0x74>
 4f4:	ed e0       	ldi	r30, 0x0D	; 13
 4f6:	f1 e0       	ldi	r31, 0x01	; 1
 4f8:	22 e1       	ldi	r18, 0x12	; 18
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	34 c0       	rjmp	.+104    	; 0x566 <CALLBACK_USB_GetDescriptor+0x94>
 4fe:	ef e1       	ldi	r30, 0x1F	; 31
 500:	f1 e0       	ldi	r31, 0x01	; 1
 502:	22 e4       	ldi	r18, 0x42	; 66
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	2f c0       	rjmp	.+94     	; 0x566 <CALLBACK_USB_GetDescriptor+0x94>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 508:	81 30       	cpi	r24, 0x01	; 1
 50a:	49 f0       	breq	.+18     	; 0x51e <CALLBACK_USB_GetDescriptor+0x4c>
 50c:	81 30       	cpi	r24, 0x01	; 1
 50e:	18 f0       	brcs	.+6      	; 0x516 <CALLBACK_USB_GetDescriptor+0x44>
 510:	82 30       	cpi	r24, 0x02	; 2
 512:	29 f5       	brne	.+74     	; 0x55e <CALLBACK_USB_GetDescriptor+0x8c>
 514:	0a c0       	rjmp	.+20     	; 0x52a <CALLBACK_USB_GetDescriptor+0x58>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 516:	e1 e6       	ldi	r30, 0x61	; 97
 518:	f1 e0       	ldi	r31, 0x01	; 1
 51a:	84 91       	lpm	r24, Z+
 51c:	03 c0       	rjmp	.+6      	; 0x524 <CALLBACK_USB_GetDescriptor+0x52>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 51e:	e5 e6       	ldi	r30, 0x65	; 101
 520:	f1 e0       	ldi	r31, 0x01	; 1
 522:	84 91       	lpm	r24, Z+
 524:	28 2f       	mov	r18, r24
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	1e c0       	rjmp	.+60     	; 0x566 <CALLBACK_USB_GetDescriptor+0x94>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 52a:	ef e7       	ldi	r30, 0x7F	; 127
 52c:	f1 e0       	ldi	r31, 0x01	; 1
 52e:	84 91       	lpm	r24, Z+
 530:	f9 cf       	rjmp	.-14     	; 0x524 <CALLBACK_USB_GetDescriptor+0x52>
					break;
			}

			break;
		case HID_DTYPE_HID:
			if (!(wIndex))
 532:	66 23       	and	r22, r22
 534:	19 f0       	breq	.+6      	; 0x53c <CALLBACK_USB_GetDescriptor+0x6a>
 536:	e1 e5       	ldi	r30, 0x51	; 81
 538:	f1 e0       	ldi	r31, 0x01	; 1
 53a:	02 c0       	rjmp	.+4      	; 0x540 <CALLBACK_USB_GetDescriptor+0x6e>
 53c:	e1 e3       	ldi	r30, 0x31	; 49
 53e:	f1 e0       	ldi	r31, 0x01	; 1
 540:	29 e0       	ldi	r18, 0x09	; 9
 542:	30 e0       	ldi	r19, 0x00	; 0
 544:	10 c0       	rjmp	.+32     	; 0x566 <CALLBACK_USB_GetDescriptor+0x94>
				Address = &ConfigurationDescriptor.HID2_MouseHID;
				Size    = sizeof(USB_HID_Descriptor_HID_t);
			}
			break;
		case HID_DTYPE_Report:
			if (!(wIndex))
 546:	66 23       	and	r22, r22
 548:	29 f0       	breq	.+10     	; 0x554 <CALLBACK_USB_GetDescriptor+0x82>
 54a:	e8 e9       	ldi	r30, 0x98	; 152
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	26 e3       	ldi	r18, 0x36	; 54
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	09 c0       	rjmp	.+18     	; 0x566 <CALLBACK_USB_GetDescriptor+0x94>
 554:	ee ec       	ldi	r30, 0xCE	; 206
 556:	f0 e0       	ldi	r31, 0x00	; 0
 558:	2f e3       	ldi	r18, 0x3F	; 63
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	04 c0       	rjmp	.+8      	; 0x566 <CALLBACK_USB_GetDescriptor+0x94>
 55e:	e0 e0       	ldi	r30, 0x00	; 0
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	20 e0       	ldi	r18, 0x00	; 0
 564:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 566:	ed 93       	st	X+, r30
 568:	fc 93       	st	X, r31
	return Size;
}
 56a:	c9 01       	movw	r24, r18
 56c:	08 95       	ret

0000056e <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
 56e:	38 2f       	mov	r19, r24
 570:	28 2f       	mov	r18, r24
 572:	2c c0       	rjmp	.+88     	; 0x5cc <Endpoint_ConfigureEndpoint_Prv+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 574:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);
		
		if (EPNum == Number)
 578:	23 17       	cp	r18, r19
 57a:	21 f4       	brne	.+8      	; 0x584 <Endpoint_ConfigureEndpoint_Prv+0x16>
 57c:	76 2f       	mov	r23, r22
 57e:	94 2f       	mov	r25, r20
 580:	50 e0       	ldi	r21, 0x00	; 0
 582:	06 c0       	rjmp	.+12     	; 0x590 <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 584:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 588:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
 58c:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 590:	91 ff       	sbrs	r25, 1
 592:	1b c0       	rjmp	.+54     	; 0x5ca <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 594:	80 91 eb 00 	lds	r24, 0x00EB
 598:	8e 7f       	andi	r24, 0xFE	; 254
 59a:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= (1 << ALLOC);
 59e:	80 91 ed 00 	lds	r24, 0x00ED
 5a2:	82 70       	andi	r24, 0x02	; 2
 5a4:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 5a8:	80 91 eb 00 	lds	r24, 0x00EB
 5ac:	81 60       	ori	r24, 0x01	; 1
 5ae:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 5b2:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 5b6:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
 5ba:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 5be:	80 91 ee 00 	lds	r24, 0x00EE
			
		if (!(Endpoint_IsConfigured()))
 5c2:	87 fd       	sbrc	r24, 7
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <Endpoint_ConfigureEndpoint_Prv+0x5c>
 5c6:	80 e0       	ldi	r24, 0x00	; 0
 5c8:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else	
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 5ca:	2f 5f       	subi	r18, 0xFF	; 255
 5cc:	27 30       	cpi	r18, 0x07	; 7
 5ce:	90 f2       	brcs	.-92     	; 0x574 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 5d0:	30 93 e9 00 	sts	0x00E9, r19
 5d4:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 5d6:	08 95       	ret

000005d8 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 5d8:	80 91 10 01 	lds	r24, 0x0110
 5dc:	88 23       	and	r24, r24
 5de:	9c f4       	brge	.+38     	; 0x606 <Endpoint_ClearStatusStage+0x2e>
 5e0:	04 c0       	rjmp	.+8      	; 0x5ea <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 5e2:	80 91 0f 01 	lds	r24, 0x010F
 5e6:	88 23       	and	r24, r24
 5e8:	b9 f0       	breq	.+46     	; 0x618 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 5ea:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 5ee:	82 ff       	sbrs	r24, 2
 5f0:	f8 cf       	rjmp	.-16     	; 0x5e2 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 5f2:	80 91 e8 00 	lds	r24, 0x00E8
 5f6:	8b 77       	andi	r24, 0x7B	; 123
 5f8:	80 93 e8 00 	sts	0x00E8, r24
 5fc:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 5fe:	80 91 0f 01 	lds	r24, 0x010F
 602:	88 23       	and	r24, r24
 604:	49 f0       	breq	.+18     	; 0x618 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 606:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 60a:	80 ff       	sbrs	r24, 0
 60c:	f8 cf       	rjmp	.-16     	; 0x5fe <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 60e:	80 91 e8 00 	lds	r24, 0x00E8
 612:	8e 77       	andi	r24, 0x7E	; 126
 614:	80 93 e8 00 	sts	0x00E8, r24
 618:	08 95       	ret

0000061a <Endpoint_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 61a:	40 91 e4 00 	lds	r20, 0x00E4
 61e:	50 91 e5 00 	lds	r21, 0x00E5
 622:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
 624:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 628:	80 ff       	sbrs	r24, 0
 62a:	05 c0       	rjmp	.+10     	; 0x636 <Endpoint_WaitUntilReady+0x1c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 62c:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
 630:	80 ff       	sbrs	r24, 0
 632:	05 c0       	rjmp	.+10     	; 0x63e <Endpoint_WaitUntilReady+0x24>
 634:	22 c0       	rjmp	.+68     	; 0x67a <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 636:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 63a:	82 fd       	sbrc	r24, 2
 63c:	1e c0       	rjmp	.+60     	; 0x67a <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 63e:	80 91 0f 01 	lds	r24, 0x010F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 642:	88 23       	and	r24, r24
 644:	11 f4       	brne	.+4      	; 0x64a <Endpoint_WaitUntilReady+0x30>
 646:	82 e0       	ldi	r24, 0x02	; 2
 648:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 64a:	85 30       	cpi	r24, 0x05	; 5
 64c:	11 f4       	brne	.+4      	; 0x652 <Endpoint_WaitUntilReady+0x38>
 64e:	83 e0       	ldi	r24, 0x03	; 3
 650:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 652:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 656:	85 ff       	sbrs	r24, 5
 658:	02 c0       	rjmp	.+4      	; 0x65e <Endpoint_WaitUntilReady+0x44>
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	08 95       	ret
 65e:	80 91 e4 00 	lds	r24, 0x00E4
 662:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 666:	84 17       	cp	r24, r20
 668:	95 07       	cpc	r25, r21
 66a:	e1 f2       	breq	.-72     	; 0x624 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 66c:	22 23       	and	r18, r18
 66e:	11 f4       	brne	.+4      	; 0x674 <Endpoint_WaitUntilReady+0x5a>
 670:	84 e0       	ldi	r24, 0x04	; 4
 672:	08 95       	ret
 674:	21 50       	subi	r18, 0x01	; 1
 676:	ac 01       	movw	r20, r24
 678:	d5 cf       	rjmp	.-86     	; 0x624 <Endpoint_WaitUntilReady+0xa>
 67a:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 67c:	08 95       	ret

0000067e <USB_ResetInterface>:

void USB_ResetInterface(void)
{
 67e:	ef 92       	push	r14
 680:	ff 92       	push	r15
 682:	0f 93       	push	r16
 684:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 686:	4d d0       	rcall	.+154    	; 0x722 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 688:	54 d0       	rcall	.+168    	; 0x732 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
 68a:	08 ed       	ldi	r16, 0xD8	; 216
 68c:	10 e0       	ldi	r17, 0x00	; 0
 68e:	f8 01       	movw	r30, r16
 690:	80 81       	ld	r24, Z

				USBCON = (Temp & ~(1 << USBE));
 692:	98 2f       	mov	r25, r24
 694:	9f 77       	andi	r25, 0x7F	; 127
 696:	90 83       	st	Z, r25
				USBCON = (Temp |  (1 << USBE));
 698:	80 68       	ori	r24, 0x80	; 128
 69a:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 69c:	80 81       	ld	r24, Z
 69e:	8f 7d       	andi	r24, 0xDF	; 223
 6a0:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 6a2:	e7 ed       	ldi	r30, 0xD7	; 215
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	80 81       	ld	r24, Z
 6a8:	80 68       	ori	r24, 0x80	; 128
 6aa:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
 6ac:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
 6ae:	10 92 0f 01 	sts	0x010F, r1
	USB_ConfigurationNumber  = 0;
 6b2:	10 92 0d 01 	sts	0x010D, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
 6b6:	10 92 0c 01 	sts	0x010C, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
 6ba:	10 92 0b 01 	sts	0x010B, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 6be:	80 ee       	ldi	r24, 0xE0	; 224
 6c0:	e8 2e       	mov	r14, r24
 6c2:	f1 2c       	mov	r15, r1
 6c4:	f7 01       	movw	r30, r14
 6c6:	80 81       	ld	r24, Z
 6c8:	8b 7f       	andi	r24, 0xFB	; 251
 6ca:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 6cc:	f8 01       	movw	r30, r16
 6ce:	80 81       	ld	r24, Z
 6d0:	81 60       	ori	r24, 0x01	; 1
 6d2:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
 6d4:	80 e0       	ldi	r24, 0x00	; 0
 6d6:	60 e0       	ldi	r22, 0x00	; 0
 6d8:	42 e0       	ldi	r20, 0x02	; 2
 6da:	49 df       	rcall	.-366    	; 0x56e <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 6dc:	e1 ee       	ldi	r30, 0xE1	; 225
 6de:	f0 e0       	ldi	r31, 0x00	; 0
 6e0:	80 81       	ld	r24, Z
 6e2:	8e 7f       	andi	r24, 0xFE	; 254
 6e4:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 6e6:	e2 ee       	ldi	r30, 0xE2	; 226
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
 6ea:	80 81       	ld	r24, Z
 6ec:	81 60       	ori	r24, 0x01	; 1
 6ee:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 6f0:	80 81       	ld	r24, Z
 6f2:	88 60       	ori	r24, 0x08	; 8
 6f4:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 6f6:	f7 01       	movw	r30, r14
 6f8:	80 81       	ld	r24, Z
 6fa:	8e 7f       	andi	r24, 0xFE	; 254
 6fc:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 6fe:	f8 01       	movw	r30, r16
 700:	80 81       	ld	r24, Z
 702:	80 61       	ori	r24, 0x10	; 16
 704:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 706:	1f 91       	pop	r17
 708:	0f 91       	pop	r16
 70a:	ff 90       	pop	r15
 70c:	ef 90       	pop	r14
 70e:	08 95       	ret

00000710 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 710:	e7 ed       	ldi	r30, 0xD7	; 215
 712:	f0 e0       	ldi	r31, 0x00	; 0
 714:	80 81       	ld	r24, Z
 716:	81 60       	ori	r24, 0x01	; 1
 718:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	80 93 0e 01 	sts	0x010E, r24

	USB_ResetInterface();
}
 720:	ae cf       	rjmp	.-164    	; 0x67e <USB_ResetInterface>

00000722 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 722:	e8 ed       	ldi	r30, 0xD8	; 216
 724:	f0 e0       	ldi	r31, 0x00	; 0
 726:	80 81       	ld	r24, Z
 728:	8c 7f       	andi	r24, 0xFC	; 252
 72a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 72c:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 730:	08 95       	ret

00000732 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 732:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 736:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 73a:	08 95       	ret

0000073c <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 73c:	1f 92       	push	r1
 73e:	0f 92       	push	r0
 740:	0f b6       	in	r0, 0x3f	; 63
 742:	0f 92       	push	r0
 744:	0b b6       	in	r0, 0x3b	; 59
 746:	0f 92       	push	r0
 748:	11 24       	eor	r1, r1
 74a:	2f 93       	push	r18
 74c:	3f 93       	push	r19
 74e:	4f 93       	push	r20
 750:	5f 93       	push	r21
 752:	6f 93       	push	r22
 754:	7f 93       	push	r23
 756:	8f 93       	push	r24
 758:	9f 93       	push	r25
 75a:	af 93       	push	r26
 75c:	bf 93       	push	r27
 75e:	ef 93       	push	r30
 760:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 762:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 766:	82 ff       	sbrs	r24, 2
 768:	0a c0       	rjmp	.+20     	; 0x77e <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 76a:	80 91 e2 00 	lds	r24, 0x00E2
 76e:	82 ff       	sbrs	r24, 2
 770:	06 c0       	rjmp	.+12     	; 0x77e <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 772:	80 91 e1 00 	lds	r24, 0x00E1
 776:	8b 7f       	andi	r24, 0xFB	; 251
 778:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 77c:	2d d2       	rcall	.+1114   	; 0xbd8 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 77e:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 782:	80 ff       	sbrs	r24, 0
 784:	1e c0       	rjmp	.+60     	; 0x7c2 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 786:	80 91 d8 00 	lds	r24, 0x00D8
 78a:	80 ff       	sbrs	r24, 0
 78c:	1a c0       	rjmp	.+52     	; 0x7c2 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 78e:	80 91 da 00 	lds	r24, 0x00DA
 792:	8e 7f       	andi	r24, 0xFE	; 254
 794:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 798:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 79c:	80 ff       	sbrs	r24, 0
 79e:	0d c0       	rjmp	.+26     	; 0x7ba <__vector_10+0x7e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 7a0:	8c e0       	ldi	r24, 0x0C	; 12
 7a2:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 7a4:	89 b5       	in	r24, 0x29	; 41
 7a6:	82 60       	ori	r24, 0x02	; 2
 7a8:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 7aa:	09 b4       	in	r0, 0x29	; 41
 7ac:	00 fe       	sbrs	r0, 0
 7ae:	fd cf       	rjmp	.-6      	; 0x7aa <__vector_10+0x6e>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	80 93 0f 01 	sts	0x010F, r24
			EVENT_USB_Device_Connect();
 7b6:	20 dd       	rcall	.-1472   	; 0x1f8 <EVENT_USB_Device_Connect>
 7b8:	04 c0       	rjmp	.+8      	; 0x7c2 <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
 7ba:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 7bc:	10 92 0f 01 	sts	0x010F, r1
			EVENT_USB_Device_Disconnect();
 7c0:	20 dd       	rcall	.-1472   	; 0x202 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 7c2:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 7c6:	80 ff       	sbrs	r24, 0
 7c8:	18 c0       	rjmp	.+48     	; 0x7fa <__vector_10+0xbe>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 7ca:	80 91 e2 00 	lds	r24, 0x00E2
 7ce:	80 ff       	sbrs	r24, 0
 7d0:	14 c0       	rjmp	.+40     	; 0x7fa <__vector_10+0xbe>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 7d2:	80 91 e2 00 	lds	r24, 0x00E2
 7d6:	8e 7f       	andi	r24, 0xFE	; 254
 7d8:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 7dc:	80 91 e2 00 	lds	r24, 0x00E2
 7e0:	80 61       	ori	r24, 0x10	; 16
 7e2:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 7e6:	80 91 d8 00 	lds	r24, 0x00D8
 7ea:	80 62       	ori	r24, 0x20	; 32
 7ec:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
 7f0:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 7f2:	85 e0       	ldi	r24, 0x05	; 5
 7f4:	80 93 0f 01 	sts	0x010F, r24
		EVENT_USB_Device_Suspend();
 7f8:	ef d1       	rcall	.+990    	; 0xbd8 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 7fa:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 7fe:	84 ff       	sbrs	r24, 4
 800:	2e c0       	rjmp	.+92     	; 0x85e <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 802:	80 91 e2 00 	lds	r24, 0x00E2
 806:	84 ff       	sbrs	r24, 4
 808:	2a c0       	rjmp	.+84     	; 0x85e <__vector_10+0x122>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 80a:	8c e0       	ldi	r24, 0x0C	; 12
 80c:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 80e:	89 b5       	in	r24, 0x29	; 41
 810:	82 60       	ori	r24, 0x02	; 2
 812:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 814:	09 b4       	in	r0, 0x29	; 41
 816:	00 fe       	sbrs	r0, 0
 818:	fd cf       	rjmp	.-6      	; 0x814 <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 81a:	80 91 d8 00 	lds	r24, 0x00D8
 81e:	8f 7d       	andi	r24, 0xDF	; 223
 820:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 824:	80 91 e1 00 	lds	r24, 0x00E1
 828:	8f 7e       	andi	r24, 0xEF	; 239
 82a:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 82e:	80 91 e2 00 	lds	r24, 0x00E2
 832:	8f 7e       	andi	r24, 0xEF	; 239
 834:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 838:	80 91 e2 00 	lds	r24, 0x00E2
 83c:	81 60       	ori	r24, 0x01	; 1
 83e:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_ConfigurationNumber)
 842:	80 91 0d 01 	lds	r24, 0x010D
 846:	88 23       	and	r24, r24
 848:	31 f4       	brne	.+12     	; 0x856 <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 84a:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 84e:	87 fd       	sbrc	r24, 7
 850:	02 c0       	rjmp	.+4      	; 0x856 <__vector_10+0x11a>
 852:	81 e0       	ldi	r24, 0x01	; 1
 854:	01 c0       	rjmp	.+2      	; 0x858 <__vector_10+0x11c>
 856:	84 e0       	ldi	r24, 0x04	; 4
 858:	80 93 0f 01 	sts	0x010F, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 85c:	bd d1       	rcall	.+890    	; 0xbd8 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 85e:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 862:	83 ff       	sbrs	r24, 3
 864:	22 c0       	rjmp	.+68     	; 0x8aa <__vector_10+0x16e>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 866:	80 91 e2 00 	lds	r24, 0x00E2
 86a:	83 ff       	sbrs	r24, 3
 86c:	1e c0       	rjmp	.+60     	; 0x8aa <__vector_10+0x16e>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 86e:	80 91 e1 00 	lds	r24, 0x00E1
 872:	87 7f       	andi	r24, 0xF7	; 247
 874:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState         = DEVICE_STATE_Default;
 878:	82 e0       	ldi	r24, 0x02	; 2
 87a:	80 93 0f 01 	sts	0x010F, r24
		USB_ConfigurationNumber = 0;
 87e:	10 92 0d 01 	sts	0x010D, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 882:	80 91 e1 00 	lds	r24, 0x00E1
 886:	8e 7f       	andi	r24, 0xFE	; 254
 888:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 88c:	80 91 e2 00 	lds	r24, 0x00E2
 890:	8e 7f       	andi	r24, 0xFE	; 254
 892:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 896:	80 91 e2 00 	lds	r24, 0x00E2
 89a:	80 61       	ori	r24, 0x10	; 16
 89c:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
 8a0:	80 e0       	ldi	r24, 0x00	; 0
 8a2:	60 e0       	ldi	r22, 0x00	; 0
 8a4:	42 e0       	ldi	r20, 0x02	; 2
 8a6:	63 de       	rcall	.-826    	; 0x56e <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 8a8:	97 d1       	rcall	.+814    	; 0xbd8 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 8aa:	ff 91       	pop	r31
 8ac:	ef 91       	pop	r30
 8ae:	bf 91       	pop	r27
 8b0:	af 91       	pop	r26
 8b2:	9f 91       	pop	r25
 8b4:	8f 91       	pop	r24
 8b6:	7f 91       	pop	r23
 8b8:	6f 91       	pop	r22
 8ba:	5f 91       	pop	r21
 8bc:	4f 91       	pop	r20
 8be:	3f 91       	pop	r19
 8c0:	2f 91       	pop	r18
 8c2:	0f 90       	pop	r0
 8c4:	0b be       	out	0x3b, r0	; 59
 8c6:	0f 90       	pop	r0
 8c8:	0f be       	out	0x3f, r0	; 63
 8ca:	0f 90       	pop	r0
 8cc:	1f 90       	pop	r1
 8ce:	18 95       	reti

000008d0 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 8d0:	0f 93       	push	r16
 8d2:	1f 93       	push	r17
 8d4:	df 93       	push	r29
 8d6:	cf 93       	push	r28
 8d8:	cd b7       	in	r28, 0x3d	; 61
 8da:	de b7       	in	r29, 0x3e	; 62
 8dc:	ac 97       	sbiw	r28, 0x2c	; 44
 8de:	0f b6       	in	r0, 0x3f	; 63
 8e0:	f8 94       	cli
 8e2:	de bf       	out	0x3e, r29	; 62
 8e4:	0f be       	out	0x3f, r0	; 63
 8e6:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 8e8:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
 8ec:	80 93 10 01 	sts	0x0110, r24
 8f0:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
 8f4:	80 93 11 01 	sts	0x0111, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 8f8:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 8fc:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
 900:	e2 e1       	ldi	r30, 0x12	; 18
 902:	f1 e0       	ldi	r31, 0x01	; 1
 904:	80 93 12 01 	sts	0x0112, r24
 908:	90 93 13 01 	sts	0x0113, r25
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 90c:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 910:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
 914:	80 93 14 01 	sts	0x0114, r24
 918:	93 83       	std	Z+3, r25	; 0x03
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 91a:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 91e:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
 922:	80 93 16 01 	sts	0x0116, r24
 926:	95 83       	std	Z+5, r25	; 0x05

	EVENT_USB_Device_ControlRequest();
 928:	27 dd       	rcall	.-1458   	; 0x378 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 92a:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 92e:	83 ff       	sbrs	r24, 3
 930:	3a c1       	rjmp	.+628    	; 0xba6 <USB_Device_ProcessControlRequest+0x2d6>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 932:	80 91 10 01 	lds	r24, 0x0110

		switch (USB_ControlRequest.bRequest)
 936:	30 91 11 01 	lds	r19, 0x0111
 93a:	35 30       	cpi	r19, 0x05	; 5
 93c:	09 f4       	brne	.+2      	; 0x940 <USB_Device_ProcessControlRequest+0x70>
 93e:	87 c0       	rjmp	.+270    	; 0xa4e <USB_Device_ProcessControlRequest+0x17e>
 940:	36 30       	cpi	r19, 0x06	; 6
 942:	40 f4       	brcc	.+16     	; 0x954 <USB_Device_ProcessControlRequest+0x84>
 944:	31 30       	cpi	r19, 0x01	; 1
 946:	c9 f1       	breq	.+114    	; 0x9ba <USB_Device_ProcessControlRequest+0xea>
 948:	31 30       	cpi	r19, 0x01	; 1
 94a:	70 f0       	brcs	.+28     	; 0x968 <USB_Device_ProcessControlRequest+0x98>
 94c:	33 30       	cpi	r19, 0x03	; 3
 94e:	09 f0       	breq	.+2      	; 0x952 <USB_Device_ProcessControlRequest+0x82>
 950:	2a c1       	rjmp	.+596    	; 0xba6 <USB_Device_ProcessControlRequest+0x2d6>
 952:	33 c0       	rjmp	.+102    	; 0x9ba <USB_Device_ProcessControlRequest+0xea>
 954:	38 30       	cpi	r19, 0x08	; 8
 956:	09 f4       	brne	.+2      	; 0x95a <USB_Device_ProcessControlRequest+0x8a>
 958:	f8 c0       	rjmp	.+496    	; 0xb4a <USB_Device_ProcessControlRequest+0x27a>
 95a:	39 30       	cpi	r19, 0x09	; 9
 95c:	09 f4       	brne	.+2      	; 0x960 <USB_Device_ProcessControlRequest+0x90>
 95e:	07 c1       	rjmp	.+526    	; 0xb6e <USB_Device_ProcessControlRequest+0x29e>
 960:	36 30       	cpi	r19, 0x06	; 6
 962:	09 f0       	breq	.+2      	; 0x966 <USB_Device_ProcessControlRequest+0x96>
 964:	20 c1       	rjmp	.+576    	; 0xba6 <USB_Device_ProcessControlRequest+0x2d6>
 966:	99 c0       	rjmp	.+306    	; 0xa9a <USB_Device_ProcessControlRequest+0x1ca>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 968:	80 38       	cpi	r24, 0x80	; 128
 96a:	21 f0       	breq	.+8      	; 0x974 <USB_Device_ProcessControlRequest+0xa4>
 96c:	82 38       	cpi	r24, 0x82	; 130
 96e:	09 f0       	breq	.+2      	; 0x972 <USB_Device_ProcessControlRequest+0xa2>
 970:	1a c1       	rjmp	.+564    	; 0xba6 <USB_Device_ProcessControlRequest+0x2d6>
 972:	08 c0       	rjmp	.+16     	; 0x984 <USB_Device_ProcessControlRequest+0xb4>
 974:	90 91 0b 01 	lds	r25, 0x010B
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_RemoteWakeupEnabled)
 978:	80 91 0c 01 	lds	r24, 0x010C
 97c:	88 23       	and	r24, r24
 97e:	99 f0       	breq	.+38     	; 0x9a6 <USB_Device_ProcessControlRequest+0xd6>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 980:	92 60       	ori	r25, 0x02	; 2
 982:	11 c0       	rjmp	.+34     	; 0x9a6 <USB_Device_ProcessControlRequest+0xd6>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 984:	80 91 14 01 	lds	r24, 0x0114
 988:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 98a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 98e:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	25 e0       	ldi	r18, 0x05	; 5
 996:	96 95       	lsr	r25
 998:	87 95       	ror	r24
 99a:	2a 95       	dec	r18
 99c:	e1 f7       	brne	.-8      	; 0x996 <USB_Device_ProcessControlRequest+0xc6>
 99e:	98 2f       	mov	r25, r24
 9a0:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 9a2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9a6:	80 91 e8 00 	lds	r24, 0x00E8
 9aa:	87 7f       	andi	r24, 0xF7	; 247
 9ac:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 9b0:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
 9b4:	10 92 f1 00 	sts	0x00F1, r1
 9b8:	d3 c0       	rjmp	.+422    	; 0xb60 <USB_Device_ProcessControlRequest+0x290>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 9ba:	88 23       	and	r24, r24
 9bc:	19 f0       	breq	.+6      	; 0x9c4 <USB_Device_ProcessControlRequest+0xf4>
 9be:	82 30       	cpi	r24, 0x02	; 2
 9c0:	09 f0       	breq	.+2      	; 0x9c4 <USB_Device_ProcessControlRequest+0xf4>
 9c2:	f1 c0       	rjmp	.+482    	; 0xba6 <USB_Device_ProcessControlRequest+0x2d6>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	8f 71       	andi	r24, 0x1F	; 31
 9c8:	90 70       	andi	r25, 0x00	; 0
 9ca:	00 97       	sbiw	r24, 0x00	; 0
 9cc:	21 f0       	breq	.+8      	; 0x9d6 <USB_Device_ProcessControlRequest+0x106>
 9ce:	02 97       	sbiw	r24, 0x02	; 2
 9d0:	09 f0       	breq	.+2      	; 0x9d4 <USB_Device_ProcessControlRequest+0x104>
 9d2:	e9 c0       	rjmp	.+466    	; 0xba6 <USB_Device_ProcessControlRequest+0x2d6>
 9d4:	0c c0       	rjmp	.+24     	; 0x9ee <USB_Device_ProcessControlRequest+0x11e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 9d6:	80 91 12 01 	lds	r24, 0x0112
 9da:	81 30       	cpi	r24, 0x01	; 1
 9dc:	09 f0       	breq	.+2      	; 0x9e0 <USB_Device_ProcessControlRequest+0x110>
 9de:	e3 c0       	rjmp	.+454    	; 0xba6 <USB_Device_ProcessControlRequest+0x2d6>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 9e0:	10 92 0c 01 	sts	0x010C, r1
 9e4:	33 30       	cpi	r19, 0x03	; 3
 9e6:	69 f5       	brne	.+90     	; 0xa42 <USB_Device_ProcessControlRequest+0x172>
 9e8:	80 93 0c 01 	sts	0x010C, r24
 9ec:	2a c0       	rjmp	.+84     	; 0xa42 <USB_Device_ProcessControlRequest+0x172>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 9ee:	80 91 12 01 	lds	r24, 0x0112
 9f2:	88 23       	and	r24, r24
 9f4:	31 f5       	brne	.+76     	; 0xa42 <USB_Device_ProcessControlRequest+0x172>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 9f6:	20 91 14 01 	lds	r18, 0x0114
 9fa:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 9fc:	09 f4       	brne	.+2      	; 0xa00 <USB_Device_ProcessControlRequest+0x130>
 9fe:	d3 c0       	rjmp	.+422    	; 0xba6 <USB_Device_ProcessControlRequest+0x2d6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a00:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 a04:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 a08:	80 ff       	sbrs	r24, 0
 a0a:	1b c0       	rjmp	.+54     	; 0xa42 <USB_Device_ProcessControlRequest+0x172>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 a0c:	33 30       	cpi	r19, 0x03	; 3
 a0e:	21 f4       	brne	.+8      	; 0xa18 <USB_Device_ProcessControlRequest+0x148>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 a10:	80 91 eb 00 	lds	r24, 0x00EB
 a14:	80 62       	ori	r24, 0x20	; 32
 a16:	13 c0       	rjmp	.+38     	; 0xa3e <USB_Device_ProcessControlRequest+0x16e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 a18:	80 91 eb 00 	lds	r24, 0x00EB
 a1c:	80 61       	ori	r24, 0x10	; 16
 a1e:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 a22:	81 e0       	ldi	r24, 0x01	; 1
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	02 c0       	rjmp	.+4      	; 0xa2c <USB_Device_ProcessControlRequest+0x15c>
 a28:	88 0f       	add	r24, r24
 a2a:	99 1f       	adc	r25, r25
 a2c:	2a 95       	dec	r18
 a2e:	e2 f7       	brpl	.-8      	; 0xa28 <USB_Device_ProcessControlRequest+0x158>
 a30:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 a34:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 a38:	80 91 eb 00 	lds	r24, 0x00EB
 a3c:	88 60       	ori	r24, 0x08	; 8
 a3e:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a42:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a46:	80 91 e8 00 	lds	r24, 0x00E8
 a4a:	87 7f       	andi	r24, 0xF7	; 247
 a4c:	8c c0       	rjmp	.+280    	; 0xb66 <USB_Device_ProcessControlRequest+0x296>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 a4e:	88 23       	and	r24, r24
 a50:	09 f0       	breq	.+2      	; 0xa54 <USB_Device_ProcessControlRequest+0x184>
 a52:	a9 c0       	rjmp	.+338    	; 0xba6 <USB_Device_ProcessControlRequest+0x2d6>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 a54:	10 91 12 01 	lds	r17, 0x0112
 a58:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 a5a:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 a5c:	f8 94       	cli
 a5e:	80 91 e8 00 	lds	r24, 0x00E8
 a62:	87 7f       	andi	r24, 0xF7	; 247
 a64:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 a68:	b7 dd       	rcall	.-1170   	; 0x5d8 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 a6a:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
 a6e:	80 ff       	sbrs	r24, 0
 a70:	fc cf       	rjmp	.-8      	; 0xa6a <USB_Device_ProcessControlRequest+0x19a>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
 a72:	80 91 e3 00 	lds	r24, 0x00E3
 a76:	80 78       	andi	r24, 0x80	; 128
 a78:	81 2b       	or	r24, r17
 a7a:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR |= (1 << ADDEN);
 a7e:	80 91 e3 00 	lds	r24, 0x00E3
 a82:	80 68       	ori	r24, 0x80	; 128
 a84:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 a88:	11 23       	and	r17, r17
 a8a:	11 f4       	brne	.+4      	; 0xa90 <USB_Device_ProcessControlRequest+0x1c0>
 a8c:	82 e0       	ldi	r24, 0x02	; 2
 a8e:	01 c0       	rjmp	.+2      	; 0xa92 <USB_Device_ProcessControlRequest+0x1c2>
 a90:	83 e0       	ldi	r24, 0x03	; 3
 a92:	80 93 0f 01 	sts	0x010F, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 a96:	0f bf       	out	0x3f, r16	; 63
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#endif
				
				GCC_MEMORY_BARRIER();
 a98:	86 c0       	rjmp	.+268    	; 0xba6 <USB_Device_ProcessControlRequest+0x2d6>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a9a:	80 58       	subi	r24, 0x80	; 128
 a9c:	82 30       	cpi	r24, 0x02	; 2
 a9e:	08 f0       	brcs	.+2      	; 0xaa2 <USB_Device_ProcessControlRequest+0x1d2>
 aa0:	82 c0       	rjmp	.+260    	; 0xba6 <USB_Device_ProcessControlRequest+0x2d6>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 aa2:	80 91 12 01 	lds	r24, 0x0112
 aa6:	90 91 13 01 	lds	r25, 0x0113
 aaa:	23 e0       	ldi	r18, 0x03	; 3
 aac:	8c 3d       	cpi	r24, 0xDC	; 220
 aae:	92 07       	cpc	r25, r18
 ab0:	09 f0       	breq	.+2      	; 0xab4 <USB_Device_ProcessControlRequest+0x1e4>
 ab2:	33 c0       	rjmp	.+102    	; 0xb1a <USB_Device_ProcessControlRequest+0x24a>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 ab4:	83 e0       	ldi	r24, 0x03	; 3
 ab6:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 ab8:	8a e2       	ldi	r24, 0x2A	; 42
 aba:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 abc:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 abe:	f8 94       	cli
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#endif

				GCC_MEMORY_BARRIER();
 ac0:	de 01       	movw	r26, r28
 ac2:	15 96       	adiw	r26, 0x05	; 5
 ac4:	6e e0       	ldi	r22, 0x0E	; 14
 ac6:	40 e0       	ldi	r20, 0x00	; 0
 ac8:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 aca:	11 e2       	ldi	r17, 0x21	; 33
 acc:	e6 2f       	mov	r30, r22
 ace:	f0 e0       	ldi	r31, 0x00	; 0
 ad0:	10 93 57 00 	sts	0x0057, r17
 ad4:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
 ad6:	40 ff       	sbrs	r20, 0
 ad8:	03 c0       	rjmp	.+6      	; 0xae0 <USB_Device_ProcessControlRequest+0x210>
					{
						SerialByte >>= 4;
 ada:	82 95       	swap	r24
 adc:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
 ade:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 ae0:	8f 70       	andi	r24, 0x0F	; 15
 ae2:	28 2f       	mov	r18, r24
 ae4:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 ae6:	8a 30       	cpi	r24, 0x0A	; 10
 ae8:	18 f0       	brcs	.+6      	; 0xaf0 <USB_Device_ProcessControlRequest+0x220>
 aea:	c9 01       	movw	r24, r18
 aec:	c7 96       	adiw	r24, 0x37	; 55
 aee:	02 c0       	rjmp	.+4      	; 0xaf4 <USB_Device_ProcessControlRequest+0x224>
 af0:	c9 01       	movw	r24, r18
 af2:	c0 96       	adiw	r24, 0x30	; 48
 af4:	8d 93       	st	X+, r24
 af6:	9d 93       	st	X+, r25
 af8:	4f 5f       	subi	r20, 0xFF	; 255
 afa:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 afc:	44 31       	cpi	r20, 0x14	; 20
 afe:	51 05       	cpc	r21, r1
 b00:	29 f7       	brne	.-54     	; 0xacc <USB_Device_ProcessControlRequest+0x1fc>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 b02:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b04:	80 91 e8 00 	lds	r24, 0x00E8
 b08:	87 7f       	andi	r24, 0xF7	; 247
 b0a:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 b0e:	ce 01       	movw	r24, r28
 b10:	03 96       	adiw	r24, 0x03	; 3
 b12:	6a e2       	ldi	r22, 0x2A	; 42
 b14:	70 e0       	ldi	r23, 0x00	; 0
 b16:	61 d0       	rcall	.+194    	; 0xbda <Endpoint_Write_Control_Stream_LE>
 b18:	12 c0       	rjmp	.+36     	; 0xb3e <USB_Device_ProcessControlRequest+0x26e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 b1a:	60 91 14 01 	lds	r22, 0x0114
 b1e:	ae 01       	movw	r20, r28
 b20:	4f 5f       	subi	r20, 0xFF	; 255
 b22:	5f 4f       	sbci	r21, 0xFF	; 255
 b24:	d6 dc       	rcall	.-1620   	; 0x4d2 <CALLBACK_USB_GetDescriptor>
 b26:	bc 01       	movw	r22, r24
 b28:	00 97       	sbiw	r24, 0x00	; 0
 b2a:	09 f4       	brne	.+2      	; 0xb2e <USB_Device_ProcessControlRequest+0x25e>
 b2c:	3c c0       	rjmp	.+120    	; 0xba6 <USB_Device_ProcessControlRequest+0x2d6>
 b2e:	80 91 e8 00 	lds	r24, 0x00E8
 b32:	87 7f       	andi	r24, 0xF7	; 247
 b34:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 b38:	89 81       	ldd	r24, Y+1	; 0x01
 b3a:	9a 81       	ldd	r25, Y+2	; 0x02
 b3c:	ac d0       	rcall	.+344    	; 0xc96 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 b3e:	80 91 e8 00 	lds	r24, 0x00E8
 b42:	8b 77       	andi	r24, 0x7B	; 123
 b44:	80 93 e8 00 	sts	0x00E8, r24
 b48:	2e c0       	rjmp	.+92     	; 0xba6 <USB_Device_ProcessControlRequest+0x2d6>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 b4a:	80 38       	cpi	r24, 0x80	; 128
 b4c:	61 f5       	brne	.+88     	; 0xba6 <USB_Device_ProcessControlRequest+0x2d6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b4e:	80 91 e8 00 	lds	r24, 0x00E8
 b52:	87 7f       	andi	r24, 0xF7	; 247
 b54:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_ConfigurationNumber);
 b58:	80 91 0d 01 	lds	r24, 0x010D
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 b5c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 b60:	80 91 e8 00 	lds	r24, 0x00E8
 b64:	8e 77       	andi	r24, 0x7E	; 126
 b66:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 b6a:	36 dd       	rcall	.-1428   	; 0x5d8 <Endpoint_ClearStatusStage>
 b6c:	1c c0       	rjmp	.+56     	; 0xba6 <USB_Device_ProcessControlRequest+0x2d6>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b6e:	88 23       	and	r24, r24
 b70:	d1 f4       	brne	.+52     	; 0xba6 <USB_Device_ProcessControlRequest+0x2d6>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 b72:	90 91 12 01 	lds	r25, 0x0112
 b76:	92 30       	cpi	r25, 0x02	; 2
 b78:	b0 f4       	brcc	.+44     	; 0xba6 <USB_Device_ProcessControlRequest+0x2d6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b7a:	80 91 e8 00 	lds	r24, 0x00E8
 b7e:	87 7f       	andi	r24, 0xF7	; 247
 b80:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 b84:	90 93 0d 01 	sts	0x010D, r25

	Endpoint_ClearStatusStage();
 b88:	27 dd       	rcall	.-1458   	; 0x5d8 <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
 b8a:	80 91 0d 01 	lds	r24, 0x010D
 b8e:	88 23       	and	r24, r24
 b90:	31 f4       	brne	.+12     	; 0xb9e <USB_Device_ProcessControlRequest+0x2ce>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 b92:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 b96:	87 fd       	sbrc	r24, 7
 b98:	02 c0       	rjmp	.+4      	; 0xb9e <USB_Device_ProcessControlRequest+0x2ce>
 b9a:	81 e0       	ldi	r24, 0x01	; 1
 b9c:	01 c0       	rjmp	.+2      	; 0xba0 <USB_Device_ProcessControlRequest+0x2d0>
 b9e:	84 e0       	ldi	r24, 0x04	; 4
 ba0:	80 93 0f 01 	sts	0x010F, r24

	EVENT_USB_Device_ConfigurationChanged();
 ba4:	3b dc       	rcall	.-1930   	; 0x41c <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 ba6:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 baa:	83 ff       	sbrs	r24, 3
 bac:	0a c0       	rjmp	.+20     	; 0xbc2 <USB_Device_ProcessControlRequest+0x2f2>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 bae:	80 91 eb 00 	lds	r24, 0x00EB
 bb2:	80 62       	ori	r24, 0x20	; 32
 bb4:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bb8:	80 91 e8 00 	lds	r24, 0x00E8
 bbc:	87 7f       	andi	r24, 0xF7	; 247
 bbe:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 bc2:	ac 96       	adiw	r28, 0x2c	; 44
 bc4:	0f b6       	in	r0, 0x3f	; 63
 bc6:	f8 94       	cli
 bc8:	de bf       	out	0x3e, r29	; 62
 bca:	0f be       	out	0x3f, r0	; 63
 bcc:	cd bf       	out	0x3d, r28	; 61
 bce:	cf 91       	pop	r28
 bd0:	df 91       	pop	r29
 bd2:	1f 91       	pop	r17
 bd4:	0f 91       	pop	r16
 bd6:	08 95       	ret

00000bd8 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 bd8:	08 95       	ret

00000bda <Endpoint_Write_Control_Stream_LE>:
 bda:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 bdc:	40 91 16 01 	lds	r20, 0x0116
 be0:	50 91 17 01 	lds	r21, 0x0117
 be4:	46 17       	cp	r20, r22
 be6:	57 07       	cpc	r21, r23
 be8:	18 f4       	brcc	.+6      	; 0xbf0 <Endpoint_Write_Control_Stream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 bea:	f9 01       	movw	r30, r18
 bec:	90 e0       	ldi	r25, 0x00	; 0
 bee:	3d c0       	rjmp	.+122    	; 0xc6a <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 bf0:	61 15       	cp	r22, r1
 bf2:	71 05       	cpc	r23, r1
 bf4:	11 f0       	breq	.+4      	; 0xbfa <Endpoint_Write_Control_Stream_LE+0x20>
 bf6:	ab 01       	movw	r20, r22
 bf8:	f8 cf       	rjmp	.-16     	; 0xbea <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 bfa:	80 91 e8 00 	lds	r24, 0x00E8
 bfe:	8e 77       	andi	r24, 0x7E	; 126
 c00:	80 93 e8 00 	sts	0x00E8, r24
 c04:	40 e0       	ldi	r20, 0x00	; 0
 c06:	50 e0       	ldi	r21, 0x00	; 0
 c08:	f0 cf       	rjmp	.-32     	; 0xbea <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 c0a:	80 91 0f 01 	lds	r24, 0x010F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 c0e:	88 23       	and	r24, r24
 c10:	f1 f1       	breq	.+124    	; 0xc8e <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 c12:	85 30       	cpi	r24, 0x05	; 5
 c14:	f1 f1       	breq	.+124    	; 0xc92 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c16:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 c1a:	83 ff       	sbrs	r24, 3
 c1c:	02 c0       	rjmp	.+4      	; 0xc22 <Endpoint_Write_Control_Stream_LE+0x48>
 c1e:	81 e0       	ldi	r24, 0x01	; 1
 c20:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 c22:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 c26:	82 fd       	sbrc	r24, 2
 c28:	2c c0       	rjmp	.+88     	; 0xc82 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 c2a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 c2e:	80 ff       	sbrs	r24, 0
 c30:	1c c0       	rjmp	.+56     	; 0xc6a <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 c32:	20 91 f2 00 	lds	r18, 0x00F2
 c36:	30 91 f3 00 	lds	r19, 0x00F3
 c3a:	07 c0       	rjmp	.+14     	; 0xc4a <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 c3c:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 c3e:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 c42:	41 50       	subi	r20, 0x01	; 1
 c44:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 c46:	2f 5f       	subi	r18, 0xFF	; 255
 c48:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 c4a:	41 15       	cp	r20, r1
 c4c:	51 05       	cpc	r21, r1
 c4e:	19 f0       	breq	.+6      	; 0xc56 <Endpoint_Write_Control_Stream_LE+0x7c>
 c50:	28 30       	cpi	r18, 0x08	; 8
 c52:	31 05       	cpc	r19, r1
 c54:	98 f3       	brcs	.-26     	; 0xc3c <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 c56:	90 e0       	ldi	r25, 0x00	; 0
 c58:	28 30       	cpi	r18, 0x08	; 8
 c5a:	31 05       	cpc	r19, r1
 c5c:	09 f4       	brne	.+2      	; 0xc60 <Endpoint_Write_Control_Stream_LE+0x86>
 c5e:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c60:	80 91 e8 00 	lds	r24, 0x00E8
 c64:	8e 77       	andi	r24, 0x7E	; 126
 c66:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 c6a:	41 15       	cp	r20, r1
 c6c:	51 05       	cpc	r21, r1
 c6e:	69 f6       	brne	.-102    	; 0xc0a <Endpoint_Write_Control_Stream_LE+0x30>
 c70:	99 23       	and	r25, r25
 c72:	59 f6       	brne	.-106    	; 0xc0a <Endpoint_Write_Control_Stream_LE+0x30>
 c74:	06 c0       	rjmp	.+12     	; 0xc82 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 c76:	80 91 0f 01 	lds	r24, 0x010F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 c7a:	88 23       	and	r24, r24
 c7c:	41 f0       	breq	.+16     	; 0xc8e <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 c7e:	85 30       	cpi	r24, 0x05	; 5
 c80:	41 f0       	breq	.+16     	; 0xc92 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 c82:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 c86:	82 ff       	sbrs	r24, 2
 c88:	f6 cf       	rjmp	.-20     	; 0xc76 <Endpoint_Write_Control_Stream_LE+0x9c>
 c8a:	80 e0       	ldi	r24, 0x00	; 0
 c8c:	08 95       	ret
 c8e:	82 e0       	ldi	r24, 0x02	; 2
 c90:	08 95       	ret
 c92:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 c94:	08 95       	ret

00000c96 <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
 c96:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 c98:	40 91 16 01 	lds	r20, 0x0116
 c9c:	50 91 17 01 	lds	r21, 0x0117
 ca0:	46 17       	cp	r20, r22
 ca2:	57 07       	cpc	r21, r23
 ca4:	18 f4       	brcc	.+6      	; 0xcac <Endpoint_Write_Control_PStream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 ca6:	f9 01       	movw	r30, r18
 ca8:	90 e0       	ldi	r25, 0x00	; 0
 caa:	40 c0       	rjmp	.+128    	; 0xd2c <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 cac:	61 15       	cp	r22, r1
 cae:	71 05       	cpc	r23, r1
 cb0:	11 f0       	breq	.+4      	; 0xcb6 <Endpoint_Write_Control_PStream_LE+0x20>
 cb2:	ab 01       	movw	r20, r22
 cb4:	f8 cf       	rjmp	.-16     	; 0xca6 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 cb6:	80 91 e8 00 	lds	r24, 0x00E8
 cba:	8e 77       	andi	r24, 0x7E	; 126
 cbc:	80 93 e8 00 	sts	0x00E8, r24
 cc0:	40 e0       	ldi	r20, 0x00	; 0
 cc2:	50 e0       	ldi	r21, 0x00	; 0
 cc4:	f0 cf       	rjmp	.-32     	; 0xca6 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 cc6:	80 91 0f 01 	lds	r24, 0x010F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 cca:	88 23       	and	r24, r24
 ccc:	09 f4       	brne	.+2      	; 0xcd0 <Endpoint_Write_Control_PStream_LE+0x3a>
 cce:	40 c0       	rjmp	.+128    	; 0xd50 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 cd0:	85 30       	cpi	r24, 0x05	; 5
 cd2:	09 f4       	brne	.+2      	; 0xcd6 <Endpoint_Write_Control_PStream_LE+0x40>
 cd4:	3f c0       	rjmp	.+126    	; 0xd54 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 cd6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 cda:	83 ff       	sbrs	r24, 3
 cdc:	02 c0       	rjmp	.+4      	; 0xce2 <Endpoint_Write_Control_PStream_LE+0x4c>
 cde:	81 e0       	ldi	r24, 0x01	; 1
 ce0:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 ce2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 ce6:	82 fd       	sbrc	r24, 2
 ce8:	2d c0       	rjmp	.+90     	; 0xd44 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 cea:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 cee:	80 ff       	sbrs	r24, 0
 cf0:	1d c0       	rjmp	.+58     	; 0xd2c <Endpoint_Write_Control_PStream_LE+0x96>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 cf2:	20 91 f2 00 	lds	r18, 0x00F2
 cf6:	30 91 f3 00 	lds	r19, 0x00F3
 cfa:	08 c0       	rjmp	.+16     	; 0xd0c <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 cfc:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 cfe:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 d02:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 d04:	41 50       	subi	r20, 0x01	; 1
 d06:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 d08:	2f 5f       	subi	r18, 0xFF	; 255
 d0a:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 d0c:	41 15       	cp	r20, r1
 d0e:	51 05       	cpc	r21, r1
 d10:	19 f0       	breq	.+6      	; 0xd18 <Endpoint_Write_Control_PStream_LE+0x82>
 d12:	28 30       	cpi	r18, 0x08	; 8
 d14:	31 05       	cpc	r19, r1
 d16:	90 f3       	brcs	.-28     	; 0xcfc <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 d18:	90 e0       	ldi	r25, 0x00	; 0
 d1a:	28 30       	cpi	r18, 0x08	; 8
 d1c:	31 05       	cpc	r19, r1
 d1e:	09 f4       	brne	.+2      	; 0xd22 <Endpoint_Write_Control_PStream_LE+0x8c>
 d20:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d22:	80 91 e8 00 	lds	r24, 0x00E8
 d26:	8e 77       	andi	r24, 0x7E	; 126
 d28:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 d2c:	41 15       	cp	r20, r1
 d2e:	51 05       	cpc	r21, r1
 d30:	51 f6       	brne	.-108    	; 0xcc6 <Endpoint_Write_Control_PStream_LE+0x30>
 d32:	99 23       	and	r25, r25
 d34:	41 f6       	brne	.-112    	; 0xcc6 <Endpoint_Write_Control_PStream_LE+0x30>
 d36:	06 c0       	rjmp	.+12     	; 0xd44 <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 d38:	80 91 0f 01 	lds	r24, 0x010F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 d3c:	88 23       	and	r24, r24
 d3e:	41 f0       	breq	.+16     	; 0xd50 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 d40:	85 30       	cpi	r24, 0x05	; 5
 d42:	41 f0       	breq	.+16     	; 0xd54 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 d44:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 d48:	82 ff       	sbrs	r24, 2
 d4a:	f6 cf       	rjmp	.-20     	; 0xd38 <Endpoint_Write_Control_PStream_LE+0xa2>
 d4c:	80 e0       	ldi	r24, 0x00	; 0
 d4e:	08 95       	ret
 d50:	82 e0       	ldi	r24, 0x02	; 2
 d52:	08 95       	ret
 d54:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 d56:	08 95       	ret

00000d58 <Endpoint_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 d58:	bf 92       	push	r11
 d5a:	cf 92       	push	r12
 d5c:	df 92       	push	r13
 d5e:	ef 92       	push	r14
 d60:	ff 92       	push	r15
 d62:	0f 93       	push	r16
 d64:	1f 93       	push	r17
 d66:	cf 93       	push	r28
 d68:	df 93       	push	r29
 d6a:	18 2f       	mov	r17, r24
 d6c:	09 2f       	mov	r16, r25
 d6e:	7b 01       	movw	r14, r22
 d70:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 d72:	53 dc       	rcall	.-1882   	; 0x61a <Endpoint_WaitUntilReady>
 d74:	b8 2e       	mov	r11, r24
 d76:	88 23       	and	r24, r24
 d78:	b1 f5       	brne	.+108    	; 0xde6 <Endpoint_Write_Stream_LE+0x8e>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 d7a:	81 2f       	mov	r24, r17
 d7c:	90 2f       	mov	r25, r16
 d7e:	9c 01       	movw	r18, r24
 d80:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
 d82:	c1 14       	cp	r12, r1
 d84:	d1 04       	cpc	r13, r1
 d86:	39 f0       	breq	.+14     	; 0xd96 <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
 d88:	f6 01       	movw	r30, r12
 d8a:	80 81       	ld	r24, Z
 d8c:	91 81       	ldd	r25, Z+1	; 0x01
 d8e:	e8 1a       	sub	r14, r24
 d90:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 d92:	c8 0f       	add	r28, r24
 d94:	d9 1f       	adc	r29, r25
 d96:	00 e0       	ldi	r16, 0x00	; 0
 d98:	10 e0       	ldi	r17, 0x00	; 0
 d9a:	22 c0       	rjmp	.+68     	; 0xde0 <Endpoint_Write_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 d9c:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 da0:	85 fd       	sbrc	r24, 5
 da2:	16 c0       	rjmp	.+44     	; 0xdd0 <Endpoint_Write_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 da4:	80 91 e8 00 	lds	r24, 0x00E8
 da8:	8e 77       	andi	r24, 0x7E	; 126
 daa:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
 dae:	c1 14       	cp	r12, r1
 db0:	d1 04       	cpc	r13, r1
 db2:	49 f0       	breq	.+18     	; 0xdc6 <Endpoint_Write_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
 db4:	f6 01       	movw	r30, r12
 db6:	80 81       	ld	r24, Z
 db8:	91 81       	ldd	r25, Z+1	; 0x01
 dba:	80 0f       	add	r24, r16
 dbc:	91 1f       	adc	r25, r17
 dbe:	91 83       	std	Z+1, r25	; 0x01
 dc0:	80 83       	st	Z, r24
 dc2:	85 e0       	ldi	r24, 0x05	; 5
 dc4:	11 c0       	rjmp	.+34     	; 0xde8 <Endpoint_Write_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 dc6:	1a d0       	rcall	.+52     	; 0xdfc <USB_USBTask>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 dc8:	28 dc       	rcall	.-1968   	; 0x61a <Endpoint_WaitUntilReady>
 dca:	88 23       	and	r24, r24
 dcc:	49 f0       	breq	.+18     	; 0xde0 <Endpoint_Write_Stream_LE+0x88>
 dce:	0c c0       	rjmp	.+24     	; 0xde8 <Endpoint_Write_Stream_LE+0x90>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 dd0:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 dd2:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 dd6:	08 94       	sec
 dd8:	e1 08       	sbc	r14, r1
 dda:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
 ddc:	0f 5f       	subi	r16, 0xFF	; 255
 dde:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 de0:	e1 14       	cp	r14, r1
 de2:	f1 04       	cpc	r15, r1
 de4:	d9 f6       	brne	.-74     	; 0xd9c <Endpoint_Write_Stream_LE+0x44>
 de6:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 de8:	df 91       	pop	r29
 dea:	cf 91       	pop	r28
 dec:	1f 91       	pop	r17
 dee:	0f 91       	pop	r16
 df0:	ff 90       	pop	r15
 df2:	ef 90       	pop	r14
 df4:	df 90       	pop	r13
 df6:	cf 90       	pop	r12
 df8:	bf 90       	pop	r11
 dfa:	08 95       	ret

00000dfc <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 dfc:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 dfe:	80 91 0f 01 	lds	r24, 0x010F
 e02:	88 23       	and	r24, r24
 e04:	61 f0       	breq	.+24     	; 0xe1e <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 e06:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 e0a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 e0e:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 e12:	83 ff       	sbrs	r24, 3
 e14:	01 c0       	rjmp	.+2      	; 0xe18 <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
 e16:	5c dd       	rcall	.-1352   	; 0x8d0 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 e18:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 e1a:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 e1e:	1f 91       	pop	r17
 e20:	08 95       	ret

00000e22 <memset>:
 e22:	dc 01       	movw	r26, r24
 e24:	01 c0       	rjmp	.+2      	; 0xe28 <memset+0x6>
 e26:	6d 93       	st	X+, r22
 e28:	41 50       	subi	r20, 0x01	; 1
 e2a:	50 40       	sbci	r21, 0x00	; 0
 e2c:	e0 f7       	brcc	.-8      	; 0xe26 <memset+0x4>
 e2e:	08 95       	ret

00000e30 <_exit>:
 e30:	f8 94       	cli

00000e32 <__stop_program>:
 e32:	ff cf       	rjmp	.-2      	; 0xe32 <__stop_program>
