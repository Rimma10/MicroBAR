
VirtualSerialMouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  0000145c  000014f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000145c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800176  00800176  00001566  2**0
                  ALLOC
  3 .debug_aranges 00000480  00000000  00000000  00001566  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000cd7  00000000  00000000  000019e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00008018  00000000  00000000  000026bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001fc3  00000000  00000000  0000a6d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000061ad  00000000  00000000  0000c698  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006c0  00000000  00000000  00012848  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000033ab  00000000  00000000  00012f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000347b  00000000  00000000  000162b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000570  00000000  00000000  0001972e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       0:	c9 c0       	rjmp	.+402    	; 0x194 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       4:	e5 c0       	rjmp	.+458    	; 0x1d0 <__bad_interrupt>
	}
	else
	{
		return 0;
	}
}
       6:	00 00       	nop
       8:	e3 c0       	rjmp	.+454    	; 0x1d0 <__bad_interrupt>
       a:	00 00       	nop
       c:	e1 c0       	rjmp	.+450    	; 0x1d0 <__bad_interrupt>
       e:	00 00       	nop
      10:	df c0       	rjmp	.+446    	; 0x1d0 <__bad_interrupt>
      12:	00 00       	nop
      14:	dd c0       	rjmp	.+442    	; 0x1d0 <__bad_interrupt>
      16:	00 00       	nop
      18:	db c0       	rjmp	.+438    	; 0x1d0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d9 c0       	rjmp	.+434    	; 0x1d0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d7 c0       	rjmp	.+430    	; 0x1d0 <__bad_interrupt>
      22:	00 00       	nop
      24:	d5 c0       	rjmp	.+426    	; 0x1d0 <__bad_interrupt>
      26:	00 00       	nop
      28:	d4 c2       	rjmp	.+1448   	; 0x5d2 <__vector_10>
      2a:	00 00       	nop
      2c:	d1 c0       	rjmp	.+418    	; 0x1d0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	cf c0       	rjmp	.+414    	; 0x1d0 <__bad_interrupt>
      32:	00 00       	nop
      34:	cd c0       	rjmp	.+410    	; 0x1d0 <__bad_interrupt>
      36:	00 00       	nop
      38:	cb c0       	rjmp	.+406    	; 0x1d0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c9 c0       	rjmp	.+402    	; 0x1d0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c7 c0       	rjmp	.+398    	; 0x1d0 <__bad_interrupt>
      42:	00 00       	nop
      44:	c5 c0       	rjmp	.+394    	; 0x1d0 <__bad_interrupt>
      46:	00 00       	nop
      48:	c3 c0       	rjmp	.+390    	; 0x1d0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c1 c0       	rjmp	.+386    	; 0x1d0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	bf c0       	rjmp	.+382    	; 0x1d0 <__bad_interrupt>
      52:	00 00       	nop
      54:	bd c0       	rjmp	.+378    	; 0x1d0 <__bad_interrupt>
      56:	00 00       	nop
      58:	bb c0       	rjmp	.+374    	; 0x1d0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b9 c0       	rjmp	.+370    	; 0x1d0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b7 c0       	rjmp	.+366    	; 0x1d0 <__bad_interrupt>
      62:	00 00       	nop
      64:	b5 c0       	rjmp	.+362    	; 0x1d0 <__bad_interrupt>
      66:	00 00       	nop
      68:	b3 c0       	rjmp	.+358    	; 0x1d0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b1 c0       	rjmp	.+354    	; 0x1d0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	af c0       	rjmp	.+350    	; 0x1d0 <__bad_interrupt>
      72:	00 00       	nop
      74:	ad c0       	rjmp	.+346    	; 0x1d0 <__bad_interrupt>
      76:	00 00       	nop
      78:	ab c0       	rjmp	.+342    	; 0x1d0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a9 c0       	rjmp	.+338    	; 0x1d0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a7 c0       	rjmp	.+334    	; 0x1d0 <__bad_interrupt>
      82:	00 00       	nop
      84:	a5 c0       	rjmp	.+330    	; 0x1d0 <__bad_interrupt>
      86:	00 00       	nop
      88:	a3 c0       	rjmp	.+326    	; 0x1d0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	a1 c0       	rjmp	.+322    	; 0x1d0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9f c0       	rjmp	.+318    	; 0x1d0 <__bad_interrupt>
      92:	00 00       	nop
      94:	9d c0       	rjmp	.+314    	; 0x1d0 <__bad_interrupt>
      96:	00 00       	nop

00000098 <MouseReport>:
      98:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
      a8:	15 00 25 01 95 03 75 01 81 02 95 01 75 05 81 01     ..%...u.....u...
      b8:	05 01 09 30 09 31 16 ff ff 26 01 00 36 ff ff 46     ...0.1...&..6..F
      c8:	01 00 95 02 75 08 81 06 c0 c0                       ....u.....

000000d2 <DeviceDescriptor>:
      d2:	12 01 10 01 ef 02 01 08 eb 03 62 20 01 00 01 02     ..........b ....
      e2:	dc 01                                               ..

000000e4 <ConfigurationDescriptor>:
      e4:	09 02 5f 00 03 01 00 c0 32 08 0b 00 02 02 02 01     .._.....2.......
      f4:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
     104:	24 02 06 05 24 06 00 01 07 05 82 03 08 00 ff 09     $...$...........
     114:	04 01 00 02 0a 00 00 00 07 05 04 02 10 00 01 07     ................
     124:	05 83 02 10 00 01 09 04 02 00 01 03 01 02 00 09     ................
     134:	21 11 01 00 01 22 3a 00 07 05 81 03 08 00 01        !....":........

00000143 <LanguageString>:
     143:	04 03 09 04                                         ....

00000147 <ManufacturerString>:
     147:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     157:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000161 <ProductString>:
     161:	30 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     0.L.U.F.A. .C.D.
     171:	43 00 20 00 61 00 6e 00 64 00 20 00 4d 00 6f 00     C. .a.n.d. .M.o.
     181:	75 00 73 00 65 00 20 00 44 00 65 00 6d 00 6f 00     u.s.e. .D.e.m.o.
     191:	00 00 00                                            ...

00000194 <__ctors_end>:
     194:	11 24       	eor	r1, r1
     196:	1f be       	out	0x3f, r1	; 63
     198:	cf ef       	ldi	r28, 0xFF	; 255
     19a:	d0 e2       	ldi	r29, 0x20	; 32
     19c:	de bf       	out	0x3e, r29	; 62
     19e:	cd bf       	out	0x3d, r28	; 61

000001a0 <__do_copy_data>:
     1a0:	11 e0       	ldi	r17, 0x01	; 1
     1a2:	a0 e0       	ldi	r26, 0x00	; 0
     1a4:	b1 e0       	ldi	r27, 0x01	; 1
     1a6:	ec e5       	ldi	r30, 0x5C	; 92
     1a8:	f4 e1       	ldi	r31, 0x14	; 20
     1aa:	00 e0       	ldi	r16, 0x00	; 0
     1ac:	0b bf       	out	0x3b, r16	; 59
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <__do_copy_data+0x14>
     1b0:	07 90       	elpm	r0, Z+
     1b2:	0d 92       	st	X+, r0
     1b4:	a6 37       	cpi	r26, 0x76	; 118
     1b6:	b1 07       	cpc	r27, r17
     1b8:	d9 f7       	brne	.-10     	; 0x1b0 <__do_copy_data+0x10>

000001ba <__do_clear_bss>:
     1ba:	11 e0       	ldi	r17, 0x01	; 1
     1bc:	a6 e7       	ldi	r26, 0x76	; 118
     1be:	b1 e0       	ldi	r27, 0x01	; 1
     1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <.do_clear_bss_start>

000001c2 <.do_clear_bss_loop>:
     1c2:	1d 92       	st	X+, r1

000001c4 <.do_clear_bss_start>:
     1c4:	a7 38       	cpi	r26, 0x87	; 135
     1c6:	b1 07       	cpc	r27, r17
     1c8:	e1 f7       	brne	.-8      	; 0x1c2 <.do_clear_bss_loop>
     1ca:	ca d0       	rcall	.+404    	; 0x360 <main>
     1cc:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <_exit>

000001d0 <__bad_interrupt>:
     1d0:	17 cf       	rjmp	.-466    	; 0x0 <__vectors>

000001d2 <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     1d2:	8b b1       	in	r24, 0x0b	; 11
     1d4:	8f 70       	andi	r24, 0x0F	; 15
     1d6:	80 6a       	ori	r24, 0xA0	; 160
     1d8:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     1da:	08 95       	ret

000001dc <EVENT_USB_Device_Disconnect>:
     1dc:	8b b1       	in	r24, 0x0b	; 11
     1de:	8f 70       	andi	r24, 0x0F	; 15
     1e0:	80 61       	ori	r24, 0x10	; 16
     1e2:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     1e4:	08 95       	ret

000001e6 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     1e6:	80 91 73 01 	lds	r24, 0x0173
     1ea:	90 91 74 01 	lds	r25, 0x0174
     1ee:	00 97       	sbiw	r24, 0x00	; 0
     1f0:	29 f0       	breq	.+10     	; 0x1fc <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     1f2:	01 97       	sbiw	r24, 0x01	; 1
     1f4:	90 93 74 01 	sts	0x0174, r25
     1f8:	80 93 73 01 	sts	0x0173, r24
     1fc:	08 95       	ret

000001fe <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     1fe:	0f 93       	push	r16
     200:	1f 93       	push	r17
     202:	d8 01       	movw	r26, r16
	USB_MouseReport_Data_t* MouseReport = (USB_MouseReport_Data_t*)ReportData;
     204:	f9 01       	movw	r30, r18
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     206:	23 b1       	in	r18, 0x03	; 3
     208:	8c b1       	in	r24, 0x0c	; 12
     20a:	80 95       	com	r24
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	80 73       	andi	r24, 0x30	; 48
     210:	90 70       	andi	r25, 0x00	; 0
     212:	95 95       	asr	r25
     214:	87 95       	ror	r24
     216:	20 95       	com	r18
     218:	20 7e       	andi	r18, 0xE0	; 224
     21a:	28 2b       	or	r18, r24
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     21c:	3c b1       	in	r19, 0x0c	; 12

	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	if (JoyStatus_LCL & JOY_UP)
     21e:	27 ff       	sbrs	r18, 7
     220:	02 c0       	rjmp	.+4      	; 0x226 <CALLBACK_HID_Device_CreateHIDReport+0x28>
	  MouseReport->Y = -1;
     222:	8f ef       	ldi	r24, 0xFF	; 255
     224:	03 c0       	rjmp	.+6      	; 0x22c <CALLBACK_HID_Device_CreateHIDReport+0x2e>
	else if (JoyStatus_LCL & JOY_DOWN)
     226:	24 ff       	sbrs	r18, 4
     228:	02 c0       	rjmp	.+4      	; 0x22e <CALLBACK_HID_Device_CreateHIDReport+0x30>
	  MouseReport->Y =  1;
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	82 83       	std	Z+2, r24	; 0x02

	if (JoyStatus_LCL & JOY_LEFT)
     22e:	92 2f       	mov	r25, r18
     230:	26 ff       	sbrs	r18, 6
     232:	02 c0       	rjmp	.+4      	; 0x238 <CALLBACK_HID_Device_CreateHIDReport+0x3a>
	  MouseReport->X = -1;
     234:	8f ef       	ldi	r24, 0xFF	; 255
     236:	03 c0       	rjmp	.+6      	; 0x23e <CALLBACK_HID_Device_CreateHIDReport+0x40>
	else if (JoyStatus_LCL & JOY_RIGHT)
     238:	23 ff       	sbrs	r18, 3
     23a:	02 c0       	rjmp	.+4      	; 0x240 <CALLBACK_HID_Device_CreateHIDReport+0x42>
	  MouseReport->X =  1;
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	81 83       	std	Z+1, r24	; 0x01

	if (JoyStatus_LCL & JOY_PRESS)
     240:	95 ff       	sbrs	r25, 5
     242:	03 c0       	rjmp	.+6      	; 0x24a <CALLBACK_HID_Device_CreateHIDReport+0x4c>
	  MouseReport->Button |= (1 << 0);
     244:	80 81       	ld	r24, Z
     246:	81 60       	ori	r24, 0x01	; 1
     248:	80 83       	st	Z, r24

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
     24a:	32 fd       	sbrc	r19, 2
     24c:	03 c0       	rjmp	.+6      	; 0x254 <CALLBACK_HID_Device_CreateHIDReport+0x56>
	  MouseReport->Button |= (1 << 1);
     24e:	80 81       	ld	r24, Z
     250:	82 60       	ori	r24, 0x02	; 2
     252:	80 83       	st	Z, r24

	*ReportSize = sizeof(USB_MouseReport_Data_t);
     254:	83 e0       	ldi	r24, 0x03	; 3
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	8d 93       	st	X+, r24
     25a:	9c 93       	st	X, r25
	return true;
}
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	1f 91       	pop	r17
     260:	0f 91       	pop	r16
     262:	08 95       	ret

00000264 <CALLBACK_HID_Device_ProcessHIDReport>:
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
	// Unused (but mandatory for the HID class driver) in this demo, since there are no Host->Device reports
}
     264:	08 95       	ret

00000266 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     266:	82 e5       	ldi	r24, 0x52	; 82
     268:	91 e0       	ldi	r25, 0x01	; 1
     26a:	3e d6       	rcall	.+3196   	; 0xee8 <CDC_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Mouse_HID_Interface);
     26c:	88 e6       	ldi	r24, 0x68	; 104
     26e:	91 e0       	ldi	r25, 0x01	; 1
}
     270:	9a c7       	rjmp	.+3892   	; 0x11a6 <HID_Device_ProcessControlRequest>

00000272 <EVENT_USB_Device_ConfigurationChanged>:
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     272:	0f 93       	push	r16
     274:	1f 93       	push	r17
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Mouse_HID_Interface);
     276:	88 e6       	ldi	r24, 0x68	; 104
     278:	91 e0       	ldi	r25, 0x01	; 1
     27a:	5d d7       	rcall	.+3770   	; 0x1136 <HID_Device_ConfigureEndpoints>
     27c:	08 2f       	mov	r16, r24
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     27e:	82 e5       	ldi	r24, 0x52	; 82
     280:	91 e0       	ldi	r25, 0x01	; 1
     282:	e9 d5       	rcall	.+3026   	; 0xe56 <CDC_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     284:	90 91 e2 00 	lds	r25, 0x00E2
     288:	94 60       	ori	r25, 0x04	; 4
     28a:	90 93 e2 00 	sts	0x00E2, r25

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     28e:	10 e0       	ldi	r17, 0x00	; 0
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	08 23       	and	r16, r24
     294:	19 23       	and	r17, r25
     296:	00 ff       	sbrs	r16, 0
     298:	02 c0       	rjmp	.+4      	; 0x29e <EVENT_USB_Device_ConfigurationChanged+0x2c>
     29a:	90 e6       	ldi	r25, 0x60	; 96
     29c:	01 c0       	rjmp	.+2      	; 0x2a0 <EVENT_USB_Device_ConfigurationChanged+0x2e>
     29e:	90 e9       	ldi	r25, 0x90	; 144
     2a0:	8b b1       	in	r24, 0x0b	; 11
     2a2:	8f 70       	andi	r24, 0x0F	; 15
     2a4:	98 2b       	or	r25, r24
     2a6:	9b b9       	out	0x0b, r25	; 11
}
     2a8:	1f 91       	pop	r17
     2aa:	0f 91       	pop	r16
     2ac:	08 95       	ret

000002ae <CheckJoystickMovement>:
     2ae:	23 b1       	in	r18, 0x03	; 3
     2b0:	8c b1       	in	r24, 0x0c	; 12
     2b2:	80 95       	com	r24
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	80 73       	andi	r24, 0x30	; 48
     2b8:	90 70       	andi	r25, 0x00	; 0
     2ba:	95 95       	asr	r25
     2bc:	87 95       	ror	r24
     2be:	20 95       	com	r18
     2c0:	20 7e       	andi	r18, 0xE0	; 224
     2c2:	28 2b       	or	r18, r24
{
	uint8_t     JoyStatus_LCL = Joystick_GetStatus();
	char*       ReportString  = NULL;
	static bool ActionSent    = false;

	if (JoyStatus_LCL & JOY_UP)
     2c4:	27 fd       	sbrc	r18, 7
     2c6:	17 c0       	rjmp	.+46     	; 0x2f6 <CheckJoystickMovement+0x48>
	  ReportString = "Joystick Up\r\n";
	else if (JoyStatus_LCL & JOY_DOWN)
     2c8:	24 ff       	sbrs	r18, 4
     2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <CheckJoystickMovement+0x24>
     2cc:	60 e0       	ldi	r22, 0x00	; 0
     2ce:	71 e0       	ldi	r23, 0x01	; 1
     2d0:	14 c0       	rjmp	.+40     	; 0x2fa <CheckJoystickMovement+0x4c>
	  ReportString = "Joystick Down\r\n";
	else if (JoyStatus_LCL & JOY_LEFT)
     2d2:	26 ff       	sbrs	r18, 6
     2d4:	03 c0       	rjmp	.+6      	; 0x2dc <CheckJoystickMovement+0x2e>
     2d6:	60 e1       	ldi	r22, 0x10	; 16
     2d8:	71 e0       	ldi	r23, 0x01	; 1
     2da:	0f c0       	rjmp	.+30     	; 0x2fa <CheckJoystickMovement+0x4c>
	  ReportString = "Joystick Left\r\n";
	else if (JoyStatus_LCL & JOY_RIGHT)
     2dc:	23 ff       	sbrs	r18, 3
     2de:	03 c0       	rjmp	.+6      	; 0x2e6 <CheckJoystickMovement+0x38>
     2e0:	60 e2       	ldi	r22, 0x20	; 32
     2e2:	71 e0       	ldi	r23, 0x01	; 1
     2e4:	0a c0       	rjmp	.+20     	; 0x2fa <CheckJoystickMovement+0x4c>
	  ReportString = "Joystick Right\r\n";
	else if (JoyStatus_LCL & JOY_PRESS)
     2e6:	25 ff       	sbrs	r18, 5
     2e8:	03 c0       	rjmp	.+6      	; 0x2f0 <CheckJoystickMovement+0x42>
     2ea:	61 e3       	ldi	r22, 0x31	; 49
     2ec:	71 e0       	ldi	r23, 0x01	; 1
     2ee:	05 c0       	rjmp	.+10     	; 0x2fa <CheckJoystickMovement+0x4c>
	  ReportString = "Joystick Pressed\r\n";
	else
	  ActionSent = false;
     2f0:	10 92 76 01 	sts	0x0176, r1
     2f4:	08 95       	ret
     2f6:	64 e4       	ldi	r22, 0x44	; 68
     2f8:	71 e0       	ldi	r23, 0x01	; 1

	if ((ReportString != NULL) && (ActionSent == false))
     2fa:	80 91 76 01 	lds	r24, 0x0176
     2fe:	88 23       	and	r24, r24
     300:	31 f4       	brne	.+12     	; 0x30e <CheckJoystickMovement+0x60>
	{
		ActionSent = true;
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	80 93 76 01 	sts	0x0176, r24

		CDC_Device_SendString(&VirtualSerial_CDC_Interface, ReportString);
     308:	82 e5       	ldi	r24, 0x52	; 82
     30a:	91 e0       	ldi	r25, 0x01	; 1
     30c:	86 c5       	rjmp	.+2828   	; 0xe1a <CDC_Device_SendString>
     30e:	08 95       	ret

00000310 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     310:	84 b7       	in	r24, 0x34	; 52
     312:	87 7f       	andi	r24, 0xF7	; 247
     314:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     316:	88 e1       	ldi	r24, 0x18	; 24
     318:	0f b6       	in	r0, 0x3f	; 63
     31a:	f8 94       	cli
     31c:	80 93 60 00 	sts	0x0060, r24
     320:	10 92 60 00 	sts	0x0060, r1
     324:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	20 e8       	ldi	r18, 0x80	; 128
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	f8 94       	cli
     330:	20 93 61 00 	sts	0x0061, r18
     334:	80 93 61 00 	sts	0x0061, r24
     338:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
     33a:	84 b1       	in	r24, 0x04	; 4
     33c:	8f 71       	andi	r24, 0x1F	; 31
     33e:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
     340:	8d b1       	in	r24, 0x0d	; 13
     342:	8f 7c       	andi	r24, 0xCF	; 207
     344:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
     346:	85 b1       	in	r24, 0x05	; 5
     348:	80 6e       	ori	r24, 0xE0	; 224
     34a:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
     34c:	8e b1       	in	r24, 0x0e	; 14
     34e:	80 63       	ori	r24, 0x30	; 48
     350:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     352:	8a b1       	in	r24, 0x0a	; 10
     354:	80 6f       	ori	r24, 0xF0	; 240
     356:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     358:	8b b1       	in	r24, 0x0b	; 11
     35a:	8f 70       	andi	r24, 0x0F	; 15
     35c:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	USB_Init();
}
     35e:	23 c1       	rjmp	.+582    	; 0x5a6 <USB_Init>

00000360 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     360:	d7 df       	rcall	.-82     	; 0x310 <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     362:	8b b1       	in	r24, 0x0b	; 11
     364:	8f 70       	andi	r24, 0x0F	; 15
     366:	80 61       	ori	r24, 0x10	; 16
     368:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     36a:	78 94       	sei

	for (;;)
	{
		CheckJoystickMovement();
     36c:	a0 df       	rcall	.-192    	; 0x2ae <CheckJoystickMovement>

		/* Must throw away unused bytes from the host, or it will lock up while waiting for the device */
		CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     36e:	82 e5       	ldi	r24, 0x52	; 82
     370:	91 e0       	ldi	r25, 0x01	; 1
     372:	e3 d4       	rcall	.+2502   	; 0xd3a <CDC_Device_ReceiveByte>

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     374:	82 e5       	ldi	r24, 0x52	; 82
     376:	91 e0       	ldi	r25, 0x01	; 1
     378:	40 d5       	rcall	.+2688   	; 0xdfa <CDC_Device_USBTask>
		HID_Device_USBTask(&Mouse_HID_Interface);
     37a:	88 e6       	ldi	r24, 0x68	; 104
     37c:	91 e0       	ldi	r25, 0x01	; 1
     37e:	21 d6       	rcall	.+3138   	; 0xfc2 <HID_Device_USBTask>
		USB_USBTask();
     380:	c9 d4       	rcall	.+2450   	; 0xd14 <USB_USBTask>
     382:	f4 cf       	rjmp	.-24     	; 0x36c <main+0xc>

00000384 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     384:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     386:	93 30       	cpi	r25, 0x03	; 3
     388:	b1 f0       	breq	.+44     	; 0x3b6 <CALLBACK_USB_GetDescriptor+0x32>
     38a:	94 30       	cpi	r25, 0x04	; 4
     38c:	28 f4       	brcc	.+10     	; 0x398 <CALLBACK_USB_GetDescriptor+0x14>
     38e:	91 30       	cpi	r25, 0x01	; 1
     390:	41 f0       	breq	.+16     	; 0x3a2 <CALLBACK_USB_GetDescriptor+0x1e>
     392:	92 30       	cpi	r25, 0x02	; 2
     394:	79 f5       	brne	.+94     	; 0x3f4 <CALLBACK_USB_GetDescriptor+0x70>
     396:	0a c0       	rjmp	.+20     	; 0x3ac <CALLBACK_USB_GetDescriptor+0x28>
     398:	91 32       	cpi	r25, 0x21	; 33
     39a:	11 f1       	breq	.+68     	; 0x3e0 <CALLBACK_USB_GetDescriptor+0x5c>
     39c:	92 32       	cpi	r25, 0x22	; 34
     39e:	51 f5       	brne	.+84     	; 0x3f4 <CALLBACK_USB_GetDescriptor+0x70>
     3a0:	24 c0       	rjmp	.+72     	; 0x3ea <CALLBACK_USB_GetDescriptor+0x66>
     3a2:	e2 ed       	ldi	r30, 0xD2	; 210
     3a4:	f0 e0       	ldi	r31, 0x00	; 0
     3a6:	22 e1       	ldi	r18, 0x12	; 18
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	28 c0       	rjmp	.+80     	; 0x3fc <CALLBACK_USB_GetDescriptor+0x78>
     3ac:	e4 ee       	ldi	r30, 0xE4	; 228
     3ae:	f0 e0       	ldi	r31, 0x00	; 0
     3b0:	2f e5       	ldi	r18, 0x5F	; 95
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	23 c0       	rjmp	.+70     	; 0x3fc <CALLBACK_USB_GetDescriptor+0x78>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     3b6:	81 30       	cpi	r24, 0x01	; 1
     3b8:	49 f0       	breq	.+18     	; 0x3cc <CALLBACK_USB_GetDescriptor+0x48>
     3ba:	81 30       	cpi	r24, 0x01	; 1
     3bc:	18 f0       	brcs	.+6      	; 0x3c4 <CALLBACK_USB_GetDescriptor+0x40>
     3be:	82 30       	cpi	r24, 0x02	; 2
     3c0:	c9 f4       	brne	.+50     	; 0x3f4 <CALLBACK_USB_GetDescriptor+0x70>
     3c2:	0a c0       	rjmp	.+20     	; 0x3d8 <CALLBACK_USB_GetDescriptor+0x54>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     3c4:	e3 e4       	ldi	r30, 0x43	; 67
     3c6:	f1 e0       	ldi	r31, 0x01	; 1
     3c8:	84 91       	lpm	r24, Z+
     3ca:	03 c0       	rjmp	.+6      	; 0x3d2 <CALLBACK_USB_GetDescriptor+0x4e>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     3cc:	e7 e4       	ldi	r30, 0x47	; 71
     3ce:	f1 e0       	ldi	r31, 0x01	; 1
     3d0:	84 91       	lpm	r24, Z+
     3d2:	28 2f       	mov	r18, r24
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	12 c0       	rjmp	.+36     	; 0x3fc <CALLBACK_USB_GetDescriptor+0x78>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     3d8:	e1 e6       	ldi	r30, 0x61	; 97
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	84 91       	lpm	r24, Z+
     3de:	f9 cf       	rjmp	.-14     	; 0x3d2 <CALLBACK_USB_GetDescriptor+0x4e>
     3e0:	e3 e3       	ldi	r30, 0x33	; 51
     3e2:	f1 e0       	ldi	r31, 0x01	; 1
     3e4:	29 e0       	ldi	r18, 0x09	; 9
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	09 c0       	rjmp	.+18     	; 0x3fc <CALLBACK_USB_GetDescriptor+0x78>

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     3ea:	e8 e9       	ldi	r30, 0x98	; 152
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	2a e3       	ldi	r18, 0x3A	; 58
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	04 c0       	rjmp	.+8      	; 0x3fc <CALLBACK_USB_GetDescriptor+0x78>
     3f4:	e0 e0       	ldi	r30, 0x00	; 0
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	20 e0       	ldi	r18, 0x00	; 0
     3fa:	30 e0       	ldi	r19, 0x00	; 0
			Address = &MouseReport;
			Size    = sizeof(MouseReport);
			break;
	}

	*DescriptorAddress = Address;
     3fc:	ed 93       	st	X+, r30
     3fe:	fc 93       	st	X, r31
	return Size;
}
     400:	c9 01       	movw	r24, r18
     402:	08 95       	ret

00000404 <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
     404:	38 2f       	mov	r19, r24
     406:	28 2f       	mov	r18, r24
     408:	2c c0       	rjmp	.+88     	; 0x462 <Endpoint_ConfigureEndpoint_Prv+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     40a:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);
		
		if (EPNum == Number)
     40e:	23 17       	cp	r18, r19
     410:	21 f4       	brne	.+8      	; 0x41a <Endpoint_ConfigureEndpoint_Prv+0x16>
     412:	76 2f       	mov	r23, r22
     414:	94 2f       	mov	r25, r20
     416:	50 e0       	ldi	r21, 0x00	; 0
     418:	06 c0       	rjmp	.+12     	; 0x426 <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     41a:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     41e:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
     422:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     426:	91 ff       	sbrs	r25, 1
     428:	1b c0       	rjmp	.+54     	; 0x460 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     42a:	80 91 eb 00 	lds	r24, 0x00EB
     42e:	8e 7f       	andi	r24, 0xFE	; 254
     430:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= (1 << ALLOC);
     434:	80 91 ed 00 	lds	r24, 0x00ED
     438:	82 70       	andi	r24, 0x02	; 2
     43a:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     43e:	80 91 eb 00 	lds	r24, 0x00EB
     442:	81 60       	ori	r24, 0x01	; 1
     444:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     448:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     44c:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
     450:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     454:	80 91 ee 00 	lds	r24, 0x00EE
			
		if (!(Endpoint_IsConfigured()))
     458:	87 fd       	sbrc	r24, 7
     45a:	02 c0       	rjmp	.+4      	; 0x460 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else	
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     460:	2f 5f       	subi	r18, 0xFF	; 255
     462:	27 30       	cpi	r18, 0x07	; 7
     464:	90 f2       	brcs	.-92     	; 0x40a <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     466:	30 93 e9 00 	sts	0x00E9, r19
     46a:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     46c:	08 95       	ret

0000046e <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     46e:	80 91 7f 01 	lds	r24, 0x017F
     472:	88 23       	and	r24, r24
     474:	9c f4       	brge	.+38     	; 0x49c <Endpoint_ClearStatusStage+0x2e>
     476:	04 c0       	rjmp	.+8      	; 0x480 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     478:	80 91 7e 01 	lds	r24, 0x017E
     47c:	88 23       	and	r24, r24
     47e:	b9 f0       	breq	.+46     	; 0x4ae <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     480:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     484:	82 ff       	sbrs	r24, 2
     486:	f8 cf       	rjmp	.-16     	; 0x478 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     488:	80 91 e8 00 	lds	r24, 0x00E8
     48c:	8b 77       	andi	r24, 0x7B	; 123
     48e:	80 93 e8 00 	sts	0x00E8, r24
     492:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     494:	80 91 7e 01 	lds	r24, 0x017E
     498:	88 23       	and	r24, r24
     49a:	49 f0       	breq	.+18     	; 0x4ae <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     49c:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     4a0:	80 ff       	sbrs	r24, 0
     4a2:	f8 cf       	rjmp	.-16     	; 0x494 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     4a4:	80 91 e8 00 	lds	r24, 0x00E8
     4a8:	8e 77       	andi	r24, 0x7E	; 126
     4aa:	80 93 e8 00 	sts	0x00E8, r24
     4ae:	08 95       	ret

000004b0 <Endpoint_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     4b0:	40 91 e4 00 	lds	r20, 0x00E4
     4b4:	50 91 e5 00 	lds	r21, 0x00E5
     4b8:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
     4ba:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
     4be:	80 ff       	sbrs	r24, 0
     4c0:	05 c0       	rjmp	.+10     	; 0x4cc <Endpoint_WaitUntilReady+0x1c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     4c2:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
     4c6:	80 ff       	sbrs	r24, 0
     4c8:	05 c0       	rjmp	.+10     	; 0x4d4 <Endpoint_WaitUntilReady+0x24>
     4ca:	22 c0       	rjmp	.+68     	; 0x510 <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     4cc:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     4d0:	82 fd       	sbrc	r24, 2
     4d2:	1e c0       	rjmp	.+60     	; 0x510 <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     4d4:	80 91 7e 01 	lds	r24, 0x017E

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     4d8:	88 23       	and	r24, r24
     4da:	11 f4       	brne	.+4      	; 0x4e0 <Endpoint_WaitUntilReady+0x30>
     4dc:	82 e0       	ldi	r24, 0x02	; 2
     4de:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     4e0:	85 30       	cpi	r24, 0x05	; 5
     4e2:	11 f4       	brne	.+4      	; 0x4e8 <Endpoint_WaitUntilReady+0x38>
     4e4:	83 e0       	ldi	r24, 0x03	; 3
     4e6:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     4e8:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     4ec:	85 ff       	sbrs	r24, 5
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <Endpoint_WaitUntilReady+0x44>
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	08 95       	ret
     4f4:	80 91 e4 00 	lds	r24, 0x00E4
     4f8:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     4fc:	84 17       	cp	r24, r20
     4fe:	95 07       	cpc	r25, r21
     500:	e1 f2       	breq	.-72     	; 0x4ba <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     502:	22 23       	and	r18, r18
     504:	11 f4       	brne	.+4      	; 0x50a <Endpoint_WaitUntilReady+0x5a>
     506:	84 e0       	ldi	r24, 0x04	; 4
     508:	08 95       	ret
     50a:	21 50       	subi	r18, 0x01	; 1
     50c:	ac 01       	movw	r20, r24
     50e:	d5 cf       	rjmp	.-86     	; 0x4ba <Endpoint_WaitUntilReady+0xa>
     510:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     512:	08 95       	ret

00000514 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     514:	ef 92       	push	r14
     516:	ff 92       	push	r15
     518:	0f 93       	push	r16
     51a:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     51c:	4d d0       	rcall	.+154    	; 0x5b8 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     51e:	54 d0       	rcall	.+168    	; 0x5c8 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
     520:	08 ed       	ldi	r16, 0xD8	; 216
     522:	10 e0       	ldi	r17, 0x00	; 0
     524:	f8 01       	movw	r30, r16
     526:	80 81       	ld	r24, Z

				USBCON = (Temp & ~(1 << USBE));
     528:	98 2f       	mov	r25, r24
     52a:	9f 77       	andi	r25, 0x7F	; 127
     52c:	90 83       	st	Z, r25
				USBCON = (Temp |  (1 << USBE));
     52e:	80 68       	ori	r24, 0x80	; 128
     530:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     532:	80 81       	ld	r24, Z
     534:	8f 7d       	andi	r24, 0xDF	; 223
     536:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     538:	e7 ed       	ldi	r30, 0xD7	; 215
     53a:	f0 e0       	ldi	r31, 0x00	; 0
     53c:	80 81       	ld	r24, Z
     53e:	80 68       	ori	r24, 0x80	; 128
     540:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     542:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
     544:	10 92 7e 01 	sts	0x017E, r1
	USB_ConfigurationNumber  = 0;
     548:	10 92 7c 01 	sts	0x017C, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
     54c:	10 92 7b 01 	sts	0x017B, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
     550:	10 92 7a 01 	sts	0x017A, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     554:	80 ee       	ldi	r24, 0xE0	; 224
     556:	e8 2e       	mov	r14, r24
     558:	f1 2c       	mov	r15, r1
     55a:	f7 01       	movw	r30, r14
     55c:	80 81       	ld	r24, Z
     55e:	8b 7f       	andi	r24, 0xFB	; 251
     560:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     562:	f8 01       	movw	r30, r16
     564:	80 81       	ld	r24, Z
     566:	81 60       	ori	r24, 0x01	; 1
     568:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	42 e0       	ldi	r20, 0x02	; 2
     570:	49 df       	rcall	.-366    	; 0x404 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     572:	e1 ee       	ldi	r30, 0xE1	; 225
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	80 81       	ld	r24, Z
     578:	8e 7f       	andi	r24, 0xFE	; 254
     57a:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     57c:	e2 ee       	ldi	r30, 0xE2	; 226
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	80 81       	ld	r24, Z
     582:	81 60       	ori	r24, 0x01	; 1
     584:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     586:	80 81       	ld	r24, Z
     588:	88 60       	ori	r24, 0x08	; 8
     58a:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     58c:	f7 01       	movw	r30, r14
     58e:	80 81       	ld	r24, Z
     590:	8e 7f       	andi	r24, 0xFE	; 254
     592:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     594:	f8 01       	movw	r30, r16
     596:	80 81       	ld	r24, Z
     598:	80 61       	ori	r24, 0x10	; 16
     59a:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     59c:	1f 91       	pop	r17
     59e:	0f 91       	pop	r16
     5a0:	ff 90       	pop	r15
     5a2:	ef 90       	pop	r14
     5a4:	08 95       	ret

000005a6 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     5a6:	e7 ed       	ldi	r30, 0xD7	; 215
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	80 81       	ld	r24, Z
     5ac:	81 60       	ori	r24, 0x01	; 1
     5ae:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	80 93 7d 01 	sts	0x017D, r24

	USB_ResetInterface();
}
     5b6:	ae cf       	rjmp	.-164    	; 0x514 <USB_ResetInterface>

000005b8 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     5b8:	e8 ed       	ldi	r30, 0xD8	; 216
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	80 81       	ld	r24, Z
     5be:	8c 7f       	andi	r24, 0xFC	; 252
     5c0:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     5c2:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     5c6:	08 95       	ret

000005c8 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     5c8:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     5cc:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     5d0:	08 95       	ret

000005d2 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     5d2:	1f 92       	push	r1
     5d4:	0f 92       	push	r0
     5d6:	0f b6       	in	r0, 0x3f	; 63
     5d8:	0f 92       	push	r0
     5da:	0b b6       	in	r0, 0x3b	; 59
     5dc:	0f 92       	push	r0
     5de:	11 24       	eor	r1, r1
     5e0:	2f 93       	push	r18
     5e2:	3f 93       	push	r19
     5e4:	4f 93       	push	r20
     5e6:	5f 93       	push	r21
     5e8:	6f 93       	push	r22
     5ea:	7f 93       	push	r23
     5ec:	8f 93       	push	r24
     5ee:	9f 93       	push	r25
     5f0:	af 93       	push	r26
     5f2:	bf 93       	push	r27
     5f4:	ef 93       	push	r30
     5f6:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     5f8:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     5fc:	82 ff       	sbrs	r24, 2
     5fe:	0a c0       	rjmp	.+20     	; 0x614 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     600:	80 91 e2 00 	lds	r24, 0x00E2
     604:	82 ff       	sbrs	r24, 2
     606:	06 c0       	rjmp	.+12     	; 0x614 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     608:	80 91 e1 00 	lds	r24, 0x00E1
     60c:	8b 7f       	andi	r24, 0xFB	; 251
     60e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     612:	e9 dd       	rcall	.-1070   	; 0x1e6 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     614:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     618:	80 ff       	sbrs	r24, 0
     61a:	1e c0       	rjmp	.+60     	; 0x658 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     61c:	80 91 d8 00 	lds	r24, 0x00D8
     620:	80 ff       	sbrs	r24, 0
     622:	1a c0       	rjmp	.+52     	; 0x658 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     624:	80 91 da 00 	lds	r24, 0x00DA
     628:	8e 7f       	andi	r24, 0xFE	; 254
     62a:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     62e:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     632:	80 ff       	sbrs	r24, 0
     634:	0d c0       	rjmp	.+26     	; 0x650 <__vector_10+0x7e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     636:	8c e0       	ldi	r24, 0x0C	; 12
     638:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     63a:	89 b5       	in	r24, 0x29	; 41
     63c:	82 60       	ori	r24, 0x02	; 2
     63e:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     640:	09 b4       	in	r0, 0x29	; 41
     642:	00 fe       	sbrs	r0, 0
     644:	fd cf       	rjmp	.-6      	; 0x640 <__vector_10+0x6e>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	80 93 7e 01 	sts	0x017E, r24
			EVENT_USB_Device_Connect();
     64c:	c2 dd       	rcall	.-1148   	; 0x1d2 <EVENT_USB_Device_Connect>
     64e:	04 c0       	rjmp	.+8      	; 0x658 <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     650:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     652:	10 92 7e 01 	sts	0x017E, r1
			EVENT_USB_Device_Disconnect();
     656:	c2 dd       	rcall	.-1148   	; 0x1dc <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     658:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     65c:	80 ff       	sbrs	r24, 0
     65e:	18 c0       	rjmp	.+48     	; 0x690 <__vector_10+0xbe>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     660:	80 91 e2 00 	lds	r24, 0x00E2
     664:	80 ff       	sbrs	r24, 0
     666:	14 c0       	rjmp	.+40     	; 0x690 <__vector_10+0xbe>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     668:	80 91 e2 00 	lds	r24, 0x00E2
     66c:	8e 7f       	andi	r24, 0xFE	; 254
     66e:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     672:	80 91 e2 00 	lds	r24, 0x00E2
     676:	80 61       	ori	r24, 0x10	; 16
     678:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
     67c:	80 91 d8 00 	lds	r24, 0x00D8
     680:	80 62       	ori	r24, 0x20	; 32
     682:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     686:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     688:	85 e0       	ldi	r24, 0x05	; 5
     68a:	80 93 7e 01 	sts	0x017E, r24
		EVENT_USB_Device_Suspend();
     68e:	ef d1       	rcall	.+990    	; 0xa6e <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     690:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     694:	84 ff       	sbrs	r24, 4
     696:	2e c0       	rjmp	.+92     	; 0x6f4 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     698:	80 91 e2 00 	lds	r24, 0x00E2
     69c:	84 ff       	sbrs	r24, 4
     69e:	2a c0       	rjmp	.+84     	; 0x6f4 <__vector_10+0x122>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     6a0:	8c e0       	ldi	r24, 0x0C	; 12
     6a2:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     6a4:	89 b5       	in	r24, 0x29	; 41
     6a6:	82 60       	ori	r24, 0x02	; 2
     6a8:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     6aa:	09 b4       	in	r0, 0x29	; 41
     6ac:	00 fe       	sbrs	r0, 0
     6ae:	fd cf       	rjmp	.-6      	; 0x6aa <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     6b0:	80 91 d8 00 	lds	r24, 0x00D8
     6b4:	8f 7d       	andi	r24, 0xDF	; 223
     6b6:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     6ba:	80 91 e1 00 	lds	r24, 0x00E1
     6be:	8f 7e       	andi	r24, 0xEF	; 239
     6c0:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     6c4:	80 91 e2 00 	lds	r24, 0x00E2
     6c8:	8f 7e       	andi	r24, 0xEF	; 239
     6ca:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     6ce:	80 91 e2 00 	lds	r24, 0x00E2
     6d2:	81 60       	ori	r24, 0x01	; 1
     6d4:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_ConfigurationNumber)
     6d8:	80 91 7c 01 	lds	r24, 0x017C
     6dc:	88 23       	and	r24, r24
     6de:	31 f4       	brne	.+12     	; 0x6ec <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     6e0:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     6e4:	87 fd       	sbrc	r24, 7
     6e6:	02 c0       	rjmp	.+4      	; 0x6ec <__vector_10+0x11a>
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	01 c0       	rjmp	.+2      	; 0x6ee <__vector_10+0x11c>
     6ec:	84 e0       	ldi	r24, 0x04	; 4
     6ee:	80 93 7e 01 	sts	0x017E, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     6f2:	bd d1       	rcall	.+890    	; 0xa6e <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     6f4:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     6f8:	83 ff       	sbrs	r24, 3
     6fa:	22 c0       	rjmp	.+68     	; 0x740 <__vector_10+0x16e>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     6fc:	80 91 e2 00 	lds	r24, 0x00E2
     700:	83 ff       	sbrs	r24, 3
     702:	1e c0       	rjmp	.+60     	; 0x740 <__vector_10+0x16e>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     704:	80 91 e1 00 	lds	r24, 0x00E1
     708:	87 7f       	andi	r24, 0xF7	; 247
     70a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState         = DEVICE_STATE_Default;
     70e:	82 e0       	ldi	r24, 0x02	; 2
     710:	80 93 7e 01 	sts	0x017E, r24
		USB_ConfigurationNumber = 0;
     714:	10 92 7c 01 	sts	0x017C, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     718:	80 91 e1 00 	lds	r24, 0x00E1
     71c:	8e 7f       	andi	r24, 0xFE	; 254
     71e:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     722:	80 91 e2 00 	lds	r24, 0x00E2
     726:	8e 7f       	andi	r24, 0xFE	; 254
     728:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     72c:	80 91 e2 00 	lds	r24, 0x00E2
     730:	80 61       	ori	r24, 0x10	; 16
     732:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	42 e0       	ldi	r20, 0x02	; 2
     73c:	63 de       	rcall	.-826    	; 0x404 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     73e:	97 d1       	rcall	.+814    	; 0xa6e <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     740:	ff 91       	pop	r31
     742:	ef 91       	pop	r30
     744:	bf 91       	pop	r27
     746:	af 91       	pop	r26
     748:	9f 91       	pop	r25
     74a:	8f 91       	pop	r24
     74c:	7f 91       	pop	r23
     74e:	6f 91       	pop	r22
     750:	5f 91       	pop	r21
     752:	4f 91       	pop	r20
     754:	3f 91       	pop	r19
     756:	2f 91       	pop	r18
     758:	0f 90       	pop	r0
     75a:	0b be       	out	0x3b, r0	; 59
     75c:	0f 90       	pop	r0
     75e:	0f be       	out	0x3f, r0	; 63
     760:	0f 90       	pop	r0
     762:	1f 90       	pop	r1
     764:	18 95       	reti

00000766 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     766:	0f 93       	push	r16
     768:	1f 93       	push	r17
     76a:	df 93       	push	r29
     76c:	cf 93       	push	r28
     76e:	cd b7       	in	r28, 0x3d	; 61
     770:	de b7       	in	r29, 0x3e	; 62
     772:	ac 97       	sbiw	r28, 0x2c	; 44
     774:	0f b6       	in	r0, 0x3f	; 63
     776:	f8 94       	cli
     778:	de bf       	out	0x3e, r29	; 62
     77a:	0f be       	out	0x3f, r0	; 63
     77c:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     77e:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
     782:	80 93 7f 01 	sts	0x017F, r24
     786:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
     78a:	80 93 80 01 	sts	0x0180, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
     78e:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
     792:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
     796:	e1 e8       	ldi	r30, 0x81	; 129
     798:	f1 e0       	ldi	r31, 0x01	; 1
     79a:	80 93 81 01 	sts	0x0181, r24
     79e:	90 93 82 01 	sts	0x0182, r25
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
     7a2:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
     7a6:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
     7aa:	80 93 83 01 	sts	0x0183, r24
     7ae:	93 83       	std	Z+3, r25	; 0x03
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
     7b0:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
     7b4:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
     7b8:	80 93 85 01 	sts	0x0185, r24
     7bc:	95 83       	std	Z+5, r25	; 0x05

	EVENT_USB_Device_ControlRequest();
     7be:	53 dd       	rcall	.-1370   	; 0x266 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     7c0:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     7c4:	83 ff       	sbrs	r24, 3
     7c6:	3a c1       	rjmp	.+628    	; 0xa3c <USB_Device_ProcessControlRequest+0x2d6>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     7c8:	80 91 7f 01 	lds	r24, 0x017F

		switch (USB_ControlRequest.bRequest)
     7cc:	30 91 80 01 	lds	r19, 0x0180
     7d0:	35 30       	cpi	r19, 0x05	; 5
     7d2:	09 f4       	brne	.+2      	; 0x7d6 <USB_Device_ProcessControlRequest+0x70>
     7d4:	87 c0       	rjmp	.+270    	; 0x8e4 <USB_Device_ProcessControlRequest+0x17e>
     7d6:	36 30       	cpi	r19, 0x06	; 6
     7d8:	40 f4       	brcc	.+16     	; 0x7ea <USB_Device_ProcessControlRequest+0x84>
     7da:	31 30       	cpi	r19, 0x01	; 1
     7dc:	c9 f1       	breq	.+114    	; 0x850 <USB_Device_ProcessControlRequest+0xea>
     7de:	31 30       	cpi	r19, 0x01	; 1
     7e0:	70 f0       	brcs	.+28     	; 0x7fe <USB_Device_ProcessControlRequest+0x98>
     7e2:	33 30       	cpi	r19, 0x03	; 3
     7e4:	09 f0       	breq	.+2      	; 0x7e8 <USB_Device_ProcessControlRequest+0x82>
     7e6:	2a c1       	rjmp	.+596    	; 0xa3c <USB_Device_ProcessControlRequest+0x2d6>
     7e8:	33 c0       	rjmp	.+102    	; 0x850 <USB_Device_ProcessControlRequest+0xea>
     7ea:	38 30       	cpi	r19, 0x08	; 8
     7ec:	09 f4       	brne	.+2      	; 0x7f0 <USB_Device_ProcessControlRequest+0x8a>
     7ee:	f8 c0       	rjmp	.+496    	; 0x9e0 <USB_Device_ProcessControlRequest+0x27a>
     7f0:	39 30       	cpi	r19, 0x09	; 9
     7f2:	09 f4       	brne	.+2      	; 0x7f6 <USB_Device_ProcessControlRequest+0x90>
     7f4:	07 c1       	rjmp	.+526    	; 0xa04 <USB_Device_ProcessControlRequest+0x29e>
     7f6:	36 30       	cpi	r19, 0x06	; 6
     7f8:	09 f0       	breq	.+2      	; 0x7fc <USB_Device_ProcessControlRequest+0x96>
     7fa:	20 c1       	rjmp	.+576    	; 0xa3c <USB_Device_ProcessControlRequest+0x2d6>
     7fc:	99 c0       	rjmp	.+306    	; 0x930 <USB_Device_ProcessControlRequest+0x1ca>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     7fe:	80 38       	cpi	r24, 0x80	; 128
     800:	21 f0       	breq	.+8      	; 0x80a <USB_Device_ProcessControlRequest+0xa4>
     802:	82 38       	cpi	r24, 0x82	; 130
     804:	09 f0       	breq	.+2      	; 0x808 <USB_Device_ProcessControlRequest+0xa2>
     806:	1a c1       	rjmp	.+564    	; 0xa3c <USB_Device_ProcessControlRequest+0x2d6>
     808:	08 c0       	rjmp	.+16     	; 0x81a <USB_Device_ProcessControlRequest+0xb4>
     80a:	90 91 7a 01 	lds	r25, 0x017A
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_RemoteWakeupEnabled)
     80e:	80 91 7b 01 	lds	r24, 0x017B
     812:	88 23       	and	r24, r24
     814:	99 f0       	breq	.+38     	; 0x83c <USB_Device_ProcessControlRequest+0xd6>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     816:	92 60       	ori	r25, 0x02	; 2
     818:	11 c0       	rjmp	.+34     	; 0x83c <USB_Device_ProcessControlRequest+0xd6>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     81a:	80 91 83 01 	lds	r24, 0x0183
     81e:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     820:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     824:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	25 e0       	ldi	r18, 0x05	; 5
     82c:	96 95       	lsr	r25
     82e:	87 95       	ror	r24
     830:	2a 95       	dec	r18
     832:	e1 f7       	brne	.-8      	; 0x82c <USB_Device_ProcessControlRequest+0xc6>
     834:	98 2f       	mov	r25, r24
     836:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     838:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     83c:	80 91 e8 00 	lds	r24, 0x00E8
     840:	87 7f       	andi	r24, 0xF7	; 247
     842:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     846:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
     84a:	10 92 f1 00 	sts	0x00F1, r1
     84e:	d3 c0       	rjmp	.+422    	; 0x9f6 <USB_Device_ProcessControlRequest+0x290>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     850:	88 23       	and	r24, r24
     852:	19 f0       	breq	.+6      	; 0x85a <USB_Device_ProcessControlRequest+0xf4>
     854:	82 30       	cpi	r24, 0x02	; 2
     856:	09 f0       	breq	.+2      	; 0x85a <USB_Device_ProcessControlRequest+0xf4>
     858:	f1 c0       	rjmp	.+482    	; 0xa3c <USB_Device_ProcessControlRequest+0x2d6>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	8f 71       	andi	r24, 0x1F	; 31
     85e:	90 70       	andi	r25, 0x00	; 0
     860:	00 97       	sbiw	r24, 0x00	; 0
     862:	21 f0       	breq	.+8      	; 0x86c <USB_Device_ProcessControlRequest+0x106>
     864:	02 97       	sbiw	r24, 0x02	; 2
     866:	09 f0       	breq	.+2      	; 0x86a <USB_Device_ProcessControlRequest+0x104>
     868:	e9 c0       	rjmp	.+466    	; 0xa3c <USB_Device_ProcessControlRequest+0x2d6>
     86a:	0c c0       	rjmp	.+24     	; 0x884 <USB_Device_ProcessControlRequest+0x11e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     86c:	80 91 81 01 	lds	r24, 0x0181
     870:	81 30       	cpi	r24, 0x01	; 1
     872:	09 f0       	breq	.+2      	; 0x876 <USB_Device_ProcessControlRequest+0x110>
     874:	e3 c0       	rjmp	.+454    	; 0xa3c <USB_Device_ProcessControlRequest+0x2d6>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     876:	10 92 7b 01 	sts	0x017B, r1
     87a:	33 30       	cpi	r19, 0x03	; 3
     87c:	69 f5       	brne	.+90     	; 0x8d8 <USB_Device_ProcessControlRequest+0x172>
     87e:	80 93 7b 01 	sts	0x017B, r24
     882:	2a c0       	rjmp	.+84     	; 0x8d8 <USB_Device_ProcessControlRequest+0x172>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     884:	80 91 81 01 	lds	r24, 0x0181
     888:	88 23       	and	r24, r24
     88a:	31 f5       	brne	.+76     	; 0x8d8 <USB_Device_ProcessControlRequest+0x172>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     88c:	20 91 83 01 	lds	r18, 0x0183
     890:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     892:	09 f4       	brne	.+2      	; 0x896 <USB_Device_ProcessControlRequest+0x130>
     894:	d3 c0       	rjmp	.+422    	; 0xa3c <USB_Device_ProcessControlRequest+0x2d6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     896:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     89a:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     89e:	80 ff       	sbrs	r24, 0
     8a0:	1b c0       	rjmp	.+54     	; 0x8d8 <USB_Device_ProcessControlRequest+0x172>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     8a2:	33 30       	cpi	r19, 0x03	; 3
     8a4:	21 f4       	brne	.+8      	; 0x8ae <USB_Device_ProcessControlRequest+0x148>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     8a6:	80 91 eb 00 	lds	r24, 0x00EB
     8aa:	80 62       	ori	r24, 0x20	; 32
     8ac:	13 c0       	rjmp	.+38     	; 0x8d4 <USB_Device_ProcessControlRequest+0x16e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     8ae:	80 91 eb 00 	lds	r24, 0x00EB
     8b2:	80 61       	ori	r24, 0x10	; 16
     8b4:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <USB_Device_ProcessControlRequest+0x15c>
     8be:	88 0f       	add	r24, r24
     8c0:	99 1f       	adc	r25, r25
     8c2:	2a 95       	dec	r18
     8c4:	e2 f7       	brpl	.-8      	; 0x8be <USB_Device_ProcessControlRequest+0x158>
     8c6:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     8ca:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     8ce:	80 91 eb 00 	lds	r24, 0x00EB
     8d2:	88 60       	ori	r24, 0x08	; 8
     8d4:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     8d8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     8dc:	80 91 e8 00 	lds	r24, 0x00E8
     8e0:	87 7f       	andi	r24, 0xF7	; 247
     8e2:	8c c0       	rjmp	.+280    	; 0x9fc <USB_Device_ProcessControlRequest+0x296>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     8e4:	88 23       	and	r24, r24
     8e6:	09 f0       	breq	.+2      	; 0x8ea <USB_Device_ProcessControlRequest+0x184>
     8e8:	a9 c0       	rjmp	.+338    	; 0xa3c <USB_Device_ProcessControlRequest+0x2d6>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
     8ea:	10 91 81 01 	lds	r17, 0x0181
     8ee:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     8f0:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     8f2:	f8 94       	cli
     8f4:	80 91 e8 00 	lds	r24, 0x00E8
     8f8:	87 7f       	andi	r24, 0xF7	; 247
     8fa:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     8fe:	b7 dd       	rcall	.-1170   	; 0x46e <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     900:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     904:	80 ff       	sbrs	r24, 0
     906:	fc cf       	rjmp	.-8      	; 0x900 <USB_Device_ProcessControlRequest+0x19a>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
     908:	80 91 e3 00 	lds	r24, 0x00E3
     90c:	80 78       	andi	r24, 0x80	; 128
     90e:	81 2b       	or	r24, r17
     910:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR |= (1 << ADDEN);
     914:	80 91 e3 00 	lds	r24, 0x00E3
     918:	80 68       	ori	r24, 0x80	; 128
     91a:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     91e:	11 23       	and	r17, r17
     920:	11 f4       	brne	.+4      	; 0x926 <USB_Device_ProcessControlRequest+0x1c0>
     922:	82 e0       	ldi	r24, 0x02	; 2
     924:	01 c0       	rjmp	.+2      	; 0x928 <USB_Device_ProcessControlRequest+0x1c2>
     926:	83 e0       	ldi	r24, 0x03	; 3
     928:	80 93 7e 01 	sts	0x017E, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     92c:	0f bf       	out	0x3f, r16	; 63
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#endif
				
				GCC_MEMORY_BARRIER();
     92e:	86 c0       	rjmp	.+268    	; 0xa3c <USB_Device_ProcessControlRequest+0x2d6>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     930:	80 58       	subi	r24, 0x80	; 128
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	08 f0       	brcs	.+2      	; 0x938 <USB_Device_ProcessControlRequest+0x1d2>
     936:	82 c0       	rjmp	.+260    	; 0xa3c <USB_Device_ProcessControlRequest+0x2d6>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     938:	80 91 81 01 	lds	r24, 0x0181
     93c:	90 91 82 01 	lds	r25, 0x0182
     940:	23 e0       	ldi	r18, 0x03	; 3
     942:	8c 3d       	cpi	r24, 0xDC	; 220
     944:	92 07       	cpc	r25, r18
     946:	09 f0       	breq	.+2      	; 0x94a <USB_Device_ProcessControlRequest+0x1e4>
     948:	33 c0       	rjmp	.+102    	; 0x9b0 <USB_Device_ProcessControlRequest+0x24a>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     94a:	83 e0       	ldi	r24, 0x03	; 3
     94c:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     94e:	8a e2       	ldi	r24, 0x2A	; 42
     950:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     952:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     954:	f8 94       	cli
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#endif

				GCC_MEMORY_BARRIER();
     956:	de 01       	movw	r26, r28
     958:	15 96       	adiw	r26, 0x05	; 5
     95a:	6e e0       	ldi	r22, 0x0E	; 14
     95c:	40 e0       	ldi	r20, 0x00	; 0
     95e:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     960:	11 e2       	ldi	r17, 0x21	; 33
     962:	e6 2f       	mov	r30, r22
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	10 93 57 00 	sts	0x0057, r17
     96a:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
     96c:	40 ff       	sbrs	r20, 0
     96e:	03 c0       	rjmp	.+6      	; 0x976 <USB_Device_ProcessControlRequest+0x210>
					{
						SerialByte >>= 4;
     970:	82 95       	swap	r24
     972:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
     974:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     976:	8f 70       	andi	r24, 0x0F	; 15
     978:	28 2f       	mov	r18, r24
     97a:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     97c:	8a 30       	cpi	r24, 0x0A	; 10
     97e:	18 f0       	brcs	.+6      	; 0x986 <USB_Device_ProcessControlRequest+0x220>
     980:	c9 01       	movw	r24, r18
     982:	c7 96       	adiw	r24, 0x37	; 55
     984:	02 c0       	rjmp	.+4      	; 0x98a <USB_Device_ProcessControlRequest+0x224>
     986:	c9 01       	movw	r24, r18
     988:	c0 96       	adiw	r24, 0x30	; 48
     98a:	8d 93       	st	X+, r24
     98c:	9d 93       	st	X+, r25
     98e:	4f 5f       	subi	r20, 0xFF	; 255
     990:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     992:	44 31       	cpi	r20, 0x14	; 20
     994:	51 05       	cpc	r21, r1
     996:	29 f7       	brne	.-54     	; 0x962 <USB_Device_ProcessControlRequest+0x1fc>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     998:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     99a:	80 91 e8 00 	lds	r24, 0x00E8
     99e:	87 7f       	andi	r24, 0xF7	; 247
     9a0:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     9a4:	ce 01       	movw	r24, r28
     9a6:	03 96       	adiw	r24, 0x03	; 3
     9a8:	6a e2       	ldi	r22, 0x2A	; 42
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	61 d0       	rcall	.+194    	; 0xa70 <Endpoint_Write_Control_Stream_LE>
     9ae:	12 c0       	rjmp	.+36     	; 0x9d4 <USB_Device_ProcessControlRequest+0x26e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     9b0:	60 91 83 01 	lds	r22, 0x0183
     9b4:	ae 01       	movw	r20, r28
     9b6:	4f 5f       	subi	r20, 0xFF	; 255
     9b8:	5f 4f       	sbci	r21, 0xFF	; 255
     9ba:	e4 dc       	rcall	.-1592   	; 0x384 <CALLBACK_USB_GetDescriptor>
     9bc:	bc 01       	movw	r22, r24
     9be:	00 97       	sbiw	r24, 0x00	; 0
     9c0:	09 f4       	brne	.+2      	; 0x9c4 <USB_Device_ProcessControlRequest+0x25e>
     9c2:	3c c0       	rjmp	.+120    	; 0xa3c <USB_Device_ProcessControlRequest+0x2d6>
     9c4:	80 91 e8 00 	lds	r24, 0x00E8
     9c8:	87 7f       	andi	r24, 0xF7	; 247
     9ca:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     9ce:	89 81       	ldd	r24, Y+1	; 0x01
     9d0:	9a 81       	ldd	r25, Y+2	; 0x02
     9d2:	ed d0       	rcall	.+474    	; 0xbae <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     9d4:	80 91 e8 00 	lds	r24, 0x00E8
     9d8:	8b 77       	andi	r24, 0x7B	; 123
     9da:	80 93 e8 00 	sts	0x00E8, r24
     9de:	2e c0       	rjmp	.+92     	; 0xa3c <USB_Device_ProcessControlRequest+0x2d6>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     9e0:	80 38       	cpi	r24, 0x80	; 128
     9e2:	61 f5       	brne	.+88     	; 0xa3c <USB_Device_ProcessControlRequest+0x2d6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     9e4:	80 91 e8 00 	lds	r24, 0x00E8
     9e8:	87 7f       	andi	r24, 0xF7	; 247
     9ea:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_ConfigurationNumber);
     9ee:	80 91 7c 01 	lds	r24, 0x017C
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     9f2:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9f6:	80 91 e8 00 	lds	r24, 0x00E8
     9fa:	8e 77       	andi	r24, 0x7E	; 126
     9fc:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     a00:	36 dd       	rcall	.-1428   	; 0x46e <Endpoint_ClearStatusStage>
     a02:	1c c0       	rjmp	.+56     	; 0xa3c <USB_Device_ProcessControlRequest+0x2d6>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     a04:	88 23       	and	r24, r24
     a06:	d1 f4       	brne	.+52     	; 0xa3c <USB_Device_ProcessControlRequest+0x2d6>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     a08:	90 91 81 01 	lds	r25, 0x0181
     a0c:	92 30       	cpi	r25, 0x02	; 2
     a0e:	b0 f4       	brcc	.+44     	; 0xa3c <USB_Device_ProcessControlRequest+0x2d6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a10:	80 91 e8 00 	lds	r24, 0x00E8
     a14:	87 7f       	andi	r24, 0xF7	; 247
     a16:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     a1a:	90 93 7c 01 	sts	0x017C, r25

	Endpoint_ClearStatusStage();
     a1e:	27 dd       	rcall	.-1458   	; 0x46e <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
     a20:	80 91 7c 01 	lds	r24, 0x017C
     a24:	88 23       	and	r24, r24
     a26:	31 f4       	brne	.+12     	; 0xa34 <USB_Device_ProcessControlRequest+0x2ce>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     a28:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     a2c:	87 fd       	sbrc	r24, 7
     a2e:	02 c0       	rjmp	.+4      	; 0xa34 <USB_Device_ProcessControlRequest+0x2ce>
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	01 c0       	rjmp	.+2      	; 0xa36 <USB_Device_ProcessControlRequest+0x2d0>
     a34:	84 e0       	ldi	r24, 0x04	; 4
     a36:	80 93 7e 01 	sts	0x017E, r24

	EVENT_USB_Device_ConfigurationChanged();
     a3a:	1b dc       	rcall	.-1994   	; 0x272 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a3c:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     a40:	83 ff       	sbrs	r24, 3
     a42:	0a c0       	rjmp	.+20     	; 0xa58 <USB_Device_ProcessControlRequest+0x2f2>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     a44:	80 91 eb 00 	lds	r24, 0x00EB
     a48:	80 62       	ori	r24, 0x20	; 32
     a4a:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a4e:	80 91 e8 00 	lds	r24, 0x00E8
     a52:	87 7f       	andi	r24, 0xF7	; 247
     a54:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
     a58:	ac 96       	adiw	r28, 0x2c	; 44
     a5a:	0f b6       	in	r0, 0x3f	; 63
     a5c:	f8 94       	cli
     a5e:	de bf       	out	0x3e, r29	; 62
     a60:	0f be       	out	0x3f, r0	; 63
     a62:	cd bf       	out	0x3d, r28	; 61
     a64:	cf 91       	pop	r28
     a66:	df 91       	pop	r29
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	08 95       	ret

00000a6e <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     a6e:	08 95       	ret

00000a70 <Endpoint_Write_Control_Stream_LE>:
     a70:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     a72:	40 91 85 01 	lds	r20, 0x0185
     a76:	50 91 86 01 	lds	r21, 0x0186
     a7a:	46 17       	cp	r20, r22
     a7c:	57 07       	cpc	r21, r23
     a7e:	18 f4       	brcc	.+6      	; 0xa86 <Endpoint_Write_Control_Stream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     a80:	f9 01       	movw	r30, r18
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	3d c0       	rjmp	.+122    	; 0xb00 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     a86:	61 15       	cp	r22, r1
     a88:	71 05       	cpc	r23, r1
     a8a:	11 f0       	breq	.+4      	; 0xa90 <Endpoint_Write_Control_Stream_LE+0x20>
     a8c:	ab 01       	movw	r20, r22
     a8e:	f8 cf       	rjmp	.-16     	; 0xa80 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a90:	80 91 e8 00 	lds	r24, 0x00E8
     a94:	8e 77       	andi	r24, 0x7E	; 126
     a96:	80 93 e8 00 	sts	0x00E8, r24
     a9a:	40 e0       	ldi	r20, 0x00	; 0
     a9c:	50 e0       	ldi	r21, 0x00	; 0
     a9e:	f0 cf       	rjmp	.-32     	; 0xa80 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     aa0:	80 91 7e 01 	lds	r24, 0x017E

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     aa4:	88 23       	and	r24, r24
     aa6:	f1 f1       	breq	.+124    	; 0xb24 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     aa8:	85 30       	cpi	r24, 0x05	; 5
     aaa:	f1 f1       	breq	.+124    	; 0xb28 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     aac:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     ab0:	83 ff       	sbrs	r24, 3
     ab2:	02 c0       	rjmp	.+4      	; 0xab8 <Endpoint_Write_Control_Stream_LE+0x48>
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ab8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     abc:	82 fd       	sbrc	r24, 2
     abe:	2c c0       	rjmp	.+88     	; 0xb18 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ac0:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     ac4:	80 ff       	sbrs	r24, 0
     ac6:	1c c0       	rjmp	.+56     	; 0xb00 <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     ac8:	20 91 f2 00 	lds	r18, 0x00F2
     acc:	30 91 f3 00 	lds	r19, 0x00F3
     ad0:	07 c0       	rjmp	.+14     	; 0xae0 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     ad2:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ad4:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     ad8:	41 50       	subi	r20, 0x01	; 1
     ada:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     adc:	2f 5f       	subi	r18, 0xFF	; 255
     ade:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     ae0:	41 15       	cp	r20, r1
     ae2:	51 05       	cpc	r21, r1
     ae4:	19 f0       	breq	.+6      	; 0xaec <Endpoint_Write_Control_Stream_LE+0x7c>
     ae6:	28 30       	cpi	r18, 0x08	; 8
     ae8:	31 05       	cpc	r19, r1
     aea:	98 f3       	brcs	.-26     	; 0xad2 <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	28 30       	cpi	r18, 0x08	; 8
     af0:	31 05       	cpc	r19, r1
     af2:	09 f4       	brne	.+2      	; 0xaf6 <Endpoint_Write_Control_Stream_LE+0x86>
     af4:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     af6:	80 91 e8 00 	lds	r24, 0x00E8
     afa:	8e 77       	andi	r24, 0x7E	; 126
     afc:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     b00:	41 15       	cp	r20, r1
     b02:	51 05       	cpc	r21, r1
     b04:	69 f6       	brne	.-102    	; 0xaa0 <Endpoint_Write_Control_Stream_LE+0x30>
     b06:	99 23       	and	r25, r25
     b08:	59 f6       	brne	.-106    	; 0xaa0 <Endpoint_Write_Control_Stream_LE+0x30>
     b0a:	06 c0       	rjmp	.+12     	; 0xb18 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     b0c:	80 91 7e 01 	lds	r24, 0x017E

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b10:	88 23       	and	r24, r24
     b12:	41 f0       	breq	.+16     	; 0xb24 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b14:	85 30       	cpi	r24, 0x05	; 5
     b16:	41 f0       	breq	.+16     	; 0xb28 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b18:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     b1c:	82 ff       	sbrs	r24, 2
     b1e:	f6 cf       	rjmp	.-20     	; 0xb0c <Endpoint_Write_Control_Stream_LE+0x9c>
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	08 95       	ret
     b24:	82 e0       	ldi	r24, 0x02	; 2
     b26:	08 95       	ret
     b28:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     b2a:	08 95       	ret

00000b2c <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
     b2c:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     b2e:	61 15       	cp	r22, r1
     b30:	71 05       	cpc	r23, r1
     b32:	29 f4       	brne	.+10     	; 0xb3e <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     b34:	80 91 e8 00 	lds	r24, 0x00E8
     b38:	8b 77       	andi	r24, 0x7B	; 123
     b3a:	80 93 e8 00 	sts	0x00E8, r24
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     b3e:	f9 01       	movw	r30, r18
     b40:	22 c0       	rjmp	.+68     	; 0xb86 <Endpoint_Read_Control_Stream_LE+0x5a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     b42:	80 91 7e 01 	lds	r24, 0x017E

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b46:	88 23       	and	r24, r24
     b48:	71 f1       	breq	.+92     	; 0xba6 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b4a:	85 30       	cpi	r24, 0x05	; 5
     b4c:	71 f1       	breq	.+92     	; 0xbaa <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     b4e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     b52:	83 ff       	sbrs	r24, 3
     b54:	02 c0       	rjmp	.+4      	; 0xb5a <Endpoint_Read_Control_Stream_LE+0x2e>
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b5a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     b5e:	82 ff       	sbrs	r24, 2
     b60:	f0 cf       	rjmp	.-32     	; 0xb42 <Endpoint_Read_Control_Stream_LE+0x16>
     b62:	06 c0       	rjmp	.+12     	; 0xb70 <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     b64:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     b68:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     b6a:	61 50       	subi	r22, 0x01	; 1
     b6c:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     b6e:	31 f0       	breq	.+12     	; 0xb7c <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     b70:	80 91 f2 00 	lds	r24, 0x00F2
     b74:	90 91 f3 00 	lds	r25, 0x00F3
     b78:	89 2b       	or	r24, r25
     b7a:	a1 f7       	brne	.-24     	; 0xb64 <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     b7c:	80 91 e8 00 	lds	r24, 0x00E8
     b80:	8b 77       	andi	r24, 0x7B	; 123
     b82:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
     b86:	61 15       	cp	r22, r1
     b88:	71 05       	cpc	r23, r1
     b8a:	d9 f6       	brne	.-74     	; 0xb42 <Endpoint_Read_Control_Stream_LE+0x16>
     b8c:	06 c0       	rjmp	.+12     	; 0xb9a <Endpoint_Read_Control_Stream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     b8e:	80 91 7e 01 	lds	r24, 0x017E

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b92:	88 23       	and	r24, r24
     b94:	41 f0       	breq	.+16     	; 0xba6 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b96:	85 30       	cpi	r24, 0x05	; 5
     b98:	41 f0       	breq	.+16     	; 0xbaa <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b9a:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     b9e:	80 ff       	sbrs	r24, 0
     ba0:	f6 cf       	rjmp	.-20     	; 0xb8e <Endpoint_Read_Control_Stream_LE+0x62>
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	08 95       	ret
     ba6:	82 e0       	ldi	r24, 0x02	; 2
     ba8:	08 95       	ret
     baa:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     bac:	08 95       	ret

00000bae <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     bae:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     bb0:	40 91 85 01 	lds	r20, 0x0185
     bb4:	50 91 86 01 	lds	r21, 0x0186
     bb8:	46 17       	cp	r20, r22
     bba:	57 07       	cpc	r21, r23
     bbc:	18 f4       	brcc	.+6      	; 0xbc4 <Endpoint_Write_Control_PStream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     bbe:	f9 01       	movw	r30, r18
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	40 c0       	rjmp	.+128    	; 0xc44 <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     bc4:	61 15       	cp	r22, r1
     bc6:	71 05       	cpc	r23, r1
     bc8:	11 f0       	breq	.+4      	; 0xbce <Endpoint_Write_Control_PStream_LE+0x20>
     bca:	ab 01       	movw	r20, r22
     bcc:	f8 cf       	rjmp	.-16     	; 0xbbe <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     bce:	80 91 e8 00 	lds	r24, 0x00E8
     bd2:	8e 77       	andi	r24, 0x7E	; 126
     bd4:	80 93 e8 00 	sts	0x00E8, r24
     bd8:	40 e0       	ldi	r20, 0x00	; 0
     bda:	50 e0       	ldi	r21, 0x00	; 0
     bdc:	f0 cf       	rjmp	.-32     	; 0xbbe <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     bde:	80 91 7e 01 	lds	r24, 0x017E

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     be2:	88 23       	and	r24, r24
     be4:	09 f4       	brne	.+2      	; 0xbe8 <Endpoint_Write_Control_PStream_LE+0x3a>
     be6:	40 c0       	rjmp	.+128    	; 0xc68 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     be8:	85 30       	cpi	r24, 0x05	; 5
     bea:	09 f4       	brne	.+2      	; 0xbee <Endpoint_Write_Control_PStream_LE+0x40>
     bec:	3f c0       	rjmp	.+126    	; 0xc6c <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     bee:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     bf2:	83 ff       	sbrs	r24, 3
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <Endpoint_Write_Control_PStream_LE+0x4c>
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     bfa:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     bfe:	82 fd       	sbrc	r24, 2
     c00:	2d c0       	rjmp	.+90     	; 0xc5c <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c02:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     c06:	80 ff       	sbrs	r24, 0
     c08:	1d c0       	rjmp	.+58     	; 0xc44 <Endpoint_Write_Control_PStream_LE+0x96>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     c0a:	20 91 f2 00 	lds	r18, 0x00F2
     c0e:	30 91 f3 00 	lds	r19, 0x00F3
     c12:	08 c0       	rjmp	.+16     	; 0xc24 <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     c14:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c16:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     c1a:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     c1c:	41 50       	subi	r20, 0x01	; 1
     c1e:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     c20:	2f 5f       	subi	r18, 0xFF	; 255
     c22:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     c24:	41 15       	cp	r20, r1
     c26:	51 05       	cpc	r21, r1
     c28:	19 f0       	breq	.+6      	; 0xc30 <Endpoint_Write_Control_PStream_LE+0x82>
     c2a:	28 30       	cpi	r18, 0x08	; 8
     c2c:	31 05       	cpc	r19, r1
     c2e:	90 f3       	brcs	.-28     	; 0xc14 <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	28 30       	cpi	r18, 0x08	; 8
     c34:	31 05       	cpc	r19, r1
     c36:	09 f4       	brne	.+2      	; 0xc3a <Endpoint_Write_Control_PStream_LE+0x8c>
     c38:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c3a:	80 91 e8 00 	lds	r24, 0x00E8
     c3e:	8e 77       	andi	r24, 0x7E	; 126
     c40:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     c44:	41 15       	cp	r20, r1
     c46:	51 05       	cpc	r21, r1
     c48:	51 f6       	brne	.-108    	; 0xbde <Endpoint_Write_Control_PStream_LE+0x30>
     c4a:	99 23       	and	r25, r25
     c4c:	41 f6       	brne	.-112    	; 0xbde <Endpoint_Write_Control_PStream_LE+0x30>
     c4e:	06 c0       	rjmp	.+12     	; 0xc5c <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     c50:	80 91 7e 01 	lds	r24, 0x017E

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     c54:	88 23       	and	r24, r24
     c56:	41 f0       	breq	.+16     	; 0xc68 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     c58:	85 30       	cpi	r24, 0x05	; 5
     c5a:	41 f0       	breq	.+16     	; 0xc6c <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c5c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     c60:	82 ff       	sbrs	r24, 2
     c62:	f6 cf       	rjmp	.-20     	; 0xc50 <Endpoint_Write_Control_PStream_LE+0xa2>
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	08 95       	ret
     c68:	82 e0       	ldi	r24, 0x02	; 2
     c6a:	08 95       	ret
     c6c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     c6e:	08 95       	ret

00000c70 <Endpoint_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     c70:	bf 92       	push	r11
     c72:	cf 92       	push	r12
     c74:	df 92       	push	r13
     c76:	ef 92       	push	r14
     c78:	ff 92       	push	r15
     c7a:	0f 93       	push	r16
     c7c:	1f 93       	push	r17
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	18 2f       	mov	r17, r24
     c84:	09 2f       	mov	r16, r25
     c86:	7b 01       	movw	r14, r22
     c88:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     c8a:	12 dc       	rcall	.-2012   	; 0x4b0 <Endpoint_WaitUntilReady>
     c8c:	b8 2e       	mov	r11, r24
     c8e:	88 23       	and	r24, r24
     c90:	b1 f5       	brne	.+108    	; 0xcfe <Endpoint_Write_Stream_LE+0x8e>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     c92:	81 2f       	mov	r24, r17
     c94:	90 2f       	mov	r25, r16
     c96:	9c 01       	movw	r18, r24
     c98:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     c9a:	c1 14       	cp	r12, r1
     c9c:	d1 04       	cpc	r13, r1
     c9e:	39 f0       	breq	.+14     	; 0xcae <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
     ca0:	f6 01       	movw	r30, r12
     ca2:	80 81       	ld	r24, Z
     ca4:	91 81       	ldd	r25, Z+1	; 0x01
     ca6:	e8 1a       	sub	r14, r24
     ca8:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     caa:	c8 0f       	add	r28, r24
     cac:	d9 1f       	adc	r29, r25
     cae:	00 e0       	ldi	r16, 0x00	; 0
     cb0:	10 e0       	ldi	r17, 0x00	; 0
     cb2:	22 c0       	rjmp	.+68     	; 0xcf8 <Endpoint_Write_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     cb4:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     cb8:	85 fd       	sbrc	r24, 5
     cba:	16 c0       	rjmp	.+44     	; 0xce8 <Endpoint_Write_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     cbc:	80 91 e8 00 	lds	r24, 0x00E8
     cc0:	8e 77       	andi	r24, 0x7E	; 126
     cc2:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
     cc6:	c1 14       	cp	r12, r1
     cc8:	d1 04       	cpc	r13, r1
     cca:	49 f0       	breq	.+18     	; 0xcde <Endpoint_Write_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
     ccc:	f6 01       	movw	r30, r12
     cce:	80 81       	ld	r24, Z
     cd0:	91 81       	ldd	r25, Z+1	; 0x01
     cd2:	80 0f       	add	r24, r16
     cd4:	91 1f       	adc	r25, r17
     cd6:	91 83       	std	Z+1, r25	; 0x01
     cd8:	80 83       	st	Z, r24
     cda:	85 e0       	ldi	r24, 0x05	; 5
     cdc:	11 c0       	rjmp	.+34     	; 0xd00 <Endpoint_Write_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
     cde:	1a d0       	rcall	.+52     	; 0xd14 <USB_USBTask>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     ce0:	e7 db       	rcall	.-2098   	; 0x4b0 <Endpoint_WaitUntilReady>
     ce2:	88 23       	and	r24, r24
     ce4:	49 f0       	breq	.+18     	; 0xcf8 <Endpoint_Write_Stream_LE+0x88>
     ce6:	0c c0       	rjmp	.+24     	; 0xd00 <Endpoint_Write_Stream_LE+0x90>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     ce8:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     cea:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     cee:	08 94       	sec
     cf0:	e1 08       	sbc	r14, r1
     cf2:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
     cf4:	0f 5f       	subi	r16, 0xFF	; 255
     cf6:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     cf8:	e1 14       	cp	r14, r1
     cfa:	f1 04       	cpc	r15, r1
     cfc:	d9 f6       	brne	.-74     	; 0xcb4 <Endpoint_Write_Stream_LE+0x44>
     cfe:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	ff 90       	pop	r15
     d0a:	ef 90       	pop	r14
     d0c:	df 90       	pop	r13
     d0e:	cf 90       	pop	r12
     d10:	bf 90       	pop	r11
     d12:	08 95       	ret

00000d14 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     d14:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
     d16:	80 91 7e 01 	lds	r24, 0x017E
     d1a:	88 23       	and	r24, r24
     d1c:	61 f0       	breq	.+24     	; 0xd36 <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     d1e:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     d22:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d26:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
     d2a:	83 ff       	sbrs	r24, 3
     d2c:	01 c0       	rjmp	.+2      	; 0xd30 <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
     d2e:	1b dd       	rcall	.-1482   	; 0x766 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     d30:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     d32:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
     d36:	1f 91       	pop	r17
     d38:	08 95       	ret

00000d3a <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     d3a:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     d3c:	80 91 7e 01 	lds	r24, 0x017E
     d40:	84 30       	cpi	r24, 0x04	; 4
     d42:	41 f5       	brne	.+80     	; 0xd94 <CDC_Device_ReceiveByte+0x5a>
     d44:	87 85       	ldd	r24, Z+15	; 0x0f
     d46:	90 89       	ldd	r25, Z+16	; 0x10
     d48:	a1 89       	ldd	r26, Z+17	; 0x11
     d4a:	b2 89       	ldd	r27, Z+18	; 0x12
     d4c:	00 97       	sbiw	r24, 0x00	; 0
     d4e:	a1 05       	cpc	r26, r1
     d50:	b1 05       	cpc	r27, r1
     d52:	01 f1       	breq	.+64     	; 0xd94 <CDC_Device_ReceiveByte+0x5a>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
     d54:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     d56:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     d5a:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsOUTReceived())
     d5e:	82 ff       	sbrs	r24, 2
     d60:	19 c0       	rjmp	.+50     	; 0xd94 <CDC_Device_ReceiveByte+0x5a>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     d62:	80 91 f2 00 	lds	r24, 0x00F2
     d66:	90 91 f3 00 	lds	r25, 0x00F3
	{
		if (Endpoint_BytesInEndpoint())
     d6a:	89 2b       	or	r24, r25
     d6c:	19 f4       	brne	.+6      	; 0xd74 <CDC_Device_ReceiveByte+0x3a>
     d6e:	2f ef       	ldi	r18, 0xFF	; 255
     d70:	3f ef       	ldi	r19, 0xFF	; 255
     d72:	04 c0       	rjmp	.+8      	; 0xd7c <CDC_Device_ReceiveByte+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     d74:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
     d78:	28 2f       	mov	r18, r24
     d7a:	30 e0       	ldi	r19, 0x00	; 0
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     d7c:	80 91 f2 00 	lds	r24, 0x00F2
     d80:	90 91 f3 00 	lds	r25, 0x00F3

		if (!(Endpoint_BytesInEndpoint()))
     d84:	89 2b       	or	r24, r25
     d86:	41 f4       	brne	.+16     	; 0xd98 <CDC_Device_ReceiveByte+0x5e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d88:	80 91 e8 00 	lds	r24, 0x00E8
     d8c:	8b 77       	andi	r24, 0x7B	; 123
     d8e:	80 93 e8 00 	sts	0x00E8, r24
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <CDC_Device_ReceiveByte+0x5e>
     d94:	2f ef       	ldi	r18, 0xFF	; 255
     d96:	3f ef       	ldi	r19, 0xFF	; 255
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
     d98:	c9 01       	movw	r24, r18
     d9a:	08 95       	ret

00000d9c <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
     d9c:	08 95       	ret

00000d9e <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     d9e:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     da0:	80 91 7e 01 	lds	r24, 0x017E
     da4:	84 30       	cpi	r24, 0x04	; 4
     da6:	21 f5       	brne	.+72     	; 0xdf0 <CDC_Device_Flush+0x52>
     da8:	87 85       	ldd	r24, Z+15	; 0x0f
     daa:	90 89       	ldd	r25, Z+16	; 0x10
     dac:	a1 89       	ldd	r26, Z+17	; 0x11
     dae:	b2 89       	ldd	r27, Z+18	; 0x12
     db0:	00 97       	sbiw	r24, 0x00	; 0
     db2:	a1 05       	cpc	r26, r1
     db4:	b1 05       	cpc	r27, r1
     db6:	e1 f0       	breq	.+56     	; 0xdf0 <CDC_Device_Flush+0x52>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
     db8:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     dba:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     dbe:	80 91 f2 00 	lds	r24, 0x00F2
     dc2:	90 91 f3 00 	lds	r25, 0x00F3

	if (!(Endpoint_BytesInEndpoint()))
     dc6:	89 2b       	or	r24, r25
     dc8:	a9 f0       	breq	.+42     	; 0xdf4 <CDC_Device_Flush+0x56>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     dca:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     dce:	80 91 e8 00 	lds	r24, 0x00E8
     dd2:	8e 77       	andi	r24, 0x7E	; 126
     dd4:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
     dd8:	95 fd       	sbrc	r25, 5
     dda:	0c c0       	rjmp	.+24     	; 0xdf4 <CDC_Device_Flush+0x56>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     ddc:	69 db       	rcall	.-2350   	; 0x4b0 <Endpoint_WaitUntilReady>
     dde:	98 2f       	mov	r25, r24
     de0:	88 23       	and	r24, r24
     de2:	49 f4       	brne	.+18     	; 0xdf6 <CDC_Device_Flush+0x58>
     de4:	80 91 e8 00 	lds	r24, 0x00E8
     de8:	8e 77       	andi	r24, 0x7E	; 126
     dea:	80 93 e8 00 	sts	0x00E8, r24
     dee:	03 c0       	rjmp	.+6      	; 0xdf6 <CDC_Device_Flush+0x58>
     df0:	92 e0       	ldi	r25, 0x02	; 2
     df2:	01 c0       	rjmp	.+2      	; 0xdf6 <CDC_Device_Flush+0x58>
     df4:	90 e0       	ldi	r25, 0x00	; 0

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
     df6:	89 2f       	mov	r24, r25
     df8:	08 95       	ret

00000dfa <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     dfa:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     dfc:	80 91 7e 01 	lds	r24, 0x017E
     e00:	84 30       	cpi	r24, 0x04	; 4
     e02:	51 f4       	brne	.+20     	; 0xe18 <CDC_Device_USBTask+0x1e>
     e04:	87 85       	ldd	r24, Z+15	; 0x0f
     e06:	90 89       	ldd	r25, Z+16	; 0x10
     e08:	a1 89       	ldd	r26, Z+17	; 0x11
     e0a:	b2 89       	ldd	r27, Z+18	; 0x12
     e0c:	00 97       	sbiw	r24, 0x00	; 0
     e0e:	a1 05       	cpc	r26, r1
     e10:	b1 05       	cpc	r27, r1
     e12:	11 f0       	breq	.+4      	; 0xe18 <CDC_Device_USBTask+0x1e>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Device_Flush(CDCInterfaceInfo);
     e14:	cf 01       	movw	r24, r30
     e16:	c3 cf       	rjmp	.-122    	; 0xd9e <CDC_Device_Flush>
     e18:	08 95       	ret

00000e1a <CDC_Device_SendString>:
	#endif
}

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                              const char* const String)
{
     e1a:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     e1c:	80 91 7e 01 	lds	r24, 0x017E
     e20:	84 30       	cpi	r24, 0x04	; 4
     e22:	b9 f4       	brne	.+46     	; 0xe52 <CDC_Device_SendString+0x38>
     e24:	87 85       	ldd	r24, Z+15	; 0x0f
     e26:	90 89       	ldd	r25, Z+16	; 0x10
     e28:	a1 89       	ldd	r26, Z+17	; 0x11
     e2a:	b2 89       	ldd	r27, Z+18	; 0x12
     e2c:	00 97       	sbiw	r24, 0x00	; 0
     e2e:	a1 05       	cpc	r26, r1
     e30:	b1 05       	cpc	r27, r1
     e32:	79 f0       	breq	.+30     	; 0xe52 <CDC_Device_SendString+0x38>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
     e34:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     e36:	80 93 e9 00 	sts	0x00E9, r24
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
     e3a:	db 01       	movw	r26, r22
     e3c:	0d 90       	ld	r0, X+
     e3e:	00 20       	and	r0, r0
     e40:	e9 f7       	brne	.-6      	; 0xe3c <CDC_Device_SendString+0x22>
     e42:	11 97       	sbiw	r26, 0x01	; 1
     e44:	a6 1b       	sub	r26, r22
     e46:	b7 0b       	sbc	r27, r23
     e48:	cb 01       	movw	r24, r22
     e4a:	bd 01       	movw	r22, r26
     e4c:	40 e0       	ldi	r20, 0x00	; 0
     e4e:	50 e0       	ldi	r21, 0x00	; 0
     e50:	0f cf       	rjmp	.-482    	; 0xc70 <Endpoint_Write_Stream_LE>
     e52:	82 e0       	ldi	r24, 0x02	; 2
}
     e54:	08 95       	ret

00000e56 <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     e56:	1f 93       	push	r17
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
     e5c:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     e5e:	0d 96       	adiw	r24, 0x0d	; 13
     e60:	fc 01       	movw	r30, r24
     e62:	89 e0       	ldi	r24, 0x09	; 9
     e64:	df 01       	movw	r26, r30
     e66:	1d 92       	st	X+, r1
     e68:	8a 95       	dec	r24
     e6a:	e9 f7       	brne	.-6      	; 0xe66 <CDC_Device_ConfigureEndpoints+0x10>
     e6c:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == CDCInterfaceInfo->Config.DataINEndpointNumber)
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	18 17       	cp	r17, r24
     e72:	29 f4       	brne	.+10     	; 0xe7e <CDC_Device_ConfigureEndpoints+0x28>
		{
			Size         = CDCInterfaceInfo->Config.DataINEndpointSize;
     e74:	ea 81       	ldd	r30, Y+2	; 0x02
     e76:	fb 81       	ldd	r31, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataINEndpointDoubleBank;
     e78:	8c 81       	ldd	r24, Y+4	; 0x04
     e7a:	62 e0       	ldi	r22, 0x02	; 2
     e7c:	10 c0       	rjmp	.+32     	; 0xe9e <CDC_Device_ConfigureEndpoints+0x48>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.DataOUTEndpointNumber)
     e7e:	8d 81       	ldd	r24, Y+5	; 0x05
     e80:	18 17       	cp	r17, r24
     e82:	31 f4       	brne	.+12     	; 0xe90 <CDC_Device_ConfigureEndpoints+0x3a>
		{
			Size         = CDCInterfaceInfo->Config.DataOUTEndpointSize;
     e84:	ee 81       	ldd	r30, Y+6	; 0x06
     e86:	ff 81       	ldd	r31, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
     e88:	88 85       	ldd	r24, Y+8	; 0x08
     e8a:	62 e0       	ldi	r22, 0x02	; 2
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	08 c0       	rjmp	.+16     	; 0xea0 <CDC_Device_ConfigureEndpoints+0x4a>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.NotificationEndpointNumber)
     e90:	89 85       	ldd	r24, Y+9	; 0x09
     e92:	18 17       	cp	r17, r24
     e94:	09 f5       	brne	.+66     	; 0xed8 <CDC_Device_ConfigureEndpoints+0x82>
		{
			Size         = CDCInterfaceInfo->Config.NotificationEndpointSize;
     e96:	ea 85       	ldd	r30, Y+10	; 0x0a
     e98:	fb 85       	ldd	r31, Y+11	; 0x0b
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_INTERRUPT;
			DoubleBanked = CDCInterfaceInfo->Config.NotificationEndpointDoubleBank;
     e9a:	8c 85       	ldd	r24, Y+12	; 0x0c
     e9c:	63 e0       	ldi	r22, 0x03	; 3
     e9e:	31 e0       	ldi	r19, 0x01	; 1
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
     ea0:	88 23       	and	r24, r24
     ea2:	11 f4       	brne	.+4      	; 0xea8 <CDC_Device_ConfigureEndpoints+0x52>
     ea4:	40 e0       	ldi	r20, 0x00	; 0
     ea6:	01 c0       	rjmp	.+2      	; 0xeaa <CDC_Device_ConfigureEndpoints+0x54>
     ea8:	44 e0       	ldi	r20, 0x04	; 4
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	88 e0       	ldi	r24, 0x08	; 8
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	03 c0       	rjmp	.+6      	; 0xeb8 <CDC_Device_ConfigureEndpoints+0x62>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     eb2:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     eb8:	8e 17       	cp	r24, r30
     eba:	9f 07       	cpc	r25, r31
     ebc:	d0 f3       	brcs	.-12     	; 0xeb2 <CDC_Device_ConfigureEndpoints+0x5c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
     ebe:	62 95       	swap	r22
     ec0:	66 0f       	add	r22, r22
     ec2:	66 0f       	add	r22, r22
     ec4:	60 7c       	andi	r22, 0xC0	; 192
     ec6:	63 2b       	or	r22, r19
     ec8:	42 60       	ori	r20, 0x02	; 2
     eca:	22 95       	swap	r18
     ecc:	20 7f       	andi	r18, 0xF0	; 240
     ece:	42 2b       	or	r20, r18
     ed0:	81 2f       	mov	r24, r17
     ed2:	98 da       	rcall	.-2768   	; 0x404 <Endpoint_ConfigureEndpoint_Prv>
     ed4:	88 23       	and	r24, r24
     ed6:	21 f0       	breq	.+8      	; 0xee0 <CDC_Device_ConfigureEndpoints+0x8a>

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
     ed8:	1f 5f       	subi	r17, 0xFF	; 255
     eda:	17 30       	cpi	r17, 0x07	; 7
     edc:	41 f6       	brne	.-112    	; 0xe6e <CDC_Device_ConfigureEndpoints+0x18>
     ede:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	1f 91       	pop	r17
     ee6:	08 95       	ret

00000ee8 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDC.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
     eec:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     eee:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     ef2:	83 ff       	sbrs	r24, 3
     ef4:	63 c0       	rjmp	.+198    	; 0xfbc <CDC_Device_ProcessControlRequest+0xd4>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     ef6:	88 81       	ld	r24, Y
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	20 91 83 01 	lds	r18, 0x0183
     efe:	30 91 84 01 	lds	r19, 0x0184
     f02:	28 17       	cp	r18, r24
     f04:	39 07       	cpc	r19, r25
     f06:	09 f0       	breq	.+2      	; 0xf0a <CDC_Device_ProcessControlRequest+0x22>
     f08:	59 c0       	rjmp	.+178    	; 0xfbc <CDC_Device_ProcessControlRequest+0xd4>
	  return;

	switch (USB_ControlRequest.bRequest)
     f0a:	80 91 80 01 	lds	r24, 0x0180
     f0e:	81 32       	cpi	r24, 0x21	; 33
     f10:	61 f0       	breq	.+24     	; 0xf2a <CDC_Device_ProcessControlRequest+0x42>
     f12:	82 32       	cpi	r24, 0x22	; 34
     f14:	20 f4       	brcc	.+8      	; 0xf1e <CDC_Device_ProcessControlRequest+0x36>
     f16:	80 32       	cpi	r24, 0x20	; 32
     f18:	09 f0       	breq	.+2      	; 0xf1c <CDC_Device_ProcessControlRequest+0x34>
     f1a:	50 c0       	rjmp	.+160    	; 0xfbc <CDC_Device_ProcessControlRequest+0xd4>
     f1c:	1b c0       	rjmp	.+54     	; 0xf54 <CDC_Device_ProcessControlRequest+0x6c>
     f1e:	82 32       	cpi	r24, 0x22	; 34
     f20:	79 f1       	breq	.+94     	; 0xf80 <CDC_Device_ProcessControlRequest+0x98>
     f22:	83 32       	cpi	r24, 0x23	; 35
     f24:	09 f0       	breq	.+2      	; 0xf28 <CDC_Device_ProcessControlRequest+0x40>
     f26:	4a c0       	rjmp	.+148    	; 0xfbc <CDC_Device_ProcessControlRequest+0xd4>
     f28:	3b c0       	rjmp	.+118    	; 0xfa0 <CDC_Device_ProcessControlRequest+0xb8>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     f2a:	80 91 7f 01 	lds	r24, 0x017F
     f2e:	81 3a       	cpi	r24, 0xA1	; 161
     f30:	09 f0       	breq	.+2      	; 0xf34 <CDC_Device_ProcessControlRequest+0x4c>
     f32:	44 c0       	rjmp	.+136    	; 0xfbc <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f34:	80 91 e8 00 	lds	r24, 0x00E8
     f38:	87 7f       	andi	r24, 0xF7	; 247
     f3a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
     f3e:	ce 01       	movw	r24, r28
     f40:	0f 96       	adiw	r24, 0x0f	; 15
     f42:	67 e0       	ldi	r22, 0x07	; 7
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	94 dd       	rcall	.-1240   	; 0xa70 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f48:	80 91 e8 00 	lds	r24, 0x00E8
     f4c:	8b 77       	andi	r24, 0x7B	; 123
     f4e:	80 93 e8 00 	sts	0x00E8, r24
     f52:	34 c0       	rjmp	.+104    	; 0xfbc <CDC_Device_ProcessControlRequest+0xd4>
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f54:	80 91 7f 01 	lds	r24, 0x017F
     f58:	81 32       	cpi	r24, 0x21	; 33
     f5a:	81 f5       	brne	.+96     	; 0xfbc <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f5c:	80 91 e8 00 	lds	r24, 0x00E8
     f60:	87 7f       	andi	r24, 0xF7	; 247
     f62:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
     f66:	ce 01       	movw	r24, r28
     f68:	0f 96       	adiw	r24, 0x0f	; 15
     f6a:	67 e0       	ldi	r22, 0x07	; 7
     f6c:	70 e0       	ldi	r23, 0x00	; 0
     f6e:	de dd       	rcall	.-1092   	; 0xb2c <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f70:	80 91 e8 00 	lds	r24, 0x00E8
     f74:	8e 77       	andi	r24, 0x7E	; 126
     f76:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     f7a:	ce 01       	movw	r24, r28
     f7c:	0f df       	rcall	.-482    	; 0xd9c <CDC_Device_Event_Stub>
     f7e:	1e c0       	rjmp	.+60     	; 0xfbc <CDC_Device_ProcessControlRequest+0xd4>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f80:	80 91 7f 01 	lds	r24, 0x017F
     f84:	81 32       	cpi	r24, 0x21	; 33
     f86:	d1 f4       	brne	.+52     	; 0xfbc <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f88:	80 91 e8 00 	lds	r24, 0x00E8
     f8c:	87 7f       	andi	r24, 0xF7	; 247
     f8e:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     f92:	6d da       	rcall	.-2854   	; 0x46e <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     f94:	80 91 81 01 	lds	r24, 0x0181
     f98:	8d 87       	std	Y+13, r24	; 0x0d

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     f9a:	ce 01       	movw	r24, r28
     f9c:	ff de       	rcall	.-514    	; 0xd9c <CDC_Device_Event_Stub>
     f9e:	0e c0       	rjmp	.+28     	; 0xfbc <CDC_Device_ProcessControlRequest+0xd4>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     fa0:	80 91 7f 01 	lds	r24, 0x017F
     fa4:	81 32       	cpi	r24, 0x21	; 33
     fa6:	51 f4       	brne	.+20     	; 0xfbc <CDC_Device_ProcessControlRequest+0xd4>
     fa8:	80 91 e8 00 	lds	r24, 0x00E8
     fac:	87 7f       	andi	r24, 0xF7	; 247
     fae:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     fb2:	5d da       	rcall	.-2886   	; 0x46e <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     fb4:	ce 01       	movw	r24, r28
     fb6:	60 91 81 01 	lds	r22, 0x0181
     fba:	f0 de       	rcall	.-544    	; 0xd9c <CDC_Device_Event_Stub>
			}

			break;
	}
}
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	08 95       	ret

00000fc2 <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     fc2:	4f 92       	push	r4
     fc4:	5f 92       	push	r5
     fc6:	6f 92       	push	r6
     fc8:	7f 92       	push	r7
     fca:	8f 92       	push	r8
     fcc:	9f 92       	push	r9
     fce:	af 92       	push	r10
     fd0:	bf 92       	push	r11
     fd2:	cf 92       	push	r12
     fd4:	df 92       	push	r13
     fd6:	ef 92       	push	r14
     fd8:	ff 92       	push	r15
     fda:	0f 93       	push	r16
     fdc:	1f 93       	push	r17
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <HID_Device_USBTask+0x22>
     fe4:	0f 92       	push	r0
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	7c 01       	movw	r14, r24
			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);

			Endpoint_ClearIN();
		}
	}
}
     fec:	6d b6       	in	r6, 0x3d	; 61
     fee:	7e b6       	in	r7, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
     ff0:	80 91 7e 01 	lds	r24, 0x017E
     ff4:	84 30       	cpi	r24, 0x04	; 4
     ff6:	09 f0       	breq	.+2      	; 0xffa <HID_Device_USBTask+0x38>
     ff8:	85 c0       	rjmp	.+266    	; 0x1104 <HID_Device_USBTask+0x142>
	  return;

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
     ffa:	f7 01       	movw	r30, r14
     ffc:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     ffe:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1002:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsReadWriteAllowed())
    1006:	85 ff       	sbrs	r24, 5
    1008:	7d c0       	rjmp	.+250    	; 0x1104 <HID_Device_USBTask+0x142>
    100a:	5d b6       	in	r5, 0x3d	; 61
    100c:	4e b6       	in	r4, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    100e:	47 81       	ldd	r20, Z+7	; 0x07
    1010:	8d b7       	in	r24, 0x3d	; 61
    1012:	9e b7       	in	r25, 0x3e	; 62
    1014:	84 1b       	sub	r24, r20
    1016:	91 09       	sbc	r25, r1
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	9e bf       	out	0x3e, r25	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	8d bf       	out	0x3d, r24	; 61
    1022:	0d b7       	in	r16, 0x3d	; 61
    1024:	1e b7       	in	r17, 0x3e	; 62
    1026:	0f 5f       	subi	r16, 0xFF	; 255
    1028:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t  ReportID     = 0;
    102a:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
    102c:	1b 82       	std	Y+3, r1	; 0x03
    102e:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
    1030:	c0 2e       	mov	r12, r16
    1032:	91 2e       	mov	r9, r17
    1034:	c8 01       	movw	r24, r16
    1036:	60 e0       	ldi	r22, 0x00	; 0
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	50 e0       	ldi	r21, 0x00	; 0
    103c:	06 d2       	rcall	.+1036   	; 0x144a <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
    103e:	c7 01       	movw	r24, r14
    1040:	be 01       	movw	r22, r28
    1042:	6f 5f       	subi	r22, 0xFF	; 255
    1044:	7f 4f       	sbci	r23, 0xFF	; 255
    1046:	40 e0       	ldi	r20, 0x00	; 0
    1048:	98 01       	movw	r18, r16
    104a:	8e 01       	movw	r16, r28
    104c:	0e 5f       	subi	r16, 0xFE	; 254
    104e:	1f 4f       	sbci	r17, 0xFF	; 255
    1050:	d6 d8       	rcall	.-3668   	; 0x1fe <CALLBACK_HID_Device_CreateHIDReport>
    1052:	88 2e       	mov	r8, r24
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1054:	f7 01       	movw	r30, r14
    1056:	81 85       	ldd	r24, Z+9	; 0x09
    1058:	92 85       	ldd	r25, Z+10	; 0x0a
    105a:	89 2b       	or	r24, r25
    105c:	19 f4       	brne	.+6      	; 0x1064 <HID_Device_USBTask+0xa2>
    105e:	aa 24       	eor	r10, r10
    1060:	bb 24       	eor	r11, r11
    1062:	0b c0       	rjmp	.+22     	; 0x107a <HID_Device_USBTask+0xb8>
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	f7 01       	movw	r30, r14
    1068:	83 85       	ldd	r24, Z+11	; 0x0b
    106a:	94 85       	ldd	r25, Z+12	; 0x0c
    106c:	89 2b       	or	r24, r25
    106e:	09 f0       	breq	.+2      	; 0x1072 <HID_Device_USBTask+0xb0>
    1070:	21 e0       	ldi	r18, 0x01	; 1
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	28 27       	eor	r18, r24
    1076:	a2 2e       	mov	r10, r18
    1078:	bb 24       	eor	r11, r11

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    107a:	f7 01       	movw	r30, r14
    107c:	05 81       	ldd	r16, Z+5	; 0x05
    107e:	16 81       	ldd	r17, Z+6	; 0x06
    1080:	01 15       	cp	r16, r1
    1082:	11 05       	cpc	r17, r1
    1084:	11 f4       	brne	.+4      	; 0x108a <HID_Device_USBTask+0xc8>
    1086:	dd 24       	eor	r13, r13
    1088:	12 c0       	rjmp	.+36     	; 0x10ae <HID_Device_USBTask+0xec>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    108a:	4a 81       	ldd	r20, Y+2	; 0x02
    108c:	5b 81       	ldd	r21, Y+3	; 0x03
    108e:	8c 2d       	mov	r24, r12
    1090:	99 2d       	mov	r25, r9
    1092:	b8 01       	movw	r22, r16
    1094:	c4 d1       	rcall	.+904    	; 0x141e <memcmp>
    1096:	dd 24       	eor	r13, r13
    1098:	00 97       	sbiw	r24, 0x00	; 0
    109a:	11 f0       	breq	.+4      	; 0x10a0 <HID_Device_USBTask+0xde>
    109c:	dd 24       	eor	r13, r13
    109e:	d3 94       	inc	r13
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    10a0:	f7 01       	movw	r30, r14
    10a2:	47 81       	ldd	r20, Z+7	; 0x07
    10a4:	c8 01       	movw	r24, r16
    10a6:	6c 2d       	mov	r22, r12
    10a8:	79 2d       	mov	r23, r9
    10aa:	50 e0       	ldi	r21, 0x00	; 0
    10ac:	c5 d1       	rcall	.+906    	; 0x1438 <memcpy>
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	9b 81       	ldd	r25, Y+3	; 0x03
    10b2:	89 2b       	or	r24, r25
    10b4:	f9 f0       	breq	.+62     	; 0x10f4 <HID_Device_USBTask+0x132>
    10b6:	88 20       	and	r8, r8
    10b8:	21 f4       	brne	.+8      	; 0x10c2 <HID_Device_USBTask+0x100>
    10ba:	dd 20       	and	r13, r13
    10bc:	11 f4       	brne	.+4      	; 0x10c2 <HID_Device_USBTask+0x100>
    10be:	ab 28       	or	r10, r11
    10c0:	c9 f0       	breq	.+50     	; 0x10f4 <HID_Device_USBTask+0x132>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    10c2:	f7 01       	movw	r30, r14
    10c4:	81 85       	ldd	r24, Z+9	; 0x09
    10c6:	92 85       	ldd	r25, Z+10	; 0x0a
    10c8:	94 87       	std	Z+12, r25	; 0x0c
    10ca:	83 87       	std	Z+11, r24	; 0x0b

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
    10cc:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    10ce:	80 93 e9 00 	sts	0x00E9, r24

			if (ReportID)
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	88 23       	and	r24, r24
    10d6:	11 f0       	breq	.+4      	; 0x10dc <HID_Device_USBTask+0x11a>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    10d8:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    10dc:	6a 81       	ldd	r22, Y+2	; 0x02
    10de:	7b 81       	ldd	r23, Y+3	; 0x03
    10e0:	8c 2d       	mov	r24, r12
    10e2:	99 2d       	mov	r25, r9
    10e4:	40 e0       	ldi	r20, 0x00	; 0
    10e6:	50 e0       	ldi	r21, 0x00	; 0
    10e8:	c3 dd       	rcall	.-1146   	; 0xc70 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10ea:	80 91 e8 00 	lds	r24, 0x00E8
    10ee:	8e 77       	andi	r24, 0x7E	; 126
    10f0:	80 93 e8 00 	sts	0x00E8, r24
    10f4:	85 2d       	mov	r24, r5
    10f6:	94 2d       	mov	r25, r4
    10f8:	9c 01       	movw	r18, r24
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	f8 94       	cli
    10fe:	3e bf       	out	0x3e, r19	; 62
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	2d bf       	out	0x3d, r18	; 61

			Endpoint_ClearIN();
		}
	}
}
    1104:	0f b6       	in	r0, 0x3f	; 63
    1106:	f8 94       	cli
    1108:	7e be       	out	0x3e, r7	; 62
    110a:	0f be       	out	0x3f, r0	; 63
    110c:	6d be       	out	0x3d, r6	; 61
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	ff 90       	pop	r15
    111e:	ef 90       	pop	r14
    1120:	df 90       	pop	r13
    1122:	cf 90       	pop	r12
    1124:	bf 90       	pop	r11
    1126:	af 90       	pop	r10
    1128:	9f 90       	pop	r9
    112a:	8f 90       	pop	r8
    112c:	7f 90       	pop	r7
    112e:	6f 90       	pop	r6
    1130:	5f 90       	pop	r5
    1132:	4f 90       	pop	r4
    1134:	08 95       	ret

00001136 <HID_Device_ConfigureEndpoints>:
			break;
	}
}

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1136:	cf 93       	push	r28
    1138:	df 93       	push	r29
    113a:	dc 01       	movw	r26, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    113c:	08 96       	adiw	r24, 0x08	; 8
    113e:	fc 01       	movw	r30, r24
    1140:	85 e0       	ldi	r24, 0x05	; 5
    1142:	ef 01       	movw	r28, r30
    1144:	19 92       	st	Y+, r1
    1146:	8a 95       	dec	r24
    1148:	e9 f7       	brne	.-6      	; 0x1144 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	18 96       	adiw	r26, 0x08	; 8
    114e:	8c 93       	st	X, r24
    1150:	18 97       	sbiw	r26, 0x08	; 8
	HIDInterfaceInfo->State.IdleCount = 500;
    1152:	84 ef       	ldi	r24, 0xF4	; 244
    1154:	91 e0       	ldi	r25, 0x01	; 1
    1156:	1a 96       	adiw	r26, 0x0a	; 10
    1158:	9c 93       	st	X, r25
    115a:	8e 93       	st	-X, r24
    115c:	19 97       	sbiw	r26, 0x09	; 9

	if (!(Endpoint_ConfigureEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber, EP_TYPE_INTERRUPT,
    115e:	11 96       	adiw	r26, 0x01	; 1
    1160:	3c 91       	ld	r19, X
    1162:	11 97       	sbiw	r26, 0x01	; 1
    1164:	12 96       	adiw	r26, 0x02	; 2
    1166:	6d 91       	ld	r22, X+
    1168:	7c 91       	ld	r23, X
    116a:	13 97       	sbiw	r26, 0x03	; 3
    116c:	14 96       	adiw	r26, 0x04	; 4
    116e:	8c 91       	ld	r24, X
    1170:	88 23       	and	r24, r24
    1172:	11 f4       	brne	.+4      	; 0x1178 <HID_Device_ConfigureEndpoints+0x42>
    1174:	40 e0       	ldi	r20, 0x00	; 0
    1176:	01 c0       	rjmp	.+2      	; 0x117a <HID_Device_ConfigureEndpoints+0x44>
    1178:	44 e0       	ldi	r20, 0x04	; 4
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	88 e0       	ldi	r24, 0x08	; 8
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	03 c0       	rjmp	.+6      	; 0x1188 <HID_Device_ConfigureEndpoints+0x52>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    1182:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1188:	86 17       	cp	r24, r22
    118a:	97 07       	cpc	r25, r23
    118c:	d0 f3       	brcs	.-12     	; 0x1182 <HID_Device_ConfigureEndpoints+0x4c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
    118e:	42 60       	ori	r20, 0x02	; 2
    1190:	22 95       	swap	r18
    1192:	20 7f       	andi	r18, 0xF0	; 240
    1194:	42 2b       	or	r20, r18
    1196:	83 2f       	mov	r24, r19
    1198:	61 ec       	ldi	r22, 0xC1	; 193
    119a:	34 d9       	rcall	.-3480   	; 0x404 <Endpoint_ConfigureEndpoint_Prv>
    119c:	81 11       	cpse	r24, r1
    119e:	81 e0       	ldi	r24, 0x01	; 1
	{
		return false;
	}

	return true;
}
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	08 95       	ret

000011a6 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    11a6:	6f 92       	push	r6
    11a8:	7f 92       	push	r7
    11aa:	8f 92       	push	r8
    11ac:	9f 92       	push	r9
    11ae:	af 92       	push	r10
    11b0:	bf 92       	push	r11
    11b2:	cf 92       	push	r12
    11b4:	df 92       	push	r13
    11b6:	ef 92       	push	r14
    11b8:	ff 92       	push	r15
    11ba:	0f 93       	push	r16
    11bc:	1f 93       	push	r17
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	00 d0       	rcall	.+0      	; 0x11c4 <HID_Device_ProcessControlRequest+0x1e>
    11c4:	0f 92       	push	r0
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    11cc:	6d b6       	in	r6, 0x3d	; 61
    11ce:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    11d0:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    11d4:	83 ff       	sbrs	r24, 3
    11d6:	0c c1       	rjmp	.+536    	; 0x13f0 <HID_Device_ProcessControlRequest+0x24a>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    11d8:	f6 01       	movw	r30, r12
    11da:	80 81       	ld	r24, Z
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	20 91 83 01 	lds	r18, 0x0183
    11e2:	30 91 84 01 	lds	r19, 0x0184
    11e6:	28 17       	cp	r18, r24
    11e8:	39 07       	cpc	r19, r25
    11ea:	09 f0       	breq	.+2      	; 0x11ee <HID_Device_ProcessControlRequest+0x48>
    11ec:	01 c1       	rjmp	.+514    	; 0x13f0 <HID_Device_ProcessControlRequest+0x24a>
	  return;

	switch (USB_ControlRequest.bRequest)
    11ee:	80 91 80 01 	lds	r24, 0x0180
    11f2:	83 30       	cpi	r24, 0x03	; 3
    11f4:	09 f4       	brne	.+2      	; 0x11f8 <HID_Device_ProcessControlRequest+0x52>
    11f6:	ac c0       	rjmp	.+344    	; 0x1350 <HID_Device_ProcessControlRequest+0x1aa>
    11f8:	84 30       	cpi	r24, 0x04	; 4
    11fa:	30 f4       	brcc	.+12     	; 0x1208 <HID_Device_ProcessControlRequest+0x62>
    11fc:	81 30       	cpi	r24, 0x01	; 1
    11fe:	71 f0       	breq	.+28     	; 0x121c <HID_Device_ProcessControlRequest+0x76>
    1200:	82 30       	cpi	r24, 0x02	; 2
    1202:	09 f0       	breq	.+2      	; 0x1206 <HID_Device_ProcessControlRequest+0x60>
    1204:	f5 c0       	rjmp	.+490    	; 0x13f0 <HID_Device_ProcessControlRequest+0x24a>
    1206:	dc c0       	rjmp	.+440    	; 0x13c0 <HID_Device_ProcessControlRequest+0x21a>
    1208:	8a 30       	cpi	r24, 0x0A	; 10
    120a:	09 f4       	brne	.+2      	; 0x120e <HID_Device_ProcessControlRequest+0x68>
    120c:	c1 c0       	rjmp	.+386    	; 0x1390 <HID_Device_ProcessControlRequest+0x1ea>
    120e:	8b 30       	cpi	r24, 0x0B	; 11
    1210:	09 f4       	brne	.+2      	; 0x1214 <HID_Device_ProcessControlRequest+0x6e>
    1212:	ab c0       	rjmp	.+342    	; 0x136a <HID_Device_ProcessControlRequest+0x1c4>
    1214:	89 30       	cpi	r24, 0x09	; 9
    1216:	09 f0       	breq	.+2      	; 0x121a <HID_Device_ProcessControlRequest+0x74>
    1218:	eb c0       	rjmp	.+470    	; 0x13f0 <HID_Device_ProcessControlRequest+0x24a>
    121a:	56 c0       	rjmp	.+172    	; 0x12c8 <HID_Device_ProcessControlRequest+0x122>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    121c:	80 91 7f 01 	lds	r24, 0x017F
    1220:	81 3a       	cpi	r24, 0xA1	; 161
    1222:	09 f0       	breq	.+2      	; 0x1226 <HID_Device_ProcessControlRequest+0x80>
    1224:	e5 c0       	rjmp	.+458    	; 0x13f0 <HID_Device_ProcessControlRequest+0x24a>
    1226:	9d b6       	in	r9, 0x3d	; 61
    1228:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    122a:	1b 82       	std	Y+3, r1	; 0x03
    122c:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    122e:	80 91 81 01 	lds	r24, 0x0181
    1232:	10 91 82 01 	lds	r17, 0x0182
    1236:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1238:	f6 01       	movw	r30, r12
    123a:	47 81       	ldd	r20, Z+7	; 0x07
    123c:	8d b7       	in	r24, 0x3d	; 61
    123e:	9e b7       	in	r25, 0x3e	; 62
    1240:	84 1b       	sub	r24, r20
    1242:	91 09       	sbc	r25, r1
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	f8 94       	cli
    1248:	9e bf       	out	0x3e, r25	; 62
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	8d bf       	out	0x3d, r24	; 61
    124e:	ed b6       	in	r14, 0x3d	; 61
    1250:	fe b6       	in	r15, 0x3e	; 62
    1252:	08 94       	sec
    1254:	e1 1c       	adc	r14, r1
    1256:	f1 1c       	adc	r15, r1

				memset(ReportData, 0, sizeof(ReportData));
    1258:	be 2c       	mov	r11, r14
    125a:	af 2c       	mov	r10, r15
    125c:	c7 01       	movw	r24, r14
    125e:	60 e0       	ldi	r22, 0x00	; 0
    1260:	70 e0       	ldi	r23, 0x00	; 0
    1262:	50 e0       	ldi	r21, 0x00	; 0
    1264:	f2 d0       	rcall	.+484    	; 0x144a <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    1266:	11 50       	subi	r17, 0x01	; 1
    1268:	c6 01       	movw	r24, r12
    126a:	be 01       	movw	r22, r28
    126c:	6f 5f       	subi	r22, 0xFF	; 255
    126e:	7f 4f       	sbci	r23, 0xFF	; 255
    1270:	41 2f       	mov	r20, r17
    1272:	97 01       	movw	r18, r14
    1274:	8e 01       	movw	r16, r28
    1276:	0e 5f       	subi	r16, 0xFE	; 254
    1278:	1f 4f       	sbci	r17, 0xFF	; 255
    127a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    127e:	f6 01       	movw	r30, r12
    1280:	25 81       	ldd	r18, Z+5	; 0x05
    1282:	36 81       	ldd	r19, Z+6	; 0x06
    1284:	21 15       	cp	r18, r1
    1286:	31 05       	cpc	r19, r1
    1288:	29 f0       	breq	.+10     	; 0x1294 <HID_Device_ProcessControlRequest+0xee>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    128a:	47 81       	ldd	r20, Z+7	; 0x07
    128c:	c9 01       	movw	r24, r18
    128e:	b7 01       	movw	r22, r14
    1290:	50 e0       	ldi	r21, 0x00	; 0
    1292:	d2 d0       	rcall	.+420    	; 0x1438 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1294:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1298:	80 91 e8 00 	lds	r24, 0x00E8
    129c:	87 7f       	andi	r24, 0xF7	; 247
    129e:	80 93 e8 00 	sts	0x00E8, r24
				}
				
				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    12a2:	6a 81       	ldd	r22, Y+2	; 0x02
    12a4:	7b 81       	ldd	r23, Y+3	; 0x03
    12a6:	8b 2d       	mov	r24, r11
    12a8:	9a 2d       	mov	r25, r10
    12aa:	e2 db       	rcall	.-2108   	; 0xa70 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    12ac:	80 91 e8 00 	lds	r24, 0x00E8
    12b0:	8b 77       	andi	r24, 0x7B	; 123
    12b2:	80 93 e8 00 	sts	0x00E8, r24
    12b6:	29 2d       	mov	r18, r9
    12b8:	38 2d       	mov	r19, r8
    12ba:	c9 01       	movw	r24, r18
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	f8 94       	cli
    12c0:	9e bf       	out	0x3e, r25	; 62
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	8d bf       	out	0x3d, r24	; 61
    12c6:	94 c0       	rjmp	.+296    	; 0x13f0 <HID_Device_ProcessControlRequest+0x24a>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    12c8:	80 91 7f 01 	lds	r24, 0x017F
    12cc:	81 32       	cpi	r24, 0x21	; 33
    12ce:	09 f0       	breq	.+2      	; 0x12d2 <HID_Device_ProcessControlRequest+0x12c>
    12d0:	8f c0       	rjmp	.+286    	; 0x13f0 <HID_Device_ProcessControlRequest+0x24a>
    12d2:	9d b6       	in	r9, 0x3d	; 61
    12d4:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    12d6:	00 91 85 01 	lds	r16, 0x0185
    12da:	10 91 86 01 	lds	r17, 0x0186
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    12de:	a0 90 81 01 	lds	r10, 0x0181
    12e2:	b0 90 82 01 	lds	r11, 0x0182
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    12e6:	8d b7       	in	r24, 0x3d	; 61
    12e8:	9e b7       	in	r25, 0x3e	; 62
    12ea:	80 1b       	sub	r24, r16
    12ec:	91 0b       	sbc	r25, r17
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	9e bf       	out	0x3e, r25	; 62
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	8d bf       	out	0x3d, r24	; 61
    12f8:	ed b6       	in	r14, 0x3d	; 61
    12fa:	fe b6       	in	r15, 0x3e	; 62
    12fc:	08 94       	sec
    12fe:	e1 1c       	adc	r14, r1
    1300:	f1 1c       	adc	r15, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1302:	80 91 e8 00 	lds	r24, 0x00E8
    1306:	87 7f       	andi	r24, 0xF7	; 247
    1308:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    130c:	c7 01       	movw	r24, r14
    130e:	b8 01       	movw	r22, r16
    1310:	0d dc       	rcall	.-2022   	; 0xb2c <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1312:	80 91 e8 00 	lds	r24, 0x00E8
    1316:	8e 77       	andi	r24, 0x7E	; 126
    1318:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	aa 20       	and	r10, r10
    1322:	11 f0       	breq	.+4      	; 0x1328 <HID_Device_ProcessControlRequest+0x182>
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	ba 94       	dec	r11
    132a:	e8 0e       	add	r14, r24
    132c:	f9 1e       	adc	r15, r25
    132e:	08 1b       	sub	r16, r24
    1330:	19 0b       	sbc	r17, r25
    1332:	c6 01       	movw	r24, r12
    1334:	6a 2d       	mov	r22, r10
    1336:	4b 2d       	mov	r20, r11
    1338:	97 01       	movw	r18, r14
    133a:	0e 94 32 01 	call	0x264	; 0x264 <CALLBACK_HID_Device_ProcessHIDReport>
    133e:	89 2d       	mov	r24, r9
    1340:	98 2d       	mov	r25, r8
    1342:	9c 01       	movw	r18, r24
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	f8 94       	cli
    1348:	3e bf       	out	0x3e, r19	; 62
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	2d bf       	out	0x3d, r18	; 61
    134e:	50 c0       	rjmp	.+160    	; 0x13f0 <HID_Device_ProcessControlRequest+0x24a>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1350:	80 91 7f 01 	lds	r24, 0x017F
    1354:	81 3a       	cpi	r24, 0xA1	; 161
    1356:	09 f0       	breq	.+2      	; 0x135a <HID_Device_ProcessControlRequest+0x1b4>
    1358:	4b c0       	rjmp	.+150    	; 0x13f0 <HID_Device_ProcessControlRequest+0x24a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    135a:	80 91 e8 00 	lds	r24, 0x00E8
    135e:	87 7f       	andi	r24, 0xF7	; 247
    1360:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    1364:	f6 01       	movw	r30, r12
    1366:	80 85       	ldd	r24, Z+8	; 0x08
    1368:	3b c0       	rjmp	.+118    	; 0x13e0 <HID_Device_ProcessControlRequest+0x23a>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    136a:	80 91 7f 01 	lds	r24, 0x017F
    136e:	81 32       	cpi	r24, 0x21	; 33
    1370:	09 f0       	breq	.+2      	; 0x1374 <HID_Device_ProcessControlRequest+0x1ce>
    1372:	3e c0       	rjmp	.+124    	; 0x13f0 <HID_Device_ProcessControlRequest+0x24a>
    1374:	80 91 e8 00 	lds	r24, 0x00E8
    1378:	87 7f       	andi	r24, 0xF7	; 247
    137a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    137e:	77 d8       	rcall	.-3858   	; 0x46e <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	80 91 81 01 	lds	r24, 0x0181
    1386:	81 11       	cpse	r24, r1
    1388:	91 e0       	ldi	r25, 0x01	; 1
    138a:	f6 01       	movw	r30, r12
    138c:	90 87       	std	Z+8, r25	; 0x08
    138e:	30 c0       	rjmp	.+96     	; 0x13f0 <HID_Device_ProcessControlRequest+0x24a>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1390:	80 91 7f 01 	lds	r24, 0x017F
    1394:	81 32       	cpi	r24, 0x21	; 33
    1396:	61 f5       	brne	.+88     	; 0x13f0 <HID_Device_ProcessControlRequest+0x24a>
    1398:	80 91 e8 00 	lds	r24, 0x00E8
    139c:	87 7f       	andi	r24, 0xF7	; 247
    139e:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    13a2:	65 d8       	rcall	.-3894   	; 0x46e <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    13a4:	80 91 81 01 	lds	r24, 0x0181
    13a8:	90 91 82 01 	lds	r25, 0x0182
    13ac:	80 70       	andi	r24, 0x00	; 0
    13ae:	76 e0       	ldi	r23, 0x06	; 6
    13b0:	96 95       	lsr	r25
    13b2:	87 95       	ror	r24
    13b4:	7a 95       	dec	r23
    13b6:	e1 f7       	brne	.-8      	; 0x13b0 <HID_Device_ProcessControlRequest+0x20a>
    13b8:	f6 01       	movw	r30, r12
    13ba:	92 87       	std	Z+10, r25	; 0x0a
    13bc:	81 87       	std	Z+9, r24	; 0x09
    13be:	18 c0       	rjmp	.+48     	; 0x13f0 <HID_Device_ProcessControlRequest+0x24a>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    13c0:	80 91 7f 01 	lds	r24, 0x017F
    13c4:	81 3a       	cpi	r24, 0xA1	; 161
    13c6:	a1 f4       	brne	.+40     	; 0x13f0 <HID_Device_ProcessControlRequest+0x24a>
    13c8:	80 91 e8 00 	lds	r24, 0x00E8
    13cc:	87 7f       	andi	r24, 0xF7	; 247
    13ce:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    13d2:	f6 01       	movw	r30, r12
    13d4:	81 85       	ldd	r24, Z+9	; 0x09
    13d6:	92 85       	ldd	r25, Z+10	; 0x0a
    13d8:	96 95       	lsr	r25
    13da:	87 95       	ror	r24
    13dc:	96 95       	lsr	r25
    13de:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    13e0:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13e4:	80 91 e8 00 	lds	r24, 0x00E8
    13e8:	8e 77       	andi	r24, 0x7E	; 126
    13ea:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    13ee:	3f d8       	rcall	.-3970   	; 0x46e <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	f8 94       	cli
    13f4:	7e be       	out	0x3e, r7	; 62
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	6d be       	out	0x3d, r6	; 61
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	1f 91       	pop	r17
    1406:	0f 91       	pop	r16
    1408:	ff 90       	pop	r15
    140a:	ef 90       	pop	r14
    140c:	df 90       	pop	r13
    140e:	cf 90       	pop	r12
    1410:	bf 90       	pop	r11
    1412:	af 90       	pop	r10
    1414:	9f 90       	pop	r9
    1416:	8f 90       	pop	r8
    1418:	7f 90       	pop	r7
    141a:	6f 90       	pop	r6
    141c:	08 95       	ret

0000141e <memcmp>:
    141e:	fb 01       	movw	r30, r22
    1420:	dc 01       	movw	r26, r24
    1422:	04 c0       	rjmp	.+8      	; 0x142c <memcmp+0xe>
    1424:	8d 91       	ld	r24, X+
    1426:	01 90       	ld	r0, Z+
    1428:	80 19       	sub	r24, r0
    142a:	21 f4       	brne	.+8      	; 0x1434 <memcmp+0x16>
    142c:	41 50       	subi	r20, 0x01	; 1
    142e:	50 40       	sbci	r21, 0x00	; 0
    1430:	c8 f7       	brcc	.-14     	; 0x1424 <memcmp+0x6>
    1432:	88 1b       	sub	r24, r24
    1434:	99 0b       	sbc	r25, r25
    1436:	08 95       	ret

00001438 <memcpy>:
    1438:	fb 01       	movw	r30, r22
    143a:	dc 01       	movw	r26, r24
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <memcpy+0xa>
    143e:	01 90       	ld	r0, Z+
    1440:	0d 92       	st	X+, r0
    1442:	41 50       	subi	r20, 0x01	; 1
    1444:	50 40       	sbci	r21, 0x00	; 0
    1446:	d8 f7       	brcc	.-10     	; 0x143e <memcpy+0x6>
    1448:	08 95       	ret

0000144a <memset>:
    144a:	dc 01       	movw	r26, r24
    144c:	01 c0       	rjmp	.+2      	; 0x1450 <memset+0x6>
    144e:	6d 93       	st	X+, r22
    1450:	41 50       	subi	r20, 0x01	; 1
    1452:	50 40       	sbci	r21, 0x00	; 0
    1454:	e0 f7       	brcc	.-8      	; 0x144e <memset+0x4>
    1456:	08 95       	ret

00001458 <_exit>:
    1458:	f8 94       	cli

0000145a <__stop_program>:
    145a:	ff cf       	rjmp	.-2      	; 0x145a <__stop_program>
