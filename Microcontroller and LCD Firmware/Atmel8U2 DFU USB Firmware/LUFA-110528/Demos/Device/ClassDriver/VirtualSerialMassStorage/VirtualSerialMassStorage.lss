
VirtualSerialMassStorage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d6  00800100  00001dfa  00001e8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001dfa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  008001d6  008001d6  00001f64  2**0
                  ALLOC
  3 .debug_aranges 00000500  00000000  00000000  00001f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000da2  00000000  00000000  00002464  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000a2de  00000000  00000000  00003206  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002515  00000000  00000000  0000d4e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000076a1  00000000  00000000  0000f9f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000780  00000000  00000000  0001709c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000037da  00000000  00000000  0001781c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003b48  00000000  00000000  0001aff6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000006b8  00000000  00000000  0001eb3e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
 *  \param[in] BufferPtr     Pointer to the data source RAM buffer
 */
void DataflashManager_WriteBlocks_RAM(const uint32_t BlockAddress,
                                      uint16_t TotalBlocks,
                                      uint8_t* BufferPtr)
{
       0:	b2 c0       	rjmp	.+356    	; 0x166 <__ctors_end>
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       2:	00 00       	nop
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       4:	ce c0       	rjmp	.+412    	; 0x1a2 <__bad_interrupt>
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       6:	00 00       	nop
	}
	else
	{
		return 0;
	}
}
       8:	cc c0       	rjmp	.+408    	; 0x1a2 <__bad_interrupt>
       a:	00 00       	nop
       c:	ca c0       	rjmp	.+404    	; 0x1a2 <__bad_interrupt>
       e:	00 00       	nop
      10:	c8 c0       	rjmp	.+400    	; 0x1a2 <__bad_interrupt>
      12:	00 00       	nop
      14:	c6 c0       	rjmp	.+396    	; 0x1a2 <__bad_interrupt>
      16:	00 00       	nop
      18:	c4 c0       	rjmp	.+392    	; 0x1a2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c2 c0       	rjmp	.+388    	; 0x1a2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c0 c0       	rjmp	.+384    	; 0x1a2 <__bad_interrupt>
      22:	00 00       	nop
      24:	be c0       	rjmp	.+380    	; 0x1a2 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c c7       	rjmp	.+3608   	; 0xe42 <__vector_10>
      2a:	00 00       	nop
      2c:	ba c0       	rjmp	.+372    	; 0x1a2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b8 c0       	rjmp	.+368    	; 0x1a2 <__bad_interrupt>
      32:	00 00       	nop
      34:	b6 c0       	rjmp	.+364    	; 0x1a2 <__bad_interrupt>
      36:	00 00       	nop
      38:	b4 c0       	rjmp	.+360    	; 0x1a2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b2 c0       	rjmp	.+356    	; 0x1a2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b0 c0       	rjmp	.+352    	; 0x1a2 <__bad_interrupt>
      42:	00 00       	nop
      44:	ae c0       	rjmp	.+348    	; 0x1a2 <__bad_interrupt>
      46:	00 00       	nop
      48:	ac c0       	rjmp	.+344    	; 0x1a2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c0       	rjmp	.+340    	; 0x1a2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a8 c0       	rjmp	.+336    	; 0x1a2 <__bad_interrupt>
      52:	00 00       	nop
      54:	a6 c0       	rjmp	.+332    	; 0x1a2 <__bad_interrupt>
      56:	00 00       	nop
      58:	a4 c0       	rjmp	.+328    	; 0x1a2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a2 c0       	rjmp	.+324    	; 0x1a2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a0 c0       	rjmp	.+320    	; 0x1a2 <__bad_interrupt>
      62:	00 00       	nop
      64:	9e c0       	rjmp	.+316    	; 0x1a2 <__bad_interrupt>
      66:	00 00       	nop
      68:	9c c0       	rjmp	.+312    	; 0x1a2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9a c0       	rjmp	.+308    	; 0x1a2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	98 c0       	rjmp	.+304    	; 0x1a2 <__bad_interrupt>
      72:	00 00       	nop
      74:	96 c0       	rjmp	.+300    	; 0x1a2 <__bad_interrupt>
      76:	00 00       	nop
      78:	94 c0       	rjmp	.+296    	; 0x1a2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	92 c0       	rjmp	.+292    	; 0x1a2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	90 c0       	rjmp	.+288    	; 0x1a2 <__bad_interrupt>
      82:	00 00       	nop
      84:	8e c0       	rjmp	.+284    	; 0x1a2 <__bad_interrupt>
      86:	00 00       	nop
      88:	8c c0       	rjmp	.+280    	; 0x1a2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8a c0       	rjmp	.+276    	; 0x1a2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	88 c0       	rjmp	.+272    	; 0x1a2 <__bad_interrupt>
      92:	00 00       	nop
      94:	86 c0       	rjmp	.+268    	; 0x1a2 <__bad_interrupt>
      96:	00 00       	nop

00000098 <DeviceDescriptor>:
      98:	12 01 10 01 ef 02 01 08 eb 03 68 20 01 00 01 02     ..........h ....
      a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
      aa:	09 02 5d 00 03 01 00 c0 32 08 0b 00 02 02 02 01     ..].....2.......
      ba:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
      ca:	24 02 06 05 24 06 00 01 07 05 81 03 08 00 ff 09     $...$...........
      da:	04 01 00 02 0a 00 00 00 07 05 03 02 10 00 01 07     ................
      ea:	05 82 02 10 00 01 09 04 02 00 02 08 06 50 00 07     .............P..
      fa:	05 84 02 40 00 01 07 05 05 02 40 00 01              ...@......@..

00000107 <LanguageString>:
     107:	04 03 09 04                                         ....

0000010b <ManufacturerString>:
     10b:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     11b:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000125 <ProductString>:
     125:	3e 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     >.L.U.F.A. .C.D.
     135:	43 00 20 00 61 00 6e 00 64 00 20 00 4d 00 61 00     C. .a.n.d. .M.a.
     145:	73 00 73 00 20 00 53 00 74 00 6f 00 72 00 61 00     s.s. .S.t.o.r.a.
     155:	67 00 65 00 20 00 44 00 65 00 6d 00 6f 00 00 00     g.e. .D.e.m.o...
     165:	00                                                  .

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d0 e2       	ldi	r29, 0x20	; 32
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61

00000172 <__do_copy_data>:
     172:	11 e0       	ldi	r17, 0x01	; 1
     174:	a0 e0       	ldi	r26, 0x00	; 0
     176:	b1 e0       	ldi	r27, 0x01	; 1
     178:	ea ef       	ldi	r30, 0xFA	; 250
     17a:	fd e1       	ldi	r31, 0x1D	; 29
     17c:	00 e0       	ldi	r16, 0x00	; 0
     17e:	0b bf       	out	0x3b, r16	; 59
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x14>
     182:	07 90       	elpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a6 3d       	cpi	r26, 0xD6	; 214
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0x10>

0000018c <__do_clear_bss>:
     18c:	11 e0       	ldi	r17, 0x01	; 1
     18e:	a6 ed       	ldi	r26, 0xD6	; 214
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a2 3f       	cpi	r26, 0xF2	; 242
     198:	b1 07       	cpc	r27, r17
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	aa d0       	rcall	.+340    	; 0x2f2 <main>
     19e:	0c 94 fb 0e 	jmp	0x1df6	; 0x1df6 <_exit>

000001a2 <__bad_interrupt>:
     1a2:	2e cf       	rjmp	.-420    	; 0x0 <__vectors>

000001a4 <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     1a4:	8b b1       	in	r24, 0x0b	; 11
     1a6:	8f 70       	andi	r24, 0x0F	; 15
     1a8:	80 6a       	ori	r24, 0xA0	; 160
     1aa:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     1ac:	08 95       	ret

000001ae <EVENT_USB_Device_Disconnect>:
     1ae:	8b b1       	in	r24, 0x0b	; 11
     1b0:	8f 70       	andi	r24, 0x0F	; 15
     1b2:	80 61       	ori	r24, 0x10	; 16
     1b4:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     1b6:	08 95       	ret

000001b8 <CALLBACK_MS_Device_SCSICommandReceived>:
     1b8:	2b b1       	in	r18, 0x0b	; 11
     1ba:	2f 70       	andi	r18, 0x0F	; 15
     1bc:	20 62       	ori	r18, 0x20	; 32
     1be:	2b b9       	out	0x0b, r18	; 11
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
     1c0:	35 d4       	rcall	.+2154   	; 0xa2c <SCSI_DecodeSCSICommand>
     1c2:	9b b1       	in	r25, 0x0b	; 11
     1c4:	9f 70       	andi	r25, 0x0F	; 15
     1c6:	90 66       	ori	r25, 0x60	; 96
     1c8:	9b b9       	out	0x0b, r25	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);

	return CommandSuccess;
}
     1ca:	08 95       	ret

000001cc <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     1cc:	82 e5       	ldi	r24, 0x52	; 82
     1ce:	91 e0       	ldi	r25, 0x01	; 1
     1d0:	0e 94 c7 0c 	call	0x198e	; 0x198e <CDC_Device_ProcessControlRequest>
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
     1d4:	88 e6       	ldi	r24, 0x68	; 104
     1d6:	91 e0       	ldi	r25, 0x01	; 1
     1d8:	0c 94 95 0e 	jmp	0x1d2a	; 0x1d2a <MS_Device_ProcessControlRequest>

000001dc <EVENT_USB_Device_ConfigurationChanged>:
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     1dc:	0f 93       	push	r16
     1de:	1f 93       	push	r17
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     1e0:	82 e5       	ldi	r24, 0x52	; 82
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <CDC_Device_ConfigureEndpoints>
     1e8:	08 2f       	mov	r16, r24
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     1ea:	88 e6       	ldi	r24, 0x68	; 104
     1ec:	91 e0       	ldi	r25, 0x01	; 1
     1ee:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <MS_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     1f2:	10 e0       	ldi	r17, 0x00	; 0
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	08 23       	and	r16, r24
     1f8:	19 23       	and	r17, r25
     1fa:	00 ff       	sbrs	r16, 0
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <EVENT_USB_Device_ConfigurationChanged+0x26>
     1fe:	90 e6       	ldi	r25, 0x60	; 96
     200:	01 c0       	rjmp	.+2      	; 0x204 <EVENT_USB_Device_ConfigurationChanged+0x28>
     202:	90 e9       	ldi	r25, 0x90	; 144
     204:	8b b1       	in	r24, 0x0b	; 11
     206:	8f 70       	andi	r24, 0x0F	; 15
     208:	98 2b       	or	r25, r24
     20a:	9b b9       	out	0x0b, r25	; 11
}
     20c:	1f 91       	pop	r17
     20e:	0f 91       	pop	r16
     210:	08 95       	ret

00000212 <CheckJoystickMovement>:
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     212:	23 b1       	in	r18, 0x03	; 3
     214:	8c b1       	in	r24, 0x0c	; 12
     216:	80 95       	com	r24
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	80 73       	andi	r24, 0x30	; 48
     21c:	90 70       	andi	r25, 0x00	; 0
     21e:	95 95       	asr	r25
     220:	87 95       	ror	r24
     222:	20 95       	com	r18
     224:	20 7e       	andi	r18, 0xE0	; 224
     226:	28 2b       	or	r18, r24
{
	uint8_t     JoyStatus_LCL = Joystick_GetStatus();
	char*       ReportString  = NULL;
	static bool ActionSent    = false;

	if (JoyStatus_LCL & JOY_UP)
     228:	27 fd       	sbrc	r18, 7
     22a:	17 c0       	rjmp	.+46     	; 0x25a <CheckJoystickMovement+0x48>
	  ReportString = "Joystick Up\r\n";
	else if (JoyStatus_LCL & JOY_DOWN)
     22c:	24 ff       	sbrs	r18, 4
     22e:	03 c0       	rjmp	.+6      	; 0x236 <CheckJoystickMovement+0x24>
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	31 e0       	ldi	r19, 0x01	; 1
     234:	14 c0       	rjmp	.+40     	; 0x25e <CheckJoystickMovement+0x4c>
	  ReportString = "Joystick Down\r\n";
	else if (JoyStatus_LCL & JOY_LEFT)
     236:	26 ff       	sbrs	r18, 6
     238:	03 c0       	rjmp	.+6      	; 0x240 <CheckJoystickMovement+0x2e>
     23a:	20 e1       	ldi	r18, 0x10	; 16
     23c:	31 e0       	ldi	r19, 0x01	; 1
     23e:	0f c0       	rjmp	.+30     	; 0x25e <CheckJoystickMovement+0x4c>
	  ReportString = "Joystick Left\r\n";
	else if (JoyStatus_LCL & JOY_RIGHT)
     240:	23 ff       	sbrs	r18, 3
     242:	03 c0       	rjmp	.+6      	; 0x24a <CheckJoystickMovement+0x38>
     244:	20 e2       	ldi	r18, 0x20	; 32
     246:	31 e0       	ldi	r19, 0x01	; 1
     248:	0a c0       	rjmp	.+20     	; 0x25e <CheckJoystickMovement+0x4c>
	  ReportString = "Joystick Right\r\n";
	else if (JoyStatus_LCL & JOY_PRESS)
     24a:	25 ff       	sbrs	r18, 5
     24c:	03 c0       	rjmp	.+6      	; 0x254 <CheckJoystickMovement+0x42>
     24e:	21 e3       	ldi	r18, 0x31	; 49
     250:	31 e0       	ldi	r19, 0x01	; 1
     252:	05 c0       	rjmp	.+10     	; 0x25e <CheckJoystickMovement+0x4c>
	  ReportString = "Joystick Pressed\r\n";
	else
	  ActionSent = false;
     254:	10 92 d6 01 	sts	0x01D6, r1
     258:	08 95       	ret
     25a:	24 e4       	ldi	r18, 0x44	; 68
     25c:	31 e0       	ldi	r19, 0x01	; 1

	if ((ReportString != NULL) && (ActionSent == false))
     25e:	80 91 d6 01 	lds	r24, 0x01D6
     262:	88 23       	and	r24, r24
     264:	41 f4       	brne	.+16     	; 0x276 <CheckJoystickMovement+0x64>
	{
		ActionSent = true;
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	80 93 d6 01 	sts	0x01D6, r24

		/* Write the string to the virtual COM port via the created character stream */
		fputs(ReportString, &USBSerialStream);
     26c:	c9 01       	movw	r24, r18
     26e:	67 ed       	ldi	r22, 0xD7	; 215
     270:	71 e0       	ldi	r23, 0x01	; 1
     272:	0c 94 d0 0e 	jmp	0x1da0	; 0x1da0 <fputs>
     276:	08 95       	ret

00000278 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     278:	84 b7       	in	r24, 0x34	; 52
     27a:	87 7f       	andi	r24, 0xF7	; 247
     27c:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     27e:	88 e1       	ldi	r24, 0x18	; 24
     280:	0f b6       	in	r0, 0x3f	; 63
     282:	f8 94       	cli
     284:	80 93 60 00 	sts	0x0060, r24
     288:	10 92 60 00 	sts	0x0060, r1
     28c:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	20 e8       	ldi	r18, 0x80	; 128
     294:	0f b6       	in	r0, 0x3f	; 63
     296:	f8 94       	cli
     298:	20 93 61 00 	sts	0x0061, r18
     29c:	80 93 61 00 	sts	0x0061, r24
     2a0:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     2a2:	8a b1       	in	r24, 0x0a	; 10
     2a4:	80 6f       	ori	r24, 0xF0	; 240
     2a6:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     2a8:	8b b1       	in	r24, 0x0b	; 11
     2aa:	8f 70       	andi	r24, 0x0F	; 15
     2ac:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
     2ae:	84 b1       	in	r24, 0x04	; 4
     2b0:	8f 71       	andi	r24, 0x1F	; 31
     2b2:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
     2b4:	8d b1       	in	r24, 0x0d	; 13
     2b6:	8f 7c       	andi	r24, 0xCF	; 207
     2b8:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
     2ba:	85 b1       	in	r24, 0x05	; 5
     2bc:	80 6e       	ori	r24, 0xE0	; 224
     2be:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
     2c0:	8e b1       	in	r24, 0x0e	; 14
     2c2:	80 63       	ori	r24, 0x30	; 48
     2c4:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] SPIOptions  SPI Options, a mask consisting of one of each of the \c SPI_SPEED_*,
			 *                         \c SPI_SCK_*, \c SPI_SAMPLE_*, \c SPI_ORDER_* and \c SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				DDRB  |=  ((1 << 1) | (1 << 2));
     2c6:	84 b1       	in	r24, 0x04	; 4
     2c8:	86 60       	ori	r24, 0x06	; 6
     2ca:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~((1 << 0) | (1 << 3));
     2cc:	84 b1       	in	r24, 0x04	; 4
     2ce:	86 7f       	andi	r24, 0xF6	; 246
     2d0:	84 b9       	out	0x04, r24	; 4
				PORTB |=  ((1 << 0) | (1 << 3));
     2d2:	85 b1       	in	r24, 0x05	; 5
     2d4:	89 60       	ori	r24, 0x09	; 9
     2d6:	85 b9       	out	0x05, r24	; 5

				SPCR   = ((1 << SPE) | SPIOptions);
     2d8:	8c e5       	ldi	r24, 0x5C	; 92
     2da:	8c bd       	out	0x2c, r24	; 44

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     2dc:	8d b5       	in	r24, 0x2d	; 45
     2de:	81 60       	ori	r24, 0x01	; 1
     2e0:	8d bd       	out	0x2d, r24	; 45
			/** Initialises the dataflash driver so that commands and data may be sent to an attached dataflash IC.
			 *  The microcontroller's SPI driver MUST be initialized before any of the dataflash commands are used.
			 */
			static inline void Dataflash_Init(void)
			{
				DATAFLASH_CHIPCS_DDR  |= DATAFLASH_CHIPCS_MASK;
     2e2:	8d b1       	in	r24, 0x0d	; 13
     2e4:	83 60       	ori	r24, 0x03	; 3
     2e6:	8d b9       	out	0x0d, r24	; 13
				DATAFLASH_CHIPCS_PORT |= DATAFLASH_CHIPCS_MASK;
     2e8:	8e b1       	in	r24, 0x0e	; 14
     2ea:	83 60       	ori	r24, 0x03	; 3
     2ec:	8e b9       	out	0x0e, r24	; 14
	/* Hardware Initialization */
	LEDs_Init();
	Joystick_Init();
	SPI_Init(SPI_SPEED_FCPU_DIV_2 | SPI_ORDER_MSB_FIRST | SPI_SCK_LEAD_FALLING | SPI_SAMPLE_TRAILING | SPI_MODE_MASTER);
	Dataflash_Init();
	USB_Init();
     2ee:	93 d5       	rcall	.+2854   	; 0xe16 <USB_Init>

	/* Clear Dataflash sector protections, if enabled */
	DataflashManager_ResetDataflashProtections();
}
     2f0:	90 c0       	rjmp	.+288    	; 0x412 <DataflashManager_ResetDataflashProtections>

000002f2 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     2f2:	c2 df       	rcall	.-124    	; 0x278 <SetupHardware>

	/* Create a regular character stream for the interface so that it can be used with the stdio.h functions */
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
     2f4:	82 e5       	ldi	r24, 0x52	; 82
     2f6:	91 e0       	ldi	r25, 0x01	; 1
     2f8:	67 ed       	ldi	r22, 0xD7	; 215
     2fa:	71 e0       	ldi	r23, 0x01	; 1
     2fc:	0e 94 ed 0b 	call	0x17da	; 0x17da <CDC_Device_CreateStream>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     300:	8b b1       	in	r24, 0x0b	; 11
     302:	8f 70       	andi	r24, 0x0F	; 15
     304:	80 61       	ori	r24, 0x10	; 16
     306:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     308:	78 94       	sei

	for (;;)
	{
		CheckJoystickMovement();
     30a:	83 df       	rcall	.-250    	; 0x212 <CheckJoystickMovement>

		/* Must throw away unused bytes from the host, or it will lock up while waiting for the device */
		CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     30c:	82 e5       	ldi	r24, 0x52	; 82
     30e:	91 e0       	ldi	r25, 0x01	; 1
     310:	0e 94 bc 0b 	call	0x1778	; 0x1778 <CDC_Device_ReceiveByte>

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     314:	82 e5       	ldi	r24, 0x52	; 82
     316:	91 e0       	ldi	r25, 0x01	; 1
     318:	0e 94 3a 0c 	call	0x1874	; 0x1874 <CDC_Device_USBTask>
		MS_Device_USBTask(&Disk_MS_Interface);
     31c:	88 e6       	ldi	r24, 0x68	; 104
     31e:	91 e0       	ldi	r25, 0x01	; 1
     320:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <MS_Device_USBTask>
		USB_USBTask();
     324:	0e 94 a9 0b 	call	0x1752	; 0x1752 <USB_USBTask>
     328:	f0 cf       	rjmp	.-32     	; 0x30a <main+0x18>

0000032a <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     32a:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     32c:	92 30       	cpi	r25, 0x02	; 2
     32e:	49 f0       	breq	.+18     	; 0x342 <CALLBACK_USB_GetDescriptor+0x18>
     330:	93 30       	cpi	r25, 0x03	; 3
     332:	61 f0       	breq	.+24     	; 0x34c <CALLBACK_USB_GetDescriptor+0x22>
     334:	91 30       	cpi	r25, 0x01	; 1
     336:	f9 f4       	brne	.+62     	; 0x376 <CALLBACK_USB_GetDescriptor+0x4c>
     338:	e8 e9       	ldi	r30, 0x98	; 152
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	22 e1       	ldi	r18, 0x12	; 18
     33e:	30 e0       	ldi	r19, 0x00	; 0
     340:	1e c0       	rjmp	.+60     	; 0x37e <CALLBACK_USB_GetDescriptor+0x54>
     342:	ea ea       	ldi	r30, 0xAA	; 170
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	2d e5       	ldi	r18, 0x5D	; 93
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	19 c0       	rjmp	.+50     	; 0x37e <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     34c:	81 30       	cpi	r24, 0x01	; 1
     34e:	49 f0       	breq	.+18     	; 0x362 <CALLBACK_USB_GetDescriptor+0x38>
     350:	81 30       	cpi	r24, 0x01	; 1
     352:	18 f0       	brcs	.+6      	; 0x35a <CALLBACK_USB_GetDescriptor+0x30>
     354:	82 30       	cpi	r24, 0x02	; 2
     356:	79 f4       	brne	.+30     	; 0x376 <CALLBACK_USB_GetDescriptor+0x4c>
     358:	08 c0       	rjmp	.+16     	; 0x36a <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     35a:	e7 e0       	ldi	r30, 0x07	; 7
     35c:	f1 e0       	ldi	r31, 0x01	; 1
     35e:	84 91       	lpm	r24, Z+
     360:	07 c0       	rjmp	.+14     	; 0x370 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     362:	eb e0       	ldi	r30, 0x0B	; 11
     364:	f1 e0       	ldi	r31, 0x01	; 1
     366:	84 91       	lpm	r24, Z+
     368:	03 c0       	rjmp	.+6      	; 0x370 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     36a:	e5 e2       	ldi	r30, 0x25	; 37
     36c:	f1 e0       	ldi	r31, 0x01	; 1
     36e:	84 91       	lpm	r24, Z+
     370:	28 2f       	mov	r18, r24
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	04 c0       	rjmp	.+8      	; 0x37e <CALLBACK_USB_GetDescriptor+0x54>
     376:	e0 e0       	ldi	r30, 0x00	; 0
     378:	f0 e0       	ldi	r31, 0x00	; 0
     37a:	20 e0       	ldi	r18, 0x00	; 0
     37c:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     37e:	ed 93       	st	X+, r30
     380:	fc 93       	st	X, r31
	return Size;
}
     382:	c9 01       	movw	r24, r18
     384:	08 95       	ret

00000386 <Dataflash_SelectChipFromPage>:
			 *
			 *  \param[in] PageAddress  Address of the page to manipulate, ranging from
			 *                          ((DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS) - 1).
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
     386:	9c 01       	movw	r18, r24
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     388:	8e b1       	in	r24, 0x0e	; 14
     38a:	83 60       	ori	r24, 0x03	; 3
     38c:	8e b9       	out	0x0e, r24	; 14
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
				Dataflash_DeselectChip();

				if (PageAddress >= (DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS))
     38e:	80 e4       	ldi	r24, 0x40	; 64
     390:	20 30       	cpi	r18, 0x00	; 0
     392:	38 07       	cpc	r19, r24
     394:	58 f4       	brcc	.+22     	; 0x3ac <Dataflash_SelectChipFromPage+0x26>
				  return;

				if (PageAddress & 0x01)
     396:	20 ff       	sbrs	r18, 0
     398:	05 c0       	rjmp	.+10     	; 0x3a4 <Dataflash_SelectChipFromPage+0x1e>
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     39a:	8e b1       	in	r24, 0x0e	; 14
     39c:	8c 7f       	andi	r24, 0xFC	; 252
     39e:	81 60       	ori	r24, 0x01	; 1
     3a0:	8e b9       	out	0x0e, r24	; 14
     3a2:	08 95       	ret
     3a4:	8e b1       	in	r24, 0x0e	; 14
     3a6:	8c 7f       	andi	r24, 0xFC	; 252
     3a8:	82 60       	ori	r24, 0x02	; 2
     3aa:	8e b9       	out	0x0e, r24	; 14
     3ac:	08 95       	ret

000003ae <Dataflash_ToggleSelectedChipCS>:
			 *  or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     3ae:	8e b1       	in	r24, 0x0e	; 14
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     3b0:	9e b1       	in	r25, 0x0e	; 14
     3b2:	93 60       	ori	r25, 0x03	; 3
     3b4:	9e b9       	out	0x0e, r25	; 14
			{
				uint8_t SelectedChipMask = Dataflash_GetSelectedChip();

				Dataflash_DeselectChip();
				Dataflash_SelectChip(SelectedChipMask);
			}
     3b6:	9e b1       	in	r25, 0x0e	; 14
     3b8:	83 70       	andi	r24, 0x03	; 3
     3ba:	9c 7f       	andi	r25, 0xFC	; 252
     3bc:	89 2b       	or	r24, r25
     3be:	8e b9       	out	0x0e, r24	; 14
     3c0:	08 95       	ret

000003c2 <Dataflash_WaitWhileBusy>:
			/** Spin-loops while the currently selected dataflash is busy executing a command, such as a main
			 *  memory page program or main memory to buffer transfer.
			 */
			static inline void Dataflash_WaitWhileBusy(void)
			{
				Dataflash_ToggleSelectedChipCS();
     3c2:	f5 df       	rcall	.-22     	; 0x3ae <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     3c4:	87 ed       	ldi	r24, 0xD7	; 215
     3c6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     3c8:	0d b4       	in	r0, 0x2d	; 45
     3ca:	07 fe       	sbrs	r0, 7
     3cc:	fd cf       	rjmp	.-6      	; 0x3c8 <Dataflash_WaitWhileBusy+0x6>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     3ce:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     3d0:	0d b4       	in	r0, 0x2d	; 45
     3d2:	07 fe       	sbrs	r0, 7
     3d4:	fd cf       	rjmp	.-6      	; 0x3d0 <Dataflash_WaitWhileBusy+0xe>
				Dataflash_SendByte(DF_CMD_GETSTATUS);
				while (!(Dataflash_ReceiveByte() & DF_STATUS_READY));
     3d6:	0e b4       	in	r0, 0x2e	; 46
     3d8:	07 fe       	sbrs	r0, 7
     3da:	f9 cf       	rjmp	.-14     	; 0x3ce <Dataflash_WaitWhileBusy+0xc>
				Dataflash_ToggleSelectedChipCS();
			}
     3dc:	e8 cf       	rjmp	.-48     	; 0x3ae <Dataflash_ToggleSelectedChipCS>

000003de <Dataflash_SendAddressBytes>:
			 *  \param[in] BufferByte   Address within the dataflash's buffer
			 */
			static inline void Dataflash_SendAddressBytes(uint16_t PageAddress,
			                                              const uint16_t BufferByte)
			{
				PageAddress >>= 1;
     3de:	9c 01       	movw	r18, r24
     3e0:	36 95       	lsr	r19
     3e2:	27 95       	ror	r18

				Dataflash_SendByte(PageAddress >> 5);
     3e4:	36 e0       	ldi	r19, 0x06	; 6
     3e6:	96 95       	lsr	r25
     3e8:	87 95       	ror	r24
     3ea:	3a 95       	dec	r19
     3ec:	e1 f7       	brne	.-8      	; 0x3e6 <Dataflash_SendAddressBytes+0x8>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     3ee:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     3f0:	0d b4       	in	r0, 0x2d	; 45
     3f2:	07 fe       	sbrs	r0, 7
     3f4:	fd cf       	rjmp	.-6      	; 0x3f0 <Dataflash_SendAddressBytes+0x12>
				Dataflash_SendByte((PageAddress << 3) | (BufferByte >> 8));
     3f6:	82 2f       	mov	r24, r18
     3f8:	88 0f       	add	r24, r24
     3fa:	88 0f       	add	r24, r24
     3fc:	88 0f       	add	r24, r24
     3fe:	87 2b       	or	r24, r23
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     400:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     402:	0d b4       	in	r0, 0x2d	; 45
     404:	07 fe       	sbrs	r0, 7
     406:	fd cf       	rjmp	.-6      	; 0x402 <Dataflash_SendAddressBytes+0x24>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     408:	6e bd       	out	0x2e, r22	; 46
				while (!(SPSR & (1 << SPIF)));
     40a:	0d b4       	in	r0, 0x2d	; 45
     40c:	07 fe       	sbrs	r0, 7
     40e:	fd cf       	rjmp	.-6      	; 0x40a <Dataflash_SendAddressBytes+0x2c>
				Dataflash_SendByte(BufferByte);
			}
     410:	08 95       	ret

00000412 <DataflashManager_ResetDataflashProtections>:
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     412:	8e b1       	in	r24, 0x0e	; 14
     414:	8c 7f       	andi	r24, 0xFC	; 252
     416:	82 60       	ori	r24, 0x02	; 2
     418:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     41a:	87 ed       	ldi	r24, 0xD7	; 215
     41c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     41e:	0d b4       	in	r0, 0x2d	; 45
     420:	07 fe       	sbrs	r0, 7
     422:	fd cf       	rjmp	.-6      	; 0x41e <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     424:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     426:	0d b4       	in	r0, 0x2d	; 45
     428:	07 fe       	sbrs	r0, 7
     42a:	fd cf       	rjmp	.-6      	; 0x426 <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     42c:	0e b4       	in	r0, 0x2e	; 46
     42e:	01 fe       	sbrs	r0, 1
     430:	15 c0       	rjmp	.+42     	; 0x45c <DataflashManager_ResetDataflashProtections+0x4a>
	{
		Dataflash_ToggleSelectedChipCS();
     432:	bd df       	rcall	.-134    	; 0x3ae <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     434:	8d e3       	ldi	r24, 0x3D	; 61
     436:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     438:	0d b4       	in	r0, 0x2d	; 45
     43a:	07 fe       	sbrs	r0, 7
     43c:	fd cf       	rjmp	.-6      	; 0x438 <DataflashManager_ResetDataflashProtections+0x26>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     43e:	8a e2       	ldi	r24, 0x2A	; 42
     440:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     442:	0d b4       	in	r0, 0x2d	; 45
     444:	07 fe       	sbrs	r0, 7
     446:	fd cf       	rjmp	.-6      	; 0x442 <DataflashManager_ResetDataflashProtections+0x30>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     448:	8f e7       	ldi	r24, 0x7F	; 127
     44a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     44c:	0d b4       	in	r0, 0x2d	; 45
     44e:	07 fe       	sbrs	r0, 7
     450:	fd cf       	rjmp	.-6      	; 0x44c <DataflashManager_ResetDataflashProtections+0x3a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     452:	8a e9       	ldi	r24, 0x9A	; 154
     454:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     456:	0d b4       	in	r0, 0x2d	; 45
     458:	07 fe       	sbrs	r0, 7
     45a:	fd cf       	rjmp	.-6      	; 0x456 <DataflashManager_ResetDataflashProtections+0x44>
     45c:	8e b1       	in	r24, 0x0e	; 14
     45e:	8c 7f       	andi	r24, 0xFC	; 252
     460:	81 60       	ori	r24, 0x01	; 1
     462:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     464:	87 ed       	ldi	r24, 0xD7	; 215
     466:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     468:	0d b4       	in	r0, 0x2d	; 45
     46a:	07 fe       	sbrs	r0, 7
     46c:	fd cf       	rjmp	.-6      	; 0x468 <DataflashManager_ResetDataflashProtections+0x56>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     46e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     470:	0d b4       	in	r0, 0x2d	; 45
     472:	07 fe       	sbrs	r0, 7
     474:	fd cf       	rjmp	.-6      	; 0x470 <DataflashManager_ResetDataflashProtections+0x5e>
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     476:	0e b4       	in	r0, 0x2e	; 46
     478:	01 fe       	sbrs	r0, 1
     47a:	15 c0       	rjmp	.+42     	; 0x4a6 <DataflashManager_ResetDataflashProtections+0x94>
	{
		Dataflash_ToggleSelectedChipCS();
     47c:	98 df       	rcall	.-208    	; 0x3ae <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     47e:	8d e3       	ldi	r24, 0x3D	; 61
     480:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     482:	0d b4       	in	r0, 0x2d	; 45
     484:	07 fe       	sbrs	r0, 7
     486:	fd cf       	rjmp	.-6      	; 0x482 <DataflashManager_ResetDataflashProtections+0x70>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     488:	8a e2       	ldi	r24, 0x2A	; 42
     48a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     48c:	0d b4       	in	r0, 0x2d	; 45
     48e:	07 fe       	sbrs	r0, 7
     490:	fd cf       	rjmp	.-6      	; 0x48c <DataflashManager_ResetDataflashProtections+0x7a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     492:	8f e7       	ldi	r24, 0x7F	; 127
     494:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     496:	0d b4       	in	r0, 0x2d	; 45
     498:	07 fe       	sbrs	r0, 7
     49a:	fd cf       	rjmp	.-6      	; 0x496 <DataflashManager_ResetDataflashProtections+0x84>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     49c:	8a e9       	ldi	r24, 0x9A	; 154
     49e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4a0:	0d b4       	in	r0, 0x2d	; 45
     4a2:	07 fe       	sbrs	r0, 7
     4a4:	fd cf       	rjmp	.-6      	; 0x4a0 <DataflashManager_ResetDataflashProtections+0x8e>
     4a6:	8e b1       	in	r24, 0x0e	; 14
     4a8:	83 60       	ori	r24, 0x03	; 3
     4aa:	8e b9       	out	0x0e, r24	; 14
	}
	#endif

	/* Deselect current Dataflash chip */
	Dataflash_DeselectChip();
}
     4ac:	08 95       	ret

000004ae <DataflashManager_CheckDataflashOperation>:
     4ae:	8e b1       	in	r24, 0x0e	; 14
     4b0:	8c 7f       	andi	r24, 0xFC	; 252
     4b2:	82 60       	ori	r24, 0x02	; 2
     4b4:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4b6:	8f e9       	ldi	r24, 0x9F	; 159
     4b8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4ba:	0d b4       	in	r0, 0x2d	; 45
     4bc:	07 fe       	sbrs	r0, 7
     4be:	fd cf       	rjmp	.-6      	; 0x4ba <DataflashManager_CheckDataflashOperation+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     4c0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     4c2:	0d b4       	in	r0, 0x2d	; 45
     4c4:	07 fe       	sbrs	r0, 7
     4c6:	fd cf       	rjmp	.-6      	; 0x4c2 <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
     4c8:	9e b5       	in	r25, 0x2e	; 46
     4ca:	8e b1       	in	r24, 0x0e	; 14
     4cc:	83 60       	ori	r24, 0x03	; 3
     4ce:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     4d0:	9f 31       	cpi	r25, 0x1F	; 31
     4d2:	11 f0       	breq	.+4      	; 0x4d8 <DataflashManager_CheckDataflashOperation+0x2a>
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	08 95       	ret
     4d8:	8e b1       	in	r24, 0x0e	; 14
     4da:	8c 7f       	andi	r24, 0xFC	; 252
     4dc:	81 60       	ori	r24, 0x01	; 1
     4de:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4e0:	8f e9       	ldi	r24, 0x9F	; 159
     4e2:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4e4:	0d b4       	in	r0, 0x2d	; 45
     4e6:	07 fe       	sbrs	r0, 7
     4e8:	fd cf       	rjmp	.-6      	; 0x4e4 <DataflashManager_CheckDataflashOperation+0x36>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     4ea:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     4ec:	0d b4       	in	r0, 0x2d	; 45
     4ee:	07 fe       	sbrs	r0, 7
     4f0:	fd cf       	rjmp	.-6      	; 0x4ec <DataflashManager_CheckDataflashOperation+0x3e>
				return SPDR;
     4f2:	9e b5       	in	r25, 0x2e	; 46
     4f4:	8e b1       	in	r24, 0x0e	; 14
     4f6:	83 60       	ori	r24, 0x03	; 3
     4f8:	8e b9       	out	0x0e, r24	; 14
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	9f 31       	cpi	r25, 0x1F	; 31
     4fe:	09 f4       	brne	.+2      	; 0x502 <DataflashManager_CheckDataflashOperation+0x54>
     500:	81 e0       	ldi	r24, 0x01	; 1
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     502:	08 95       	ret

00000504 <DataflashManager_ReadBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to read
 */
void DataflashManager_ReadBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
     504:	af 92       	push	r10
     506:	bf 92       	push	r11
     508:	cf 92       	push	r12
     50a:	df 92       	push	r13
     50c:	ef 92       	push	r14
     50e:	ff 92       	push	r15
     510:	0f 93       	push	r16
     512:	1f 93       	push	r17
     514:	df 93       	push	r29
     516:	cf 93       	push	r28
     518:	0f 92       	push	r0
     51a:	cd b7       	in	r28, 0x3d	; 61
     51c:	de b7       	in	r29, 0x3e	; 62
     51e:	5c 01       	movw	r10, r24
     520:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     522:	e9 e0       	ldi	r30, 0x09	; 9
     524:	44 0f       	add	r20, r20
     526:	55 1f       	adc	r21, r21
     528:	66 1f       	adc	r22, r22
     52a:	77 1f       	adc	r23, r23
     52c:	ea 95       	dec	r30
     52e:	d1 f7       	brne	.-12     	; 0x524 <DataflashManager_ReadBlocks+0x20>
     530:	db 01       	movw	r26, r22
     532:	ca 01       	movw	r24, r20
     534:	3a e0       	ldi	r19, 0x0A	; 10
     536:	b6 95       	lsr	r27
     538:	a7 95       	ror	r26
     53a:	97 95       	ror	r25
     53c:	87 95       	ror	r24
     53e:	3a 95       	dec	r19
     540:	d1 f7       	brne	.-12     	; 0x536 <DataflashManager_ReadBlocks+0x32>
     542:	8c 01       	movw	r16, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     544:	2f ef       	ldi	r18, 0xFF	; 255
     546:	c2 2e       	mov	r12, r18
     548:	23 e0       	ldi	r18, 0x03	; 3
     54a:	d2 2e       	mov	r13, r18
     54c:	c4 22       	and	r12, r20
     54e:	d5 22       	and	r13, r21
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     550:	1a df       	rcall	.-460    	; 0x386 <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     552:	82 ed       	ldi	r24, 0xD2	; 210
     554:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     556:	0d b4       	in	r0, 0x2d	; 45
     558:	07 fe       	sbrs	r0, 7
     55a:	fd cf       	rjmp	.-6      	; 0x556 <DataflashManager_ReadBlocks+0x52>

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
     55c:	c8 01       	movw	r24, r16
     55e:	b6 01       	movw	r22, r12
     560:	3e df       	rcall	.-388    	; 0x3de <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     562:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     564:	0d b4       	in	r0, 0x2d	; 45
     566:	07 fe       	sbrs	r0, 7
     568:	fd cf       	rjmp	.-6      	; 0x564 <DataflashManager_ReadBlocks+0x60>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     56a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     56c:	0d b4       	in	r0, 0x2d	; 45
     56e:	07 fe       	sbrs	r0, 7
     570:	fd cf       	rjmp	.-6      	; 0x56c <DataflashManager_ReadBlocks+0x68>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     572:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     574:	0d b4       	in	r0, 0x2d	; 45
     576:	07 fe       	sbrs	r0, 7
     578:	fd cf       	rjmp	.-6      	; 0x574 <DataflashManager_ReadBlocks+0x70>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     57a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     57c:	0d b4       	in	r0, 0x2d	; 45
     57e:	07 fe       	sbrs	r0, 7
     580:	fd cf       	rjmp	.-6      	; 0x57c <DataflashManager_ReadBlocks+0x78>
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     582:	ce d3       	rcall	.+1948   	; 0xd20 <Endpoint_WaitUntilReady>
     584:	88 23       	and	r24, r24
     586:	09 f0       	breq	.+2      	; 0x58a <DataflashManager_ReadBlocks+0x86>
     588:	c5 c0       	rjmp	.+394    	; 0x714 <DataflashManager_ReadBlocks+0x210>
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     58a:	94 e0       	ldi	r25, 0x04	; 4
     58c:	d6 94       	lsr	r13
     58e:	c7 94       	ror	r12
     590:	9a 95       	dec	r25
     592:	e1 f7       	brne	.-8      	; 0x58c <DataflashManager_ReadBlocks+0x88>
     594:	9c 2d       	mov	r25, r12
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     596:	82 ed       	ldi	r24, 0xD2	; 210
     598:	c8 2e       	mov	r12, r24
     59a:	ac c0       	rjmp	.+344    	; 0x6f4 <DataflashManager_ReadBlocks+0x1f0>
     59c:	dd 24       	eor	r13, r13
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     59e:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently full */
			if (!(Endpoint_IsReadWriteAllowed()))
     5a2:	85 fd       	sbrc	r24, 5
     5a4:	0b c0       	rjmp	.+22     	; 0x5bc <DataflashManager_ReadBlocks+0xb8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5a6:	80 91 e8 00 	lds	r24, 0x00E8
     5aa:	8e 77       	andi	r24, 0x7E	; 126
     5ac:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the endpoint bank to send its contents to the host */
				Endpoint_ClearIN();

				/* Wait until the endpoint is ready for more data */
				if (Endpoint_WaitUntilReady())
     5b0:	99 83       	std	Y+1, r25	; 0x01
     5b2:	b6 d3       	rcall	.+1900   	; 0xd20 <Endpoint_WaitUntilReady>
     5b4:	99 81       	ldd	r25, Y+1	; 0x01
     5b6:	88 23       	and	r24, r24
     5b8:	09 f0       	breq	.+2      	; 0x5bc <DataflashManager_ReadBlocks+0xb8>
     5ba:	ac c0       	rjmp	.+344    	; 0x714 <DataflashManager_ReadBlocks+0x210>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     5bc:	90 34       	cpi	r25, 0x40	; 64
     5be:	e9 f4       	brne	.+58     	; 0x5fa <DataflashManager_ReadBlocks+0xf6>
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     5c0:	0f 5f       	subi	r16, 0xFF	; 255
     5c2:	1f 4f       	sbci	r17, 0xFF	; 255

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     5c4:	c8 01       	movw	r24, r16
     5c6:	df de       	rcall	.-578    	; 0x386 <Dataflash_SelectChipFromPage>
     5c8:	ce bc       	out	0x2e, r12	; 46
				while (!(SPSR & (1 << SPIF)));
     5ca:	0d b4       	in	r0, 0x2d	; 45
     5cc:	07 fe       	sbrs	r0, 7
     5ce:	fd cf       	rjmp	.-6      	; 0x5ca <DataflashManager_ReadBlocks+0xc6>

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     5d0:	c8 01       	movw	r24, r16
     5d2:	60 e0       	ldi	r22, 0x00	; 0
     5d4:	70 e0       	ldi	r23, 0x00	; 0
     5d6:	03 df       	rcall	.-506    	; 0x3de <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5d8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5da:	0d b4       	in	r0, 0x2d	; 45
     5dc:	07 fe       	sbrs	r0, 7
     5de:	fd cf       	rjmp	.-6      	; 0x5da <DataflashManager_ReadBlocks+0xd6>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5e0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5e2:	0d b4       	in	r0, 0x2d	; 45
     5e4:	07 fe       	sbrs	r0, 7
     5e6:	fd cf       	rjmp	.-6      	; 0x5e2 <DataflashManager_ReadBlocks+0xde>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5e8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5ea:	0d b4       	in	r0, 0x2d	; 45
     5ec:	07 fe       	sbrs	r0, 7
     5ee:	fd cf       	rjmp	.-6      	; 0x5ea <DataflashManager_ReadBlocks+0xe6>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5f0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5f2:	0d b4       	in	r0, 0x2d	; 45
     5f4:	07 fe       	sbrs	r0, 7
     5f6:	fd cf       	rjmp	.-6      	; 0x5f2 <DataflashManager_ReadBlocks+0xee>
     5f8:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     5fa:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5fc:	0d b4       	in	r0, 0x2d	; 45
     5fe:	07 fe       	sbrs	r0, 7
     600:	fd cf       	rjmp	.-6      	; 0x5fc <DataflashManager_ReadBlocks+0xf8>
				return SPDR;
     602:	8e b5       	in	r24, 0x2e	; 46
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     604:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     608:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     60a:	0d b4       	in	r0, 0x2d	; 45
     60c:	07 fe       	sbrs	r0, 7
     60e:	fd cf       	rjmp	.-6      	; 0x60a <DataflashManager_ReadBlocks+0x106>
				return SPDR;
     610:	8e b5       	in	r24, 0x2e	; 46
     612:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     616:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     618:	0d b4       	in	r0, 0x2d	; 45
     61a:	07 fe       	sbrs	r0, 7
     61c:	fd cf       	rjmp	.-6      	; 0x618 <DataflashManager_ReadBlocks+0x114>
				return SPDR;
     61e:	8e b5       	in	r24, 0x2e	; 46
     620:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     624:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     626:	0d b4       	in	r0, 0x2d	; 45
     628:	07 fe       	sbrs	r0, 7
     62a:	fd cf       	rjmp	.-6      	; 0x626 <DataflashManager_ReadBlocks+0x122>
				return SPDR;
     62c:	8e b5       	in	r24, 0x2e	; 46
     62e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     632:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     634:	0d b4       	in	r0, 0x2d	; 45
     636:	07 fe       	sbrs	r0, 7
     638:	fd cf       	rjmp	.-6      	; 0x634 <DataflashManager_ReadBlocks+0x130>
				return SPDR;
     63a:	8e b5       	in	r24, 0x2e	; 46
     63c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     640:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     642:	0d b4       	in	r0, 0x2d	; 45
     644:	07 fe       	sbrs	r0, 7
     646:	fd cf       	rjmp	.-6      	; 0x642 <DataflashManager_ReadBlocks+0x13e>
				return SPDR;
     648:	8e b5       	in	r24, 0x2e	; 46
     64a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     64e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     650:	0d b4       	in	r0, 0x2d	; 45
     652:	07 fe       	sbrs	r0, 7
     654:	fd cf       	rjmp	.-6      	; 0x650 <DataflashManager_ReadBlocks+0x14c>
				return SPDR;
     656:	8e b5       	in	r24, 0x2e	; 46
     658:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     65c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     65e:	0d b4       	in	r0, 0x2d	; 45
     660:	07 fe       	sbrs	r0, 7
     662:	fd cf       	rjmp	.-6      	; 0x65e <DataflashManager_ReadBlocks+0x15a>
				return SPDR;
     664:	8e b5       	in	r24, 0x2e	; 46
     666:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     66a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     66c:	0d b4       	in	r0, 0x2d	; 45
     66e:	07 fe       	sbrs	r0, 7
     670:	fd cf       	rjmp	.-6      	; 0x66c <DataflashManager_ReadBlocks+0x168>
				return SPDR;
     672:	8e b5       	in	r24, 0x2e	; 46
     674:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     678:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     67a:	0d b4       	in	r0, 0x2d	; 45
     67c:	07 fe       	sbrs	r0, 7
     67e:	fd cf       	rjmp	.-6      	; 0x67a <DataflashManager_ReadBlocks+0x176>
				return SPDR;
     680:	8e b5       	in	r24, 0x2e	; 46
     682:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     686:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     688:	0d b4       	in	r0, 0x2d	; 45
     68a:	07 fe       	sbrs	r0, 7
     68c:	fd cf       	rjmp	.-6      	; 0x688 <DataflashManager_ReadBlocks+0x184>
				return SPDR;
     68e:	8e b5       	in	r24, 0x2e	; 46
     690:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     694:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     696:	0d b4       	in	r0, 0x2d	; 45
     698:	07 fe       	sbrs	r0, 7
     69a:	fd cf       	rjmp	.-6      	; 0x696 <DataflashManager_ReadBlocks+0x192>
				return SPDR;
     69c:	8e b5       	in	r24, 0x2e	; 46
     69e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6a2:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6a4:	0d b4       	in	r0, 0x2d	; 45
     6a6:	07 fe       	sbrs	r0, 7
     6a8:	fd cf       	rjmp	.-6      	; 0x6a4 <DataflashManager_ReadBlocks+0x1a0>
				return SPDR;
     6aa:	8e b5       	in	r24, 0x2e	; 46
     6ac:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6b0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6b2:	0d b4       	in	r0, 0x2d	; 45
     6b4:	07 fe       	sbrs	r0, 7
     6b6:	fd cf       	rjmp	.-6      	; 0x6b2 <DataflashManager_ReadBlocks+0x1ae>
				return SPDR;
     6b8:	8e b5       	in	r24, 0x2e	; 46
     6ba:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6be:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6c0:	0d b4       	in	r0, 0x2d	; 45
     6c2:	07 fe       	sbrs	r0, 7
     6c4:	fd cf       	rjmp	.-6      	; 0x6c0 <DataflashManager_ReadBlocks+0x1bc>
				return SPDR;
     6c6:	8e b5       	in	r24, 0x2e	; 46
     6c8:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6cc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6ce:	0d b4       	in	r0, 0x2d	; 45
     6d0:	07 fe       	sbrs	r0, 7
     6d2:	fd cf       	rjmp	.-6      	; 0x6ce <DataflashManager_ReadBlocks+0x1ca>
				return SPDR;
     6d4:	8e b5       	in	r24, 0x2e	; 46
     6d6:	80 93 f1 00 	sts	0x00F1, r24

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     6da:	f5 01       	movw	r30, r10
     6dc:	86 a9       	ldd	r24, Z+54	; 0x36
     6de:	88 23       	and	r24, r24
     6e0:	c9 f4       	brne	.+50     	; 0x714 <DataflashManager_ReadBlocks+0x210>
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     6e2:	9f 5f       	subi	r25, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     6e4:	d3 94       	inc	r13
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     6e6:	f0 e2       	ldi	r31, 0x20	; 32
     6e8:	df 16       	cp	r13, r31
     6ea:	09 f0       	breq	.+2      	; 0x6ee <DataflashManager_ReadBlocks+0x1ea>
     6ec:	58 cf       	rjmp	.-336    	; 0x59e <DataflashManager_ReadBlocks+0x9a>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     6ee:	08 94       	sec
     6f0:	e1 08       	sbc	r14, r1
     6f2:	f1 08       	sbc	r15, r1

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     6f4:	e1 14       	cp	r14, r1
     6f6:	f1 04       	cpc	r15, r1
     6f8:	09 f0       	breq	.+2      	; 0x6fc <DataflashManager_ReadBlocks+0x1f8>
     6fa:	50 cf       	rjmp	.-352    	; 0x59c <DataflashManager_ReadBlocks+0x98>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     6fc:	80 91 e8 00 	lds	r24, 0x00E8
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     700:	85 fd       	sbrc	r24, 5
     702:	05 c0       	rjmp	.+10     	; 0x70e <DataflashManager_ReadBlocks+0x20a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     704:	80 91 e8 00 	lds	r24, 0x00E8
     708:	8e 77       	andi	r24, 0x7E	; 126
     70a:	80 93 e8 00 	sts	0x00E8, r24
     70e:	8e b1       	in	r24, 0x0e	; 14
     710:	83 60       	ori	r24, 0x03	; 3
     712:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearIN();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     714:	0f 90       	pop	r0
     716:	cf 91       	pop	r28
     718:	df 91       	pop	r29
     71a:	1f 91       	pop	r17
     71c:	0f 91       	pop	r16
     71e:	ff 90       	pop	r15
     720:	ef 90       	pop	r14
     722:	df 90       	pop	r13
     724:	cf 90       	pop	r12
     726:	bf 90       	pop	r11
     728:	af 90       	pop	r10
     72a:	08 95       	ret

0000072c <DataflashManager_WriteBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
void DataflashManager_WriteBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
     72c:	8f 92       	push	r8
     72e:	9f 92       	push	r9
     730:	af 92       	push	r10
     732:	bf 92       	push	r11
     734:	cf 92       	push	r12
     736:	df 92       	push	r13
     738:	ef 92       	push	r14
     73a:	ff 92       	push	r15
     73c:	0f 93       	push	r16
     73e:	1f 93       	push	r17
     740:	df 93       	push	r29
     742:	cf 93       	push	r28
     744:	0f 92       	push	r0
     746:	cd b7       	in	r28, 0x3d	; 61
     748:	de b7       	in	r29, 0x3e	; 62
     74a:	5c 01       	movw	r10, r24
     74c:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     74e:	09 e0       	ldi	r16, 0x09	; 9
     750:	44 0f       	add	r20, r20
     752:	55 1f       	adc	r21, r21
     754:	66 1f       	adc	r22, r22
     756:	77 1f       	adc	r23, r23
     758:	0a 95       	dec	r16
     75a:	d1 f7       	brne	.-12     	; 0x750 <DataflashManager_WriteBlocks+0x24>
     75c:	db 01       	movw	r26, r22
     75e:	ca 01       	movw	r24, r20
     760:	1a e0       	ldi	r17, 0x0A	; 10
     762:	b6 95       	lsr	r27
     764:	a7 95       	ror	r26
     766:	97 95       	ror	r25
     768:	87 95       	ror	r24
     76a:	1a 95       	dec	r17
     76c:	d1 f7       	brne	.-12     	; 0x762 <DataflashManager_WriteBlocks+0x36>
     76e:	8c 01       	movw	r16, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     770:	bf ef       	ldi	r27, 0xFF	; 255
     772:	cb 2e       	mov	r12, r27
     774:	b3 e0       	ldi	r27, 0x03	; 3
     776:	db 2e       	mov	r13, r27
     778:	c4 22       	and	r12, r20
     77a:	d5 22       	and	r13, r21
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
	bool     UsingSecondBuffer   = false;

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     77c:	04 de       	rcall	.-1016   	; 0x386 <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     77e:	83 e5       	ldi	r24, 0x53	; 83
     780:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     782:	0d b4       	in	r0, 0x2d	; 45
     784:	07 fe       	sbrs	r0, 7
     786:	fd cf       	rjmp	.-6      	; 0x782 <DataflashManager_WriteBlocks+0x56>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
	/* Copy selected dataflash's current page contents to the Dataflash buffer */
	Dataflash_SendByte(DF_CMD_MAINMEMTOBUFF1);
	Dataflash_SendAddressBytes(CurrDFPage, 0);
     788:	c8 01       	movw	r24, r16
     78a:	60 e0       	ldi	r22, 0x00	; 0
     78c:	70 e0       	ldi	r23, 0x00	; 0
     78e:	27 de       	rcall	.-946    	; 0x3de <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     790:	18 de       	rcall	.-976    	; 0x3c2 <Dataflash_WaitWhileBusy>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     792:	84 e8       	ldi	r24, 0x84	; 132
     794:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     796:	0d b4       	in	r0, 0x2d	; 45
     798:	07 fe       	sbrs	r0, 7
     79a:	fd cf       	rjmp	.-6      	; 0x796 <DataflashManager_WriteBlocks+0x6a>
#endif

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	b6 01       	movw	r22, r12
     7a2:	1d de       	rcall	.-966    	; 0x3de <Dataflash_SendAddressBytes>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     7a4:	bd d2       	rcall	.+1402   	; 0xd20 <Endpoint_WaitUntilReady>
     7a6:	88 23       	and	r24, r24
     7a8:	09 f0       	breq	.+2      	; 0x7ac <DataflashManager_WriteBlocks+0x80>
     7aa:	ea c0       	rjmp	.+468    	; 0x980 <DataflashManager_WriteBlocks+0x254>
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     7ac:	a4 e0       	ldi	r26, 0x04	; 4
     7ae:	d6 94       	lsr	r13
     7b0:	c7 94       	ror	r12
     7b2:	aa 95       	dec	r26
     7b4:	e1 f7       	brne	.-8      	; 0x7ae <DataflashManager_WriteBlocks+0x82>
     7b6:	9c 2d       	mov	r25, r12
     7b8:	47 01       	movw	r8, r14
     7ba:	f5 e0       	ldi	r31, 0x05	; 5
     7bc:	88 0c       	add	r8, r8
     7be:	99 1c       	adc	r9, r9
     7c0:	fa 95       	dec	r31
     7c2:	e1 f7       	brne	.-8      	; 0x7bc <DataflashManager_WriteBlocks+0x90>
     7c4:	dd 24       	eor	r13, r13
     7c6:	bd c0       	rjmp	.+378    	; 0x942 <DataflashManager_WriteBlocks+0x216>
     7c8:	cc 24       	eor	r12, r12
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     7ca:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently empty */
			if (!(Endpoint_IsReadWriteAllowed()))
     7ce:	85 fd       	sbrc	r24, 5
     7d0:	0b c0       	rjmp	.+22     	; 0x7e8 <DataflashManager_WriteBlocks+0xbc>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     7d2:	80 91 e8 00 	lds	r24, 0x00E8
     7d6:	8b 77       	andi	r24, 0x7B	; 123
     7d8:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the current endpoint bank */
				Endpoint_ClearOUT();

				/* Wait until the host has sent another packet */
				if (Endpoint_WaitUntilReady())
     7dc:	99 83       	std	Y+1, r25	; 0x01
     7de:	a0 d2       	rcall	.+1344   	; 0xd20 <Endpoint_WaitUntilReady>
     7e0:	99 81       	ldd	r25, Y+1	; 0x01
     7e2:	88 23       	and	r24, r24
     7e4:	09 f0       	breq	.+2      	; 0x7e8 <DataflashManager_WriteBlocks+0xbc>
     7e6:	cc c0       	rjmp	.+408    	; 0x980 <DataflashManager_WriteBlocks+0x254>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     7e8:	90 34       	cpi	r25, 0x40	; 64
     7ea:	09 f0       	breq	.+2      	; 0x7ee <DataflashManager_WriteBlocks+0xc2>
     7ec:	39 c0       	rjmp	.+114    	; 0x860 <DataflashManager_WriteBlocks+0x134>
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
     7ee:	e9 dd       	rcall	.-1070   	; 0x3c2 <Dataflash_WaitWhileBusy>
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     7f0:	dd 20       	and	r13, r13
     7f2:	11 f4       	brne	.+4      	; 0x7f8 <DataflashManager_WriteBlocks+0xcc>
     7f4:	83 e8       	ldi	r24, 0x83	; 131
     7f6:	01 c0       	rjmp	.+2      	; 0x7fa <DataflashManager_WriteBlocks+0xce>
     7f8:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7fa:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7fc:	0d b4       	in	r0, 0x2d	; 45
     7fe:	07 fe       	sbrs	r0, 7
     800:	fd cf       	rjmp	.-6      	; 0x7fc <DataflashManager_WriteBlocks+0xd0>
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     802:	c8 01       	movw	r24, r16
     804:	60 e0       	ldi	r22, 0x00	; 0
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	ea dd       	rcall	.-1068   	; 0x3de <Dataflash_SendAddressBytes>

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     80a:	0f 5f       	subi	r16, 0xFF	; 255
     80c:	1f 4f       	sbci	r17, 0xFF	; 255
			 *  or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     80e:	8e b1       	in	r24, 0x0e	; 14

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     810:	83 70       	andi	r24, 0x03	; 3
     812:	81 30       	cpi	r24, 0x01	; 1
     814:	09 f4       	brne	.+2      	; 0x818 <DataflashManager_WriteBlocks+0xec>
				  UsingSecondBuffer = !(UsingSecondBuffer);
     816:	d8 26       	eor	r13, r24

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     818:	c8 01       	movw	r24, r16
     81a:	b5 dd       	rcall	.-1174   	; 0x386 <Dataflash_SelectChipFromPage>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     81c:	20 e4       	ldi	r18, 0x40	; 64
     81e:	82 16       	cp	r8, r18
     820:	91 04       	cpc	r9, r1
     822:	78 f4       	brcc	.+30     	; 0x842 <DataflashManager_WriteBlocks+0x116>
				{
					/* Copy selected dataflash's current page contents to the Dataflash buffer */
					Dataflash_WaitWhileBusy();
     824:	ce dd       	rcall	.-1124   	; 0x3c2 <Dataflash_WaitWhileBusy>
					Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_MAINMEMTOBUFF2 : DF_CMD_MAINMEMTOBUFF1);
     826:	dd 20       	and	r13, r13
     828:	11 f4       	brne	.+4      	; 0x82e <DataflashManager_WriteBlocks+0x102>
     82a:	83 e5       	ldi	r24, 0x53	; 83
     82c:	01 c0       	rjmp	.+2      	; 0x830 <DataflashManager_WriteBlocks+0x104>
     82e:	85 e5       	ldi	r24, 0x55	; 85
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     830:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     832:	0d b4       	in	r0, 0x2d	; 45
     834:	07 fe       	sbrs	r0, 7
     836:	fd cf       	rjmp	.-6      	; 0x832 <DataflashManager_WriteBlocks+0x106>
					Dataflash_SendAddressBytes(CurrDFPage, 0);
     838:	c8 01       	movw	r24, r16
     83a:	60 e0       	ldi	r22, 0x00	; 0
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	cf dd       	rcall	.-1122   	; 0x3de <Dataflash_SendAddressBytes>
					Dataflash_WaitWhileBusy();
     840:	c0 dd       	rcall	.-1152   	; 0x3c2 <Dataflash_WaitWhileBusy>
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
     842:	dd 20       	and	r13, r13
     844:	11 f4       	brne	.+4      	; 0x84a <DataflashManager_WriteBlocks+0x11e>
     846:	84 e8       	ldi	r24, 0x84	; 132
     848:	01 c0       	rjmp	.+2      	; 0x84c <DataflashManager_WriteBlocks+0x120>
     84a:	87 e8       	ldi	r24, 0x87	; 135
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     84c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     84e:	0d b4       	in	r0, 0x2d	; 45
     850:	07 fe       	sbrs	r0, 7
     852:	fd cf       	rjmp	.-6      	; 0x84e <DataflashManager_WriteBlocks+0x122>
				Dataflash_SendAddressBytes(0, 0);
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	60 e0       	ldi	r22, 0x00	; 0
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	c0 dd       	rcall	.-1152   	; 0x3de <Dataflash_SendAddressBytes>
     85e:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     860:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     864:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     866:	0d b4       	in	r0, 0x2d	; 45
     868:	07 fe       	sbrs	r0, 7
     86a:	fd cf       	rjmp	.-6      	; 0x866 <DataflashManager_WriteBlocks+0x13a>
     86c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     870:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     872:	0d b4       	in	r0, 0x2d	; 45
     874:	07 fe       	sbrs	r0, 7
     876:	fd cf       	rjmp	.-6      	; 0x872 <DataflashManager_WriteBlocks+0x146>
     878:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     87c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     87e:	0d b4       	in	r0, 0x2d	; 45
     880:	07 fe       	sbrs	r0, 7
     882:	fd cf       	rjmp	.-6      	; 0x87e <DataflashManager_WriteBlocks+0x152>
     884:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     888:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     88a:	0d b4       	in	r0, 0x2d	; 45
     88c:	07 fe       	sbrs	r0, 7
     88e:	fd cf       	rjmp	.-6      	; 0x88a <DataflashManager_WriteBlocks+0x15e>
     890:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     894:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     896:	0d b4       	in	r0, 0x2d	; 45
     898:	07 fe       	sbrs	r0, 7
     89a:	fd cf       	rjmp	.-6      	; 0x896 <DataflashManager_WriteBlocks+0x16a>
     89c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8a0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8a2:	0d b4       	in	r0, 0x2d	; 45
     8a4:	07 fe       	sbrs	r0, 7
     8a6:	fd cf       	rjmp	.-6      	; 0x8a2 <DataflashManager_WriteBlocks+0x176>
     8a8:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8ac:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8ae:	0d b4       	in	r0, 0x2d	; 45
     8b0:	07 fe       	sbrs	r0, 7
     8b2:	fd cf       	rjmp	.-6      	; 0x8ae <DataflashManager_WriteBlocks+0x182>
     8b4:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8b8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8ba:	0d b4       	in	r0, 0x2d	; 45
     8bc:	07 fe       	sbrs	r0, 7
     8be:	fd cf       	rjmp	.-6      	; 0x8ba <DataflashManager_WriteBlocks+0x18e>
     8c0:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8c4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8c6:	0d b4       	in	r0, 0x2d	; 45
     8c8:	07 fe       	sbrs	r0, 7
     8ca:	fd cf       	rjmp	.-6      	; 0x8c6 <DataflashManager_WriteBlocks+0x19a>
     8cc:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8d0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8d2:	0d b4       	in	r0, 0x2d	; 45
     8d4:	07 fe       	sbrs	r0, 7
     8d6:	fd cf       	rjmp	.-6      	; 0x8d2 <DataflashManager_WriteBlocks+0x1a6>
     8d8:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8dc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8de:	0d b4       	in	r0, 0x2d	; 45
     8e0:	07 fe       	sbrs	r0, 7
     8e2:	fd cf       	rjmp	.-6      	; 0x8de <DataflashManager_WriteBlocks+0x1b2>
     8e4:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8e8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8ea:	0d b4       	in	r0, 0x2d	; 45
     8ec:	07 fe       	sbrs	r0, 7
     8ee:	fd cf       	rjmp	.-6      	; 0x8ea <DataflashManager_WriteBlocks+0x1be>
     8f0:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8f4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8f6:	0d b4       	in	r0, 0x2d	; 45
     8f8:	07 fe       	sbrs	r0, 7
     8fa:	fd cf       	rjmp	.-6      	; 0x8f6 <DataflashManager_WriteBlocks+0x1ca>
     8fc:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     900:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     902:	0d b4       	in	r0, 0x2d	; 45
     904:	07 fe       	sbrs	r0, 7
     906:	fd cf       	rjmp	.-6      	; 0x902 <DataflashManager_WriteBlocks+0x1d6>
     908:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     90c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     90e:	0d b4       	in	r0, 0x2d	; 45
     910:	07 fe       	sbrs	r0, 7
     912:	fd cf       	rjmp	.-6      	; 0x90e <DataflashManager_WriteBlocks+0x1e2>
     914:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     918:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     91a:	0d b4       	in	r0, 0x2d	; 45
     91c:	07 fe       	sbrs	r0, 7
     91e:	fd cf       	rjmp	.-6      	; 0x91a <DataflashManager_WriteBlocks+0x1ee>

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     920:	f5 01       	movw	r30, r10
     922:	86 a9       	ldd	r24, Z+54	; 0x36
     924:	88 23       	and	r24, r24
     926:	61 f5       	brne	.+88     	; 0x980 <DataflashManager_WriteBlocks+0x254>
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     928:	9f 5f       	subi	r25, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     92a:	c3 94       	inc	r12
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     92c:	f0 e2       	ldi	r31, 0x20	; 32
     92e:	cf 16       	cp	r12, r31
     930:	09 f0       	breq	.+2      	; 0x934 <DataflashManager_WriteBlocks+0x208>
     932:	4b cf       	rjmp	.-362    	; 0x7ca <DataflashManager_WriteBlocks+0x9e>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter and reset the sub block counter */
		TotalBlocks--;
     934:	08 94       	sec
     936:	e1 08       	sbc	r14, r1
     938:	f1 08       	sbc	r15, r1
     93a:	20 ee       	ldi	r18, 0xE0	; 224
     93c:	3f ef       	ldi	r19, 0xFF	; 255
     93e:	82 0e       	add	r8, r18
     940:	93 1e       	adc	r9, r19

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     942:	e1 14       	cp	r14, r1
     944:	f1 04       	cpc	r15, r1
     946:	09 f0       	breq	.+2      	; 0x94a <DataflashManager_WriteBlocks+0x21e>
     948:	3f cf       	rjmp	.-386    	; 0x7c8 <DataflashManager_WriteBlocks+0x9c>
		/* Decrement the blocks remaining counter and reset the sub block counter */
		TotalBlocks--;
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
     94a:	3b dd       	rcall	.-1418   	; 0x3c2 <Dataflash_WaitWhileBusy>
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     94c:	dd 20       	and	r13, r13
     94e:	11 f4       	brne	.+4      	; 0x954 <DataflashManager_WriteBlocks+0x228>
     950:	83 e8       	ldi	r24, 0x83	; 131
     952:	01 c0       	rjmp	.+2      	; 0x956 <DataflashManager_WriteBlocks+0x22a>
     954:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     956:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     958:	0d b4       	in	r0, 0x2d	; 45
     95a:	07 fe       	sbrs	r0, 7
     95c:	fd cf       	rjmp	.-6      	; 0x958 <DataflashManager_WriteBlocks+0x22c>
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
     95e:	c8 01       	movw	r24, r16
     960:	60 e0       	ldi	r22, 0x00	; 0
     962:	70 e0       	ldi	r23, 0x00	; 0
     964:	3c dd       	rcall	.-1416   	; 0x3de <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     966:	2d dd       	rcall	.-1446   	; 0x3c2 <Dataflash_WaitWhileBusy>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     968:	80 91 e8 00 	lds	r24, 0x00E8

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     96c:	85 fd       	sbrc	r24, 5
     96e:	05 c0       	rjmp	.+10     	; 0x97a <DataflashManager_WriteBlocks+0x24e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     970:	80 91 e8 00 	lds	r24, 0x00E8
     974:	8b 77       	andi	r24, 0x7B	; 123
     976:	80 93 e8 00 	sts	0x00E8, r24
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     97a:	8e b1       	in	r24, 0x0e	; 14
     97c:	83 60       	ori	r24, 0x03	; 3
     97e:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearOUT();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     980:	0f 90       	pop	r0
     982:	cf 91       	pop	r28
     984:	df 91       	pop	r29
     986:	1f 91       	pop	r17
     988:	0f 91       	pop	r16
     98a:	ff 90       	pop	r15
     98c:	ef 90       	pop	r14
     98e:	df 90       	pop	r13
     990:	cf 90       	pop	r12
     992:	bf 90       	pop	r11
     994:	af 90       	pop	r10
     996:	9f 90       	pop	r9
     998:	8f 90       	pop	r8
     99a:	08 95       	ret

0000099c <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
     99c:	0f 93       	push	r16
     99e:	1f 93       	push	r17
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	8c 01       	movw	r16, r24
     9a6:	86 2f       	mov	r24, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     9a8:	f8 01       	movw	r30, r16
     9aa:	46 8d       	ldd	r20, Z+30	; 0x1e
     9ac:	55 8d       	ldd	r21, Z+29	; 0x1d
     9ae:	64 8d       	ldd	r22, Z+28	; 0x1c
     9b0:	73 8d       	ldd	r23, Z+27	; 0x1b

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     9b2:	c1 a1       	ldd	r28, Z+33	; 0x21
     9b4:	d0 a1       	ldd	r29, Z+32	; 0x20

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     9b6:	40 30       	cpi	r20, 0x00	; 0
     9b8:	f0 e8       	ldi	r31, 0x80	; 128
     9ba:	5f 07       	cpc	r21, r31
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	6f 07       	cpc	r22, r31
     9c0:	f0 e0       	ldi	r31, 0x00	; 0
     9c2:	7f 07       	cpc	r23, r31
     9c4:	68 f0       	brcs	.+26     	; 0x9e0 <SCSI_Command_ReadWrite_10+0x44>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     9c6:	80 91 a1 01 	lds	r24, 0x01A1
     9ca:	80 7f       	andi	r24, 0xF0	; 240
     9cc:	85 60       	ori	r24, 0x05	; 5
     9ce:	80 93 a1 01 	sts	0x01A1, r24
     9d2:	81 e2       	ldi	r24, 0x21	; 33
     9d4:	80 93 ab 01 	sts	0x01AB, r24
     9d8:	10 92 ac 01 	sts	0x01AC, r1
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	21 c0       	rjmp	.+66     	; 0xa22 <SCSI_Command_ReadWrite_10+0x86>
	/* Adjust the given block address to the real media address based on the selected LUN */
	BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif
	
	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
     9e0:	88 23       	and	r24, r24
     9e2:	21 f0       	breq	.+8      	; 0x9ec <SCSI_Command_ReadWrite_10+0x50>
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     9e4:	c8 01       	movw	r24, r16
     9e6:	9e 01       	movw	r18, r28
     9e8:	8d dd       	rcall	.-1254   	; 0x504 <DataflashManager_ReadBlocks>
     9ea:	03 c0       	rjmp	.+6      	; 0x9f2 <SCSI_Command_ReadWrite_10+0x56>
	else
	  DataflashManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     9ec:	c8 01       	movw	r24, r16
     9ee:	9e 01       	movw	r18, r28
     9f0:	9d de       	rcall	.-710    	; 0x72c <DataflashManager_WriteBlocks>

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     9f2:	9e 01       	movw	r18, r28
     9f4:	40 e0       	ldi	r20, 0x00	; 0
     9f6:	50 e0       	ldi	r21, 0x00	; 0
     9f8:	89 e0       	ldi	r24, 0x09	; 9
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	8a 95       	dec	r24
     a04:	d1 f7       	brne	.-12     	; 0x9fa <SCSI_Command_ReadWrite_10+0x5e>
     a06:	f8 01       	movw	r30, r16
     a08:	82 89       	ldd	r24, Z+18	; 0x12
     a0a:	93 89       	ldd	r25, Z+19	; 0x13
     a0c:	a4 89       	ldd	r26, Z+20	; 0x14
     a0e:	b5 89       	ldd	r27, Z+21	; 0x15
     a10:	82 1b       	sub	r24, r18
     a12:	93 0b       	sbc	r25, r19
     a14:	a4 0b       	sbc	r26, r20
     a16:	b5 0b       	sbc	r27, r21
     a18:	82 8b       	std	Z+18, r24	; 0x12
     a1a:	93 8b       	std	Z+19, r25	; 0x13
     a1c:	a4 8b       	std	Z+20, r26	; 0x14
     a1e:	b5 8b       	std	Z+21, r27	; 0x15
     a20:	81 e0       	ldi	r24, 0x01	; 1

	return true;
}
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	1f 91       	pop	r17
     a28:	0f 91       	pop	r16
     a2a:	08 95       	ret

00000a2c <SCSI_DecodeSCSICommand>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean true if the command completed successfully, false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     a2c:	cf 92       	push	r12
     a2e:	df 92       	push	r13
     a30:	ef 92       	push	r14
     a32:	ff 92       	push	r15
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
     a38:	df 93       	push	r29
     a3a:	cf 93       	push	r28
     a3c:	cd b7       	in	r28, 0x3d	; 61
     a3e:	de b7       	in	r29, 0x3e	; 62
     a40:	28 97       	sbiw	r28, 0x08	; 8
     a42:	0f b6       	in	r0, 0x3f	; 63
     a44:	f8 94       	cli
     a46:	de bf       	out	0x3e, r29	; 62
     a48:	0f be       	out	0x3f, r0	; 63
     a4a:	cd bf       	out	0x3d, r28	; 61
     a4c:	7c 01       	movw	r14, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     a4e:	fc 01       	movw	r30, r24
     a50:	81 8d       	ldd	r24, Z+25	; 0x19
     a52:	8d 31       	cpi	r24, 0x1D	; 29
     a54:	09 f4       	brne	.+2      	; 0xa58 <SCSI_DecodeSCSICommand+0x2c>
     a56:	a6 c0       	rjmp	.+332    	; 0xba4 <SCSI_DecodeSCSICommand+0x178>
     a58:	8e 31       	cpi	r24, 0x1E	; 30
     a5a:	78 f4       	brcc	.+30     	; 0xa7a <SCSI_DecodeSCSICommand+0x4e>
     a5c:	83 30       	cpi	r24, 0x03	; 3
     a5e:	09 f4       	brne	.+2      	; 0xa62 <SCSI_DecodeSCSICommand+0x36>
     a60:	52 c0       	rjmp	.+164    	; 0xb06 <SCSI_DecodeSCSICommand+0xda>
     a62:	84 30       	cpi	r24, 0x04	; 4
     a64:	20 f4       	brcc	.+8      	; 0xa6e <SCSI_DecodeSCSICommand+0x42>
     a66:	88 23       	and	r24, r24
     a68:	09 f4       	brne	.+2      	; 0xa6c <SCSI_DecodeSCSICommand+0x40>
     a6a:	d9 c0       	rjmp	.+434    	; 0xc1e <SCSI_DecodeSCSICommand+0x1f2>
     a6c:	de c0       	rjmp	.+444    	; 0xc2a <SCSI_DecodeSCSICommand+0x1fe>
     a6e:	82 31       	cpi	r24, 0x12	; 18
     a70:	b9 f0       	breq	.+46     	; 0xaa0 <SCSI_DecodeSCSICommand+0x74>
     a72:	8a 31       	cpi	r24, 0x1A	; 26
     a74:	09 f0       	breq	.+2      	; 0xa78 <SCSI_DecodeSCSICommand+0x4c>
     a76:	d9 c0       	rjmp	.+434    	; 0xc2a <SCSI_DecodeSCSICommand+0x1fe>
     a78:	b8 c0       	rjmp	.+368    	; 0xbea <SCSI_DecodeSCSICommand+0x1be>
     a7a:	88 32       	cpi	r24, 0x28	; 40
     a7c:	09 f4       	brne	.+2      	; 0xa80 <SCSI_DecodeSCSICommand+0x54>
     a7e:	af c0       	rjmp	.+350    	; 0xbde <SCSI_DecodeSCSICommand+0x1b2>
     a80:	89 32       	cpi	r24, 0x29	; 41
     a82:	38 f4       	brcc	.+14     	; 0xa92 <SCSI_DecodeSCSICommand+0x66>
     a84:	8e 31       	cpi	r24, 0x1E	; 30
     a86:	09 f4       	brne	.+2      	; 0xa8a <SCSI_DecodeSCSICommand+0x5e>
     a88:	ca c0       	rjmp	.+404    	; 0xc1e <SCSI_DecodeSCSICommand+0x1f2>
     a8a:	85 32       	cpi	r24, 0x25	; 37
     a8c:	09 f0       	breq	.+2      	; 0xa90 <SCSI_DecodeSCSICommand+0x64>
     a8e:	cd c0       	rjmp	.+410    	; 0xc2a <SCSI_DecodeSCSICommand+0x1fe>
     a90:	5d c0       	rjmp	.+186    	; 0xb4c <SCSI_DecodeSCSICommand+0x120>
     a92:	8a 32       	cpi	r24, 0x2A	; 42
     a94:	09 f4       	brne	.+2      	; 0xa98 <SCSI_DecodeSCSICommand+0x6c>
     a96:	a0 c0       	rjmp	.+320    	; 0xbd8 <SCSI_DecodeSCSICommand+0x1ac>
     a98:	8f 32       	cpi	r24, 0x2F	; 47
     a9a:	09 f0       	breq	.+2      	; 0xa9e <SCSI_DecodeSCSICommand+0x72>
     a9c:	c6 c0       	rjmp	.+396    	; 0xc2a <SCSI_DecodeSCSICommand+0x1fe>
     a9e:	bf c0       	rjmp	.+382    	; 0xc1e <SCSI_DecodeSCSICommand+0x1f2>
     aa0:	f7 01       	movw	r30, r14
     aa2:	05 8d       	ldd	r16, Z+29	; 0x1d
     aa4:	14 8d       	ldd	r17, Z+28	; 0x1c
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     aa6:	82 8d       	ldd	r24, Z+26	; 0x1a
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	83 70       	andi	r24, 0x03	; 3
     aac:	90 70       	andi	r25, 0x00	; 0
     aae:	89 2b       	or	r24, r25
     ab0:	09 f0       	breq	.+2      	; 0xab4 <SCSI_DecodeSCSICommand+0x88>
     ab2:	7c c0       	rjmp	.+248    	; 0xbac <SCSI_DecodeSCSICommand+0x180>
     ab4:	83 8d       	ldd	r24, Z+27	; 0x1b
     ab6:	88 23       	and	r24, r24
     ab8:	09 f0       	breq	.+2      	; 0xabc <SCSI_DecodeSCSICommand+0x90>
     aba:	78 c0       	rjmp	.+240    	; 0xbac <SCSI_DecodeSCSICommand+0x180>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     abc:	68 01       	movw	r12, r16
     abe:	05 32       	cpi	r16, 0x25	; 37
     ac0:	11 05       	cpc	r17, r1
     ac2:	18 f0       	brcs	.+6      	; 0xaca <SCSI_DecodeSCSICommand+0x9e>
     ac4:	94 e2       	ldi	r25, 0x24	; 36
     ac6:	c9 2e       	mov	r12, r25
     ac8:	d1 2c       	mov	r13, r1
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     aca:	81 eb       	ldi	r24, 0xB1	; 177
     acc:	91 e0       	ldi	r25, 0x01	; 1
     ace:	b6 01       	movw	r22, r12
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	ec d5       	rcall	.+3032   	; 0x16ae <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     ad6:	c8 01       	movw	r24, r16
     ad8:	8c 19       	sub	r24, r12
     ada:	9d 09       	sbc	r25, r13
     adc:	60 e0       	ldi	r22, 0x00	; 0
     ade:	70 e0       	ldi	r23, 0x00	; 0
     ae0:	00 d5       	rcall	.+2560   	; 0x14e2 <Endpoint_Null_Stream>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ae2:	80 91 e8 00 	lds	r24, 0x00E8
     ae6:	8e 77       	andi	r24, 0x7E	; 126
     ae8:	80 93 e8 00 	sts	0x00E8, r24

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     aec:	96 01       	movw	r18, r12
     aee:	40 e0       	ldi	r20, 0x00	; 0
     af0:	50 e0       	ldi	r21, 0x00	; 0
     af2:	f7 01       	movw	r30, r14
     af4:	82 89       	ldd	r24, Z+18	; 0x12
     af6:	93 89       	ldd	r25, Z+19	; 0x13
     af8:	a4 89       	ldd	r26, Z+20	; 0x14
     afa:	b5 89       	ldd	r27, Z+21	; 0x15
     afc:	82 1b       	sub	r24, r18
     afe:	93 0b       	sbc	r25, r19
     b00:	a4 0b       	sbc	r26, r20
     b02:	b5 0b       	sbc	r27, r21
     b04:	87 c0       	rjmp	.+270    	; 0xc14 <SCSI_DecodeSCSICommand+0x1e8>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
     b06:	f7 01       	movw	r30, r14
     b08:	15 8d       	ldd	r17, Z+29	; 0x1d
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     b0a:	01 2f       	mov	r16, r17
     b0c:	13 31       	cpi	r17, 0x13	; 19
     b0e:	08 f0       	brcs	.+2      	; 0xb12 <SCSI_DecodeSCSICommand+0xe6>
     b10:	02 e1       	ldi	r16, 0x12	; 18

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     b12:	8f e9       	ldi	r24, 0x9F	; 159
     b14:	91 e0       	ldi	r25, 0x01	; 1
     b16:	60 2f       	mov	r22, r16
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	40 e0       	ldi	r20, 0x00	; 0
     b1c:	50 e0       	ldi	r21, 0x00	; 0
     b1e:	c7 d5       	rcall	.+2958   	; 0x16ae <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     b20:	81 2f       	mov	r24, r17
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	80 1b       	sub	r24, r16
     b26:	91 09       	sbc	r25, r1
     b28:	60 e0       	ldi	r22, 0x00	; 0
     b2a:	70 e0       	ldi	r23, 0x00	; 0
     b2c:	da d4       	rcall	.+2484   	; 0x14e2 <Endpoint_Null_Stream>
     b2e:	80 91 e8 00 	lds	r24, 0x00E8
     b32:	8e 77       	andi	r24, 0x7E	; 126
     b34:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     b38:	f7 01       	movw	r30, r14
     b3a:	82 89       	ldd	r24, Z+18	; 0x12
     b3c:	93 89       	ldd	r25, Z+19	; 0x13
     b3e:	a4 89       	ldd	r26, Z+20	; 0x14
     b40:	b5 89       	ldd	r27, Z+21	; 0x15
     b42:	80 1b       	sub	r24, r16
     b44:	91 09       	sbc	r25, r1
     b46:	a1 09       	sbc	r26, r1
     b48:	b1 09       	sbc	r27, r1
     b4a:	64 c0       	rjmp	.+200    	; 0xc14 <SCSI_DecodeSCSICommand+0x1e8>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN = (LUN_MEDIA_BLOCKS - 1);
     b4c:	8f ef       	ldi	r24, 0xFF	; 255
     b4e:	9f e7       	ldi	r25, 0x7F	; 127
     b50:	a0 e0       	ldi	r26, 0x00	; 0
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	9a 83       	std	Y+2, r25	; 0x02
     b58:	ab 83       	std	Y+3, r26	; 0x03
     b5a:	bc 83       	std	Y+4, r27	; 0x04
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	92 e0       	ldi	r25, 0x02	; 2
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	8d 83       	std	Y+5, r24	; 0x05
     b66:	9e 83       	std	Y+6, r25	; 0x06
     b68:	af 83       	std	Y+7, r26	; 0x07
     b6a:	b8 87       	std	Y+8, r27	; 0x08

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
     b6c:	ce 01       	movw	r24, r28
     b6e:	01 96       	adiw	r24, 0x01	; 1
     b70:	64 e0       	ldi	r22, 0x04	; 4
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	40 e0       	ldi	r20, 0x00	; 0
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	48 d5       	rcall	.+2704   	; 0x160a <Endpoint_Write_Stream_BE>
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
     b7a:	ce 01       	movw	r24, r28
     b7c:	05 96       	adiw	r24, 0x05	; 5
     b7e:	64 e0       	ldi	r22, 0x04	; 4
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	40 e0       	ldi	r20, 0x00	; 0
     b84:	50 e0       	ldi	r21, 0x00	; 0
     b86:	41 d5       	rcall	.+2690   	; 0x160a <Endpoint_Write_Stream_BE>
     b88:	80 91 e8 00 	lds	r24, 0x00E8
     b8c:	8e 77       	andi	r24, 0x7E	; 126
     b8e:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
     b92:	f7 01       	movw	r30, r14
     b94:	82 89       	ldd	r24, Z+18	; 0x12
     b96:	93 89       	ldd	r25, Z+19	; 0x13
     b98:	a4 89       	ldd	r26, Z+20	; 0x14
     b9a:	b5 89       	ldd	r27, Z+21	; 0x15
     b9c:	08 97       	sbiw	r24, 0x08	; 8
     b9e:	a1 09       	sbc	r26, r1
     ba0:	b1 09       	sbc	r27, r1
     ba2:	38 c0       	rjmp	.+112    	; 0xc14 <SCSI_DecodeSCSICommand+0x1e8>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
     ba4:	f7 01       	movw	r30, r14
     ba6:	82 8d       	ldd	r24, Z+26	; 0x1a
     ba8:	82 fd       	sbrc	r24, 2
     baa:	08 c0       	rjmp	.+16     	; 0xbbc <SCSI_DecodeSCSICommand+0x190>
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     bac:	80 91 a1 01 	lds	r24, 0x01A1
     bb0:	80 7f       	andi	r24, 0xF0	; 240
     bb2:	85 60       	ori	r24, 0x05	; 5
     bb4:	80 93 a1 01 	sts	0x01A1, r24
     bb8:	84 e2       	ldi	r24, 0x24	; 36
     bba:	3e c0       	rjmp	.+124    	; 0xc38 <SCSI_DecodeSCSICommand+0x20c>

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
     bbc:	78 dc       	rcall	.-1808   	; 0x4ae <DataflashManager_CheckDataflashOperation>
     bbe:	88 23       	and	r24, r24
     bc0:	71 f5       	brne	.+92     	; 0xc1e <SCSI_DecodeSCSICommand+0x1f2>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
     bc2:	80 91 a1 01 	lds	r24, 0x01A1
     bc6:	80 7f       	andi	r24, 0xF0	; 240
     bc8:	84 60       	ori	r24, 0x04	; 4
     bca:	80 93 a1 01 	sts	0x01A1, r24
     bce:	10 92 ab 01 	sts	0x01AB, r1
     bd2:	10 92 ac 01 	sts	0x01AC, r1
     bd6:	33 c0       	rjmp	.+102    	; 0xc3e <SCSI_DecodeSCSICommand+0x212>
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
     bd8:	c7 01       	movw	r24, r14
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <SCSI_DecodeSCSICommand+0x1b6>
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
     bde:	c7 01       	movw	r24, r14
     be0:	61 e0       	ldi	r22, 0x01	; 1
     be2:	dc de       	rcall	.-584    	; 0x99c <SCSI_Command_ReadWrite_10>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     be4:	88 23       	and	r24, r24
     be6:	59 f1       	breq	.+86     	; 0xc3e <SCSI_DecodeSCSICommand+0x212>
     be8:	2c c0       	rjmp	.+88     	; 0xc42 <SCSI_DecodeSCSICommand+0x216>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     bea:	10 92 f1 00 	sts	0x00F1, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     bee:	10 92 f1 00 	sts	0x00F1, r1
     bf2:	10 92 f1 00 	sts	0x00F1, r1
     bf6:	10 92 f1 00 	sts	0x00F1, r1
     bfa:	80 91 e8 00 	lds	r24, 0x00E8
     bfe:	8e 77       	andi	r24, 0x7E	; 126
     c00:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
     c04:	f7 01       	movw	r30, r14
     c06:	82 89       	ldd	r24, Z+18	; 0x12
     c08:	93 89       	ldd	r25, Z+19	; 0x13
     c0a:	a4 89       	ldd	r26, Z+20	; 0x14
     c0c:	b5 89       	ldd	r27, Z+21	; 0x15
     c0e:	04 97       	sbiw	r24, 0x04	; 4
     c10:	a1 09       	sbc	r26, r1
     c12:	b1 09       	sbc	r27, r1
     c14:	82 8b       	std	Z+18, r24	; 0x12
     c16:	93 8b       	std	Z+19, r25	; 0x13
     c18:	a4 8b       	std	Z+20, r26	; 0x14
     c1a:	b5 8b       	std	Z+21, r27	; 0x15
     c1c:	12 c0       	rjmp	.+36     	; 0xc42 <SCSI_DecodeSCSICommand+0x216>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
     c1e:	f7 01       	movw	r30, r14
     c20:	12 8a       	std	Z+18, r1	; 0x12
     c22:	13 8a       	std	Z+19, r1	; 0x13
     c24:	14 8a       	std	Z+20, r1	; 0x14
     c26:	15 8a       	std	Z+21, r1	; 0x15
     c28:	0c c0       	rjmp	.+24     	; 0xc42 <SCSI_DecodeSCSICommand+0x216>
			break;
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     c2a:	80 91 a1 01 	lds	r24, 0x01A1
     c2e:	80 7f       	andi	r24, 0xF0	; 240
     c30:	85 60       	ori	r24, 0x05	; 5
     c32:	80 93 a1 01 	sts	0x01A1, r24
     c36:	80 e2       	ldi	r24, 0x20	; 32
     c38:	80 93 ab 01 	sts	0x01AB, r24
     c3c:	ca cf       	rjmp	.-108    	; 0xbd2 <SCSI_DecodeSCSICommand+0x1a6>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	0a c0       	rjmp	.+20     	; 0xc56 <SCSI_DecodeSCSICommand+0x22a>
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     c42:	80 91 a1 01 	lds	r24, 0x01A1
     c46:	80 7f       	andi	r24, 0xF0	; 240
     c48:	80 93 a1 01 	sts	0x01A1, r24
     c4c:	10 92 ab 01 	sts	0x01AB, r1
     c50:	10 92 ac 01 	sts	0x01AC, r1
     c54:	81 e0       	ldi	r24, 0x01	; 1

		return true;
	}

	return false;
}
     c56:	28 96       	adiw	r28, 0x08	; 8
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	f8 94       	cli
     c5c:	de bf       	out	0x3e, r29	; 62
     c5e:	0f be       	out	0x3f, r0	; 63
     c60:	cd bf       	out	0x3d, r28	; 61
     c62:	cf 91       	pop	r28
     c64:	df 91       	pop	r29
     c66:	1f 91       	pop	r17
     c68:	0f 91       	pop	r16
     c6a:	ff 90       	pop	r15
     c6c:	ef 90       	pop	r14
     c6e:	df 90       	pop	r13
     c70:	cf 90       	pop	r12
     c72:	08 95       	ret

00000c74 <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
     c74:	38 2f       	mov	r19, r24
     c76:	28 2f       	mov	r18, r24
     c78:	2c c0       	rjmp	.+88     	; 0xcd2 <Endpoint_ConfigureEndpoint_Prv+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     c7a:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);
		
		if (EPNum == Number)
     c7e:	23 17       	cp	r18, r19
     c80:	21 f4       	brne	.+8      	; 0xc8a <Endpoint_ConfigureEndpoint_Prv+0x16>
     c82:	76 2f       	mov	r23, r22
     c84:	94 2f       	mov	r25, r20
     c86:	50 e0       	ldi	r21, 0x00	; 0
     c88:	06 c0       	rjmp	.+12     	; 0xc96 <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     c8a:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     c8e:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
     c92:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     c96:	91 ff       	sbrs	r25, 1
     c98:	1b c0       	rjmp	.+54     	; 0xcd0 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     c9a:	80 91 eb 00 	lds	r24, 0x00EB
     c9e:	8e 7f       	andi	r24, 0xFE	; 254
     ca0:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= (1 << ALLOC);
     ca4:	80 91 ed 00 	lds	r24, 0x00ED
     ca8:	82 70       	andi	r24, 0x02	; 2
     caa:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     cae:	80 91 eb 00 	lds	r24, 0x00EB
     cb2:	81 60       	ori	r24, 0x01	; 1
     cb4:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     cb8:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     cbc:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
     cc0:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     cc4:	80 91 ee 00 	lds	r24, 0x00EE
			
		if (!(Endpoint_IsConfigured()))
     cc8:	87 fd       	sbrc	r24, 7
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else	
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     cd0:	2f 5f       	subi	r18, 0xFF	; 255
     cd2:	27 30       	cpi	r18, 0x07	; 7
     cd4:	90 f2       	brcs	.-92     	; 0xc7a <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     cd6:	30 93 e9 00 	sts	0x00E9, r19
     cda:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     cdc:	08 95       	ret

00000cde <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     cde:	80 91 ea 01 	lds	r24, 0x01EA
     ce2:	88 23       	and	r24, r24
     ce4:	9c f4       	brge	.+38     	; 0xd0c <Endpoint_ClearStatusStage+0x2e>
     ce6:	04 c0       	rjmp	.+8      	; 0xcf0 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     ce8:	80 91 e9 01 	lds	r24, 0x01E9
     cec:	88 23       	and	r24, r24
     cee:	b9 f0       	breq	.+46     	; 0xd1e <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     cf0:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     cf4:	82 ff       	sbrs	r24, 2
     cf6:	f8 cf       	rjmp	.-16     	; 0xce8 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     cf8:	80 91 e8 00 	lds	r24, 0x00E8
     cfc:	8b 77       	andi	r24, 0x7B	; 123
     cfe:	80 93 e8 00 	sts	0x00E8, r24
     d02:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     d04:	80 91 e9 01 	lds	r24, 0x01E9
     d08:	88 23       	and	r24, r24
     d0a:	49 f0       	breq	.+18     	; 0xd1e <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d0c:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     d10:	80 ff       	sbrs	r24, 0
     d12:	f8 cf       	rjmp	.-16     	; 0xd04 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d14:	80 91 e8 00 	lds	r24, 0x00E8
     d18:	8e 77       	andi	r24, 0x7E	; 126
     d1a:	80 93 e8 00 	sts	0x00E8, r24
     d1e:	08 95       	ret

00000d20 <Endpoint_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     d20:	40 91 e4 00 	lds	r20, 0x00E4
     d24:	50 91 e5 00 	lds	r21, 0x00E5
     d28:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
     d2a:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
     d2e:	80 ff       	sbrs	r24, 0
     d30:	05 c0       	rjmp	.+10     	; 0xd3c <Endpoint_WaitUntilReady+0x1c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d32:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
     d36:	80 ff       	sbrs	r24, 0
     d38:	05 c0       	rjmp	.+10     	; 0xd44 <Endpoint_WaitUntilReady+0x24>
     d3a:	22 c0       	rjmp	.+68     	; 0xd80 <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     d3c:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     d40:	82 fd       	sbrc	r24, 2
     d42:	1e c0       	rjmp	.+60     	; 0xd80 <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     d44:	80 91 e9 01 	lds	r24, 0x01E9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     d48:	88 23       	and	r24, r24
     d4a:	11 f4       	brne	.+4      	; 0xd50 <Endpoint_WaitUntilReady+0x30>
     d4c:	82 e0       	ldi	r24, 0x02	; 2
     d4e:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     d50:	85 30       	cpi	r24, 0x05	; 5
     d52:	11 f4       	brne	.+4      	; 0xd58 <Endpoint_WaitUntilReady+0x38>
     d54:	83 e0       	ldi	r24, 0x03	; 3
     d56:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     d58:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     d5c:	85 ff       	sbrs	r24, 5
     d5e:	02 c0       	rjmp	.+4      	; 0xd64 <Endpoint_WaitUntilReady+0x44>
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	08 95       	ret
     d64:	80 91 e4 00 	lds	r24, 0x00E4
     d68:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     d6c:	84 17       	cp	r24, r20
     d6e:	95 07       	cpc	r25, r21
     d70:	e1 f2       	breq	.-72     	; 0xd2a <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     d72:	22 23       	and	r18, r18
     d74:	11 f4       	brne	.+4      	; 0xd7a <Endpoint_WaitUntilReady+0x5a>
     d76:	84 e0       	ldi	r24, 0x04	; 4
     d78:	08 95       	ret
     d7a:	21 50       	subi	r18, 0x01	; 1
     d7c:	ac 01       	movw	r20, r24
     d7e:	d5 cf       	rjmp	.-86     	; 0xd2a <Endpoint_WaitUntilReady+0xa>
     d80:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     d82:	08 95       	ret

00000d84 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     d84:	ef 92       	push	r14
     d86:	ff 92       	push	r15
     d88:	0f 93       	push	r16
     d8a:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     d8c:	4d d0       	rcall	.+154    	; 0xe28 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     d8e:	54 d0       	rcall	.+168    	; 0xe38 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
     d90:	08 ed       	ldi	r16, 0xD8	; 216
     d92:	10 e0       	ldi	r17, 0x00	; 0
     d94:	f8 01       	movw	r30, r16
     d96:	80 81       	ld	r24, Z

				USBCON = (Temp & ~(1 << USBE));
     d98:	98 2f       	mov	r25, r24
     d9a:	9f 77       	andi	r25, 0x7F	; 127
     d9c:	90 83       	st	Z, r25
				USBCON = (Temp |  (1 << USBE));
     d9e:	80 68       	ori	r24, 0x80	; 128
     da0:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     da2:	80 81       	ld	r24, Z
     da4:	8f 7d       	andi	r24, 0xDF	; 223
     da6:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     da8:	e7 ed       	ldi	r30, 0xD7	; 215
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	80 68       	ori	r24, 0x80	; 128
     db0:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     db2:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
     db4:	10 92 e9 01 	sts	0x01E9, r1
	USB_ConfigurationNumber  = 0;
     db8:	10 92 e7 01 	sts	0x01E7, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
     dbc:	10 92 e6 01 	sts	0x01E6, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
     dc0:	10 92 e5 01 	sts	0x01E5, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     dc4:	80 ee       	ldi	r24, 0xE0	; 224
     dc6:	e8 2e       	mov	r14, r24
     dc8:	f1 2c       	mov	r15, r1
     dca:	f7 01       	movw	r30, r14
     dcc:	80 81       	ld	r24, Z
     dce:	8b 7f       	andi	r24, 0xFB	; 251
     dd0:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     dd2:	f8 01       	movw	r30, r16
     dd4:	80 81       	ld	r24, Z
     dd6:	81 60       	ori	r24, 0x01	; 1
     dd8:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	42 e0       	ldi	r20, 0x02	; 2
     de0:	49 df       	rcall	.-366    	; 0xc74 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     de2:	e1 ee       	ldi	r30, 0xE1	; 225
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	8e 7f       	andi	r24, 0xFE	; 254
     dea:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     dec:	e2 ee       	ldi	r30, 0xE2	; 226
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	81 60       	ori	r24, 0x01	; 1
     df4:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     df6:	80 81       	ld	r24, Z
     df8:	88 60       	ori	r24, 0x08	; 8
     dfa:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     dfc:	f7 01       	movw	r30, r14
     dfe:	80 81       	ld	r24, Z
     e00:	8e 7f       	andi	r24, 0xFE	; 254
     e02:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     e04:	f8 01       	movw	r30, r16
     e06:	80 81       	ld	r24, Z
     e08:	80 61       	ori	r24, 0x10	; 16
     e0a:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     e0c:	1f 91       	pop	r17
     e0e:	0f 91       	pop	r16
     e10:	ff 90       	pop	r15
     e12:	ef 90       	pop	r14
     e14:	08 95       	ret

00000e16 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     e16:	e7 ed       	ldi	r30, 0xD7	; 215
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	81 60       	ori	r24, 0x01	; 1
     e1e:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	80 93 e8 01 	sts	0x01E8, r24

	USB_ResetInterface();
}
     e26:	ae cf       	rjmp	.-164    	; 0xd84 <USB_ResetInterface>

00000e28 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     e28:	e8 ed       	ldi	r30, 0xD8	; 216
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	8c 7f       	andi	r24, 0xFC	; 252
     e30:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     e32:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     e36:	08 95       	ret

00000e38 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     e38:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     e3c:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     e40:	08 95       	ret

00000e42 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     e42:	1f 92       	push	r1
     e44:	0f 92       	push	r0
     e46:	0f b6       	in	r0, 0x3f	; 63
     e48:	0f 92       	push	r0
     e4a:	0b b6       	in	r0, 0x3b	; 59
     e4c:	0f 92       	push	r0
     e4e:	11 24       	eor	r1, r1
     e50:	2f 93       	push	r18
     e52:	3f 93       	push	r19
     e54:	4f 93       	push	r20
     e56:	5f 93       	push	r21
     e58:	6f 93       	push	r22
     e5a:	7f 93       	push	r23
     e5c:	8f 93       	push	r24
     e5e:	9f 93       	push	r25
     e60:	af 93       	push	r26
     e62:	bf 93       	push	r27
     e64:	ef 93       	push	r30
     e66:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     e68:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     e6c:	82 ff       	sbrs	r24, 2
     e6e:	0a c0       	rjmp	.+20     	; 0xe84 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     e70:	80 91 e2 00 	lds	r24, 0x00E2
     e74:	82 ff       	sbrs	r24, 2
     e76:	06 c0       	rjmp	.+12     	; 0xe84 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     e78:	80 91 e1 00 	lds	r24, 0x00E1
     e7c:	8b 7f       	andi	r24, 0xFB	; 251
     e7e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     e82:	2e d2       	rcall	.+1116   	; 0x12e0 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     e84:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     e88:	80 ff       	sbrs	r24, 0
     e8a:	1e c0       	rjmp	.+60     	; 0xec8 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     e8c:	80 91 d8 00 	lds	r24, 0x00D8
     e90:	80 ff       	sbrs	r24, 0
     e92:	1a c0       	rjmp	.+52     	; 0xec8 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     e94:	80 91 da 00 	lds	r24, 0x00DA
     e98:	8e 7f       	andi	r24, 0xFE	; 254
     e9a:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     e9e:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     ea2:	80 ff       	sbrs	r24, 0
     ea4:	0d c0       	rjmp	.+26     	; 0xec0 <__vector_10+0x7e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     ea6:	8c e0       	ldi	r24, 0x0C	; 12
     ea8:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     eaa:	89 b5       	in	r24, 0x29	; 41
     eac:	82 60       	ori	r24, 0x02	; 2
     eae:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     eb0:	09 b4       	in	r0, 0x29	; 41
     eb2:	00 fe       	sbrs	r0, 0
     eb4:	fd cf       	rjmp	.-6      	; 0xeb0 <__vector_10+0x6e>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	80 93 e9 01 	sts	0x01E9, r24
			EVENT_USB_Device_Connect();
     ebc:	73 d9       	rcall	.-3354   	; 0x1a4 <EVENT_USB_Device_Connect>
     ebe:	04 c0       	rjmp	.+8      	; 0xec8 <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     ec0:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     ec2:	10 92 e9 01 	sts	0x01E9, r1
			EVENT_USB_Device_Disconnect();
     ec6:	73 d9       	rcall	.-3354   	; 0x1ae <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     ec8:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     ecc:	80 ff       	sbrs	r24, 0
     ece:	18 c0       	rjmp	.+48     	; 0xf00 <__vector_10+0xbe>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     ed0:	80 91 e2 00 	lds	r24, 0x00E2
     ed4:	80 ff       	sbrs	r24, 0
     ed6:	14 c0       	rjmp	.+40     	; 0xf00 <__vector_10+0xbe>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     ed8:	80 91 e2 00 	lds	r24, 0x00E2
     edc:	8e 7f       	andi	r24, 0xFE	; 254
     ede:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     ee2:	80 91 e2 00 	lds	r24, 0x00E2
     ee6:	80 61       	ori	r24, 0x10	; 16
     ee8:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
     eec:	80 91 d8 00 	lds	r24, 0x00D8
     ef0:	80 62       	ori	r24, 0x20	; 32
     ef2:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     ef6:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     ef8:	85 e0       	ldi	r24, 0x05	; 5
     efa:	80 93 e9 01 	sts	0x01E9, r24
		EVENT_USB_Device_Suspend();
     efe:	f0 d1       	rcall	.+992    	; 0x12e0 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     f00:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     f04:	84 ff       	sbrs	r24, 4
     f06:	2e c0       	rjmp	.+92     	; 0xf64 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     f08:	80 91 e2 00 	lds	r24, 0x00E2
     f0c:	84 ff       	sbrs	r24, 4
     f0e:	2a c0       	rjmp	.+84     	; 0xf64 <__vector_10+0x122>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     f10:	8c e0       	ldi	r24, 0x0C	; 12
     f12:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     f14:	89 b5       	in	r24, 0x29	; 41
     f16:	82 60       	ori	r24, 0x02	; 2
     f18:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     f1a:	09 b4       	in	r0, 0x29	; 41
     f1c:	00 fe       	sbrs	r0, 0
     f1e:	fd cf       	rjmp	.-6      	; 0xf1a <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     f20:	80 91 d8 00 	lds	r24, 0x00D8
     f24:	8f 7d       	andi	r24, 0xDF	; 223
     f26:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     f2a:	80 91 e1 00 	lds	r24, 0x00E1
     f2e:	8f 7e       	andi	r24, 0xEF	; 239
     f30:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     f34:	80 91 e2 00 	lds	r24, 0x00E2
     f38:	8f 7e       	andi	r24, 0xEF	; 239
     f3a:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     f3e:	80 91 e2 00 	lds	r24, 0x00E2
     f42:	81 60       	ori	r24, 0x01	; 1
     f44:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_ConfigurationNumber)
     f48:	80 91 e7 01 	lds	r24, 0x01E7
     f4c:	88 23       	and	r24, r24
     f4e:	31 f4       	brne	.+12     	; 0xf5c <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     f50:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     f54:	87 fd       	sbrc	r24, 7
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <__vector_10+0x11a>
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	01 c0       	rjmp	.+2      	; 0xf5e <__vector_10+0x11c>
     f5c:	84 e0       	ldi	r24, 0x04	; 4
     f5e:	80 93 e9 01 	sts	0x01E9, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     f62:	be d1       	rcall	.+892    	; 0x12e0 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     f64:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     f68:	83 ff       	sbrs	r24, 3
     f6a:	22 c0       	rjmp	.+68     	; 0xfb0 <__vector_10+0x16e>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     f6c:	80 91 e2 00 	lds	r24, 0x00E2
     f70:	83 ff       	sbrs	r24, 3
     f72:	1e c0       	rjmp	.+60     	; 0xfb0 <__vector_10+0x16e>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     f74:	80 91 e1 00 	lds	r24, 0x00E1
     f78:	87 7f       	andi	r24, 0xF7	; 247
     f7a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState         = DEVICE_STATE_Default;
     f7e:	82 e0       	ldi	r24, 0x02	; 2
     f80:	80 93 e9 01 	sts	0x01E9, r24
		USB_ConfigurationNumber = 0;
     f84:	10 92 e7 01 	sts	0x01E7, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     f88:	80 91 e1 00 	lds	r24, 0x00E1
     f8c:	8e 7f       	andi	r24, 0xFE	; 254
     f8e:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     f92:	80 91 e2 00 	lds	r24, 0x00E2
     f96:	8e 7f       	andi	r24, 0xFE	; 254
     f98:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     f9c:	80 91 e2 00 	lds	r24, 0x00E2
     fa0:	80 61       	ori	r24, 0x10	; 16
     fa2:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	60 e0       	ldi	r22, 0x00	; 0
     faa:	42 e0       	ldi	r20, 0x02	; 2
     fac:	63 de       	rcall	.-826    	; 0xc74 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     fae:	98 d1       	rcall	.+816    	; 0x12e0 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     fb0:	ff 91       	pop	r31
     fb2:	ef 91       	pop	r30
     fb4:	bf 91       	pop	r27
     fb6:	af 91       	pop	r26
     fb8:	9f 91       	pop	r25
     fba:	8f 91       	pop	r24
     fbc:	7f 91       	pop	r23
     fbe:	6f 91       	pop	r22
     fc0:	5f 91       	pop	r21
     fc2:	4f 91       	pop	r20
     fc4:	3f 91       	pop	r19
     fc6:	2f 91       	pop	r18
     fc8:	0f 90       	pop	r0
     fca:	0b be       	out	0x3b, r0	; 59
     fcc:	0f 90       	pop	r0
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	0f 90       	pop	r0
     fd2:	1f 90       	pop	r1
     fd4:	18 95       	reti

00000fd6 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     fd6:	0f 93       	push	r16
     fd8:	1f 93       	push	r17
     fda:	df 93       	push	r29
     fdc:	cf 93       	push	r28
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
     fe2:	ac 97       	sbiw	r28, 0x2c	; 44
     fe4:	0f b6       	in	r0, 0x3f	; 63
     fe6:	f8 94       	cli
     fe8:	de bf       	out	0x3e, r29	; 62
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     fee:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
     ff2:	80 93 ea 01 	sts	0x01EA, r24
     ff6:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
     ffa:	80 93 eb 01 	sts	0x01EB, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
     ffe:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    1002:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
    1006:	ec ee       	ldi	r30, 0xEC	; 236
    1008:	f1 e0       	ldi	r31, 0x01	; 1
    100a:	80 93 ec 01 	sts	0x01EC, r24
    100e:	90 93 ed 01 	sts	0x01ED, r25
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    1012:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    1016:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
    101a:	80 93 ee 01 	sts	0x01EE, r24
    101e:	93 83       	std	Z+3, r25	; 0x03
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    1020:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    1024:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
    1028:	80 93 f0 01 	sts	0x01F0, r24
    102c:	95 83       	std	Z+5, r25	; 0x05

	EVENT_USB_Device_ControlRequest();
    102e:	ce d8       	rcall	.-3684   	; 0x1cc <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1030:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1034:	83 ff       	sbrs	r24, 3
    1036:	3b c1       	rjmp	.+630    	; 0x12ae <USB_Device_ProcessControlRequest+0x2d8>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1038:	80 91 ea 01 	lds	r24, 0x01EA

		switch (USB_ControlRequest.bRequest)
    103c:	30 91 eb 01 	lds	r19, 0x01EB
    1040:	35 30       	cpi	r19, 0x05	; 5
    1042:	09 f4       	brne	.+2      	; 0x1046 <USB_Device_ProcessControlRequest+0x70>
    1044:	87 c0       	rjmp	.+270    	; 0x1154 <USB_Device_ProcessControlRequest+0x17e>
    1046:	36 30       	cpi	r19, 0x06	; 6
    1048:	40 f4       	brcc	.+16     	; 0x105a <USB_Device_ProcessControlRequest+0x84>
    104a:	31 30       	cpi	r19, 0x01	; 1
    104c:	c9 f1       	breq	.+114    	; 0x10c0 <USB_Device_ProcessControlRequest+0xea>
    104e:	31 30       	cpi	r19, 0x01	; 1
    1050:	70 f0       	brcs	.+28     	; 0x106e <USB_Device_ProcessControlRequest+0x98>
    1052:	33 30       	cpi	r19, 0x03	; 3
    1054:	09 f0       	breq	.+2      	; 0x1058 <USB_Device_ProcessControlRequest+0x82>
    1056:	2b c1       	rjmp	.+598    	; 0x12ae <USB_Device_ProcessControlRequest+0x2d8>
    1058:	33 c0       	rjmp	.+102    	; 0x10c0 <USB_Device_ProcessControlRequest+0xea>
    105a:	38 30       	cpi	r19, 0x08	; 8
    105c:	09 f4       	brne	.+2      	; 0x1060 <USB_Device_ProcessControlRequest+0x8a>
    105e:	f8 c0       	rjmp	.+496    	; 0x1250 <USB_Device_ProcessControlRequest+0x27a>
    1060:	39 30       	cpi	r19, 0x09	; 9
    1062:	09 f4       	brne	.+2      	; 0x1066 <USB_Device_ProcessControlRequest+0x90>
    1064:	07 c1       	rjmp	.+526    	; 0x1274 <USB_Device_ProcessControlRequest+0x29e>
    1066:	36 30       	cpi	r19, 0x06	; 6
    1068:	09 f0       	breq	.+2      	; 0x106c <USB_Device_ProcessControlRequest+0x96>
    106a:	21 c1       	rjmp	.+578    	; 0x12ae <USB_Device_ProcessControlRequest+0x2d8>
    106c:	99 c0       	rjmp	.+306    	; 0x11a0 <USB_Device_ProcessControlRequest+0x1ca>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    106e:	80 38       	cpi	r24, 0x80	; 128
    1070:	21 f0       	breq	.+8      	; 0x107a <USB_Device_ProcessControlRequest+0xa4>
    1072:	82 38       	cpi	r24, 0x82	; 130
    1074:	09 f0       	breq	.+2      	; 0x1078 <USB_Device_ProcessControlRequest+0xa2>
    1076:	1b c1       	rjmp	.+566    	; 0x12ae <USB_Device_ProcessControlRequest+0x2d8>
    1078:	08 c0       	rjmp	.+16     	; 0x108a <USB_Device_ProcessControlRequest+0xb4>
    107a:	90 91 e5 01 	lds	r25, 0x01E5
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_RemoteWakeupEnabled)
    107e:	80 91 e6 01 	lds	r24, 0x01E6
    1082:	88 23       	and	r24, r24
    1084:	99 f0       	breq	.+38     	; 0x10ac <USB_Device_ProcessControlRequest+0xd6>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1086:	92 60       	ori	r25, 0x02	; 2
    1088:	11 c0       	rjmp	.+34     	; 0x10ac <USB_Device_ProcessControlRequest+0xd6>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    108a:	80 91 ee 01 	lds	r24, 0x01EE
    108e:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1090:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1094:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	25 e0       	ldi	r18, 0x05	; 5
    109c:	96 95       	lsr	r25
    109e:	87 95       	ror	r24
    10a0:	2a 95       	dec	r18
    10a2:	e1 f7       	brne	.-8      	; 0x109c <USB_Device_ProcessControlRequest+0xc6>
    10a4:	98 2f       	mov	r25, r24
    10a6:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    10a8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10ac:	80 91 e8 00 	lds	r24, 0x00E8
    10b0:	87 7f       	andi	r24, 0xF7	; 247
    10b2:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    10b6:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
    10ba:	10 92 f1 00 	sts	0x00F1, r1
    10be:	d3 c0       	rjmp	.+422    	; 0x1266 <USB_Device_ProcessControlRequest+0x290>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    10c0:	88 23       	and	r24, r24
    10c2:	19 f0       	breq	.+6      	; 0x10ca <USB_Device_ProcessControlRequest+0xf4>
    10c4:	82 30       	cpi	r24, 0x02	; 2
    10c6:	09 f0       	breq	.+2      	; 0x10ca <USB_Device_ProcessControlRequest+0xf4>
    10c8:	f2 c0       	rjmp	.+484    	; 0x12ae <USB_Device_ProcessControlRequest+0x2d8>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	8f 71       	andi	r24, 0x1F	; 31
    10ce:	90 70       	andi	r25, 0x00	; 0
    10d0:	00 97       	sbiw	r24, 0x00	; 0
    10d2:	21 f0       	breq	.+8      	; 0x10dc <USB_Device_ProcessControlRequest+0x106>
    10d4:	02 97       	sbiw	r24, 0x02	; 2
    10d6:	09 f0       	breq	.+2      	; 0x10da <USB_Device_ProcessControlRequest+0x104>
    10d8:	ea c0       	rjmp	.+468    	; 0x12ae <USB_Device_ProcessControlRequest+0x2d8>
    10da:	0c c0       	rjmp	.+24     	; 0x10f4 <USB_Device_ProcessControlRequest+0x11e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    10dc:	80 91 ec 01 	lds	r24, 0x01EC
    10e0:	81 30       	cpi	r24, 0x01	; 1
    10e2:	09 f0       	breq	.+2      	; 0x10e6 <USB_Device_ProcessControlRequest+0x110>
    10e4:	e4 c0       	rjmp	.+456    	; 0x12ae <USB_Device_ProcessControlRequest+0x2d8>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    10e6:	10 92 e6 01 	sts	0x01E6, r1
    10ea:	33 30       	cpi	r19, 0x03	; 3
    10ec:	69 f5       	brne	.+90     	; 0x1148 <USB_Device_ProcessControlRequest+0x172>
    10ee:	80 93 e6 01 	sts	0x01E6, r24
    10f2:	2a c0       	rjmp	.+84     	; 0x1148 <USB_Device_ProcessControlRequest+0x172>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    10f4:	80 91 ec 01 	lds	r24, 0x01EC
    10f8:	88 23       	and	r24, r24
    10fa:	31 f5       	brne	.+76     	; 0x1148 <USB_Device_ProcessControlRequest+0x172>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    10fc:	20 91 ee 01 	lds	r18, 0x01EE
    1100:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1102:	09 f4       	brne	.+2      	; 0x1106 <USB_Device_ProcessControlRequest+0x130>
    1104:	d4 c0       	rjmp	.+424    	; 0x12ae <USB_Device_ProcessControlRequest+0x2d8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1106:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    110a:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    110e:	80 ff       	sbrs	r24, 0
    1110:	1b c0       	rjmp	.+54     	; 0x1148 <USB_Device_ProcessControlRequest+0x172>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1112:	33 30       	cpi	r19, 0x03	; 3
    1114:	21 f4       	brne	.+8      	; 0x111e <USB_Device_ProcessControlRequest+0x148>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1116:	80 91 eb 00 	lds	r24, 0x00EB
    111a:	80 62       	ori	r24, 0x20	; 32
    111c:	13 c0       	rjmp	.+38     	; 0x1144 <USB_Device_ProcessControlRequest+0x16e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    111e:	80 91 eb 00 	lds	r24, 0x00EB
    1122:	80 61       	ori	r24, 0x10	; 16
    1124:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <USB_Device_ProcessControlRequest+0x15c>
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	2a 95       	dec	r18
    1134:	e2 f7       	brpl	.-8      	; 0x112e <USB_Device_ProcessControlRequest+0x158>
    1136:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    113a:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    113e:	80 91 eb 00 	lds	r24, 0x00EB
    1142:	88 60       	ori	r24, 0x08	; 8
    1144:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1148:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    114c:	80 91 e8 00 	lds	r24, 0x00E8
    1150:	87 7f       	andi	r24, 0xF7	; 247
    1152:	8c c0       	rjmp	.+280    	; 0x126c <USB_Device_ProcessControlRequest+0x296>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1154:	88 23       	and	r24, r24
    1156:	09 f0       	breq	.+2      	; 0x115a <USB_Device_ProcessControlRequest+0x184>
    1158:	aa c0       	rjmp	.+340    	; 0x12ae <USB_Device_ProcessControlRequest+0x2d8>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    115a:	10 91 ec 01 	lds	r17, 0x01EC
    115e:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1160:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1162:	f8 94       	cli
    1164:	80 91 e8 00 	lds	r24, 0x00E8
    1168:	87 7f       	andi	r24, 0xF7	; 247
    116a:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    116e:	b7 dd       	rcall	.-1170   	; 0xcde <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1170:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    1174:	80 ff       	sbrs	r24, 0
    1176:	fc cf       	rjmp	.-8      	; 0x1170 <USB_Device_ProcessControlRequest+0x19a>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
    1178:	80 91 e3 00 	lds	r24, 0x00E3
    117c:	80 78       	andi	r24, 0x80	; 128
    117e:	81 2b       	or	r24, r17
    1180:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR |= (1 << ADDEN);
    1184:	80 91 e3 00 	lds	r24, 0x00E3
    1188:	80 68       	ori	r24, 0x80	; 128
    118a:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    118e:	11 23       	and	r17, r17
    1190:	11 f4       	brne	.+4      	; 0x1196 <USB_Device_ProcessControlRequest+0x1c0>
    1192:	82 e0       	ldi	r24, 0x02	; 2
    1194:	01 c0       	rjmp	.+2      	; 0x1198 <USB_Device_ProcessControlRequest+0x1c2>
    1196:	83 e0       	ldi	r24, 0x03	; 3
    1198:	80 93 e9 01 	sts	0x01E9, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    119c:	0f bf       	out	0x3f, r16	; 63
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#endif
				
				GCC_MEMORY_BARRIER();
    119e:	87 c0       	rjmp	.+270    	; 0x12ae <USB_Device_ProcessControlRequest+0x2d8>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    11a0:	80 58       	subi	r24, 0x80	; 128
    11a2:	82 30       	cpi	r24, 0x02	; 2
    11a4:	08 f0       	brcs	.+2      	; 0x11a8 <USB_Device_ProcessControlRequest+0x1d2>
    11a6:	83 c0       	rjmp	.+262    	; 0x12ae <USB_Device_ProcessControlRequest+0x2d8>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    11a8:	80 91 ec 01 	lds	r24, 0x01EC
    11ac:	90 91 ed 01 	lds	r25, 0x01ED
    11b0:	23 e0       	ldi	r18, 0x03	; 3
    11b2:	8c 3d       	cpi	r24, 0xDC	; 220
    11b4:	92 07       	cpc	r25, r18
    11b6:	09 f0       	breq	.+2      	; 0x11ba <USB_Device_ProcessControlRequest+0x1e4>
    11b8:	33 c0       	rjmp	.+102    	; 0x1220 <USB_Device_ProcessControlRequest+0x24a>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    11ba:	83 e0       	ldi	r24, 0x03	; 3
    11bc:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    11be:	8a e2       	ldi	r24, 0x2A	; 42
    11c0:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    11c2:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    11c4:	f8 94       	cli
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#endif

				GCC_MEMORY_BARRIER();
    11c6:	de 01       	movw	r26, r28
    11c8:	15 96       	adiw	r26, 0x05	; 5
    11ca:	6e e0       	ldi	r22, 0x0E	; 14
    11cc:	40 e0       	ldi	r20, 0x00	; 0
    11ce:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    11d0:	11 e2       	ldi	r17, 0x21	; 33
    11d2:	e6 2f       	mov	r30, r22
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	10 93 57 00 	sts	0x0057, r17
    11da:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
    11dc:	40 ff       	sbrs	r20, 0
    11de:	03 c0       	rjmp	.+6      	; 0x11e6 <USB_Device_ProcessControlRequest+0x210>
					{
						SerialByte >>= 4;
    11e0:	82 95       	swap	r24
    11e2:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    11e4:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    11e6:	8f 70       	andi	r24, 0x0F	; 15
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    11ec:	8a 30       	cpi	r24, 0x0A	; 10
    11ee:	18 f0       	brcs	.+6      	; 0x11f6 <USB_Device_ProcessControlRequest+0x220>
    11f0:	c9 01       	movw	r24, r18
    11f2:	c7 96       	adiw	r24, 0x37	; 55
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <USB_Device_ProcessControlRequest+0x224>
    11f6:	c9 01       	movw	r24, r18
    11f8:	c0 96       	adiw	r24, 0x30	; 48
    11fa:	8d 93       	st	X+, r24
    11fc:	9d 93       	st	X+, r25
    11fe:	4f 5f       	subi	r20, 0xFF	; 255
    1200:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1202:	44 31       	cpi	r20, 0x14	; 20
    1204:	51 05       	cpc	r21, r1
    1206:	29 f7       	brne	.-54     	; 0x11d2 <USB_Device_ProcessControlRequest+0x1fc>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1208:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    120a:	80 91 e8 00 	lds	r24, 0x00E8
    120e:	87 7f       	andi	r24, 0xF7	; 247
    1210:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1214:	ce 01       	movw	r24, r28
    1216:	03 96       	adiw	r24, 0x03	; 3
    1218:	6a e2       	ldi	r22, 0x2A	; 42
    121a:	70 e0       	ldi	r23, 0x00	; 0
    121c:	62 d0       	rcall	.+196    	; 0x12e2 <Endpoint_Write_Control_Stream_LE>
    121e:	12 c0       	rjmp	.+36     	; 0x1244 <USB_Device_ProcessControlRequest+0x26e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1220:	60 91 ee 01 	lds	r22, 0x01EE
    1224:	ae 01       	movw	r20, r28
    1226:	4f 5f       	subi	r20, 0xFF	; 255
    1228:	5f 4f       	sbci	r21, 0xFF	; 255
    122a:	7f d8       	rcall	.-3842   	; 0x32a <CALLBACK_USB_GetDescriptor>
    122c:	bc 01       	movw	r22, r24
    122e:	00 97       	sbiw	r24, 0x00	; 0
    1230:	09 f4       	brne	.+2      	; 0x1234 <USB_Device_ProcessControlRequest+0x25e>
    1232:	3d c0       	rjmp	.+122    	; 0x12ae <USB_Device_ProcessControlRequest+0x2d8>
    1234:	80 91 e8 00 	lds	r24, 0x00E8
    1238:	87 7f       	andi	r24, 0xF7	; 247
    123a:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	9a 81       	ldd	r25, Y+2	; 0x02
    1242:	ee d0       	rcall	.+476    	; 0x1420 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1244:	80 91 e8 00 	lds	r24, 0x00E8
    1248:	8b 77       	andi	r24, 0x7B	; 123
    124a:	80 93 e8 00 	sts	0x00E8, r24
    124e:	2f c0       	rjmp	.+94     	; 0x12ae <USB_Device_ProcessControlRequest+0x2d8>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1250:	80 38       	cpi	r24, 0x80	; 128
    1252:	69 f5       	brne	.+90     	; 0x12ae <USB_Device_ProcessControlRequest+0x2d8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1254:	80 91 e8 00 	lds	r24, 0x00E8
    1258:	87 7f       	andi	r24, 0xF7	; 247
    125a:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_ConfigurationNumber);
    125e:	80 91 e7 01 	lds	r24, 0x01E7
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1262:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1266:	80 91 e8 00 	lds	r24, 0x00E8
    126a:	8e 77       	andi	r24, 0x7E	; 126
    126c:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1270:	36 dd       	rcall	.-1428   	; 0xcde <Endpoint_ClearStatusStage>
    1272:	1d c0       	rjmp	.+58     	; 0x12ae <USB_Device_ProcessControlRequest+0x2d8>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1274:	88 23       	and	r24, r24
    1276:	d9 f4       	brne	.+54     	; 0x12ae <USB_Device_ProcessControlRequest+0x2d8>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1278:	90 91 ec 01 	lds	r25, 0x01EC
    127c:	92 30       	cpi	r25, 0x02	; 2
    127e:	b8 f4       	brcc	.+46     	; 0x12ae <USB_Device_ProcessControlRequest+0x2d8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1280:	80 91 e8 00 	lds	r24, 0x00E8
    1284:	87 7f       	andi	r24, 0xF7	; 247
    1286:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    128a:	90 93 e7 01 	sts	0x01E7, r25

	Endpoint_ClearStatusStage();
    128e:	27 dd       	rcall	.-1458   	; 0xcde <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
    1290:	80 91 e7 01 	lds	r24, 0x01E7
    1294:	88 23       	and	r24, r24
    1296:	31 f4       	brne	.+12     	; 0x12a4 <USB_Device_ProcessControlRequest+0x2ce>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1298:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    129c:	87 fd       	sbrc	r24, 7
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <USB_Device_ProcessControlRequest+0x2ce>
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	01 c0       	rjmp	.+2      	; 0x12a6 <USB_Device_ProcessControlRequest+0x2d0>
    12a4:	84 e0       	ldi	r24, 0x04	; 4
    12a6:	80 93 e9 01 	sts	0x01E9, r24

	EVENT_USB_Device_ConfigurationChanged();
    12aa:	0e 94 ee 00 	call	0x1dc	; 0x1dc <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    12ae:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    12b2:	83 ff       	sbrs	r24, 3
    12b4:	0a c0       	rjmp	.+20     	; 0x12ca <USB_Device_ProcessControlRequest+0x2f4>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    12b6:	80 91 eb 00 	lds	r24, 0x00EB
    12ba:	80 62       	ori	r24, 0x20	; 32
    12bc:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    12c0:	80 91 e8 00 	lds	r24, 0x00E8
    12c4:	87 7f       	andi	r24, 0xF7	; 247
    12c6:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    12ca:	ac 96       	adiw	r28, 0x2c	; 44
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	f8 94       	cli
    12d0:	de bf       	out	0x3e, r29	; 62
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	cd bf       	out	0x3d, r28	; 61
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	1f 91       	pop	r17
    12dc:	0f 91       	pop	r16
    12de:	08 95       	ret

000012e0 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    12e0:	08 95       	ret

000012e2 <Endpoint_Write_Control_Stream_LE>:
    12e2:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    12e4:	40 91 f0 01 	lds	r20, 0x01F0
    12e8:	50 91 f1 01 	lds	r21, 0x01F1
    12ec:	46 17       	cp	r20, r22
    12ee:	57 07       	cpc	r21, r23
    12f0:	18 f4       	brcc	.+6      	; 0x12f8 <Endpoint_Write_Control_Stream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    12f2:	f9 01       	movw	r30, r18
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	3d c0       	rjmp	.+122    	; 0x1372 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    12f8:	61 15       	cp	r22, r1
    12fa:	71 05       	cpc	r23, r1
    12fc:	11 f0       	breq	.+4      	; 0x1302 <Endpoint_Write_Control_Stream_LE+0x20>
    12fe:	ab 01       	movw	r20, r22
    1300:	f8 cf       	rjmp	.-16     	; 0x12f2 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1302:	80 91 e8 00 	lds	r24, 0x00E8
    1306:	8e 77       	andi	r24, 0x7E	; 126
    1308:	80 93 e8 00 	sts	0x00E8, r24
    130c:	40 e0       	ldi	r20, 0x00	; 0
    130e:	50 e0       	ldi	r21, 0x00	; 0
    1310:	f0 cf       	rjmp	.-32     	; 0x12f2 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1312:	80 91 e9 01 	lds	r24, 0x01E9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1316:	88 23       	and	r24, r24
    1318:	f1 f1       	breq	.+124    	; 0x1396 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    131a:	85 30       	cpi	r24, 0x05	; 5
    131c:	f1 f1       	breq	.+124    	; 0x139a <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    131e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1322:	83 ff       	sbrs	r24, 3
    1324:	02 c0       	rjmp	.+4      	; 0x132a <Endpoint_Write_Control_Stream_LE+0x48>
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    132a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    132e:	82 fd       	sbrc	r24, 2
    1330:	2c c0       	rjmp	.+88     	; 0x138a <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1332:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1336:	80 ff       	sbrs	r24, 0
    1338:	1c c0       	rjmp	.+56     	; 0x1372 <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    133a:	20 91 f2 00 	lds	r18, 0x00F2
    133e:	30 91 f3 00 	lds	r19, 0x00F3
    1342:	07 c0       	rjmp	.+14     	; 0x1352 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1344:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1346:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    134a:	41 50       	subi	r20, 0x01	; 1
    134c:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    134e:	2f 5f       	subi	r18, 0xFF	; 255
    1350:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    1352:	41 15       	cp	r20, r1
    1354:	51 05       	cpc	r21, r1
    1356:	19 f0       	breq	.+6      	; 0x135e <Endpoint_Write_Control_Stream_LE+0x7c>
    1358:	28 30       	cpi	r18, 0x08	; 8
    135a:	31 05       	cpc	r19, r1
    135c:	98 f3       	brcs	.-26     	; 0x1344 <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	28 30       	cpi	r18, 0x08	; 8
    1362:	31 05       	cpc	r19, r1
    1364:	09 f4       	brne	.+2      	; 0x1368 <Endpoint_Write_Control_Stream_LE+0x86>
    1366:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1368:	80 91 e8 00 	lds	r24, 0x00E8
    136c:	8e 77       	andi	r24, 0x7E	; 126
    136e:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1372:	41 15       	cp	r20, r1
    1374:	51 05       	cpc	r21, r1
    1376:	69 f6       	brne	.-102    	; 0x1312 <Endpoint_Write_Control_Stream_LE+0x30>
    1378:	99 23       	and	r25, r25
    137a:	59 f6       	brne	.-106    	; 0x1312 <Endpoint_Write_Control_Stream_LE+0x30>
    137c:	06 c0       	rjmp	.+12     	; 0x138a <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    137e:	80 91 e9 01 	lds	r24, 0x01E9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1382:	88 23       	and	r24, r24
    1384:	41 f0       	breq	.+16     	; 0x1396 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1386:	85 30       	cpi	r24, 0x05	; 5
    1388:	41 f0       	breq	.+16     	; 0x139a <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    138a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    138e:	82 ff       	sbrs	r24, 2
    1390:	f6 cf       	rjmp	.-20     	; 0x137e <Endpoint_Write_Control_Stream_LE+0x9c>
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	08 95       	ret
    1396:	82 e0       	ldi	r24, 0x02	; 2
    1398:	08 95       	ret
    139a:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    139c:	08 95       	ret

0000139e <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    139e:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    13a0:	61 15       	cp	r22, r1
    13a2:	71 05       	cpc	r23, r1
    13a4:	29 f4       	brne	.+10     	; 0x13b0 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    13a6:	80 91 e8 00 	lds	r24, 0x00E8
    13aa:	8b 77       	andi	r24, 0x7B	; 123
    13ac:	80 93 e8 00 	sts	0x00E8, r24
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    13b0:	f9 01       	movw	r30, r18
    13b2:	22 c0       	rjmp	.+68     	; 0x13f8 <Endpoint_Read_Control_Stream_LE+0x5a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    13b4:	80 91 e9 01 	lds	r24, 0x01E9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    13b8:	88 23       	and	r24, r24
    13ba:	71 f1       	breq	.+92     	; 0x1418 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    13bc:	85 30       	cpi	r24, 0x05	; 5
    13be:	71 f1       	breq	.+92     	; 0x141c <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    13c0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    13c4:	83 ff       	sbrs	r24, 3
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <Endpoint_Read_Control_Stream_LE+0x2e>
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    13cc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    13d0:	82 ff       	sbrs	r24, 2
    13d2:	f0 cf       	rjmp	.-32     	; 0x13b4 <Endpoint_Read_Control_Stream_LE+0x16>
    13d4:	06 c0       	rjmp	.+12     	; 0x13e2 <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    13d6:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    13da:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    13dc:	61 50       	subi	r22, 0x01	; 1
    13de:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    13e0:	31 f0       	breq	.+12     	; 0x13ee <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    13e2:	80 91 f2 00 	lds	r24, 0x00F2
    13e6:	90 91 f3 00 	lds	r25, 0x00F3
    13ea:	89 2b       	or	r24, r25
    13ec:	a1 f7       	brne	.-24     	; 0x13d6 <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    13ee:	80 91 e8 00 	lds	r24, 0x00E8
    13f2:	8b 77       	andi	r24, 0x7B	; 123
    13f4:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    13f8:	61 15       	cp	r22, r1
    13fa:	71 05       	cpc	r23, r1
    13fc:	d9 f6       	brne	.-74     	; 0x13b4 <Endpoint_Read_Control_Stream_LE+0x16>
    13fe:	06 c0       	rjmp	.+12     	; 0x140c <Endpoint_Read_Control_Stream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1400:	80 91 e9 01 	lds	r24, 0x01E9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1404:	88 23       	and	r24, r24
    1406:	41 f0       	breq	.+16     	; 0x1418 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1408:	85 30       	cpi	r24, 0x05	; 5
    140a:	41 f0       	breq	.+16     	; 0x141c <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    140c:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    1410:	80 ff       	sbrs	r24, 0
    1412:	f6 cf       	rjmp	.-20     	; 0x1400 <Endpoint_Read_Control_Stream_LE+0x62>
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	08 95       	ret
    1418:	82 e0       	ldi	r24, 0x02	; 2
    141a:	08 95       	ret
    141c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    141e:	08 95       	ret

00001420 <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    1420:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1422:	40 91 f0 01 	lds	r20, 0x01F0
    1426:	50 91 f1 01 	lds	r21, 0x01F1
    142a:	46 17       	cp	r20, r22
    142c:	57 07       	cpc	r21, r23
    142e:	18 f4       	brcc	.+6      	; 0x1436 <Endpoint_Write_Control_PStream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1430:	f9 01       	movw	r30, r18
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	40 c0       	rjmp	.+128    	; 0x14b6 <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1436:	61 15       	cp	r22, r1
    1438:	71 05       	cpc	r23, r1
    143a:	11 f0       	breq	.+4      	; 0x1440 <Endpoint_Write_Control_PStream_LE+0x20>
    143c:	ab 01       	movw	r20, r22
    143e:	f8 cf       	rjmp	.-16     	; 0x1430 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1440:	80 91 e8 00 	lds	r24, 0x00E8
    1444:	8e 77       	andi	r24, 0x7E	; 126
    1446:	80 93 e8 00 	sts	0x00E8, r24
    144a:	40 e0       	ldi	r20, 0x00	; 0
    144c:	50 e0       	ldi	r21, 0x00	; 0
    144e:	f0 cf       	rjmp	.-32     	; 0x1430 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1450:	80 91 e9 01 	lds	r24, 0x01E9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1454:	88 23       	and	r24, r24
    1456:	09 f4       	brne	.+2      	; 0x145a <Endpoint_Write_Control_PStream_LE+0x3a>
    1458:	40 c0       	rjmp	.+128    	; 0x14da <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    145a:	85 30       	cpi	r24, 0x05	; 5
    145c:	09 f4       	brne	.+2      	; 0x1460 <Endpoint_Write_Control_PStream_LE+0x40>
    145e:	3f c0       	rjmp	.+126    	; 0x14de <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1460:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1464:	83 ff       	sbrs	r24, 3
    1466:	02 c0       	rjmp	.+4      	; 0x146c <Endpoint_Write_Control_PStream_LE+0x4c>
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    146c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1470:	82 fd       	sbrc	r24, 2
    1472:	2d c0       	rjmp	.+90     	; 0x14ce <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1474:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1478:	80 ff       	sbrs	r24, 0
    147a:	1d c0       	rjmp	.+58     	; 0x14b6 <Endpoint_Write_Control_PStream_LE+0x96>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    147c:	20 91 f2 00 	lds	r18, 0x00F2
    1480:	30 91 f3 00 	lds	r19, 0x00F3
    1484:	08 c0       	rjmp	.+16     	; 0x1496 <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1486:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1488:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    148c:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    148e:	41 50       	subi	r20, 0x01	; 1
    1490:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    1492:	2f 5f       	subi	r18, 0xFF	; 255
    1494:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    1496:	41 15       	cp	r20, r1
    1498:	51 05       	cpc	r21, r1
    149a:	19 f0       	breq	.+6      	; 0x14a2 <Endpoint_Write_Control_PStream_LE+0x82>
    149c:	28 30       	cpi	r18, 0x08	; 8
    149e:	31 05       	cpc	r19, r1
    14a0:	90 f3       	brcs	.-28     	; 0x1486 <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	28 30       	cpi	r18, 0x08	; 8
    14a6:	31 05       	cpc	r19, r1
    14a8:	09 f4       	brne	.+2      	; 0x14ac <Endpoint_Write_Control_PStream_LE+0x8c>
    14aa:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14ac:	80 91 e8 00 	lds	r24, 0x00E8
    14b0:	8e 77       	andi	r24, 0x7E	; 126
    14b2:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    14b6:	41 15       	cp	r20, r1
    14b8:	51 05       	cpc	r21, r1
    14ba:	51 f6       	brne	.-108    	; 0x1450 <Endpoint_Write_Control_PStream_LE+0x30>
    14bc:	99 23       	and	r25, r25
    14be:	41 f6       	brne	.-112    	; 0x1450 <Endpoint_Write_Control_PStream_LE+0x30>
    14c0:	06 c0       	rjmp	.+12     	; 0x14ce <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    14c2:	80 91 e9 01 	lds	r24, 0x01E9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    14c6:	88 23       	and	r24, r24
    14c8:	41 f0       	breq	.+16     	; 0x14da <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    14ca:	85 30       	cpi	r24, 0x05	; 5
    14cc:	41 f0       	breq	.+16     	; 0x14de <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    14ce:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    14d2:	82 ff       	sbrs	r24, 2
    14d4:	f6 cf       	rjmp	.-20     	; 0x14c2 <Endpoint_Write_Control_PStream_LE+0xa2>
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	08 95       	ret
    14da:	82 e0       	ldi	r24, 0x02	; 2
    14dc:	08 95       	ret
    14de:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    14e0:	08 95       	ret

000014e2 <Endpoint_Null_Stream>:
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
    14e2:	df 92       	push	r13
    14e4:	ef 92       	push	r14
    14e6:	ff 92       	push	r15
    14e8:	0f 93       	push	r16
    14ea:	1f 93       	push	r17
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	ec 01       	movw	r28, r24
    14f2:	8b 01       	movw	r16, r22
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;
	
	if ((ErrorCode = Endpoint_WaitUntilReady()))
    14f4:	15 dc       	rcall	.-2006   	; 0xd20 <Endpoint_WaitUntilReady>
    14f6:	d8 2e       	mov	r13, r24
    14f8:	88 23       	and	r24, r24
    14fa:	61 f5       	brne	.+88     	; 0x1554 <Endpoint_Null_Stream+0x72>
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
    14fc:	01 15       	cp	r16, r1
    14fe:	11 05       	cpc	r17, r1
    1500:	29 f0       	breq	.+10     	; 0x150c <Endpoint_Null_Stream+0x2a>
	  Length -= *BytesProcessed;
    1502:	f8 01       	movw	r30, r16
    1504:	80 81       	ld	r24, Z
    1506:	91 81       	ldd	r25, Z+1	; 0x01
    1508:	c8 1b       	sub	r28, r24
    150a:	d9 0b       	sbc	r29, r25
    150c:	ee 24       	eor	r14, r14
    150e:	ff 24       	eor	r15, r15
    1510:	1f c0       	rjmp	.+62     	; 0x1550 <Endpoint_Null_Stream+0x6e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1512:	80 91 e8 00 	lds	r24, 0x00E8

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1516:	85 fd       	sbrc	r24, 5
    1518:	15 c0       	rjmp	.+42     	; 0x1544 <Endpoint_Null_Stream+0x62>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    151a:	80 91 e8 00 	lds	r24, 0x00E8
    151e:	8e 77       	andi	r24, 0x7E	; 126
    1520:	80 93 e8 00 	sts	0x00E8, r24
		{
			Endpoint_ClearIN();

			if (BytesProcessed != NULL)
    1524:	01 15       	cp	r16, r1
    1526:	11 05       	cpc	r17, r1
    1528:	49 f0       	breq	.+18     	; 0x153c <Endpoint_Null_Stream+0x5a>
			{
				*BytesProcessed += BytesInTransfer;
    152a:	f8 01       	movw	r30, r16
    152c:	80 81       	ld	r24, Z
    152e:	91 81       	ldd	r25, Z+1	; 0x01
    1530:	8e 0d       	add	r24, r14
    1532:	9f 1d       	adc	r25, r15
    1534:	91 83       	std	Z+1, r25	; 0x01
    1536:	80 83       	st	Z, r24
    1538:	85 e0       	ldi	r24, 0x05	; 5
    153a:	0d c0       	rjmp	.+26     	; 0x1556 <Endpoint_Null_Stream+0x74>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    153c:	f1 db       	rcall	.-2078   	; 0xd20 <Endpoint_WaitUntilReady>
    153e:	88 23       	and	r24, r24
    1540:	39 f0       	breq	.+14     	; 0x1550 <Endpoint_Null_Stream+0x6e>
    1542:	09 c0       	rjmp	.+18     	; 0x1556 <Endpoint_Null_Stream+0x74>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1544:	10 92 f1 00 	sts	0x00F1, r1
		}
		else
		{
			Endpoint_Write_8(0);

			Length--;
    1548:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    154a:	08 94       	sec
    154c:	e1 1c       	adc	r14, r1
    154e:	f1 1c       	adc	r15, r1
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
    1550:	20 97       	sbiw	r28, 0x00	; 0
    1552:	f9 f6       	brne	.-66     	; 0x1512 <Endpoint_Null_Stream+0x30>
    1554:	8d 2d       	mov	r24, r13
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	1f 91       	pop	r17
    155c:	0f 91       	pop	r16
    155e:	ff 90       	pop	r15
    1560:	ef 90       	pop	r14
    1562:	df 90       	pop	r13
    1564:	08 95       	ret

00001566 <Endpoint_Read_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1566:	bf 92       	push	r11
    1568:	cf 92       	push	r12
    156a:	df 92       	push	r13
    156c:	ef 92       	push	r14
    156e:	ff 92       	push	r15
    1570:	0f 93       	push	r16
    1572:	1f 93       	push	r17
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	18 2f       	mov	r17, r24
    157a:	09 2f       	mov	r16, r25
    157c:	7b 01       	movw	r14, r22
    157e:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1580:	cf db       	rcall	.-2146   	; 0xd20 <Endpoint_WaitUntilReady>
    1582:	b8 2e       	mov	r11, r24
    1584:	88 23       	and	r24, r24
    1586:	b1 f5       	brne	.+108    	; 0x15f4 <Endpoint_Read_Stream_LE+0x8e>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1588:	81 2f       	mov	r24, r17
    158a:	90 2f       	mov	r25, r16
    158c:	9c 01       	movw	r18, r24
    158e:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1590:	c1 14       	cp	r12, r1
    1592:	d1 04       	cpc	r13, r1
    1594:	39 f0       	breq	.+14     	; 0x15a4 <Endpoint_Read_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    1596:	f6 01       	movw	r30, r12
    1598:	80 81       	ld	r24, Z
    159a:	91 81       	ldd	r25, Z+1	; 0x01
    159c:	e8 1a       	sub	r14, r24
    159e:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    15a0:	c8 0f       	add	r28, r24
    15a2:	d9 1f       	adc	r29, r25
    15a4:	00 e0       	ldi	r16, 0x00	; 0
    15a6:	10 e0       	ldi	r17, 0x00	; 0
    15a8:	22 c0       	rjmp	.+68     	; 0x15ee <Endpoint_Read_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    15aa:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    15ae:	85 fd       	sbrc	r24, 5
    15b0:	16 c0       	rjmp	.+44     	; 0x15de <Endpoint_Read_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    15b2:	80 91 e8 00 	lds	r24, 0x00E8
    15b6:	8b 77       	andi	r24, 0x7B	; 123
    15b8:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    15bc:	c1 14       	cp	r12, r1
    15be:	d1 04       	cpc	r13, r1
    15c0:	49 f0       	breq	.+18     	; 0x15d4 <Endpoint_Read_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
    15c2:	f6 01       	movw	r30, r12
    15c4:	80 81       	ld	r24, Z
    15c6:	91 81       	ldd	r25, Z+1	; 0x01
    15c8:	80 0f       	add	r24, r16
    15ca:	91 1f       	adc	r25, r17
    15cc:	91 83       	std	Z+1, r25	; 0x01
    15ce:	80 83       	st	Z, r24
    15d0:	85 e0       	ldi	r24, 0x05	; 5
    15d2:	11 c0       	rjmp	.+34     	; 0x15f6 <Endpoint_Read_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    15d4:	be d0       	rcall	.+380    	; 0x1752 <USB_USBTask>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    15d6:	a4 db       	rcall	.-2232   	; 0xd20 <Endpoint_WaitUntilReady>
    15d8:	88 23       	and	r24, r24
    15da:	49 f0       	breq	.+18     	; 0x15ee <Endpoint_Read_Stream_LE+0x88>
    15dc:	0c c0       	rjmp	.+24     	; 0x15f6 <Endpoint_Read_Stream_LE+0x90>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    15de:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    15e2:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    15e4:	08 94       	sec
    15e6:	e1 08       	sbc	r14, r1
    15e8:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    15ea:	0f 5f       	subi	r16, 0xFF	; 255
    15ec:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    15ee:	e1 14       	cp	r14, r1
    15f0:	f1 04       	cpc	r15, r1
    15f2:	d9 f6       	brne	.-74     	; 0x15aa <Endpoint_Read_Stream_LE+0x44>
    15f4:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    15f6:	df 91       	pop	r29
    15f8:	cf 91       	pop	r28
    15fa:	1f 91       	pop	r17
    15fc:	0f 91       	pop	r16
    15fe:	ff 90       	pop	r15
    1600:	ef 90       	pop	r14
    1602:	df 90       	pop	r13
    1604:	cf 90       	pop	r12
    1606:	bf 90       	pop	r11
    1608:	08 95       	ret

0000160a <Endpoint_Write_Stream_BE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    160a:	bf 92       	push	r11
    160c:	cf 92       	push	r12
    160e:	df 92       	push	r13
    1610:	ef 92       	push	r14
    1612:	ff 92       	push	r15
    1614:	0f 93       	push	r16
    1616:	1f 93       	push	r17
    1618:	cf 93       	push	r28
    161a:	df 93       	push	r29
    161c:	8c 01       	movw	r16, r24
    161e:	eb 01       	movw	r28, r22
    1620:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1622:	7e db       	rcall	.-2308   	; 0xd20 <Endpoint_WaitUntilReady>
    1624:	b8 2e       	mov	r11, r24
    1626:	88 23       	and	r24, r24
    1628:	b9 f5       	brne	.+110    	; 0x1698 <Endpoint_Write_Stream_BE+0x8e>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    162a:	21 97       	sbiw	r28, 0x01	; 1
    162c:	0c 0f       	add	r16, r28
    162e:	1d 1f       	adc	r17, r29
    1630:	21 96       	adiw	r28, 0x01	; 1
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1632:	c1 14       	cp	r12, r1
    1634:	d1 04       	cpc	r13, r1
    1636:	39 f0       	breq	.+14     	; 0x1646 <Endpoint_Write_Stream_BE+0x3c>
	{
		Length -= *BytesProcessed;
    1638:	f6 01       	movw	r30, r12
    163a:	80 81       	ld	r24, Z
    163c:	91 81       	ldd	r25, Z+1	; 0x01
    163e:	c8 1b       	sub	r28, r24
    1640:	d9 0b       	sbc	r29, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1642:	08 1b       	sub	r16, r24
    1644:	19 0b       	sbc	r17, r25
    1646:	ee 24       	eor	r14, r14
    1648:	ff 24       	eor	r15, r15
    164a:	24 c0       	rjmp	.+72     	; 0x1694 <Endpoint_Write_Stream_BE+0x8a>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    164c:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1650:	85 fd       	sbrc	r24, 5
    1652:	16 c0       	rjmp	.+44     	; 0x1680 <Endpoint_Write_Stream_BE+0x76>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1654:	80 91 e8 00 	lds	r24, 0x00E8
    1658:	8e 77       	andi	r24, 0x7E	; 126
    165a:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    165e:	c1 14       	cp	r12, r1
    1660:	d1 04       	cpc	r13, r1
    1662:	49 f0       	breq	.+18     	; 0x1676 <Endpoint_Write_Stream_BE+0x6c>
			{
				*BytesProcessed += BytesInTransfer;
    1664:	f6 01       	movw	r30, r12
    1666:	80 81       	ld	r24, Z
    1668:	91 81       	ldd	r25, Z+1	; 0x01
    166a:	8e 0d       	add	r24, r14
    166c:	9f 1d       	adc	r25, r15
    166e:	91 83       	std	Z+1, r25	; 0x01
    1670:	80 83       	st	Z, r24
    1672:	85 e0       	ldi	r24, 0x05	; 5
    1674:	12 c0       	rjmp	.+36     	; 0x169a <Endpoint_Write_Stream_BE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    1676:	6d d0       	rcall	.+218    	; 0x1752 <USB_USBTask>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1678:	53 db       	rcall	.-2394   	; 0xd20 <Endpoint_WaitUntilReady>
    167a:	88 23       	and	r24, r24
    167c:	59 f0       	breq	.+22     	; 0x1694 <Endpoint_Write_Stream_BE+0x8a>
    167e:	0d c0       	rjmp	.+26     	; 0x169a <Endpoint_Write_Stream_BE+0x90>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1680:	f8 01       	movw	r30, r16
    1682:	80 81       	ld	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1684:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1688:	01 50       	subi	r16, 0x01	; 1
    168a:	10 40       	sbci	r17, 0x00	; 0
			Length--;
    168c:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    168e:	08 94       	sec
    1690:	e1 1c       	adc	r14, r1
    1692:	f1 1c       	adc	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1694:	20 97       	sbiw	r28, 0x00	; 0
    1696:	d1 f6       	brne	.-76     	; 0x164c <Endpoint_Write_Stream_BE+0x42>
    1698:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    169a:	df 91       	pop	r29
    169c:	cf 91       	pop	r28
    169e:	1f 91       	pop	r17
    16a0:	0f 91       	pop	r16
    16a2:	ff 90       	pop	r15
    16a4:	ef 90       	pop	r14
    16a6:	df 90       	pop	r13
    16a8:	cf 90       	pop	r12
    16aa:	bf 90       	pop	r11
    16ac:	08 95       	ret

000016ae <Endpoint_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    16ae:	bf 92       	push	r11
    16b0:	cf 92       	push	r12
    16b2:	df 92       	push	r13
    16b4:	ef 92       	push	r14
    16b6:	ff 92       	push	r15
    16b8:	0f 93       	push	r16
    16ba:	1f 93       	push	r17
    16bc:	cf 93       	push	r28
    16be:	df 93       	push	r29
    16c0:	18 2f       	mov	r17, r24
    16c2:	09 2f       	mov	r16, r25
    16c4:	7b 01       	movw	r14, r22
    16c6:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    16c8:	2b db       	rcall	.-2474   	; 0xd20 <Endpoint_WaitUntilReady>
    16ca:	b8 2e       	mov	r11, r24
    16cc:	88 23       	and	r24, r24
    16ce:	b1 f5       	brne	.+108    	; 0x173c <Endpoint_Write_Stream_LE+0x8e>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    16d0:	81 2f       	mov	r24, r17
    16d2:	90 2f       	mov	r25, r16
    16d4:	9c 01       	movw	r18, r24
    16d6:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    16d8:	c1 14       	cp	r12, r1
    16da:	d1 04       	cpc	r13, r1
    16dc:	39 f0       	breq	.+14     	; 0x16ec <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    16de:	f6 01       	movw	r30, r12
    16e0:	80 81       	ld	r24, Z
    16e2:	91 81       	ldd	r25, Z+1	; 0x01
    16e4:	e8 1a       	sub	r14, r24
    16e6:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    16e8:	c8 0f       	add	r28, r24
    16ea:	d9 1f       	adc	r29, r25
    16ec:	00 e0       	ldi	r16, 0x00	; 0
    16ee:	10 e0       	ldi	r17, 0x00	; 0
    16f0:	22 c0       	rjmp	.+68     	; 0x1736 <Endpoint_Write_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    16f2:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    16f6:	85 fd       	sbrc	r24, 5
    16f8:	16 c0       	rjmp	.+44     	; 0x1726 <Endpoint_Write_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16fa:	80 91 e8 00 	lds	r24, 0x00E8
    16fe:	8e 77       	andi	r24, 0x7E	; 126
    1700:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    1704:	c1 14       	cp	r12, r1
    1706:	d1 04       	cpc	r13, r1
    1708:	49 f0       	breq	.+18     	; 0x171c <Endpoint_Write_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
    170a:	f6 01       	movw	r30, r12
    170c:	80 81       	ld	r24, Z
    170e:	91 81       	ldd	r25, Z+1	; 0x01
    1710:	80 0f       	add	r24, r16
    1712:	91 1f       	adc	r25, r17
    1714:	91 83       	std	Z+1, r25	; 0x01
    1716:	80 83       	st	Z, r24
    1718:	85 e0       	ldi	r24, 0x05	; 5
    171a:	11 c0       	rjmp	.+34     	; 0x173e <Endpoint_Write_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    171c:	1a d0       	rcall	.+52     	; 0x1752 <USB_USBTask>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    171e:	00 db       	rcall	.-2560   	; 0xd20 <Endpoint_WaitUntilReady>
    1720:	88 23       	and	r24, r24
    1722:	49 f0       	breq	.+18     	; 0x1736 <Endpoint_Write_Stream_LE+0x88>
    1724:	0c c0       	rjmp	.+24     	; 0x173e <Endpoint_Write_Stream_LE+0x90>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1726:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1728:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    172c:	08 94       	sec
    172e:	e1 08       	sbc	r14, r1
    1730:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    1732:	0f 5f       	subi	r16, 0xFF	; 255
    1734:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1736:	e1 14       	cp	r14, r1
    1738:	f1 04       	cpc	r15, r1
    173a:	d9 f6       	brne	.-74     	; 0x16f2 <Endpoint_Write_Stream_LE+0x44>
    173c:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	1f 91       	pop	r17
    1744:	0f 91       	pop	r16
    1746:	ff 90       	pop	r15
    1748:	ef 90       	pop	r14
    174a:	df 90       	pop	r13
    174c:	cf 90       	pop	r12
    174e:	bf 90       	pop	r11
    1750:	08 95       	ret

00001752 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1752:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    1754:	80 91 e9 01 	lds	r24, 0x01E9
    1758:	88 23       	and	r24, r24
    175a:	61 f0       	breq	.+24     	; 0x1774 <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    175c:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1760:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1764:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    1768:	83 ff       	sbrs	r24, 3
    176a:	01 c0       	rjmp	.+2      	; 0x176e <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
    176c:	34 dc       	rcall	.-1944   	; 0xfd6 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    176e:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1770:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1774:	1f 91       	pop	r17
    1776:	08 95       	ret

00001778 <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1778:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    177a:	80 91 e9 01 	lds	r24, 0x01E9
    177e:	84 30       	cpi	r24, 0x04	; 4
    1780:	41 f5       	brne	.+80     	; 0x17d2 <CDC_Device_ReceiveByte+0x5a>
    1782:	87 85       	ldd	r24, Z+15	; 0x0f
    1784:	90 89       	ldd	r25, Z+16	; 0x10
    1786:	a1 89       	ldd	r26, Z+17	; 0x11
    1788:	b2 89       	ldd	r27, Z+18	; 0x12
    178a:	00 97       	sbiw	r24, 0x00	; 0
    178c:	a1 05       	cpc	r26, r1
    178e:	b1 05       	cpc	r27, r1
    1790:	01 f1       	breq	.+64     	; 0x17d2 <CDC_Device_ReceiveByte+0x5a>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
    1792:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1794:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1798:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsOUTReceived())
    179c:	82 ff       	sbrs	r24, 2
    179e:	19 c0       	rjmp	.+50     	; 0x17d2 <CDC_Device_ReceiveByte+0x5a>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    17a0:	80 91 f2 00 	lds	r24, 0x00F2
    17a4:	90 91 f3 00 	lds	r25, 0x00F3
	{
		if (Endpoint_BytesInEndpoint())
    17a8:	89 2b       	or	r24, r25
    17aa:	19 f4       	brne	.+6      	; 0x17b2 <CDC_Device_ReceiveByte+0x3a>
    17ac:	2f ef       	ldi	r18, 0xFF	; 255
    17ae:	3f ef       	ldi	r19, 0xFF	; 255
    17b0:	04 c0       	rjmp	.+8      	; 0x17ba <CDC_Device_ReceiveByte+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    17b2:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    17ba:	80 91 f2 00 	lds	r24, 0x00F2
    17be:	90 91 f3 00 	lds	r25, 0x00F3

		if (!(Endpoint_BytesInEndpoint()))
    17c2:	89 2b       	or	r24, r25
    17c4:	41 f4       	brne	.+16     	; 0x17d6 <CDC_Device_ReceiveByte+0x5e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    17c6:	80 91 e8 00 	lds	r24, 0x00E8
    17ca:	8b 77       	andi	r24, 0x7B	; 123
    17cc:	80 93 e8 00 	sts	0x00E8, r24
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <CDC_Device_ReceiveByte+0x5e>
    17d2:	2f ef       	ldi	r18, 0xFF	; 255
    17d4:	3f ef       	ldi	r19, 0xFF	; 255
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    17d6:	c9 01       	movw	r24, r18
    17d8:	08 95       	ret

000017da <CDC_Device_CreateStream>:
}

#if defined(FDEV_SETUP_STREAM)
void CDC_Device_CreateStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                             FILE* const Stream)
{
    17da:	fb 01       	movw	r30, r22
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar, _FDEV_SETUP_RW);
    17dc:	2e e0       	ldi	r18, 0x0E	; 14
    17de:	db 01       	movw	r26, r22
    17e0:	1d 92       	st	X+, r1
    17e2:	2a 95       	dec	r18
    17e4:	e9 f7       	brne	.-6      	; 0x17e0 <CDC_Device_CreateStream+0x6>
    17e6:	23 e0       	ldi	r18, 0x03	; 3
    17e8:	23 83       	std	Z+3, r18	; 0x03
    17ea:	2f e6       	ldi	r18, 0x6F	; 111
    17ec:	3c e0       	ldi	r19, 0x0C	; 12
    17ee:	31 87       	std	Z+9, r19	; 0x09
    17f0:	20 87       	std	Z+8, r18	; 0x08
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	3c e0       	ldi	r19, 0x0C	; 12
    17f6:	33 87       	std	Z+11, r19	; 0x0b
    17f8:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
    17fa:	95 87       	std	Z+13, r25	; 0x0d
    17fc:	84 87       	std	Z+12, r24	; 0x0c
}
    17fe:	08 95       	ret

00001800 <CDC_Device_getchar>:
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
}

static int CDC_Device_getchar(FILE* Stream)
{
	int16_t ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
    1800:	fc 01       	movw	r30, r24
    1802:	84 85       	ldd	r24, Z+12	; 0x0c
    1804:	95 85       	ldd	r25, Z+13	; 0x0d
    1806:	b8 df       	rcall	.-144    	; 0x1778 <CDC_Device_ReceiveByte>
    1808:	9c 01       	movw	r18, r24

	if (ReceivedByte < 0)
    180a:	97 ff       	sbrs	r25, 7
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <CDC_Device_getchar+0x12>
    180e:	2e ef       	ldi	r18, 0xFE	; 254
    1810:	3f ef       	ldi	r19, 0xFF	; 255
	  return _FDEV_EOF;

	return ReceivedByte;
}
    1812:	c9 01       	movw	r24, r18
    1814:	08 95       	ret

00001816 <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
    1816:	08 95       	ret

00001818 <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1818:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    181a:	80 91 e9 01 	lds	r24, 0x01E9
    181e:	84 30       	cpi	r24, 0x04	; 4
    1820:	21 f5       	brne	.+72     	; 0x186a <CDC_Device_Flush+0x52>
    1822:	87 85       	ldd	r24, Z+15	; 0x0f
    1824:	90 89       	ldd	r25, Z+16	; 0x10
    1826:	a1 89       	ldd	r26, Z+17	; 0x11
    1828:	b2 89       	ldd	r27, Z+18	; 0x12
    182a:	00 97       	sbiw	r24, 0x00	; 0
    182c:	a1 05       	cpc	r26, r1
    182e:	b1 05       	cpc	r27, r1
    1830:	e1 f0       	breq	.+56     	; 0x186a <CDC_Device_Flush+0x52>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
    1832:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1834:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    1838:	80 91 f2 00 	lds	r24, 0x00F2
    183c:	90 91 f3 00 	lds	r25, 0x00F3

	if (!(Endpoint_BytesInEndpoint()))
    1840:	89 2b       	or	r24, r25
    1842:	a9 f0       	breq	.+42     	; 0x186e <CDC_Device_Flush+0x56>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1844:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1848:	80 91 e8 00 	lds	r24, 0x00E8
    184c:	8e 77       	andi	r24, 0x7E	; 126
    184e:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    1852:	95 fd       	sbrc	r25, 5
    1854:	0c c0       	rjmp	.+24     	; 0x186e <CDC_Device_Flush+0x56>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    1856:	64 da       	rcall	.-2872   	; 0xd20 <Endpoint_WaitUntilReady>
    1858:	98 2f       	mov	r25, r24
    185a:	88 23       	and	r24, r24
    185c:	49 f4       	brne	.+18     	; 0x1870 <CDC_Device_Flush+0x58>
    185e:	80 91 e8 00 	lds	r24, 0x00E8
    1862:	8e 77       	andi	r24, 0x7E	; 126
    1864:	80 93 e8 00 	sts	0x00E8, r24
    1868:	03 c0       	rjmp	.+6      	; 0x1870 <CDC_Device_Flush+0x58>
    186a:	92 e0       	ldi	r25, 0x02	; 2
    186c:	01 c0       	rjmp	.+2      	; 0x1870 <CDC_Device_Flush+0x58>
    186e:	90 e0       	ldi	r25, 0x00	; 0

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
    1870:	89 2f       	mov	r24, r25
    1872:	08 95       	ret

00001874 <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1874:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1876:	80 91 e9 01 	lds	r24, 0x01E9
    187a:	84 30       	cpi	r24, 0x04	; 4
    187c:	51 f4       	brne	.+20     	; 0x1892 <CDC_Device_USBTask+0x1e>
    187e:	87 85       	ldd	r24, Z+15	; 0x0f
    1880:	90 89       	ldd	r25, Z+16	; 0x10
    1882:	a1 89       	ldd	r26, Z+17	; 0x11
    1884:	b2 89       	ldd	r27, Z+18	; 0x12
    1886:	00 97       	sbiw	r24, 0x00	; 0
    1888:	a1 05       	cpc	r26, r1
    188a:	b1 05       	cpc	r27, r1
    188c:	11 f0       	breq	.+4      	; 0x1892 <CDC_Device_USBTask+0x1e>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Device_Flush(CDCInterfaceInfo);
    188e:	cf 01       	movw	r24, r30
    1890:	c3 cf       	rjmp	.-122    	; 0x1818 <CDC_Device_Flush>
    1892:	08 95       	ret

00001894 <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    1894:	1f 93       	push	r17
    1896:	fc 01       	movw	r30, r24
    1898:	16 2f       	mov	r17, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    189a:	80 91 e9 01 	lds	r24, 0x01E9
    189e:	84 30       	cpi	r24, 0x04	; 4
    18a0:	d9 f4       	brne	.+54     	; 0x18d8 <CDC_Device_SendByte+0x44>
    18a2:	87 85       	ldd	r24, Z+15	; 0x0f
    18a4:	90 89       	ldd	r25, Z+16	; 0x10
    18a6:	a1 89       	ldd	r26, Z+17	; 0x11
    18a8:	b2 89       	ldd	r27, Z+18	; 0x12
    18aa:	00 97       	sbiw	r24, 0x00	; 0
    18ac:	a1 05       	cpc	r26, r1
    18ae:	b1 05       	cpc	r27, r1
    18b0:	99 f0       	breq	.+38     	; 0x18d8 <CDC_Device_SendByte+0x44>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
    18b2:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    18b4:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    18b8:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
    18bc:	85 fd       	sbrc	r24, 5
    18be:	08 c0       	rjmp	.+16     	; 0x18d0 <CDC_Device_SendByte+0x3c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18c0:	80 91 e8 00 	lds	r24, 0x00E8
    18c4:	8e 77       	andi	r24, 0x7E	; 126
    18c6:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    18ca:	2a da       	rcall	.-2988   	; 0xd20 <Endpoint_WaitUntilReady>
    18cc:	88 23       	and	r24, r24
    18ce:	29 f4       	brne	.+10     	; 0x18da <CDC_Device_SendByte+0x46>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    18d0:	10 93 f1 00 	sts	0x00F1, r17
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	01 c0       	rjmp	.+2      	; 0x18da <CDC_Device_SendByte+0x46>
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    18d8:	82 e0       	ldi	r24, 0x02	; 2
}
    18da:	1f 91       	pop	r17
    18dc:	08 95       	ret

000018de <CDC_Device_putchar>:
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
    18de:	28 2f       	mov	r18, r24
    18e0:	fb 01       	movw	r30, r22
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
    18e2:	84 85       	ldd	r24, Z+12	; 0x0c
    18e4:	95 85       	ldd	r25, Z+13	; 0x0d
    18e6:	62 2f       	mov	r22, r18
    18e8:	d5 df       	rcall	.-86     	; 0x1894 <CDC_Device_SendByte>
    18ea:	88 23       	and	r24, r24
    18ec:	19 f4       	brne	.+6      	; 0x18f4 <CDC_Device_putchar+0x16>
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <CDC_Device_putchar+0x1a>
    18f4:	2f ef       	ldi	r18, 0xFF	; 255
    18f6:	3f ef       	ldi	r19, 0xFF	; 255
}
    18f8:	c9 01       	movw	r24, r18
    18fa:	08 95       	ret

000018fc <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    18fc:	1f 93       	push	r17
    18fe:	cf 93       	push	r28
    1900:	df 93       	push	r29
    1902:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    1904:	0d 96       	adiw	r24, 0x0d	; 13
    1906:	fc 01       	movw	r30, r24
    1908:	89 e0       	ldi	r24, 0x09	; 9
    190a:	df 01       	movw	r26, r30
    190c:	1d 92       	st	X+, r1
    190e:	8a 95       	dec	r24
    1910:	e9 f7       	brne	.-6      	; 0x190c <CDC_Device_ConfigureEndpoints+0x10>
    1912:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == CDCInterfaceInfo->Config.DataINEndpointNumber)
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	18 17       	cp	r17, r24
    1918:	29 f4       	brne	.+10     	; 0x1924 <CDC_Device_ConfigureEndpoints+0x28>
		{
			Size         = CDCInterfaceInfo->Config.DataINEndpointSize;
    191a:	ea 81       	ldd	r30, Y+2	; 0x02
    191c:	fb 81       	ldd	r31, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataINEndpointDoubleBank;
    191e:	8c 81       	ldd	r24, Y+4	; 0x04
    1920:	62 e0       	ldi	r22, 0x02	; 2
    1922:	10 c0       	rjmp	.+32     	; 0x1944 <CDC_Device_ConfigureEndpoints+0x48>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.DataOUTEndpointNumber)
    1924:	8d 81       	ldd	r24, Y+5	; 0x05
    1926:	18 17       	cp	r17, r24
    1928:	31 f4       	brne	.+12     	; 0x1936 <CDC_Device_ConfigureEndpoints+0x3a>
		{
			Size         = CDCInterfaceInfo->Config.DataOUTEndpointSize;
    192a:	ee 81       	ldd	r30, Y+6	; 0x06
    192c:	ff 81       	ldd	r31, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
    192e:	88 85       	ldd	r24, Y+8	; 0x08
    1930:	62 e0       	ldi	r22, 0x02	; 2
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	08 c0       	rjmp	.+16     	; 0x1946 <CDC_Device_ConfigureEndpoints+0x4a>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.NotificationEndpointNumber)
    1936:	89 85       	ldd	r24, Y+9	; 0x09
    1938:	18 17       	cp	r17, r24
    193a:	09 f5       	brne	.+66     	; 0x197e <CDC_Device_ConfigureEndpoints+0x82>
		{
			Size         = CDCInterfaceInfo->Config.NotificationEndpointSize;
    193c:	ea 85       	ldd	r30, Y+10	; 0x0a
    193e:	fb 85       	ldd	r31, Y+11	; 0x0b
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_INTERRUPT;
			DoubleBanked = CDCInterfaceInfo->Config.NotificationEndpointDoubleBank;
    1940:	8c 85       	ldd	r24, Y+12	; 0x0c
    1942:	63 e0       	ldi	r22, 0x03	; 3
    1944:	31 e0       	ldi	r19, 0x01	; 1
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
    1946:	88 23       	and	r24, r24
    1948:	11 f4       	brne	.+4      	; 0x194e <CDC_Device_ConfigureEndpoints+0x52>
    194a:	40 e0       	ldi	r20, 0x00	; 0
    194c:	01 c0       	rjmp	.+2      	; 0x1950 <CDC_Device_ConfigureEndpoints+0x54>
    194e:	44 e0       	ldi	r20, 0x04	; 4
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	88 e0       	ldi	r24, 0x08	; 8
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	03 c0       	rjmp	.+6      	; 0x195e <CDC_Device_ConfigureEndpoints+0x62>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    1958:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    195a:	88 0f       	add	r24, r24
    195c:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    195e:	8e 17       	cp	r24, r30
    1960:	9f 07       	cpc	r25, r31
    1962:	d0 f3       	brcs	.-12     	; 0x1958 <CDC_Device_ConfigureEndpoints+0x5c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
    1964:	62 95       	swap	r22
    1966:	66 0f       	add	r22, r22
    1968:	66 0f       	add	r22, r22
    196a:	60 7c       	andi	r22, 0xC0	; 192
    196c:	63 2b       	or	r22, r19
    196e:	42 60       	ori	r20, 0x02	; 2
    1970:	22 95       	swap	r18
    1972:	20 7f       	andi	r18, 0xF0	; 240
    1974:	42 2b       	or	r20, r18
    1976:	81 2f       	mov	r24, r17
    1978:	7d d9       	rcall	.-3334   	; 0xc74 <Endpoint_ConfigureEndpoint_Prv>
    197a:	88 23       	and	r24, r24
    197c:	21 f0       	breq	.+8      	; 0x1986 <CDC_Device_ConfigureEndpoints+0x8a>

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
    197e:	1f 5f       	subi	r17, 0xFF	; 255
    1980:	17 30       	cpi	r17, 0x07	; 7
    1982:	41 f6       	brne	.-112    	; 0x1914 <CDC_Device_ConfigureEndpoints+0x18>
    1984:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
    1986:	df 91       	pop	r29
    1988:	cf 91       	pop	r28
    198a:	1f 91       	pop	r17
    198c:	08 95       	ret

0000198e <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDC.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    198e:	cf 93       	push	r28
    1990:	df 93       	push	r29
    1992:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1994:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    1998:	83 ff       	sbrs	r24, 3
    199a:	63 c0       	rjmp	.+198    	; 0x1a62 <CDC_Device_ProcessControlRequest+0xd4>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    199c:	88 81       	ld	r24, Y
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	20 91 ee 01 	lds	r18, 0x01EE
    19a4:	30 91 ef 01 	lds	r19, 0x01EF
    19a8:	28 17       	cp	r18, r24
    19aa:	39 07       	cpc	r19, r25
    19ac:	09 f0       	breq	.+2      	; 0x19b0 <CDC_Device_ProcessControlRequest+0x22>
    19ae:	59 c0       	rjmp	.+178    	; 0x1a62 <CDC_Device_ProcessControlRequest+0xd4>
	  return;

	switch (USB_ControlRequest.bRequest)
    19b0:	80 91 eb 01 	lds	r24, 0x01EB
    19b4:	81 32       	cpi	r24, 0x21	; 33
    19b6:	61 f0       	breq	.+24     	; 0x19d0 <CDC_Device_ProcessControlRequest+0x42>
    19b8:	82 32       	cpi	r24, 0x22	; 34
    19ba:	20 f4       	brcc	.+8      	; 0x19c4 <CDC_Device_ProcessControlRequest+0x36>
    19bc:	80 32       	cpi	r24, 0x20	; 32
    19be:	09 f0       	breq	.+2      	; 0x19c2 <CDC_Device_ProcessControlRequest+0x34>
    19c0:	50 c0       	rjmp	.+160    	; 0x1a62 <CDC_Device_ProcessControlRequest+0xd4>
    19c2:	1b c0       	rjmp	.+54     	; 0x19fa <CDC_Device_ProcessControlRequest+0x6c>
    19c4:	82 32       	cpi	r24, 0x22	; 34
    19c6:	79 f1       	breq	.+94     	; 0x1a26 <CDC_Device_ProcessControlRequest+0x98>
    19c8:	83 32       	cpi	r24, 0x23	; 35
    19ca:	09 f0       	breq	.+2      	; 0x19ce <CDC_Device_ProcessControlRequest+0x40>
    19cc:	4a c0       	rjmp	.+148    	; 0x1a62 <CDC_Device_ProcessControlRequest+0xd4>
    19ce:	3b c0       	rjmp	.+118    	; 0x1a46 <CDC_Device_ProcessControlRequest+0xb8>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    19d0:	80 91 ea 01 	lds	r24, 0x01EA
    19d4:	81 3a       	cpi	r24, 0xA1	; 161
    19d6:	09 f0       	breq	.+2      	; 0x19da <CDC_Device_ProcessControlRequest+0x4c>
    19d8:	44 c0       	rjmp	.+136    	; 0x1a62 <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    19da:	80 91 e8 00 	lds	r24, 0x00E8
    19de:	87 7f       	andi	r24, 0xF7	; 247
    19e0:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
    19e4:	ce 01       	movw	r24, r28
    19e6:	0f 96       	adiw	r24, 0x0f	; 15
    19e8:	67 e0       	ldi	r22, 0x07	; 7
    19ea:	70 e0       	ldi	r23, 0x00	; 0
    19ec:	7a dc       	rcall	.-1804   	; 0x12e2 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    19ee:	80 91 e8 00 	lds	r24, 0x00E8
    19f2:	8b 77       	andi	r24, 0x7B	; 123
    19f4:	80 93 e8 00 	sts	0x00E8, r24
    19f8:	34 c0       	rjmp	.+104    	; 0x1a62 <CDC_Device_ProcessControlRequest+0xd4>
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    19fa:	80 91 ea 01 	lds	r24, 0x01EA
    19fe:	81 32       	cpi	r24, 0x21	; 33
    1a00:	81 f5       	brne	.+96     	; 0x1a62 <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a02:	80 91 e8 00 	lds	r24, 0x00E8
    1a06:	87 7f       	andi	r24, 0xF7	; 247
    1a08:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	0f 96       	adiw	r24, 0x0f	; 15
    1a10:	67 e0       	ldi	r22, 0x07	; 7
    1a12:	70 e0       	ldi	r23, 0x00	; 0
    1a14:	c4 dc       	rcall	.-1656   	; 0x139e <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a16:	80 91 e8 00 	lds	r24, 0x00E8
    1a1a:	8e 77       	andi	r24, 0x7E	; 126
    1a1c:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    1a20:	ce 01       	movw	r24, r28
    1a22:	f9 de       	rcall	.-526    	; 0x1816 <CDC_Device_Event_Stub>
    1a24:	1e c0       	rjmp	.+60     	; 0x1a62 <CDC_Device_ProcessControlRequest+0xd4>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1a26:	80 91 ea 01 	lds	r24, 0x01EA
    1a2a:	81 32       	cpi	r24, 0x21	; 33
    1a2c:	d1 f4       	brne	.+52     	; 0x1a62 <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a2e:	80 91 e8 00 	lds	r24, 0x00E8
    1a32:	87 7f       	andi	r24, 0xF7	; 247
    1a34:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1a38:	52 d9       	rcall	.-3420   	; 0xcde <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    1a3a:	80 91 ec 01 	lds	r24, 0x01EC
    1a3e:	8d 87       	std	Y+13, r24	; 0x0d

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    1a40:	ce 01       	movw	r24, r28
    1a42:	e9 de       	rcall	.-558    	; 0x1816 <CDC_Device_Event_Stub>
    1a44:	0e c0       	rjmp	.+28     	; 0x1a62 <CDC_Device_ProcessControlRequest+0xd4>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1a46:	80 91 ea 01 	lds	r24, 0x01EA
    1a4a:	81 32       	cpi	r24, 0x21	; 33
    1a4c:	51 f4       	brne	.+20     	; 0x1a62 <CDC_Device_ProcessControlRequest+0xd4>
    1a4e:	80 91 e8 00 	lds	r24, 0x00E8
    1a52:	87 7f       	andi	r24, 0xF7	; 247
    1a54:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1a58:	42 d9       	rcall	.-3452   	; 0xcde <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1a5a:	ce 01       	movw	r24, r28
    1a5c:	60 91 ec 01 	lds	r22, 0x01EC
    1a60:	da de       	rcall	.-588    	; 0x1816 <CDC_Device_Event_Stub>
			}

			break;
	}
}
    1a62:	df 91       	pop	r29
    1a64:	cf 91       	pop	r28
    1a66:	08 95       	ret

00001a68 <MS_Device_USBTask>:

	return true;
}

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1a68:	cf 92       	push	r12
    1a6a:	df 92       	push	r13
    1a6c:	ef 92       	push	r14
    1a6e:	ff 92       	push	r15
    1a70:	0f 93       	push	r16
    1a72:	1f 93       	push	r17
    1a74:	df 93       	push	r29
    1a76:	cf 93       	push	r28
    1a78:	00 d0       	rcall	.+0      	; 0x1a7a <MS_Device_USBTask+0x12>
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
    1a7e:	8c 01       	movw	r16, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1a80:	80 91 e9 01 	lds	r24, 0x01E9
    1a84:	84 30       	cpi	r24, 0x04	; 4
    1a86:	09 f0       	breq	.+2      	; 0x1a8a <MS_Device_USBTask+0x22>
    1a88:	09 c1       	rjmp	.+530    	; 0x1c9c <MS_Device_USBTask+0x234>
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    1a8a:	f8 01       	movw	r30, r16
    1a8c:	95 81       	ldd	r25, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1a8e:	90 93 e9 00 	sts	0x00E9, r25
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1a92:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsReadWriteAllowed())
    1a96:	85 ff       	sbrs	r24, 5
    1a98:	cb c0       	rjmp	.+406    	; 0x1c30 <MS_Device_USBTask+0x1c8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1a9a:	90 93 e9 00 	sts	0x00E9, r25
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
	
	BytesProcessed = 0;
    1a9e:	1a 82       	std	Y+2, r1	; 0x02
    1aa0:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1aa2:	2a e0       	ldi	r18, 0x0A	; 10
    1aa4:	e2 2e       	mov	r14, r18
    1aa6:	f1 2c       	mov	r15, r1
    1aa8:	e0 0e       	add	r14, r16
    1aaa:	f1 1e       	adc	r15, r17
    1aac:	6e 01       	movw	r12, r28
    1aae:	08 94       	sec
    1ab0:	c1 1c       	adc	r12, r1
    1ab2:	d1 1c       	adc	r13, r1
    1ab4:	05 c0       	rjmp	.+10     	; 0x1ac0 <MS_Device_USBTask+0x58>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1ab6:	f8 01       	movw	r30, r16
    1ab8:	86 a9       	ldd	r24, Z+54	; 0x36
    1aba:	88 23       	and	r24, r24
    1abc:	09 f0       	breq	.+2      	; 0x1ac0 <MS_Device_USBTask+0x58>
    1abe:	b8 c0       	rjmp	.+368    	; 0x1c30 <MS_Device_USBTask+0x1c8>
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
	
	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1ac0:	c7 01       	movw	r24, r14
    1ac2:	6f e0       	ldi	r22, 0x0F	; 15
    1ac4:	70 e0       	ldi	r23, 0x00	; 0
    1ac6:	a6 01       	movw	r20, r12
    1ac8:	4e dd       	rcall	.-1380   	; 0x1566 <Endpoint_Read_Stream_LE>
    1aca:	85 30       	cpi	r24, 0x05	; 5
    1acc:	a1 f3       	breq	.-24     	; 0x1ab6 <MS_Device_USBTask+0x4e>
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != MS_CBW_SIGNATURE)                  ||
    1ace:	f8 01       	movw	r30, r16
    1ad0:	82 85       	ldd	r24, Z+10	; 0x0a
    1ad2:	93 85       	ldd	r25, Z+11	; 0x0b
    1ad4:	a4 85       	ldd	r26, Z+12	; 0x0c
    1ad6:	b5 85       	ldd	r27, Z+13	; 0x0d
    1ad8:	85 55       	subi	r24, 0x55	; 85
    1ada:	93 45       	sbci	r25, 0x53	; 83
    1adc:	a2 44       	sbci	r26, 0x42	; 66
    1ade:	b3 44       	sbci	r27, 0x43	; 67
    1ae0:	81 f4       	brne	.+32     	; 0x1b02 <MS_Device_USBTask+0x9a>
    1ae2:	f8 01       	movw	r30, r16
    1ae4:	97 89       	ldd	r25, Z+23	; 0x17
    1ae6:	81 85       	ldd	r24, Z+9	; 0x09
    1ae8:	98 17       	cp	r25, r24
    1aea:	58 f4       	brcc	.+22     	; 0x1b02 <MS_Device_USBTask+0x9a>
    1aec:	86 89       	ldd	r24, Z+22	; 0x16
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	8f 71       	andi	r24, 0x1F	; 31
    1af2:	90 70       	andi	r25, 0x00	; 0
    1af4:	89 2b       	or	r24, r25
    1af6:	29 f4       	brne	.+10     	; 0x1b02 <MS_Device_USBTask+0x9a>
    1af8:	80 8d       	ldd	r24, Z+24	; 0x18
    1afa:	88 23       	and	r24, r24
    1afc:	11 f0       	breq	.+4      	; 0x1b02 <MS_Device_USBTask+0x9a>
    1afe:	81 31       	cpi	r24, 0x11	; 17
    1b00:	78 f0       	brcs	.+30     	; 0x1b20 <MS_Device_USBTask+0xb8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1b02:	80 91 eb 00 	lds	r24, 0x00EB
    1b06:	80 62       	ori	r24, 0x20	; 32
    1b08:	80 93 eb 00 	sts	0x00EB, r24
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength >  16))
	{
		Endpoint_StallTransaction();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1b0c:	f8 01       	movw	r30, r16
    1b0e:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1b10:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1b14:	80 91 eb 00 	lds	r24, 0x00EB
    1b18:	80 62       	ori	r24, 0x20	; 32
    1b1a:	80 93 eb 00 	sts	0x00EB, r24
    1b1e:	88 c0       	rjmp	.+272    	; 0x1c30 <MS_Device_USBTask+0x1c8>
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
    1b20:	1a 82       	std	Y+2, r1	; 0x02
    1b22:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    1b24:	99 e1       	ldi	r25, 0x19	; 25
    1b26:	e9 2e       	mov	r14, r25
    1b28:	f1 2c       	mov	r15, r1
    1b2a:	e0 0e       	add	r14, r16
    1b2c:	f1 1e       	adc	r15, r17
    1b2e:	6e 01       	movw	r12, r28
    1b30:	08 94       	sec
    1b32:	c1 1c       	adc	r12, r1
    1b34:	d1 1c       	adc	r13, r1
    1b36:	05 c0       	rjmp	.+10     	; 0x1b42 <MS_Device_USBTask+0xda>
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1b38:	f8 01       	movw	r30, r16
    1b3a:	86 a9       	ldd	r24, Z+54	; 0x36
    1b3c:	88 23       	and	r24, r24
    1b3e:	09 f0       	breq	.+2      	; 0x1b42 <MS_Device_USBTask+0xda>
    1b40:	77 c0       	rjmp	.+238    	; 0x1c30 <MS_Device_USBTask+0x1c8>

		return false;
	}

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    1b42:	f8 01       	movw	r30, r16
    1b44:	60 8d       	ldd	r22, Z+24	; 0x18
    1b46:	c7 01       	movw	r24, r14
    1b48:	70 e0       	ldi	r23, 0x00	; 0
    1b4a:	a6 01       	movw	r20, r12
    1b4c:	0c dd       	rcall	.-1512   	; 0x1566 <Endpoint_Read_Stream_LE>
    1b4e:	85 30       	cpi	r24, 0x05	; 5
    1b50:	99 f3       	breq	.-26     	; 0x1b38 <MS_Device_USBTask+0xd0>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1b52:	80 91 e8 00 	lds	r24, 0x00E8
    1b56:	8b 77       	andi	r24, 0x7B	; 123
    1b58:	80 93 e8 00 	sts	0x00E8, r24

	if (Endpoint_IsReadWriteAllowed())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    1b5c:	f8 01       	movw	r30, r16
    1b5e:	86 89       	ldd	r24, Z+22	; 0x16
    1b60:	87 ff       	sbrs	r24, 7
    1b62:	03 c0       	rjmp	.+6      	; 0x1b6a <MS_Device_USBTask+0x102>
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1b64:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1b66:	80 93 e9 00 	sts	0x00E9, r24

			MSInterfaceInfo->State.CommandStatus.Status = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo) ?
    1b6a:	c8 01       	movw	r24, r16
    1b6c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <CALLBACK_MS_Device_SCSICommandReceived>
    1b70:	91 e0       	ldi	r25, 0x01	; 1
    1b72:	98 27       	eor	r25, r24
    1b74:	f8 01       	movw	r30, r16
    1b76:	95 ab       	std	Z+53, r25	; 0x35
			                                               MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
			MSInterfaceInfo->State.CommandStatus.Signature           = MS_CSW_SIGNATURE;
    1b78:	25 e5       	ldi	r18, 0x55	; 85
    1b7a:	33 e5       	ldi	r19, 0x53	; 83
    1b7c:	42 e4       	ldi	r20, 0x42	; 66
    1b7e:	53 e5       	ldi	r21, 0x53	; 83
    1b80:	21 a7       	std	Z+41, r18	; 0x29
    1b82:	32 a7       	std	Z+42, r19	; 0x2a
    1b84:	43 a7       	std	Z+43, r20	; 0x2b
    1b86:	54 a7       	std	Z+44, r21	; 0x2c
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    1b88:	26 85       	ldd	r18, Z+14	; 0x0e
    1b8a:	37 85       	ldd	r19, Z+15	; 0x0f
    1b8c:	40 89       	ldd	r20, Z+16	; 0x10
    1b8e:	51 89       	ldd	r21, Z+17	; 0x11
    1b90:	25 a7       	std	Z+45, r18	; 0x2d
    1b92:	36 a7       	std	Z+46, r19	; 0x2e
    1b94:	47 a7       	std	Z+47, r20	; 0x2f
    1b96:	50 ab       	std	Z+48, r21	; 0x30
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    1b98:	22 89       	ldd	r18, Z+18	; 0x12
    1b9a:	33 89       	ldd	r19, Z+19	; 0x13
    1b9c:	44 89       	ldd	r20, Z+20	; 0x14
    1b9e:	55 89       	ldd	r21, Z+21	; 0x15
    1ba0:	21 ab       	std	Z+49, r18	; 0x31
    1ba2:	32 ab       	std	Z+50, r19	; 0x32
    1ba4:	43 ab       	std	Z+51, r20	; 0x33
    1ba6:	54 ab       	std	Z+52, r21	; 0x34

			if ((MSInterfaceInfo->State.CommandStatus.Status == MS_SCSI_COMMAND_Fail) &&
    1ba8:	91 30       	cpi	r25, 0x01	; 1
    1baa:	51 f4       	brne	.+20     	; 0x1bc0 <MS_Device_USBTask+0x158>
    1bac:	21 15       	cp	r18, r1
    1bae:	31 05       	cpc	r19, r1
    1bb0:	41 05       	cpc	r20, r1
    1bb2:	51 05       	cpc	r21, r1
    1bb4:	29 f0       	breq	.+10     	; 0x1bc0 <MS_Device_USBTask+0x158>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1bb6:	80 91 eb 00 	lds	r24, 0x00EB
    1bba:	80 62       	ori	r24, 0x20	; 32
    1bbc:	80 93 eb 00 	sts	0x00EB, r24
	return true;
}

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    1bc0:	f8 01       	movw	r30, r16
    1bc2:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1bc4:	80 93 e9 00 	sts	0x00E9, r24
    1bc8:	05 c0       	rjmp	.+10     	; 0x1bd4 <MS_Device_USBTask+0x16c>

	while (Endpoint_IsStalled())
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
    1bca:	c3 dd       	rcall	.-1146   	; 0x1752 <USB_USBTask>
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1bcc:	f8 01       	movw	r30, r16
    1bce:	86 a9       	ldd	r24, Z+54	; 0x36
    1bd0:	88 23       	and	r24, r24
    1bd2:	71 f5       	brne	.+92     	; 0x1c30 <MS_Device_USBTask+0x1c8>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1bd4:	80 91 eb 00 	lds	r24, 0x00EB

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);

	while (Endpoint_IsStalled())
    1bd8:	85 fd       	sbrc	r24, 5
    1bda:	f7 cf       	rjmp	.-18     	; 0x1bca <MS_Device_USBTask+0x162>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1bdc:	f8 01       	movw	r30, r16
    1bde:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1be0:	80 93 e9 00 	sts	0x00E9, r24
    1be4:	05 c0       	rjmp	.+10     	; 0x1bf0 <MS_Device_USBTask+0x188>

	while (Endpoint_IsStalled())
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
    1be6:	b5 dd       	rcall	.-1174   	; 0x1752 <USB_USBTask>
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1be8:	f8 01       	movw	r30, r16
    1bea:	86 a9       	ldd	r24, Z+54	; 0x36
    1bec:	88 23       	and	r24, r24
    1bee:	01 f5       	brne	.+64     	; 0x1c30 <MS_Device_USBTask+0x1c8>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1bf0:	80 91 eb 00 	lds	r24, 0x00EB
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);

	while (Endpoint_IsStalled())
    1bf4:	85 fd       	sbrc	r24, 5
    1bf6:	f7 cf       	rjmp	.-18     	; 0x1be6 <MS_Device_USBTask+0x17e>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
    1bf8:	1a 82       	std	Y+2, r1	; 0x02
    1bfa:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    1bfc:	89 e2       	ldi	r24, 0x29	; 41
    1bfe:	e8 2e       	mov	r14, r24
    1c00:	f1 2c       	mov	r15, r1
    1c02:	e0 0e       	add	r14, r16
    1c04:	f1 1e       	adc	r15, r17
    1c06:	6e 01       	movw	r12, r28
    1c08:	08 94       	sec
    1c0a:	c1 1c       	adc	r12, r1
    1c0c:	d1 1c       	adc	r13, r1
    1c0e:	04 c0       	rjmp	.+8      	; 0x1c18 <MS_Device_USBTask+0x1b0>
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1c10:	f8 01       	movw	r30, r16
    1c12:	86 a9       	ldd	r24, Z+54	; 0x36
    1c14:	88 23       	and	r24, r24
    1c16:	61 f4       	brne	.+24     	; 0x1c30 <MS_Device_USBTask+0x1c8>
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    1c18:	c7 01       	movw	r24, r14
    1c1a:	6d e0       	ldi	r22, 0x0D	; 13
    1c1c:	70 e0       	ldi	r23, 0x00	; 0
    1c1e:	a6 01       	movw	r20, r12
    1c20:	46 dd       	rcall	.-1396   	; 0x16ae <Endpoint_Write_Stream_LE>
    1c22:	85 30       	cpi	r24, 0x05	; 5
    1c24:	a9 f3       	breq	.-22     	; 0x1c10 <MS_Device_USBTask+0x1a8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c26:	80 91 e8 00 	lds	r24, 0x00E8
    1c2a:	8e 77       	andi	r24, 0x7E	; 126
    1c2c:	80 93 e8 00 	sts	0x00E8, r24

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    1c30:	f8 01       	movw	r30, r16
    1c32:	86 a9       	ldd	r24, Z+54	; 0x36
    1c34:	88 23       	and	r24, r24
    1c36:	91 f1       	breq	.+100    	; 0x1c9c <MS_Device_USBTask+0x234>
	{
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    1c38:	45 81       	ldd	r20, Z+5	; 0x05
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    1c3a:	21 e0       	ldi	r18, 0x01	; 1
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	c9 01       	movw	r24, r18
    1c40:	04 2e       	mov	r0, r20
    1c42:	02 c0       	rjmp	.+4      	; 0x1c48 <MS_Device_USBTask+0x1e0>
    1c44:	88 0f       	add	r24, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	0a 94       	dec	r0
    1c4a:	e2 f7       	brpl	.-8      	; 0x1c44 <MS_Device_USBTask+0x1dc>
    1c4c:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1c50:	10 92 ea 00 	sts	0x00EA, r1
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1c54:	91 81       	ldd	r25, Z+1	; 0x01
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    1c56:	09 2e       	mov	r0, r25
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <MS_Device_USBTask+0x1f6>
    1c5a:	22 0f       	add	r18, r18
    1c5c:	33 1f       	adc	r19, r19
    1c5e:	0a 94       	dec	r0
    1c60:	e2 f7       	brpl	.-8      	; 0x1c5a <MS_Device_USBTask+0x1f2>
    1c62:	20 93 ea 00 	sts	0x00EA, r18
				UERST = 0;
    1c66:	10 92 ea 00 	sts	0x00EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1c6a:	40 93 e9 00 	sts	0x00E9, r20
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1c6e:	80 91 eb 00 	lds	r24, 0x00EB
    1c72:	80 61       	ori	r24, 0x10	; 16
    1c74:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1c78:	80 91 eb 00 	lds	r24, 0x00EB
    1c7c:	88 60       	ori	r24, 0x08	; 8
    1c7e:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1c82:	90 93 e9 00 	sts	0x00E9, r25
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1c86:	80 91 eb 00 	lds	r24, 0x00EB
    1c8a:	80 61       	ori	r24, 0x10	; 16
    1c8c:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1c90:	80 91 eb 00 	lds	r24, 0x00EB
    1c94:	88 60       	ori	r24, 0x08	; 8
    1c96:	80 93 eb 00 	sts	0x00EB, r24
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    1c9a:	16 aa       	std	Z+54, r1	; 0x36
	}
}
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	cf 91       	pop	r28
    1ca2:	df 91       	pop	r29
    1ca4:	1f 91       	pop	r17
    1ca6:	0f 91       	pop	r16
    1ca8:	ff 90       	pop	r15
    1caa:	ef 90       	pop	r14
    1cac:	df 90       	pop	r13
    1cae:	cf 90       	pop	r12
    1cb0:	08 95       	ret

00001cb2 <MS_Device_ConfigureEndpoints>:
			break;
	}
}

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1cb2:	1f 93       	push	r17
    1cb4:	cf 93       	push	r28
    1cb6:	df 93       	push	r29
    1cb8:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    1cba:	0a 96       	adiw	r24, 0x0a	; 10
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	8d e2       	ldi	r24, 0x2D	; 45
    1cc0:	df 01       	movw	r26, r30
    1cc2:	1d 92       	st	X+, r1
    1cc4:	8a 95       	dec	r24
    1cc6:	e9 f7       	brne	.-6      	; 0x1cc2 <MS_Device_ConfigureEndpoints+0x10>
    1cc8:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == MSInterfaceInfo->Config.DataINEndpointNumber)
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
    1ccc:	18 17       	cp	r17, r24
    1cce:	29 f4       	brne	.+10     	; 0x1cda <MS_Device_ConfigureEndpoints+0x28>
		{
			Size         = MSInterfaceInfo->Config.DataINEndpointSize;
    1cd0:	ea 81       	ldd	r30, Y+2	; 0x02
    1cd2:	fb 81       	ldd	r31, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataINEndpointDoubleBank;
    1cd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd6:	61 e0       	ldi	r22, 0x01	; 1
    1cd8:	07 c0       	rjmp	.+14     	; 0x1ce8 <MS_Device_ConfigureEndpoints+0x36>
		}
		else if (EndpointNum == MSInterfaceInfo->Config.DataOUTEndpointNumber)
    1cda:	8d 81       	ldd	r24, Y+5	; 0x05
    1cdc:	18 17       	cp	r17, r24
    1cde:	e9 f4       	brne	.+58     	; 0x1d1a <MS_Device_ConfigureEndpoints+0x68>
		{
			Size         = MSInterfaceInfo->Config.DataOUTEndpointSize;
    1ce0:	ee 81       	ldd	r30, Y+6	; 0x06
    1ce2:	ff 81       	ldd	r31, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataOUTEndpointDoubleBank;
    1ce4:	88 85       	ldd	r24, Y+8	; 0x08
    1ce6:	60 e0       	ldi	r22, 0x00	; 0
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
    1ce8:	88 23       	and	r24, r24
    1cea:	11 f4       	brne	.+4      	; 0x1cf0 <MS_Device_ConfigureEndpoints+0x3e>
    1cec:	40 e0       	ldi	r20, 0x00	; 0
    1cee:	01 c0       	rjmp	.+2      	; 0x1cf2 <MS_Device_ConfigureEndpoints+0x40>
    1cf0:	44 e0       	ldi	r20, 0x04	; 4
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	88 e0       	ldi	r24, 0x08	; 8
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	03 c0       	rjmp	.+6      	; 0x1d00 <MS_Device_ConfigureEndpoints+0x4e>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    1cfa:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    1cfc:	88 0f       	add	r24, r24
    1cfe:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1d00:	8e 17       	cp	r24, r30
    1d02:	9f 07       	cpc	r25, r31
    1d04:	d0 f3       	brcs	.-12     	; 0x1cfa <MS_Device_ConfigureEndpoints+0x48>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
    1d06:	60 68       	ori	r22, 0x80	; 128
    1d08:	42 60       	ori	r20, 0x02	; 2
    1d0a:	22 95       	swap	r18
    1d0c:	20 7f       	andi	r18, 0xF0	; 240
    1d0e:	42 2b       	or	r20, r18
    1d10:	81 2f       	mov	r24, r17
    1d12:	0e 94 3a 06 	call	0xc74	; 0xc74 <Endpoint_ConfigureEndpoint_Prv>
    1d16:	88 23       	and	r24, r24
    1d18:	21 f0       	breq	.+8      	; 0x1d22 <MS_Device_ConfigureEndpoints+0x70>

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
    1d1a:	1f 5f       	subi	r17, 0xFF	; 255
    1d1c:	17 30       	cpi	r17, 0x07	; 7
    1d1e:	a9 f6       	brne	.-86     	; 0x1cca <MS_Device_ConfigureEndpoints+0x18>
    1d20:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
    1d22:	df 91       	pop	r29
    1d24:	cf 91       	pop	r28
    1d26:	1f 91       	pop	r17
    1d28:	08 95       	ret

00001d2a <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorage.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1d2a:	cf 93       	push	r28
    1d2c:	df 93       	push	r29
    1d2e:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1d30:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    1d34:	83 ff       	sbrs	r24, 3
    1d36:	31 c0       	rjmp	.+98     	; 0x1d9a <MS_Device_ProcessControlRequest+0x70>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    1d38:	88 81       	ld	r24, Y
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	20 91 ee 01 	lds	r18, 0x01EE
    1d40:	30 91 ef 01 	lds	r19, 0x01EF
    1d44:	28 17       	cp	r18, r24
    1d46:	39 07       	cpc	r19, r25
    1d48:	41 f5       	brne	.+80     	; 0x1d9a <MS_Device_ProcessControlRequest+0x70>
	  return;

	switch (USB_ControlRequest.bRequest)
    1d4a:	80 91 eb 01 	lds	r24, 0x01EB
    1d4e:	8e 3f       	cpi	r24, 0xFE	; 254
    1d50:	81 f0       	breq	.+32     	; 0x1d72 <MS_Device_ProcessControlRequest+0x48>
    1d52:	8f 3f       	cpi	r24, 0xFF	; 255
    1d54:	11 f5       	brne	.+68     	; 0x1d9a <MS_Device_ProcessControlRequest+0x70>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1d56:	80 91 ea 01 	lds	r24, 0x01EA
    1d5a:	81 32       	cpi	r24, 0x21	; 33
    1d5c:	f1 f4       	brne	.+60     	; 0x1d9a <MS_Device_ProcessControlRequest+0x70>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1d5e:	80 91 e8 00 	lds	r24, 0x00E8
    1d62:	87 7f       	andi	r24, 0xF7	; 247
    1d64:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1d68:	0e 94 6f 06 	call	0xcde	; 0xcde <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	8e ab       	std	Y+54, r24	; 0x36
    1d70:	14 c0       	rjmp	.+40     	; 0x1d9a <MS_Device_ProcessControlRequest+0x70>
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1d72:	80 91 ea 01 	lds	r24, 0x01EA
    1d76:	81 3a       	cpi	r24, 0xA1	; 161
    1d78:	81 f4       	brne	.+32     	; 0x1d9a <MS_Device_ProcessControlRequest+0x70>
    1d7a:	80 91 e8 00 	lds	r24, 0x00E8
    1d7e:	87 7f       	andi	r24, 0xF7	; 247
    1d80:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    1d84:	89 85       	ldd	r24, Y+9	; 0x09
    1d86:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1d88:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1d8c:	80 91 e8 00 	lds	r24, 0x00E8
    1d90:	8e 77       	andi	r24, 0x7E	; 126
    1d92:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1d96:	0e 94 6f 06 	call	0xcde	; 0xcde <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    1d9a:	df 91       	pop	r29
    1d9c:	cf 91       	pop	r28
    1d9e:	08 95       	ret

00001da0 <fputs>:
    1da0:	ef 92       	push	r14
    1da2:	ff 92       	push	r15
    1da4:	0f 93       	push	r16
    1da6:	1f 93       	push	r17
    1da8:	cf 93       	push	r28
    1daa:	df 93       	push	r29
    1dac:	7c 01       	movw	r14, r24
    1dae:	8b 01       	movw	r16, r22
    1db0:	db 01       	movw	r26, r22
    1db2:	13 96       	adiw	r26, 0x03	; 3
    1db4:	8c 91       	ld	r24, X
    1db6:	81 fd       	sbrc	r24, 1
    1db8:	03 c0       	rjmp	.+6      	; 0x1dc0 <fputs+0x20>
    1dba:	cf ef       	ldi	r28, 0xFF	; 255
    1dbc:	df ef       	ldi	r29, 0xFF	; 255
    1dbe:	13 c0       	rjmp	.+38     	; 0x1de6 <fputs+0x46>
    1dc0:	c0 e0       	ldi	r28, 0x00	; 0
    1dc2:	d0 e0       	ldi	r29, 0x00	; 0
    1dc4:	0b c0       	rjmp	.+22     	; 0x1ddc <fputs+0x3c>
    1dc6:	d8 01       	movw	r26, r16
    1dc8:	18 96       	adiw	r26, 0x08	; 8
    1dca:	ed 91       	ld	r30, X+
    1dcc:	fc 91       	ld	r31, X
    1dce:	19 97       	sbiw	r26, 0x09	; 9
    1dd0:	b8 01       	movw	r22, r16
    1dd2:	09 95       	icall
    1dd4:	89 2b       	or	r24, r25
    1dd6:	11 f0       	breq	.+4      	; 0x1ddc <fputs+0x3c>
    1dd8:	cf ef       	ldi	r28, 0xFF	; 255
    1dda:	df ef       	ldi	r29, 0xFF	; 255
    1ddc:	f7 01       	movw	r30, r14
    1dde:	81 91       	ld	r24, Z+
    1de0:	7f 01       	movw	r14, r30
    1de2:	88 23       	and	r24, r24
    1de4:	81 f7       	brne	.-32     	; 0x1dc6 <fputs+0x26>
    1de6:	ce 01       	movw	r24, r28
    1de8:	df 91       	pop	r29
    1dea:	cf 91       	pop	r28
    1dec:	1f 91       	pop	r17
    1dee:	0f 91       	pop	r16
    1df0:	ff 90       	pop	r15
    1df2:	ef 90       	pop	r14
    1df4:	08 95       	ret

00001df6 <_exit>:
    1df6:	f8 94       	cli

00001df8 <__stop_program>:
    1df8:	ff cf       	rjmp	.-2      	; 0x1df8 <__stop_program>
