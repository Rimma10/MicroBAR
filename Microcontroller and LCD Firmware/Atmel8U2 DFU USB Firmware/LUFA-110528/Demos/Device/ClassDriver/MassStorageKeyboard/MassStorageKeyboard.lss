
MassStorageKeyboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007a  00800100  0000203a  000020ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000203a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  0080017a  0080017a  00002148  2**0
                  ALLOC
  3 .debug_aranges 00000518  00000000  00000000  00002148  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000e19  00000000  00000000  00002660  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000a418  00000000  00000000  00003479  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002596  00000000  00000000  0000d891  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00007861  00000000  00000000  0000fe27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000007b0  00000000  00000000  00017688  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000382f  00000000  00000000  00017e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003bee  00000000  00000000  0001b667  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000006d0  00000000  00000000  0001f255  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
 *  \param[in] BufferPtr     Pointer to the data source RAM buffer
 */
void DataflashManager_WriteBlocks_RAM(const uint32_t BlockAddress,
                                      uint16_t TotalBlocks,
                                      uint8_t* BufferPtr)
{
       0:	c4 c0       	rjmp	.+392    	; 0x18a <__ctors_end>
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       2:	00 00       	nop
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       4:	e0 c0       	rjmp	.+448    	; 0x1c6 <__bad_interrupt>
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       6:	00 00       	nop
       8:	de c0       	rjmp	.+444    	; 0x1c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	dc c0       	rjmp	.+440    	; 0x1c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	da c0       	rjmp	.+436    	; 0x1c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	d8 c0       	rjmp	.+432    	; 0x1c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	d6 c0       	rjmp	.+428    	; 0x1c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d4 c0       	rjmp	.+424    	; 0x1c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d2 c0       	rjmp	.+420    	; 0x1c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d0 c0       	rjmp	.+416    	; 0x1c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	83 c7       	rjmp	.+3846   	; 0xf30 <__vector_10>
      2a:	00 00       	nop
      2c:	44 c7       	rjmp	.+3720   	; 0xeb6 <__vector_11>
      2e:	00 00       	nop
      30:	ca c0       	rjmp	.+404    	; 0x1c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c8 c0       	rjmp	.+400    	; 0x1c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	c6 c0       	rjmp	.+396    	; 0x1c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c4 c0       	rjmp	.+392    	; 0x1c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c2 c0       	rjmp	.+388    	; 0x1c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c0       	rjmp	.+384    	; 0x1c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	be c0       	rjmp	.+380    	; 0x1c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c0       	rjmp	.+376    	; 0x1c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c0       	rjmp	.+372    	; 0x1c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c0       	rjmp	.+368    	; 0x1c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	b6 c0       	rjmp	.+364    	; 0x1c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b4 c0       	rjmp	.+360    	; 0x1c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b2 c0       	rjmp	.+356    	; 0x1c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	ae c0       	rjmp	.+348    	; 0x1c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ac c0       	rjmp	.+344    	; 0x1c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	aa c0       	rjmp	.+340    	; 0x1c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a8 c0       	rjmp	.+336    	; 0x1c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	a6 c0       	rjmp	.+332    	; 0x1c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 c0       	rjmp	.+328    	; 0x1c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a2 c0       	rjmp	.+324    	; 0x1c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a0 c0       	rjmp	.+320    	; 0x1c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	9e c0       	rjmp	.+316    	; 0x1c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9c c0       	rjmp	.+312    	; 0x1c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9a c0       	rjmp	.+308    	; 0x1c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	98 c0       	rjmp	.+304    	; 0x1c6 <__bad_interrupt>
      96:	00 00       	nop

00000098 <KeyboardReport>:
      98:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
      a8:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
      b8:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
      c8:	25 65 05 07 19 00 29 65 95 06 75 08 81 00 c0        %e....)e..u....

000000d7 <DeviceDescriptor>:
      d7:	12 01 10 01 00 00 00 08 eb 03 61 20 01 00 01 02     ..........a ....
      e7:	dc 01                                               ..

000000e9 <ConfigurationDescriptor>:
      e9:	09 02 39 00 02 01 00 80 32 09 04 00 00 02 08 06     ..9.....2.......
      f9:	50 00 07 05 83 02 40 00 01 07 05 04 02 40 00 01     P.....@......@..
     109:	09 04 01 00 01 03 01 01 00 09 21 11 01 00 01 22     ..........!...."
     119:	3f 00 07 05 81 03 08 00 01                          ?........

00000122 <LanguageString>:
     122:	04 03 09 04                                         ....

00000126 <ManufacturerString>:
     126:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     136:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000140 <ProductString>:
     140:	48 03 4c 00 55 00 46 00 41 00 20 00 4d 00 61 00     H.L.U.F.A. .M.a.
     150:	73 00 73 00 20 00 53 00 74 00 6f 00 72 00 61 00     s.s. .S.t.o.r.a.
     160:	67 00 65 00 20 00 61 00 6e 00 64 00 20 00 4b 00     g.e. .a.n.d. .K.
     170:	65 00 79 00 62 00 6f 00 61 00 72 00 64 00 20 00     e.y.b.o.a.r.d. .
     180:	44 00 65 00 6d 00 6f 00 00 00                       D.e.m.o...

0000018a <__ctors_end>:
     18a:	11 24       	eor	r1, r1
     18c:	1f be       	out	0x3f, r1	; 63
     18e:	cf ef       	ldi	r28, 0xFF	; 255
     190:	d0 e2       	ldi	r29, 0x20	; 32
     192:	de bf       	out	0x3e, r29	; 62
     194:	cd bf       	out	0x3d, r28	; 61

00000196 <__do_copy_data>:
     196:	11 e0       	ldi	r17, 0x01	; 1
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b1 e0       	ldi	r27, 0x01	; 1
     19c:	ea e3       	ldi	r30, 0x3A	; 58
     19e:	f0 e2       	ldi	r31, 0x20	; 32
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	aa 37       	cpi	r26, 0x7A	; 122
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	11 e0       	ldi	r17, 0x01	; 1
     1b2:	aa e7       	ldi	r26, 0x7A	; 122
     1b4:	b1 e0       	ldi	r27, 0x01	; 1
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	af 38       	cpi	r26, 0x8F	; 143
     1bc:	b1 07       	cpc	r27, r17
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	cb d0       	rcall	.+406    	; 0x358 <main>
     1c2:	0c 94 1b 10 	jmp	0x2036	; 0x2036 <_exit>

000001c6 <__bad_interrupt>:
     1c6:	1c cf       	rjmp	.-456    	; 0x0 <__vectors>

000001c8 <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     1c8:	8b b1       	in	r24, 0x0b	; 11
     1ca:	8f 70       	andi	r24, 0x0F	; 15
     1cc:	80 6a       	ori	r24, 0xA0	; 160
     1ce:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     1d0:	08 95       	ret

000001d2 <EVENT_USB_Device_Disconnect>:
     1d2:	8b b1       	in	r24, 0x0b	; 11
     1d4:	8f 70       	andi	r24, 0x0F	; 15
     1d6:	80 61       	ori	r24, 0x10	; 16
     1d8:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     1da:	08 95       	ret

000001dc <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     1dc:	80 91 42 01 	lds	r24, 0x0142
     1e0:	90 91 43 01 	lds	r25, 0x0143
     1e4:	00 97       	sbiw	r24, 0x00	; 0
     1e6:	29 f0       	breq	.+10     	; 0x1f2 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     1e8:	01 97       	sbiw	r24, 0x01	; 1
     1ea:	90 93 43 01 	sts	0x0143, r25
     1ee:	80 93 42 01 	sts	0x0142, r24
     1f2:	08 95       	ret

000001f4 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     1f4:	0f 93       	push	r16
     1f6:	1f 93       	push	r17
     1f8:	d8 01       	movw	r26, r16
	USB_KeyboardReport_Data_t* KeyboardReport = (USB_KeyboardReport_Data_t*)ReportData;
     1fa:	f9 01       	movw	r30, r18
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     1fc:	23 b1       	in	r18, 0x03	; 3
     1fe:	8c b1       	in	r24, 0x0c	; 12
     200:	80 95       	com	r24
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	80 73       	andi	r24, 0x30	; 48
     206:	90 70       	andi	r25, 0x00	; 0
     208:	95 95       	asr	r25
     20a:	87 95       	ror	r24
     20c:	20 95       	com	r18
     20e:	20 7e       	andi	r18, 0xE0	; 224
     210:	28 2b       	or	r18, r24
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     212:	3c b1       	in	r19, 0x0c	; 12

	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	KeyboardReport->Modifier = HID_KEYBOARD_MODIFER_LEFTSHIFT;
     214:	82 e0       	ldi	r24, 0x02	; 2
     216:	80 83       	st	Z, r24

	if (JoyStatus_LCL & JOY_UP)
     218:	27 ff       	sbrs	r18, 7
     21a:	02 c0       	rjmp	.+4      	; 0x220 <CALLBACK_HID_Device_CreateHIDReport+0x2c>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_A;
     21c:	84 e0       	ldi	r24, 0x04	; 4
     21e:	03 c0       	rjmp	.+6      	; 0x226 <CALLBACK_HID_Device_CreateHIDReport+0x32>
	else if (JoyStatus_LCL & JOY_DOWN)
     220:	24 ff       	sbrs	r18, 4
     222:	02 c0       	rjmp	.+4      	; 0x228 <CALLBACK_HID_Device_CreateHIDReport+0x34>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_B;
     224:	85 e0       	ldi	r24, 0x05	; 5
     226:	82 83       	std	Z+2, r24	; 0x02

	if (JoyStatus_LCL & JOY_LEFT)
     228:	92 2f       	mov	r25, r18
     22a:	26 ff       	sbrs	r18, 6
     22c:	02 c0       	rjmp	.+4      	; 0x232 <CALLBACK_HID_Device_CreateHIDReport+0x3e>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_C;
     22e:	86 e0       	ldi	r24, 0x06	; 6
     230:	03 c0       	rjmp	.+6      	; 0x238 <CALLBACK_HID_Device_CreateHIDReport+0x44>
	else if (JoyStatus_LCL & JOY_RIGHT)
     232:	23 ff       	sbrs	r18, 3
     234:	02 c0       	rjmp	.+4      	; 0x23a <CALLBACK_HID_Device_CreateHIDReport+0x46>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_D;
     236:	87 e0       	ldi	r24, 0x07	; 7
     238:	82 83       	std	Z+2, r24	; 0x02

	if (JoyStatus_LCL & JOY_PRESS)
     23a:	95 ff       	sbrs	r25, 5
     23c:	02 c0       	rjmp	.+4      	; 0x242 <CALLBACK_HID_Device_CreateHIDReport+0x4e>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_E;
     23e:	88 e0       	ldi	r24, 0x08	; 8
     240:	82 83       	std	Z+2, r24	; 0x02

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
     242:	32 fd       	sbrc	r19, 2
     244:	02 c0       	rjmp	.+4      	; 0x24a <CALLBACK_HID_Device_CreateHIDReport+0x56>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_F;
     246:	89 e0       	ldi	r24, 0x09	; 9
     248:	82 83       	std	Z+2, r24	; 0x02

	*ReportSize = sizeof(USB_KeyboardReport_Data_t);
     24a:	88 e0       	ldi	r24, 0x08	; 8
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	8d 93       	st	X+, r24
     250:	9c 93       	st	X, r25
	return false;
}
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	1f 91       	pop	r17
     256:	0f 91       	pop	r16
     258:	08 95       	ret

0000025a <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
     25a:	f9 01       	movw	r30, r18
	uint8_t  LEDMask   = LEDS_NO_LEDS;
	uint8_t* LEDReport = (uint8_t*)ReportData;

	if (*LEDReport & HID_KEYBOARD_LED_NUMLOCK)
     25c:	80 81       	ld	r24, Z
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	80 fd       	sbrc	r24, 0
     262:	90 e1       	ldi	r25, 0x10	; 16
	  LEDMask |= LEDS_LED1;

	if (*LEDReport & HID_KEYBOARD_LED_CAPSLOCK)
     264:	81 fd       	sbrc	r24, 1
	  LEDMask |= LEDS_LED3;
     266:	90 68       	ori	r25, 0x80	; 128

	if (*LEDReport & HID_KEYBOARD_LED_SCROLLLOCK)
     268:	82 fd       	sbrc	r24, 2
	  LEDMask |= LEDS_LED4;
     26a:	90 64       	ori	r25, 0x40	; 64
     26c:	8b b1       	in	r24, 0x0b	; 11
     26e:	8f 70       	andi	r24, 0x0F	; 15
     270:	98 2b       	or	r25, r24
     272:	9b b9       	out	0x0b, r25	; 11

	LEDs_SetAllLEDs(LEDMask);
}
     274:	08 95       	ret

00000276 <CALLBACK_MS_Device_SCSICommandReceived>:
     276:	2b b1       	in	r18, 0x0b	; 11
     278:	2f 70       	andi	r18, 0x0F	; 15
     27a:	20 62       	ori	r18, 0x20	; 32
     27c:	2b b9       	out	0x0b, r18	; 11
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
     27e:	10 d4       	rcall	.+2080   	; 0xaa0 <SCSI_DecodeSCSICommand>
     280:	9b b1       	in	r25, 0x0b	; 11
     282:	9f 70       	andi	r25, 0x0F	; 15
     284:	90 66       	ori	r25, 0x60	; 96
     286:	9b b9       	out	0x0b, r25	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);

	return CommandSuccess;
}
     288:	08 95       	ret

0000028a <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <MS_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Keyboard_HID_Interface);
     292:	87 e3       	ldi	r24, 0x37	; 55
     294:	91 e0       	ldi	r25, 0x01	; 1
     296:	0c 94 28 0d 	jmp	0x1a50	; 0x1a50 <HID_Device_ProcessControlRequest>

0000029a <EVENT_USB_Device_ConfigurationChanged>:
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
     29e:	87 e3       	ldi	r24, 0x37	; 55
     2a0:	91 e0       	ldi	r25, 0x01	; 1
     2a2:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <HID_Device_ConfigureEndpoints>
     2a6:	08 2f       	mov	r16, r24
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	91 e0       	ldi	r25, 0x01	; 1
     2ac:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MS_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     2b0:	90 91 e2 00 	lds	r25, 0x00E2
     2b4:	94 60       	ori	r25, 0x04	; 4
     2b6:	90 93 e2 00 	sts	0x00E2, r25

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     2ba:	10 e0       	ldi	r17, 0x00	; 0
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	08 23       	and	r16, r24
     2c0:	19 23       	and	r17, r25
     2c2:	00 ff       	sbrs	r16, 0
     2c4:	02 c0       	rjmp	.+4      	; 0x2ca <EVENT_USB_Device_ConfigurationChanged+0x30>
     2c6:	90 e6       	ldi	r25, 0x60	; 96
     2c8:	01 c0       	rjmp	.+2      	; 0x2cc <EVENT_USB_Device_ConfigurationChanged+0x32>
     2ca:	90 e9       	ldi	r25, 0x90	; 144
     2cc:	8b b1       	in	r24, 0x0b	; 11
     2ce:	8f 70       	andi	r24, 0x0F	; 15
     2d0:	98 2b       	or	r25, r24
     2d2:	9b b9       	out	0x0b, r25	; 11
}
     2d4:	1f 91       	pop	r17
     2d6:	0f 91       	pop	r16
     2d8:	08 95       	ret

000002da <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     2da:	84 b7       	in	r24, 0x34	; 52
     2dc:	87 7f       	andi	r24, 0xF7	; 247
     2de:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     2e0:	88 e1       	ldi	r24, 0x18	; 24
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	f8 94       	cli
     2e6:	80 93 60 00 	sts	0x0060, r24
     2ea:	10 92 60 00 	sts	0x0060, r1
     2ee:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	20 e8       	ldi	r18, 0x80	; 128
     2f6:	0f b6       	in	r0, 0x3f	; 63
     2f8:	f8 94       	cli
     2fa:	20 93 61 00 	sts	0x0061, r18
     2fe:	80 93 61 00 	sts	0x0061, r24
     302:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     304:	8a b1       	in	r24, 0x0a	; 10
     306:	80 6f       	ori	r24, 0xF0	; 240
     308:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     30a:	8b b1       	in	r24, 0x0b	; 11
     30c:	8f 70       	andi	r24, 0x0F	; 15
     30e:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
     310:	84 b1       	in	r24, 0x04	; 4
     312:	8f 71       	andi	r24, 0x1F	; 31
     314:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
     316:	8d b1       	in	r24, 0x0d	; 13
     318:	8f 7c       	andi	r24, 0xCF	; 207
     31a:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
     31c:	85 b1       	in	r24, 0x05	; 5
     31e:	80 6e       	ori	r24, 0xE0	; 224
     320:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
     322:	8e b1       	in	r24, 0x0e	; 14
     324:	80 63       	ori	r24, 0x30	; 48
     326:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     328:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     32a:	72 9a       	sbi	0x0e, 2	; 14
			 *  \param[in] SPIOptions  SPI Options, a mask consisting of one of each of the \c SPI_SPEED_*,
			 *                         \c SPI_SCK_*, \c SPI_SAMPLE_*, \c SPI_ORDER_* and \c SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				DDRB  |=  ((1 << 1) | (1 << 2));
     32c:	84 b1       	in	r24, 0x04	; 4
     32e:	86 60       	ori	r24, 0x06	; 6
     330:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~((1 << 0) | (1 << 3));
     332:	84 b1       	in	r24, 0x04	; 4
     334:	86 7f       	andi	r24, 0xF6	; 246
     336:	84 b9       	out	0x04, r24	; 4
				PORTB |=  ((1 << 0) | (1 << 3));
     338:	85 b1       	in	r24, 0x05	; 5
     33a:	89 60       	ori	r24, 0x09	; 9
     33c:	85 b9       	out	0x05, r24	; 5

				SPCR   = ((1 << SPE) | SPIOptions);
     33e:	8c e5       	ldi	r24, 0x5C	; 92
     340:	8c bd       	out	0x2c, r24	; 44

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     342:	8d b5       	in	r24, 0x2d	; 45
     344:	81 60       	ori	r24, 0x01	; 1
     346:	8d bd       	out	0x2d, r24	; 45
			/** Initialises the dataflash driver so that commands and data may be sent to an attached dataflash IC.
			 *  The microcontroller's SPI driver MUST be initialized before any of the dataflash commands are used.
			 */
			static inline void Dataflash_Init(void)
			{
				DATAFLASH_CHIPCS_DDR  |= DATAFLASH_CHIPCS_MASK;
     348:	8d b1       	in	r24, 0x0d	; 13
     34a:	83 60       	ori	r24, 0x03	; 3
     34c:	8d b9       	out	0x0d, r24	; 13
				DATAFLASH_CHIPCS_PORT |= DATAFLASH_CHIPCS_MASK;
     34e:	8e b1       	in	r24, 0x0e	; 14
     350:	83 60       	ori	r24, 0x03	; 3
     352:	8e b9       	out	0x0e, r24	; 14
	LEDs_Init();
	Joystick_Init();
	Buttons_Init();
	SPI_Init(SPI_SPEED_FCPU_DIV_2 | SPI_ORDER_MSB_FIRST | SPI_SCK_LEAD_FALLING | SPI_SAMPLE_TRAILING | SPI_MODE_MASTER);
	Dataflash_Init();
	USB_Init();
     354:	9a d5       	rcall	.+2868   	; 0xe8a <USB_Init>

	/* Clear Dataflash sector protections, if enabled */
	DataflashManager_ResetDataflashProtections();
}
     356:	97 c0       	rjmp	.+302    	; 0x486 <DataflashManager_ResetDataflashProtections>

00000358 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     358:	c0 df       	rcall	.-128    	; 0x2da <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     35a:	8b b1       	in	r24, 0x0b	; 11
     35c:	8f 70       	andi	r24, 0x0F	; 15
     35e:	80 61       	ori	r24, 0x10	; 16
     360:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     362:	78 94       	sei

	for (;;)
	{
		MS_Device_USBTask(&Disk_MS_Interface);
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	91 e0       	ldi	r25, 0x01	; 1
     368:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <MS_Device_USBTask>
		HID_Device_USBTask(&Keyboard_HID_Interface);
     36c:	87 e3       	ldi	r24, 0x37	; 55
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	0e 94 35 0c 	call	0x186a	; 0x186a <HID_Device_USBTask>
		USB_USBTask();
     374:	0e 94 22 0c 	call	0x1844	; 0x1844 <USB_USBTask>
     378:	f5 cf       	rjmp	.-22     	; 0x364 <main+0xc>

0000037a <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     37a:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     37c:	93 30       	cpi	r25, 0x03	; 3
     37e:	b1 f0       	breq	.+44     	; 0x3ac <CALLBACK_USB_GetDescriptor+0x32>
     380:	94 30       	cpi	r25, 0x04	; 4
     382:	28 f4       	brcc	.+10     	; 0x38e <CALLBACK_USB_GetDescriptor+0x14>
     384:	91 30       	cpi	r25, 0x01	; 1
     386:	41 f0       	breq	.+16     	; 0x398 <CALLBACK_USB_GetDescriptor+0x1e>
     388:	92 30       	cpi	r25, 0x02	; 2
     38a:	79 f5       	brne	.+94     	; 0x3ea <CALLBACK_USB_GetDescriptor+0x70>
     38c:	0a c0       	rjmp	.+20     	; 0x3a2 <CALLBACK_USB_GetDescriptor+0x28>
     38e:	91 32       	cpi	r25, 0x21	; 33
     390:	11 f1       	breq	.+68     	; 0x3d6 <CALLBACK_USB_GetDescriptor+0x5c>
     392:	92 32       	cpi	r25, 0x22	; 34
     394:	51 f5       	brne	.+84     	; 0x3ea <CALLBACK_USB_GetDescriptor+0x70>
     396:	24 c0       	rjmp	.+72     	; 0x3e0 <CALLBACK_USB_GetDescriptor+0x66>
     398:	e7 ed       	ldi	r30, 0xD7	; 215
     39a:	f0 e0       	ldi	r31, 0x00	; 0
     39c:	22 e1       	ldi	r18, 0x12	; 18
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	28 c0       	rjmp	.+80     	; 0x3f2 <CALLBACK_USB_GetDescriptor+0x78>
     3a2:	e9 ee       	ldi	r30, 0xE9	; 233
     3a4:	f0 e0       	ldi	r31, 0x00	; 0
     3a6:	29 e3       	ldi	r18, 0x39	; 57
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	23 c0       	rjmp	.+70     	; 0x3f2 <CALLBACK_USB_GetDescriptor+0x78>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     3ac:	81 30       	cpi	r24, 0x01	; 1
     3ae:	49 f0       	breq	.+18     	; 0x3c2 <CALLBACK_USB_GetDescriptor+0x48>
     3b0:	81 30       	cpi	r24, 0x01	; 1
     3b2:	18 f0       	brcs	.+6      	; 0x3ba <CALLBACK_USB_GetDescriptor+0x40>
     3b4:	82 30       	cpi	r24, 0x02	; 2
     3b6:	c9 f4       	brne	.+50     	; 0x3ea <CALLBACK_USB_GetDescriptor+0x70>
     3b8:	0a c0       	rjmp	.+20     	; 0x3ce <CALLBACK_USB_GetDescriptor+0x54>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     3ba:	e2 e2       	ldi	r30, 0x22	; 34
     3bc:	f1 e0       	ldi	r31, 0x01	; 1
     3be:	84 91       	lpm	r24, Z+
     3c0:	03 c0       	rjmp	.+6      	; 0x3c8 <CALLBACK_USB_GetDescriptor+0x4e>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     3c2:	e6 e2       	ldi	r30, 0x26	; 38
     3c4:	f1 e0       	ldi	r31, 0x01	; 1
     3c6:	84 91       	lpm	r24, Z+
     3c8:	28 2f       	mov	r18, r24
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	12 c0       	rjmp	.+36     	; 0x3f2 <CALLBACK_USB_GetDescriptor+0x78>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     3ce:	e0 e4       	ldi	r30, 0x40	; 64
     3d0:	f1 e0       	ldi	r31, 0x01	; 1
     3d2:	84 91       	lpm	r24, Z+
     3d4:	f9 cf       	rjmp	.-14     	; 0x3c8 <CALLBACK_USB_GetDescriptor+0x4e>
     3d6:	e2 e1       	ldi	r30, 0x12	; 18
     3d8:	f1 e0       	ldi	r31, 0x01	; 1
     3da:	29 e0       	ldi	r18, 0x09	; 9
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	09 c0       	rjmp	.+18     	; 0x3f2 <CALLBACK_USB_GetDescriptor+0x78>

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     3e0:	e8 e9       	ldi	r30, 0x98	; 152
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	2f e3       	ldi	r18, 0x3F	; 63
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <CALLBACK_USB_GetDescriptor+0x78>
     3ea:	e0 e0       	ldi	r30, 0x00	; 0
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	20 e0       	ldi	r18, 0x00	; 0
     3f0:	30 e0       	ldi	r19, 0x00	; 0
			Address = &KeyboardReport;
			Size    = sizeof(KeyboardReport);
			break;
	}

	*DescriptorAddress = Address;
     3f2:	ed 93       	st	X+, r30
     3f4:	fc 93       	st	X, r31
	return Size;
}
     3f6:	c9 01       	movw	r24, r18
     3f8:	08 95       	ret

000003fa <Dataflash_SelectChipFromPage>:
			 *
			 *  \param[in] PageAddress  Address of the page to manipulate, ranging from
			 *                          ((DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS) - 1).
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
     3fa:	9c 01       	movw	r18, r24
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     3fc:	8e b1       	in	r24, 0x0e	; 14
     3fe:	83 60       	ori	r24, 0x03	; 3
     400:	8e b9       	out	0x0e, r24	; 14
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
				Dataflash_DeselectChip();

				if (PageAddress >= (DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS))
     402:	80 e4       	ldi	r24, 0x40	; 64
     404:	20 30       	cpi	r18, 0x00	; 0
     406:	38 07       	cpc	r19, r24
     408:	58 f4       	brcc	.+22     	; 0x420 <Dataflash_SelectChipFromPage+0x26>
				  return;

				if (PageAddress & 0x01)
     40a:	20 ff       	sbrs	r18, 0
     40c:	05 c0       	rjmp	.+10     	; 0x418 <Dataflash_SelectChipFromPage+0x1e>
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     40e:	8e b1       	in	r24, 0x0e	; 14
     410:	8c 7f       	andi	r24, 0xFC	; 252
     412:	81 60       	ori	r24, 0x01	; 1
     414:	8e b9       	out	0x0e, r24	; 14
     416:	08 95       	ret
     418:	8e b1       	in	r24, 0x0e	; 14
     41a:	8c 7f       	andi	r24, 0xFC	; 252
     41c:	82 60       	ori	r24, 0x02	; 2
     41e:	8e b9       	out	0x0e, r24	; 14
     420:	08 95       	ret

00000422 <Dataflash_ToggleSelectedChipCS>:
			 *  or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     422:	8e b1       	in	r24, 0x0e	; 14
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     424:	9e b1       	in	r25, 0x0e	; 14
     426:	93 60       	ori	r25, 0x03	; 3
     428:	9e b9       	out	0x0e, r25	; 14
			{
				uint8_t SelectedChipMask = Dataflash_GetSelectedChip();

				Dataflash_DeselectChip();
				Dataflash_SelectChip(SelectedChipMask);
			}
     42a:	9e b1       	in	r25, 0x0e	; 14
     42c:	83 70       	andi	r24, 0x03	; 3
     42e:	9c 7f       	andi	r25, 0xFC	; 252
     430:	89 2b       	or	r24, r25
     432:	8e b9       	out	0x0e, r24	; 14
     434:	08 95       	ret

00000436 <Dataflash_WaitWhileBusy>:
			/** Spin-loops while the currently selected dataflash is busy executing a command, such as a main
			 *  memory page program or main memory to buffer transfer.
			 */
			static inline void Dataflash_WaitWhileBusy(void)
			{
				Dataflash_ToggleSelectedChipCS();
     436:	f5 df       	rcall	.-22     	; 0x422 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     438:	87 ed       	ldi	r24, 0xD7	; 215
     43a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     43c:	0d b4       	in	r0, 0x2d	; 45
     43e:	07 fe       	sbrs	r0, 7
     440:	fd cf       	rjmp	.-6      	; 0x43c <Dataflash_WaitWhileBusy+0x6>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     442:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     444:	0d b4       	in	r0, 0x2d	; 45
     446:	07 fe       	sbrs	r0, 7
     448:	fd cf       	rjmp	.-6      	; 0x444 <Dataflash_WaitWhileBusy+0xe>
				Dataflash_SendByte(DF_CMD_GETSTATUS);
				while (!(Dataflash_ReceiveByte() & DF_STATUS_READY));
     44a:	0e b4       	in	r0, 0x2e	; 46
     44c:	07 fe       	sbrs	r0, 7
     44e:	f9 cf       	rjmp	.-14     	; 0x442 <Dataflash_WaitWhileBusy+0xc>
				Dataflash_ToggleSelectedChipCS();
			}
     450:	e8 cf       	rjmp	.-48     	; 0x422 <Dataflash_ToggleSelectedChipCS>

00000452 <Dataflash_SendAddressBytes>:
			 *  \param[in] BufferByte   Address within the dataflash's buffer
			 */
			static inline void Dataflash_SendAddressBytes(uint16_t PageAddress,
			                                              const uint16_t BufferByte)
			{
				PageAddress >>= 1;
     452:	9c 01       	movw	r18, r24
     454:	36 95       	lsr	r19
     456:	27 95       	ror	r18

				Dataflash_SendByte(PageAddress >> 5);
     458:	36 e0       	ldi	r19, 0x06	; 6
     45a:	96 95       	lsr	r25
     45c:	87 95       	ror	r24
     45e:	3a 95       	dec	r19
     460:	e1 f7       	brne	.-8      	; 0x45a <Dataflash_SendAddressBytes+0x8>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     462:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     464:	0d b4       	in	r0, 0x2d	; 45
     466:	07 fe       	sbrs	r0, 7
     468:	fd cf       	rjmp	.-6      	; 0x464 <Dataflash_SendAddressBytes+0x12>
				Dataflash_SendByte((PageAddress << 3) | (BufferByte >> 8));
     46a:	82 2f       	mov	r24, r18
     46c:	88 0f       	add	r24, r24
     46e:	88 0f       	add	r24, r24
     470:	88 0f       	add	r24, r24
     472:	87 2b       	or	r24, r23
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     474:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     476:	0d b4       	in	r0, 0x2d	; 45
     478:	07 fe       	sbrs	r0, 7
     47a:	fd cf       	rjmp	.-6      	; 0x476 <Dataflash_SendAddressBytes+0x24>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     47c:	6e bd       	out	0x2e, r22	; 46
				while (!(SPSR & (1 << SPIF)));
     47e:	0d b4       	in	r0, 0x2d	; 45
     480:	07 fe       	sbrs	r0, 7
     482:	fd cf       	rjmp	.-6      	; 0x47e <Dataflash_SendAddressBytes+0x2c>
				Dataflash_SendByte(BufferByte);
			}
     484:	08 95       	ret

00000486 <DataflashManager_ResetDataflashProtections>:
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     486:	8e b1       	in	r24, 0x0e	; 14
     488:	8c 7f       	andi	r24, 0xFC	; 252
     48a:	82 60       	ori	r24, 0x02	; 2
     48c:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     48e:	87 ed       	ldi	r24, 0xD7	; 215
     490:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     492:	0d b4       	in	r0, 0x2d	; 45
     494:	07 fe       	sbrs	r0, 7
     496:	fd cf       	rjmp	.-6      	; 0x492 <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     498:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     49a:	0d b4       	in	r0, 0x2d	; 45
     49c:	07 fe       	sbrs	r0, 7
     49e:	fd cf       	rjmp	.-6      	; 0x49a <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     4a0:	0e b4       	in	r0, 0x2e	; 46
     4a2:	01 fe       	sbrs	r0, 1
     4a4:	15 c0       	rjmp	.+42     	; 0x4d0 <DataflashManager_ResetDataflashProtections+0x4a>
	{
		Dataflash_ToggleSelectedChipCS();
     4a6:	bd df       	rcall	.-134    	; 0x422 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4a8:	8d e3       	ldi	r24, 0x3D	; 61
     4aa:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4ac:	0d b4       	in	r0, 0x2d	; 45
     4ae:	07 fe       	sbrs	r0, 7
     4b0:	fd cf       	rjmp	.-6      	; 0x4ac <DataflashManager_ResetDataflashProtections+0x26>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4b2:	8a e2       	ldi	r24, 0x2A	; 42
     4b4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4b6:	0d b4       	in	r0, 0x2d	; 45
     4b8:	07 fe       	sbrs	r0, 7
     4ba:	fd cf       	rjmp	.-6      	; 0x4b6 <DataflashManager_ResetDataflashProtections+0x30>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4bc:	8f e7       	ldi	r24, 0x7F	; 127
     4be:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4c0:	0d b4       	in	r0, 0x2d	; 45
     4c2:	07 fe       	sbrs	r0, 7
     4c4:	fd cf       	rjmp	.-6      	; 0x4c0 <DataflashManager_ResetDataflashProtections+0x3a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4c6:	8a e9       	ldi	r24, 0x9A	; 154
     4c8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4ca:	0d b4       	in	r0, 0x2d	; 45
     4cc:	07 fe       	sbrs	r0, 7
     4ce:	fd cf       	rjmp	.-6      	; 0x4ca <DataflashManager_ResetDataflashProtections+0x44>
     4d0:	8e b1       	in	r24, 0x0e	; 14
     4d2:	8c 7f       	andi	r24, 0xFC	; 252
     4d4:	81 60       	ori	r24, 0x01	; 1
     4d6:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4d8:	87 ed       	ldi	r24, 0xD7	; 215
     4da:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4dc:	0d b4       	in	r0, 0x2d	; 45
     4de:	07 fe       	sbrs	r0, 7
     4e0:	fd cf       	rjmp	.-6      	; 0x4dc <DataflashManager_ResetDataflashProtections+0x56>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     4e2:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     4e4:	0d b4       	in	r0, 0x2d	; 45
     4e6:	07 fe       	sbrs	r0, 7
     4e8:	fd cf       	rjmp	.-6      	; 0x4e4 <DataflashManager_ResetDataflashProtections+0x5e>
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     4ea:	0e b4       	in	r0, 0x2e	; 46
     4ec:	01 fe       	sbrs	r0, 1
     4ee:	15 c0       	rjmp	.+42     	; 0x51a <DataflashManager_ResetDataflashProtections+0x94>
	{
		Dataflash_ToggleSelectedChipCS();
     4f0:	98 df       	rcall	.-208    	; 0x422 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4f2:	8d e3       	ldi	r24, 0x3D	; 61
     4f4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4f6:	0d b4       	in	r0, 0x2d	; 45
     4f8:	07 fe       	sbrs	r0, 7
     4fa:	fd cf       	rjmp	.-6      	; 0x4f6 <DataflashManager_ResetDataflashProtections+0x70>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4fc:	8a e2       	ldi	r24, 0x2A	; 42
     4fe:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     500:	0d b4       	in	r0, 0x2d	; 45
     502:	07 fe       	sbrs	r0, 7
     504:	fd cf       	rjmp	.-6      	; 0x500 <DataflashManager_ResetDataflashProtections+0x7a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     506:	8f e7       	ldi	r24, 0x7F	; 127
     508:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     50a:	0d b4       	in	r0, 0x2d	; 45
     50c:	07 fe       	sbrs	r0, 7
     50e:	fd cf       	rjmp	.-6      	; 0x50a <DataflashManager_ResetDataflashProtections+0x84>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     510:	8a e9       	ldi	r24, 0x9A	; 154
     512:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     514:	0d b4       	in	r0, 0x2d	; 45
     516:	07 fe       	sbrs	r0, 7
     518:	fd cf       	rjmp	.-6      	; 0x514 <DataflashManager_ResetDataflashProtections+0x8e>
     51a:	8e b1       	in	r24, 0x0e	; 14
     51c:	83 60       	ori	r24, 0x03	; 3
     51e:	8e b9       	out	0x0e, r24	; 14
	}
	#endif

	/* Deselect current Dataflash chip */
	Dataflash_DeselectChip();
}
     520:	08 95       	ret

00000522 <DataflashManager_CheckDataflashOperation>:
     522:	8e b1       	in	r24, 0x0e	; 14
     524:	8c 7f       	andi	r24, 0xFC	; 252
     526:	82 60       	ori	r24, 0x02	; 2
     528:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     52a:	8f e9       	ldi	r24, 0x9F	; 159
     52c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     52e:	0d b4       	in	r0, 0x2d	; 45
     530:	07 fe       	sbrs	r0, 7
     532:	fd cf       	rjmp	.-6      	; 0x52e <DataflashManager_CheckDataflashOperation+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     534:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     536:	0d b4       	in	r0, 0x2d	; 45
     538:	07 fe       	sbrs	r0, 7
     53a:	fd cf       	rjmp	.-6      	; 0x536 <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
     53c:	9e b5       	in	r25, 0x2e	; 46
     53e:	8e b1       	in	r24, 0x0e	; 14
     540:	83 60       	ori	r24, 0x03	; 3
     542:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     544:	9f 31       	cpi	r25, 0x1F	; 31
     546:	11 f0       	breq	.+4      	; 0x54c <DataflashManager_CheckDataflashOperation+0x2a>
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	08 95       	ret
     54c:	8e b1       	in	r24, 0x0e	; 14
     54e:	8c 7f       	andi	r24, 0xFC	; 252
     550:	81 60       	ori	r24, 0x01	; 1
     552:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     554:	8f e9       	ldi	r24, 0x9F	; 159
     556:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     558:	0d b4       	in	r0, 0x2d	; 45
     55a:	07 fe       	sbrs	r0, 7
     55c:	fd cf       	rjmp	.-6      	; 0x558 <DataflashManager_CheckDataflashOperation+0x36>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     55e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     560:	0d b4       	in	r0, 0x2d	; 45
     562:	07 fe       	sbrs	r0, 7
     564:	fd cf       	rjmp	.-6      	; 0x560 <DataflashManager_CheckDataflashOperation+0x3e>
				return SPDR;
     566:	9e b5       	in	r25, 0x2e	; 46
     568:	8e b1       	in	r24, 0x0e	; 14
     56a:	83 60       	ori	r24, 0x03	; 3
     56c:	8e b9       	out	0x0e, r24	; 14
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	9f 31       	cpi	r25, 0x1F	; 31
     572:	09 f4       	brne	.+2      	; 0x576 <DataflashManager_CheckDataflashOperation+0x54>
     574:	81 e0       	ldi	r24, 0x01	; 1
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     576:	08 95       	ret

00000578 <DataflashManager_ReadBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to read
 */
void DataflashManager_ReadBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
     578:	af 92       	push	r10
     57a:	bf 92       	push	r11
     57c:	cf 92       	push	r12
     57e:	df 92       	push	r13
     580:	ef 92       	push	r14
     582:	ff 92       	push	r15
     584:	0f 93       	push	r16
     586:	1f 93       	push	r17
     588:	df 93       	push	r29
     58a:	cf 93       	push	r28
     58c:	0f 92       	push	r0
     58e:	cd b7       	in	r28, 0x3d	; 61
     590:	de b7       	in	r29, 0x3e	; 62
     592:	5c 01       	movw	r10, r24
     594:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     596:	e9 e0       	ldi	r30, 0x09	; 9
     598:	44 0f       	add	r20, r20
     59a:	55 1f       	adc	r21, r21
     59c:	66 1f       	adc	r22, r22
     59e:	77 1f       	adc	r23, r23
     5a0:	ea 95       	dec	r30
     5a2:	d1 f7       	brne	.-12     	; 0x598 <DataflashManager_ReadBlocks+0x20>
     5a4:	db 01       	movw	r26, r22
     5a6:	ca 01       	movw	r24, r20
     5a8:	3a e0       	ldi	r19, 0x0A	; 10
     5aa:	b6 95       	lsr	r27
     5ac:	a7 95       	ror	r26
     5ae:	97 95       	ror	r25
     5b0:	87 95       	ror	r24
     5b2:	3a 95       	dec	r19
     5b4:	d1 f7       	brne	.-12     	; 0x5aa <DataflashManager_ReadBlocks+0x32>
     5b6:	8c 01       	movw	r16, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     5b8:	2f ef       	ldi	r18, 0xFF	; 255
     5ba:	c2 2e       	mov	r12, r18
     5bc:	23 e0       	ldi	r18, 0x03	; 3
     5be:	d2 2e       	mov	r13, r18
     5c0:	c4 22       	and	r12, r20
     5c2:	d5 22       	and	r13, r21
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     5c4:	1a df       	rcall	.-460    	; 0x3fa <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5c6:	82 ed       	ldi	r24, 0xD2	; 210
     5c8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     5ca:	0d b4       	in	r0, 0x2d	; 45
     5cc:	07 fe       	sbrs	r0, 7
     5ce:	fd cf       	rjmp	.-6      	; 0x5ca <DataflashManager_ReadBlocks+0x52>

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
     5d0:	c8 01       	movw	r24, r16
     5d2:	b6 01       	movw	r22, r12
     5d4:	3e df       	rcall	.-388    	; 0x452 <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5d6:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5d8:	0d b4       	in	r0, 0x2d	; 45
     5da:	07 fe       	sbrs	r0, 7
     5dc:	fd cf       	rjmp	.-6      	; 0x5d8 <DataflashManager_ReadBlocks+0x60>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5de:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5e0:	0d b4       	in	r0, 0x2d	; 45
     5e2:	07 fe       	sbrs	r0, 7
     5e4:	fd cf       	rjmp	.-6      	; 0x5e0 <DataflashManager_ReadBlocks+0x68>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5e6:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5e8:	0d b4       	in	r0, 0x2d	; 45
     5ea:	07 fe       	sbrs	r0, 7
     5ec:	fd cf       	rjmp	.-6      	; 0x5e8 <DataflashManager_ReadBlocks+0x70>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5ee:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5f0:	0d b4       	in	r0, 0x2d	; 45
     5f2:	07 fe       	sbrs	r0, 7
     5f4:	fd cf       	rjmp	.-6      	; 0x5f0 <DataflashManager_ReadBlocks+0x78>
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     5f6:	ce d3       	rcall	.+1948   	; 0xd94 <Endpoint_WaitUntilReady>
     5f8:	88 23       	and	r24, r24
     5fa:	09 f0       	breq	.+2      	; 0x5fe <DataflashManager_ReadBlocks+0x86>
     5fc:	c5 c0       	rjmp	.+394    	; 0x788 <DataflashManager_ReadBlocks+0x210>
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     5fe:	94 e0       	ldi	r25, 0x04	; 4
     600:	d6 94       	lsr	r13
     602:	c7 94       	ror	r12
     604:	9a 95       	dec	r25
     606:	e1 f7       	brne	.-8      	; 0x600 <DataflashManager_ReadBlocks+0x88>
     608:	9c 2d       	mov	r25, r12
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     60a:	82 ed       	ldi	r24, 0xD2	; 210
     60c:	c8 2e       	mov	r12, r24
     60e:	ac c0       	rjmp	.+344    	; 0x768 <DataflashManager_ReadBlocks+0x1f0>
     610:	dd 24       	eor	r13, r13
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     612:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently full */
			if (!(Endpoint_IsReadWriteAllowed()))
     616:	85 fd       	sbrc	r24, 5
     618:	0b c0       	rjmp	.+22     	; 0x630 <DataflashManager_ReadBlocks+0xb8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     61a:	80 91 e8 00 	lds	r24, 0x00E8
     61e:	8e 77       	andi	r24, 0x7E	; 126
     620:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the endpoint bank to send its contents to the host */
				Endpoint_ClearIN();

				/* Wait until the endpoint is ready for more data */
				if (Endpoint_WaitUntilReady())
     624:	99 83       	std	Y+1, r25	; 0x01
     626:	b6 d3       	rcall	.+1900   	; 0xd94 <Endpoint_WaitUntilReady>
     628:	99 81       	ldd	r25, Y+1	; 0x01
     62a:	88 23       	and	r24, r24
     62c:	09 f0       	breq	.+2      	; 0x630 <DataflashManager_ReadBlocks+0xb8>
     62e:	ac c0       	rjmp	.+344    	; 0x788 <DataflashManager_ReadBlocks+0x210>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     630:	90 34       	cpi	r25, 0x40	; 64
     632:	e9 f4       	brne	.+58     	; 0x66e <DataflashManager_ReadBlocks+0xf6>
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     634:	0f 5f       	subi	r16, 0xFF	; 255
     636:	1f 4f       	sbci	r17, 0xFF	; 255

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     638:	c8 01       	movw	r24, r16
     63a:	df de       	rcall	.-578    	; 0x3fa <Dataflash_SelectChipFromPage>
     63c:	ce bc       	out	0x2e, r12	; 46
				while (!(SPSR & (1 << SPIF)));
     63e:	0d b4       	in	r0, 0x2d	; 45
     640:	07 fe       	sbrs	r0, 7
     642:	fd cf       	rjmp	.-6      	; 0x63e <DataflashManager_ReadBlocks+0xc6>

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     644:	c8 01       	movw	r24, r16
     646:	60 e0       	ldi	r22, 0x00	; 0
     648:	70 e0       	ldi	r23, 0x00	; 0
     64a:	03 df       	rcall	.-506    	; 0x452 <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     64c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     64e:	0d b4       	in	r0, 0x2d	; 45
     650:	07 fe       	sbrs	r0, 7
     652:	fd cf       	rjmp	.-6      	; 0x64e <DataflashManager_ReadBlocks+0xd6>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     654:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     656:	0d b4       	in	r0, 0x2d	; 45
     658:	07 fe       	sbrs	r0, 7
     65a:	fd cf       	rjmp	.-6      	; 0x656 <DataflashManager_ReadBlocks+0xde>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     65c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     65e:	0d b4       	in	r0, 0x2d	; 45
     660:	07 fe       	sbrs	r0, 7
     662:	fd cf       	rjmp	.-6      	; 0x65e <DataflashManager_ReadBlocks+0xe6>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     664:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     666:	0d b4       	in	r0, 0x2d	; 45
     668:	07 fe       	sbrs	r0, 7
     66a:	fd cf       	rjmp	.-6      	; 0x666 <DataflashManager_ReadBlocks+0xee>
     66c:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     66e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     670:	0d b4       	in	r0, 0x2d	; 45
     672:	07 fe       	sbrs	r0, 7
     674:	fd cf       	rjmp	.-6      	; 0x670 <DataflashManager_ReadBlocks+0xf8>
				return SPDR;
     676:	8e b5       	in	r24, 0x2e	; 46
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     678:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     67c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     67e:	0d b4       	in	r0, 0x2d	; 45
     680:	07 fe       	sbrs	r0, 7
     682:	fd cf       	rjmp	.-6      	; 0x67e <DataflashManager_ReadBlocks+0x106>
				return SPDR;
     684:	8e b5       	in	r24, 0x2e	; 46
     686:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     68a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     68c:	0d b4       	in	r0, 0x2d	; 45
     68e:	07 fe       	sbrs	r0, 7
     690:	fd cf       	rjmp	.-6      	; 0x68c <DataflashManager_ReadBlocks+0x114>
				return SPDR;
     692:	8e b5       	in	r24, 0x2e	; 46
     694:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     698:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     69a:	0d b4       	in	r0, 0x2d	; 45
     69c:	07 fe       	sbrs	r0, 7
     69e:	fd cf       	rjmp	.-6      	; 0x69a <DataflashManager_ReadBlocks+0x122>
				return SPDR;
     6a0:	8e b5       	in	r24, 0x2e	; 46
     6a2:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6a6:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6a8:	0d b4       	in	r0, 0x2d	; 45
     6aa:	07 fe       	sbrs	r0, 7
     6ac:	fd cf       	rjmp	.-6      	; 0x6a8 <DataflashManager_ReadBlocks+0x130>
				return SPDR;
     6ae:	8e b5       	in	r24, 0x2e	; 46
     6b0:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6b4:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6b6:	0d b4       	in	r0, 0x2d	; 45
     6b8:	07 fe       	sbrs	r0, 7
     6ba:	fd cf       	rjmp	.-6      	; 0x6b6 <DataflashManager_ReadBlocks+0x13e>
				return SPDR;
     6bc:	8e b5       	in	r24, 0x2e	; 46
     6be:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6c2:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6c4:	0d b4       	in	r0, 0x2d	; 45
     6c6:	07 fe       	sbrs	r0, 7
     6c8:	fd cf       	rjmp	.-6      	; 0x6c4 <DataflashManager_ReadBlocks+0x14c>
				return SPDR;
     6ca:	8e b5       	in	r24, 0x2e	; 46
     6cc:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6d0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6d2:	0d b4       	in	r0, 0x2d	; 45
     6d4:	07 fe       	sbrs	r0, 7
     6d6:	fd cf       	rjmp	.-6      	; 0x6d2 <DataflashManager_ReadBlocks+0x15a>
				return SPDR;
     6d8:	8e b5       	in	r24, 0x2e	; 46
     6da:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6de:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6e0:	0d b4       	in	r0, 0x2d	; 45
     6e2:	07 fe       	sbrs	r0, 7
     6e4:	fd cf       	rjmp	.-6      	; 0x6e0 <DataflashManager_ReadBlocks+0x168>
				return SPDR;
     6e6:	8e b5       	in	r24, 0x2e	; 46
     6e8:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6ec:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6ee:	0d b4       	in	r0, 0x2d	; 45
     6f0:	07 fe       	sbrs	r0, 7
     6f2:	fd cf       	rjmp	.-6      	; 0x6ee <DataflashManager_ReadBlocks+0x176>
				return SPDR;
     6f4:	8e b5       	in	r24, 0x2e	; 46
     6f6:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6fa:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6fc:	0d b4       	in	r0, 0x2d	; 45
     6fe:	07 fe       	sbrs	r0, 7
     700:	fd cf       	rjmp	.-6      	; 0x6fc <DataflashManager_ReadBlocks+0x184>
				return SPDR;
     702:	8e b5       	in	r24, 0x2e	; 46
     704:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     708:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     70a:	0d b4       	in	r0, 0x2d	; 45
     70c:	07 fe       	sbrs	r0, 7
     70e:	fd cf       	rjmp	.-6      	; 0x70a <DataflashManager_ReadBlocks+0x192>
				return SPDR;
     710:	8e b5       	in	r24, 0x2e	; 46
     712:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     716:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     718:	0d b4       	in	r0, 0x2d	; 45
     71a:	07 fe       	sbrs	r0, 7
     71c:	fd cf       	rjmp	.-6      	; 0x718 <DataflashManager_ReadBlocks+0x1a0>
				return SPDR;
     71e:	8e b5       	in	r24, 0x2e	; 46
     720:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     724:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     726:	0d b4       	in	r0, 0x2d	; 45
     728:	07 fe       	sbrs	r0, 7
     72a:	fd cf       	rjmp	.-6      	; 0x726 <DataflashManager_ReadBlocks+0x1ae>
				return SPDR;
     72c:	8e b5       	in	r24, 0x2e	; 46
     72e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     732:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     734:	0d b4       	in	r0, 0x2d	; 45
     736:	07 fe       	sbrs	r0, 7
     738:	fd cf       	rjmp	.-6      	; 0x734 <DataflashManager_ReadBlocks+0x1bc>
				return SPDR;
     73a:	8e b5       	in	r24, 0x2e	; 46
     73c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     740:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     742:	0d b4       	in	r0, 0x2d	; 45
     744:	07 fe       	sbrs	r0, 7
     746:	fd cf       	rjmp	.-6      	; 0x742 <DataflashManager_ReadBlocks+0x1ca>
				return SPDR;
     748:	8e b5       	in	r24, 0x2e	; 46
     74a:	80 93 f1 00 	sts	0x00F1, r24

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     74e:	f5 01       	movw	r30, r10
     750:	86 a9       	ldd	r24, Z+54	; 0x36
     752:	88 23       	and	r24, r24
     754:	c9 f4       	brne	.+50     	; 0x788 <DataflashManager_ReadBlocks+0x210>
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     756:	9f 5f       	subi	r25, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     758:	d3 94       	inc	r13
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     75a:	f0 e2       	ldi	r31, 0x20	; 32
     75c:	df 16       	cp	r13, r31
     75e:	09 f0       	breq	.+2      	; 0x762 <DataflashManager_ReadBlocks+0x1ea>
     760:	58 cf       	rjmp	.-336    	; 0x612 <DataflashManager_ReadBlocks+0x9a>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     762:	08 94       	sec
     764:	e1 08       	sbc	r14, r1
     766:	f1 08       	sbc	r15, r1

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     768:	e1 14       	cp	r14, r1
     76a:	f1 04       	cpc	r15, r1
     76c:	09 f0       	breq	.+2      	; 0x770 <DataflashManager_ReadBlocks+0x1f8>
     76e:	50 cf       	rjmp	.-352    	; 0x610 <DataflashManager_ReadBlocks+0x98>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     770:	80 91 e8 00 	lds	r24, 0x00E8
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     774:	85 fd       	sbrc	r24, 5
     776:	05 c0       	rjmp	.+10     	; 0x782 <DataflashManager_ReadBlocks+0x20a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     778:	80 91 e8 00 	lds	r24, 0x00E8
     77c:	8e 77       	andi	r24, 0x7E	; 126
     77e:	80 93 e8 00 	sts	0x00E8, r24
     782:	8e b1       	in	r24, 0x0e	; 14
     784:	83 60       	ori	r24, 0x03	; 3
     786:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearIN();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     788:	0f 90       	pop	r0
     78a:	cf 91       	pop	r28
     78c:	df 91       	pop	r29
     78e:	1f 91       	pop	r17
     790:	0f 91       	pop	r16
     792:	ff 90       	pop	r15
     794:	ef 90       	pop	r14
     796:	df 90       	pop	r13
     798:	cf 90       	pop	r12
     79a:	bf 90       	pop	r11
     79c:	af 90       	pop	r10
     79e:	08 95       	ret

000007a0 <DataflashManager_WriteBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
void DataflashManager_WriteBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
     7a0:	8f 92       	push	r8
     7a2:	9f 92       	push	r9
     7a4:	af 92       	push	r10
     7a6:	bf 92       	push	r11
     7a8:	cf 92       	push	r12
     7aa:	df 92       	push	r13
     7ac:	ef 92       	push	r14
     7ae:	ff 92       	push	r15
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
     7b4:	df 93       	push	r29
     7b6:	cf 93       	push	r28
     7b8:	0f 92       	push	r0
     7ba:	cd b7       	in	r28, 0x3d	; 61
     7bc:	de b7       	in	r29, 0x3e	; 62
     7be:	5c 01       	movw	r10, r24
     7c0:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     7c2:	09 e0       	ldi	r16, 0x09	; 9
     7c4:	44 0f       	add	r20, r20
     7c6:	55 1f       	adc	r21, r21
     7c8:	66 1f       	adc	r22, r22
     7ca:	77 1f       	adc	r23, r23
     7cc:	0a 95       	dec	r16
     7ce:	d1 f7       	brne	.-12     	; 0x7c4 <DataflashManager_WriteBlocks+0x24>
     7d0:	db 01       	movw	r26, r22
     7d2:	ca 01       	movw	r24, r20
     7d4:	1a e0       	ldi	r17, 0x0A	; 10
     7d6:	b6 95       	lsr	r27
     7d8:	a7 95       	ror	r26
     7da:	97 95       	ror	r25
     7dc:	87 95       	ror	r24
     7de:	1a 95       	dec	r17
     7e0:	d1 f7       	brne	.-12     	; 0x7d6 <DataflashManager_WriteBlocks+0x36>
     7e2:	8c 01       	movw	r16, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     7e4:	bf ef       	ldi	r27, 0xFF	; 255
     7e6:	cb 2e       	mov	r12, r27
     7e8:	b3 e0       	ldi	r27, 0x03	; 3
     7ea:	db 2e       	mov	r13, r27
     7ec:	c4 22       	and	r12, r20
     7ee:	d5 22       	and	r13, r21
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
	bool     UsingSecondBuffer   = false;

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     7f0:	04 de       	rcall	.-1016   	; 0x3fa <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7f2:	83 e5       	ldi	r24, 0x53	; 83
     7f4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7f6:	0d b4       	in	r0, 0x2d	; 45
     7f8:	07 fe       	sbrs	r0, 7
     7fa:	fd cf       	rjmp	.-6      	; 0x7f6 <DataflashManager_WriteBlocks+0x56>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
	/* Copy selected dataflash's current page contents to the Dataflash buffer */
	Dataflash_SendByte(DF_CMD_MAINMEMTOBUFF1);
	Dataflash_SendAddressBytes(CurrDFPage, 0);
     7fc:	c8 01       	movw	r24, r16
     7fe:	60 e0       	ldi	r22, 0x00	; 0
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	27 de       	rcall	.-946    	; 0x452 <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     804:	18 de       	rcall	.-976    	; 0x436 <Dataflash_WaitWhileBusy>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     806:	84 e8       	ldi	r24, 0x84	; 132
     808:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     80a:	0d b4       	in	r0, 0x2d	; 45
     80c:	07 fe       	sbrs	r0, 7
     80e:	fd cf       	rjmp	.-6      	; 0x80a <DataflashManager_WriteBlocks+0x6a>
#endif

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	b6 01       	movw	r22, r12
     816:	1d de       	rcall	.-966    	; 0x452 <Dataflash_SendAddressBytes>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     818:	bd d2       	rcall	.+1402   	; 0xd94 <Endpoint_WaitUntilReady>
     81a:	88 23       	and	r24, r24
     81c:	09 f0       	breq	.+2      	; 0x820 <DataflashManager_WriteBlocks+0x80>
     81e:	ea c0       	rjmp	.+468    	; 0x9f4 <DataflashManager_WriteBlocks+0x254>
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     820:	a4 e0       	ldi	r26, 0x04	; 4
     822:	d6 94       	lsr	r13
     824:	c7 94       	ror	r12
     826:	aa 95       	dec	r26
     828:	e1 f7       	brne	.-8      	; 0x822 <DataflashManager_WriteBlocks+0x82>
     82a:	9c 2d       	mov	r25, r12
     82c:	47 01       	movw	r8, r14
     82e:	f5 e0       	ldi	r31, 0x05	; 5
     830:	88 0c       	add	r8, r8
     832:	99 1c       	adc	r9, r9
     834:	fa 95       	dec	r31
     836:	e1 f7       	brne	.-8      	; 0x830 <DataflashManager_WriteBlocks+0x90>
     838:	dd 24       	eor	r13, r13
     83a:	bd c0       	rjmp	.+378    	; 0x9b6 <DataflashManager_WriteBlocks+0x216>
     83c:	cc 24       	eor	r12, r12
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     83e:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently empty */
			if (!(Endpoint_IsReadWriteAllowed()))
     842:	85 fd       	sbrc	r24, 5
     844:	0b c0       	rjmp	.+22     	; 0x85c <DataflashManager_WriteBlocks+0xbc>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     846:	80 91 e8 00 	lds	r24, 0x00E8
     84a:	8b 77       	andi	r24, 0x7B	; 123
     84c:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the current endpoint bank */
				Endpoint_ClearOUT();

				/* Wait until the host has sent another packet */
				if (Endpoint_WaitUntilReady())
     850:	99 83       	std	Y+1, r25	; 0x01
     852:	a0 d2       	rcall	.+1344   	; 0xd94 <Endpoint_WaitUntilReady>
     854:	99 81       	ldd	r25, Y+1	; 0x01
     856:	88 23       	and	r24, r24
     858:	09 f0       	breq	.+2      	; 0x85c <DataflashManager_WriteBlocks+0xbc>
     85a:	cc c0       	rjmp	.+408    	; 0x9f4 <DataflashManager_WriteBlocks+0x254>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     85c:	90 34       	cpi	r25, 0x40	; 64
     85e:	09 f0       	breq	.+2      	; 0x862 <DataflashManager_WriteBlocks+0xc2>
     860:	39 c0       	rjmp	.+114    	; 0x8d4 <DataflashManager_WriteBlocks+0x134>
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
     862:	e9 dd       	rcall	.-1070   	; 0x436 <Dataflash_WaitWhileBusy>
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     864:	dd 20       	and	r13, r13
     866:	11 f4       	brne	.+4      	; 0x86c <DataflashManager_WriteBlocks+0xcc>
     868:	83 e8       	ldi	r24, 0x83	; 131
     86a:	01 c0       	rjmp	.+2      	; 0x86e <DataflashManager_WriteBlocks+0xce>
     86c:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     86e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     870:	0d b4       	in	r0, 0x2d	; 45
     872:	07 fe       	sbrs	r0, 7
     874:	fd cf       	rjmp	.-6      	; 0x870 <DataflashManager_WriteBlocks+0xd0>
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     876:	c8 01       	movw	r24, r16
     878:	60 e0       	ldi	r22, 0x00	; 0
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	ea dd       	rcall	.-1068   	; 0x452 <Dataflash_SendAddressBytes>

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     87e:	0f 5f       	subi	r16, 0xFF	; 255
     880:	1f 4f       	sbci	r17, 0xFF	; 255
			 *  or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     882:	8e b1       	in	r24, 0x0e	; 14

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     884:	83 70       	andi	r24, 0x03	; 3
     886:	81 30       	cpi	r24, 0x01	; 1
     888:	09 f4       	brne	.+2      	; 0x88c <DataflashManager_WriteBlocks+0xec>
				  UsingSecondBuffer = !(UsingSecondBuffer);
     88a:	d8 26       	eor	r13, r24

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     88c:	c8 01       	movw	r24, r16
     88e:	b5 dd       	rcall	.-1174   	; 0x3fa <Dataflash_SelectChipFromPage>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     890:	20 e4       	ldi	r18, 0x40	; 64
     892:	82 16       	cp	r8, r18
     894:	91 04       	cpc	r9, r1
     896:	78 f4       	brcc	.+30     	; 0x8b6 <DataflashManager_WriteBlocks+0x116>
				{
					/* Copy selected dataflash's current page contents to the Dataflash buffer */
					Dataflash_WaitWhileBusy();
     898:	ce dd       	rcall	.-1124   	; 0x436 <Dataflash_WaitWhileBusy>
					Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_MAINMEMTOBUFF2 : DF_CMD_MAINMEMTOBUFF1);
     89a:	dd 20       	and	r13, r13
     89c:	11 f4       	brne	.+4      	; 0x8a2 <DataflashManager_WriteBlocks+0x102>
     89e:	83 e5       	ldi	r24, 0x53	; 83
     8a0:	01 c0       	rjmp	.+2      	; 0x8a4 <DataflashManager_WriteBlocks+0x104>
     8a2:	85 e5       	ldi	r24, 0x55	; 85
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8a4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8a6:	0d b4       	in	r0, 0x2d	; 45
     8a8:	07 fe       	sbrs	r0, 7
     8aa:	fd cf       	rjmp	.-6      	; 0x8a6 <DataflashManager_WriteBlocks+0x106>
					Dataflash_SendAddressBytes(CurrDFPage, 0);
     8ac:	c8 01       	movw	r24, r16
     8ae:	60 e0       	ldi	r22, 0x00	; 0
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	cf dd       	rcall	.-1122   	; 0x452 <Dataflash_SendAddressBytes>
					Dataflash_WaitWhileBusy();
     8b4:	c0 dd       	rcall	.-1152   	; 0x436 <Dataflash_WaitWhileBusy>
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
     8b6:	dd 20       	and	r13, r13
     8b8:	11 f4       	brne	.+4      	; 0x8be <DataflashManager_WriteBlocks+0x11e>
     8ba:	84 e8       	ldi	r24, 0x84	; 132
     8bc:	01 c0       	rjmp	.+2      	; 0x8c0 <DataflashManager_WriteBlocks+0x120>
     8be:	87 e8       	ldi	r24, 0x87	; 135
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8c0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8c2:	0d b4       	in	r0, 0x2d	; 45
     8c4:	07 fe       	sbrs	r0, 7
     8c6:	fd cf       	rjmp	.-6      	; 0x8c2 <DataflashManager_WriteBlocks+0x122>
				Dataflash_SendAddressBytes(0, 0);
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	c0 dd       	rcall	.-1152   	; 0x452 <Dataflash_SendAddressBytes>
     8d2:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     8d4:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8d8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8da:	0d b4       	in	r0, 0x2d	; 45
     8dc:	07 fe       	sbrs	r0, 7
     8de:	fd cf       	rjmp	.-6      	; 0x8da <DataflashManager_WriteBlocks+0x13a>
     8e0:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8e4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8e6:	0d b4       	in	r0, 0x2d	; 45
     8e8:	07 fe       	sbrs	r0, 7
     8ea:	fd cf       	rjmp	.-6      	; 0x8e6 <DataflashManager_WriteBlocks+0x146>
     8ec:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8f0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8f2:	0d b4       	in	r0, 0x2d	; 45
     8f4:	07 fe       	sbrs	r0, 7
     8f6:	fd cf       	rjmp	.-6      	; 0x8f2 <DataflashManager_WriteBlocks+0x152>
     8f8:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8fc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8fe:	0d b4       	in	r0, 0x2d	; 45
     900:	07 fe       	sbrs	r0, 7
     902:	fd cf       	rjmp	.-6      	; 0x8fe <DataflashManager_WriteBlocks+0x15e>
     904:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     908:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     90a:	0d b4       	in	r0, 0x2d	; 45
     90c:	07 fe       	sbrs	r0, 7
     90e:	fd cf       	rjmp	.-6      	; 0x90a <DataflashManager_WriteBlocks+0x16a>
     910:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     914:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     916:	0d b4       	in	r0, 0x2d	; 45
     918:	07 fe       	sbrs	r0, 7
     91a:	fd cf       	rjmp	.-6      	; 0x916 <DataflashManager_WriteBlocks+0x176>
     91c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     920:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     922:	0d b4       	in	r0, 0x2d	; 45
     924:	07 fe       	sbrs	r0, 7
     926:	fd cf       	rjmp	.-6      	; 0x922 <DataflashManager_WriteBlocks+0x182>
     928:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     92c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     92e:	0d b4       	in	r0, 0x2d	; 45
     930:	07 fe       	sbrs	r0, 7
     932:	fd cf       	rjmp	.-6      	; 0x92e <DataflashManager_WriteBlocks+0x18e>
     934:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     938:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     93a:	0d b4       	in	r0, 0x2d	; 45
     93c:	07 fe       	sbrs	r0, 7
     93e:	fd cf       	rjmp	.-6      	; 0x93a <DataflashManager_WriteBlocks+0x19a>
     940:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     944:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     946:	0d b4       	in	r0, 0x2d	; 45
     948:	07 fe       	sbrs	r0, 7
     94a:	fd cf       	rjmp	.-6      	; 0x946 <DataflashManager_WriteBlocks+0x1a6>
     94c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     950:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     952:	0d b4       	in	r0, 0x2d	; 45
     954:	07 fe       	sbrs	r0, 7
     956:	fd cf       	rjmp	.-6      	; 0x952 <DataflashManager_WriteBlocks+0x1b2>
     958:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     95c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     95e:	0d b4       	in	r0, 0x2d	; 45
     960:	07 fe       	sbrs	r0, 7
     962:	fd cf       	rjmp	.-6      	; 0x95e <DataflashManager_WriteBlocks+0x1be>
     964:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     968:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     96a:	0d b4       	in	r0, 0x2d	; 45
     96c:	07 fe       	sbrs	r0, 7
     96e:	fd cf       	rjmp	.-6      	; 0x96a <DataflashManager_WriteBlocks+0x1ca>
     970:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     974:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     976:	0d b4       	in	r0, 0x2d	; 45
     978:	07 fe       	sbrs	r0, 7
     97a:	fd cf       	rjmp	.-6      	; 0x976 <DataflashManager_WriteBlocks+0x1d6>
     97c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     980:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     982:	0d b4       	in	r0, 0x2d	; 45
     984:	07 fe       	sbrs	r0, 7
     986:	fd cf       	rjmp	.-6      	; 0x982 <DataflashManager_WriteBlocks+0x1e2>
     988:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     98c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     98e:	0d b4       	in	r0, 0x2d	; 45
     990:	07 fe       	sbrs	r0, 7
     992:	fd cf       	rjmp	.-6      	; 0x98e <DataflashManager_WriteBlocks+0x1ee>

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     994:	f5 01       	movw	r30, r10
     996:	86 a9       	ldd	r24, Z+54	; 0x36
     998:	88 23       	and	r24, r24
     99a:	61 f5       	brne	.+88     	; 0x9f4 <DataflashManager_WriteBlocks+0x254>
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     99c:	9f 5f       	subi	r25, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     99e:	c3 94       	inc	r12
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     9a0:	f0 e2       	ldi	r31, 0x20	; 32
     9a2:	cf 16       	cp	r12, r31
     9a4:	09 f0       	breq	.+2      	; 0x9a8 <DataflashManager_WriteBlocks+0x208>
     9a6:	4b cf       	rjmp	.-362    	; 0x83e <DataflashManager_WriteBlocks+0x9e>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter and reset the sub block counter */
		TotalBlocks--;
     9a8:	08 94       	sec
     9aa:	e1 08       	sbc	r14, r1
     9ac:	f1 08       	sbc	r15, r1
     9ae:	20 ee       	ldi	r18, 0xE0	; 224
     9b0:	3f ef       	ldi	r19, 0xFF	; 255
     9b2:	82 0e       	add	r8, r18
     9b4:	93 1e       	adc	r9, r19

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     9b6:	e1 14       	cp	r14, r1
     9b8:	f1 04       	cpc	r15, r1
     9ba:	09 f0       	breq	.+2      	; 0x9be <DataflashManager_WriteBlocks+0x21e>
     9bc:	3f cf       	rjmp	.-386    	; 0x83c <DataflashManager_WriteBlocks+0x9c>
		/* Decrement the blocks remaining counter and reset the sub block counter */
		TotalBlocks--;
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
     9be:	3b dd       	rcall	.-1418   	; 0x436 <Dataflash_WaitWhileBusy>
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     9c0:	dd 20       	and	r13, r13
     9c2:	11 f4       	brne	.+4      	; 0x9c8 <DataflashManager_WriteBlocks+0x228>
     9c4:	83 e8       	ldi	r24, 0x83	; 131
     9c6:	01 c0       	rjmp	.+2      	; 0x9ca <DataflashManager_WriteBlocks+0x22a>
     9c8:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9ca:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9cc:	0d b4       	in	r0, 0x2d	; 45
     9ce:	07 fe       	sbrs	r0, 7
     9d0:	fd cf       	rjmp	.-6      	; 0x9cc <DataflashManager_WriteBlocks+0x22c>
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
     9d2:	c8 01       	movw	r24, r16
     9d4:	60 e0       	ldi	r22, 0x00	; 0
     9d6:	70 e0       	ldi	r23, 0x00	; 0
     9d8:	3c dd       	rcall	.-1416   	; 0x452 <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     9da:	2d dd       	rcall	.-1446   	; 0x436 <Dataflash_WaitWhileBusy>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     9dc:	80 91 e8 00 	lds	r24, 0x00E8

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     9e0:	85 fd       	sbrc	r24, 5
     9e2:	05 c0       	rjmp	.+10     	; 0x9ee <DataflashManager_WriteBlocks+0x24e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     9e4:	80 91 e8 00 	lds	r24, 0x00E8
     9e8:	8b 77       	andi	r24, 0x7B	; 123
     9ea:	80 93 e8 00 	sts	0x00E8, r24
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     9ee:	8e b1       	in	r24, 0x0e	; 14
     9f0:	83 60       	ori	r24, 0x03	; 3
     9f2:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearOUT();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     9f4:	0f 90       	pop	r0
     9f6:	cf 91       	pop	r28
     9f8:	df 91       	pop	r29
     9fa:	1f 91       	pop	r17
     9fc:	0f 91       	pop	r16
     9fe:	ff 90       	pop	r15
     a00:	ef 90       	pop	r14
     a02:	df 90       	pop	r13
     a04:	cf 90       	pop	r12
     a06:	bf 90       	pop	r11
     a08:	af 90       	pop	r10
     a0a:	9f 90       	pop	r9
     a0c:	8f 90       	pop	r8
     a0e:	08 95       	ret

00000a10 <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
     a10:	0f 93       	push	r16
     a12:	1f 93       	push	r17
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
     a18:	8c 01       	movw	r16, r24
     a1a:	86 2f       	mov	r24, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     a1c:	f8 01       	movw	r30, r16
     a1e:	46 8d       	ldd	r20, Z+30	; 0x1e
     a20:	55 8d       	ldd	r21, Z+29	; 0x1d
     a22:	64 8d       	ldd	r22, Z+28	; 0x1c
     a24:	73 8d       	ldd	r23, Z+27	; 0x1b

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     a26:	c1 a1       	ldd	r28, Z+33	; 0x21
     a28:	d0 a1       	ldd	r29, Z+32	; 0x20

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     a2a:	40 30       	cpi	r20, 0x00	; 0
     a2c:	f0 e8       	ldi	r31, 0x80	; 128
     a2e:	5f 07       	cpc	r21, r31
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	6f 07       	cpc	r22, r31
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	7f 07       	cpc	r23, r31
     a38:	68 f0       	brcs	.+26     	; 0xa54 <SCSI_Command_ReadWrite_10+0x44>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     a3a:	80 91 46 01 	lds	r24, 0x0146
     a3e:	80 7f       	andi	r24, 0xF0	; 240
     a40:	85 60       	ori	r24, 0x05	; 5
     a42:	80 93 46 01 	sts	0x0146, r24
     a46:	81 e2       	ldi	r24, 0x21	; 33
     a48:	80 93 50 01 	sts	0x0150, r24
     a4c:	10 92 51 01 	sts	0x0151, r1
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	21 c0       	rjmp	.+66     	; 0xa96 <SCSI_Command_ReadWrite_10+0x86>
	/* Adjust the given block address to the real media address based on the selected LUN */
	BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
     a54:	88 23       	and	r24, r24
     a56:	21 f0       	breq	.+8      	; 0xa60 <SCSI_Command_ReadWrite_10+0x50>
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     a58:	c8 01       	movw	r24, r16
     a5a:	9e 01       	movw	r18, r28
     a5c:	8d dd       	rcall	.-1254   	; 0x578 <DataflashManager_ReadBlocks>
     a5e:	03 c0       	rjmp	.+6      	; 0xa66 <SCSI_Command_ReadWrite_10+0x56>
	else
	  DataflashManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     a60:	c8 01       	movw	r24, r16
     a62:	9e 01       	movw	r18, r28
     a64:	9d de       	rcall	.-710    	; 0x7a0 <DataflashManager_WriteBlocks>

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     a66:	9e 01       	movw	r18, r28
     a68:	40 e0       	ldi	r20, 0x00	; 0
     a6a:	50 e0       	ldi	r21, 0x00	; 0
     a6c:	89 e0       	ldi	r24, 0x09	; 9
     a6e:	22 0f       	add	r18, r18
     a70:	33 1f       	adc	r19, r19
     a72:	44 1f       	adc	r20, r20
     a74:	55 1f       	adc	r21, r21
     a76:	8a 95       	dec	r24
     a78:	d1 f7       	brne	.-12     	; 0xa6e <SCSI_Command_ReadWrite_10+0x5e>
     a7a:	f8 01       	movw	r30, r16
     a7c:	82 89       	ldd	r24, Z+18	; 0x12
     a7e:	93 89       	ldd	r25, Z+19	; 0x13
     a80:	a4 89       	ldd	r26, Z+20	; 0x14
     a82:	b5 89       	ldd	r27, Z+21	; 0x15
     a84:	82 1b       	sub	r24, r18
     a86:	93 0b       	sbc	r25, r19
     a88:	a4 0b       	sbc	r26, r20
     a8a:	b5 0b       	sbc	r27, r21
     a8c:	82 8b       	std	Z+18, r24	; 0x12
     a8e:	93 8b       	std	Z+19, r25	; 0x13
     a90:	a4 8b       	std	Z+20, r26	; 0x14
     a92:	b5 8b       	std	Z+21, r27	; 0x15
     a94:	81 e0       	ldi	r24, 0x01	; 1

	return true;
}
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	1f 91       	pop	r17
     a9c:	0f 91       	pop	r16
     a9e:	08 95       	ret

00000aa0 <SCSI_DecodeSCSICommand>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean true if the command completed successfully, false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     aa0:	cf 92       	push	r12
     aa2:	df 92       	push	r13
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	df 93       	push	r29
     aae:	cf 93       	push	r28
     ab0:	cd b7       	in	r28, 0x3d	; 61
     ab2:	de b7       	in	r29, 0x3e	; 62
     ab4:	28 97       	sbiw	r28, 0x08	; 8
     ab6:	0f b6       	in	r0, 0x3f	; 63
     ab8:	f8 94       	cli
     aba:	de bf       	out	0x3e, r29	; 62
     abc:	0f be       	out	0x3f, r0	; 63
     abe:	cd bf       	out	0x3d, r28	; 61
     ac0:	7c 01       	movw	r14, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     ac2:	fc 01       	movw	r30, r24
     ac4:	81 8d       	ldd	r24, Z+25	; 0x19
     ac6:	8d 31       	cpi	r24, 0x1D	; 29
     ac8:	09 f4       	brne	.+2      	; 0xacc <SCSI_DecodeSCSICommand+0x2c>
     aca:	a6 c0       	rjmp	.+332    	; 0xc18 <SCSI_DecodeSCSICommand+0x178>
     acc:	8e 31       	cpi	r24, 0x1E	; 30
     ace:	78 f4       	brcc	.+30     	; 0xaee <SCSI_DecodeSCSICommand+0x4e>
     ad0:	83 30       	cpi	r24, 0x03	; 3
     ad2:	09 f4       	brne	.+2      	; 0xad6 <SCSI_DecodeSCSICommand+0x36>
     ad4:	52 c0       	rjmp	.+164    	; 0xb7a <SCSI_DecodeSCSICommand+0xda>
     ad6:	84 30       	cpi	r24, 0x04	; 4
     ad8:	20 f4       	brcc	.+8      	; 0xae2 <SCSI_DecodeSCSICommand+0x42>
     ada:	88 23       	and	r24, r24
     adc:	09 f4       	brne	.+2      	; 0xae0 <SCSI_DecodeSCSICommand+0x40>
     ade:	d9 c0       	rjmp	.+434    	; 0xc92 <SCSI_DecodeSCSICommand+0x1f2>
     ae0:	de c0       	rjmp	.+444    	; 0xc9e <SCSI_DecodeSCSICommand+0x1fe>
     ae2:	82 31       	cpi	r24, 0x12	; 18
     ae4:	b9 f0       	breq	.+46     	; 0xb14 <SCSI_DecodeSCSICommand+0x74>
     ae6:	8a 31       	cpi	r24, 0x1A	; 26
     ae8:	09 f0       	breq	.+2      	; 0xaec <SCSI_DecodeSCSICommand+0x4c>
     aea:	d9 c0       	rjmp	.+434    	; 0xc9e <SCSI_DecodeSCSICommand+0x1fe>
     aec:	b8 c0       	rjmp	.+368    	; 0xc5e <SCSI_DecodeSCSICommand+0x1be>
     aee:	88 32       	cpi	r24, 0x28	; 40
     af0:	09 f4       	brne	.+2      	; 0xaf4 <SCSI_DecodeSCSICommand+0x54>
     af2:	af c0       	rjmp	.+350    	; 0xc52 <SCSI_DecodeSCSICommand+0x1b2>
     af4:	89 32       	cpi	r24, 0x29	; 41
     af6:	38 f4       	brcc	.+14     	; 0xb06 <SCSI_DecodeSCSICommand+0x66>
     af8:	8e 31       	cpi	r24, 0x1E	; 30
     afa:	09 f4       	brne	.+2      	; 0xafe <SCSI_DecodeSCSICommand+0x5e>
     afc:	ca c0       	rjmp	.+404    	; 0xc92 <SCSI_DecodeSCSICommand+0x1f2>
     afe:	85 32       	cpi	r24, 0x25	; 37
     b00:	09 f0       	breq	.+2      	; 0xb04 <SCSI_DecodeSCSICommand+0x64>
     b02:	cd c0       	rjmp	.+410    	; 0xc9e <SCSI_DecodeSCSICommand+0x1fe>
     b04:	5d c0       	rjmp	.+186    	; 0xbc0 <SCSI_DecodeSCSICommand+0x120>
     b06:	8a 32       	cpi	r24, 0x2A	; 42
     b08:	09 f4       	brne	.+2      	; 0xb0c <SCSI_DecodeSCSICommand+0x6c>
     b0a:	a0 c0       	rjmp	.+320    	; 0xc4c <SCSI_DecodeSCSICommand+0x1ac>
     b0c:	8f 32       	cpi	r24, 0x2F	; 47
     b0e:	09 f0       	breq	.+2      	; 0xb12 <SCSI_DecodeSCSICommand+0x72>
     b10:	c6 c0       	rjmp	.+396    	; 0xc9e <SCSI_DecodeSCSICommand+0x1fe>
     b12:	bf c0       	rjmp	.+382    	; 0xc92 <SCSI_DecodeSCSICommand+0x1f2>
     b14:	f7 01       	movw	r30, r14
     b16:	05 8d       	ldd	r16, Z+29	; 0x1d
     b18:	14 8d       	ldd	r17, Z+28	; 0x1c
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     b1a:	82 8d       	ldd	r24, Z+26	; 0x1a
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	83 70       	andi	r24, 0x03	; 3
     b20:	90 70       	andi	r25, 0x00	; 0
     b22:	89 2b       	or	r24, r25
     b24:	09 f0       	breq	.+2      	; 0xb28 <SCSI_DecodeSCSICommand+0x88>
     b26:	7c c0       	rjmp	.+248    	; 0xc20 <SCSI_DecodeSCSICommand+0x180>
     b28:	83 8d       	ldd	r24, Z+27	; 0x1b
     b2a:	88 23       	and	r24, r24
     b2c:	09 f0       	breq	.+2      	; 0xb30 <SCSI_DecodeSCSICommand+0x90>
     b2e:	78 c0       	rjmp	.+240    	; 0xc20 <SCSI_DecodeSCSICommand+0x180>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     b30:	68 01       	movw	r12, r16
     b32:	05 32       	cpi	r16, 0x25	; 37
     b34:	11 05       	cpc	r17, r1
     b36:	18 f0       	brcs	.+6      	; 0xb3e <SCSI_DecodeSCSICommand+0x9e>
     b38:	94 e2       	ldi	r25, 0x24	; 36
     b3a:	c9 2e       	mov	r12, r25
     b3c:	d1 2c       	mov	r13, r1
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     b3e:	86 e5       	ldi	r24, 0x56	; 86
     b40:	91 e0       	ldi	r25, 0x01	; 1
     b42:	b6 01       	movw	r22, r12
     b44:	40 e0       	ldi	r20, 0x00	; 0
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	ea d5       	rcall	.+3028   	; 0x171e <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     b4a:	c8 01       	movw	r24, r16
     b4c:	8c 19       	sub	r24, r12
     b4e:	9d 09       	sbc	r25, r13
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	35 d6       	rcall	.+3178   	; 0x17c0 <Endpoint_Null_Stream>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b56:	80 91 e8 00 	lds	r24, 0x00E8
     b5a:	8e 77       	andi	r24, 0x7E	; 126
     b5c:	80 93 e8 00 	sts	0x00E8, r24

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     b60:	96 01       	movw	r18, r12
     b62:	40 e0       	ldi	r20, 0x00	; 0
     b64:	50 e0       	ldi	r21, 0x00	; 0
     b66:	f7 01       	movw	r30, r14
     b68:	82 89       	ldd	r24, Z+18	; 0x12
     b6a:	93 89       	ldd	r25, Z+19	; 0x13
     b6c:	a4 89       	ldd	r26, Z+20	; 0x14
     b6e:	b5 89       	ldd	r27, Z+21	; 0x15
     b70:	82 1b       	sub	r24, r18
     b72:	93 0b       	sbc	r25, r19
     b74:	a4 0b       	sbc	r26, r20
     b76:	b5 0b       	sbc	r27, r21
     b78:	87 c0       	rjmp	.+270    	; 0xc88 <SCSI_DecodeSCSICommand+0x1e8>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
     b7a:	f7 01       	movw	r30, r14
     b7c:	15 8d       	ldd	r17, Z+29	; 0x1d
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     b7e:	01 2f       	mov	r16, r17
     b80:	13 31       	cpi	r17, 0x13	; 19
     b82:	08 f0       	brcs	.+2      	; 0xb86 <SCSI_DecodeSCSICommand+0xe6>
     b84:	02 e1       	ldi	r16, 0x12	; 18

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     b86:	84 e4       	ldi	r24, 0x44	; 68
     b88:	91 e0       	ldi	r25, 0x01	; 1
     b8a:	60 2f       	mov	r22, r16
     b8c:	70 e0       	ldi	r23, 0x00	; 0
     b8e:	40 e0       	ldi	r20, 0x00	; 0
     b90:	50 e0       	ldi	r21, 0x00	; 0
     b92:	c5 d5       	rcall	.+2954   	; 0x171e <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     b94:	81 2f       	mov	r24, r17
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	80 1b       	sub	r24, r16
     b9a:	91 09       	sbc	r25, r1
     b9c:	60 e0       	ldi	r22, 0x00	; 0
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	0f d6       	rcall	.+3102   	; 0x17c0 <Endpoint_Null_Stream>
     ba2:	80 91 e8 00 	lds	r24, 0x00E8
     ba6:	8e 77       	andi	r24, 0x7E	; 126
     ba8:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     bac:	f7 01       	movw	r30, r14
     bae:	82 89       	ldd	r24, Z+18	; 0x12
     bb0:	93 89       	ldd	r25, Z+19	; 0x13
     bb2:	a4 89       	ldd	r26, Z+20	; 0x14
     bb4:	b5 89       	ldd	r27, Z+21	; 0x15
     bb6:	80 1b       	sub	r24, r16
     bb8:	91 09       	sbc	r25, r1
     bba:	a1 09       	sbc	r26, r1
     bbc:	b1 09       	sbc	r27, r1
     bbe:	64 c0       	rjmp	.+200    	; 0xc88 <SCSI_DecodeSCSICommand+0x1e8>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN = (LUN_MEDIA_BLOCKS - 1);
     bc0:	8f ef       	ldi	r24, 0xFF	; 255
     bc2:	9f e7       	ldi	r25, 0x7F	; 127
     bc4:	a0 e0       	ldi	r26, 0x00	; 0
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	89 83       	std	Y+1, r24	; 0x01
     bca:	9a 83       	std	Y+2, r25	; 0x02
     bcc:	ab 83       	std	Y+3, r26	; 0x03
     bce:	bc 83       	std	Y+4, r27	; 0x04
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	92 e0       	ldi	r25, 0x02	; 2
     bd4:	a0 e0       	ldi	r26, 0x00	; 0
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	8d 83       	std	Y+5, r24	; 0x05
     bda:	9e 83       	std	Y+6, r25	; 0x06
     bdc:	af 83       	std	Y+7, r26	; 0x07
     bde:	b8 87       	std	Y+8, r27	; 0x08

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
     be0:	ce 01       	movw	r24, r28
     be2:	01 96       	adiw	r24, 0x01	; 1
     be4:	64 e0       	ldi	r22, 0x04	; 4
     be6:	70 e0       	ldi	r23, 0x00	; 0
     be8:	40 e0       	ldi	r20, 0x00	; 0
     bea:	50 e0       	ldi	r21, 0x00	; 0
     bec:	47 d5       	rcall	.+2702   	; 0x167c <Endpoint_Write_Stream_BE>
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
     bee:	ce 01       	movw	r24, r28
     bf0:	05 96       	adiw	r24, 0x05	; 5
     bf2:	64 e0       	ldi	r22, 0x04	; 4
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	40 e0       	ldi	r20, 0x00	; 0
     bf8:	50 e0       	ldi	r21, 0x00	; 0
     bfa:	40 d5       	rcall	.+2688   	; 0x167c <Endpoint_Write_Stream_BE>
     bfc:	80 91 e8 00 	lds	r24, 0x00E8
     c00:	8e 77       	andi	r24, 0x7E	; 126
     c02:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
     c06:	f7 01       	movw	r30, r14
     c08:	82 89       	ldd	r24, Z+18	; 0x12
     c0a:	93 89       	ldd	r25, Z+19	; 0x13
     c0c:	a4 89       	ldd	r26, Z+20	; 0x14
     c0e:	b5 89       	ldd	r27, Z+21	; 0x15
     c10:	08 97       	sbiw	r24, 0x08	; 8
     c12:	a1 09       	sbc	r26, r1
     c14:	b1 09       	sbc	r27, r1
     c16:	38 c0       	rjmp	.+112    	; 0xc88 <SCSI_DecodeSCSICommand+0x1e8>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
     c18:	f7 01       	movw	r30, r14
     c1a:	82 8d       	ldd	r24, Z+26	; 0x1a
     c1c:	82 fd       	sbrc	r24, 2
     c1e:	08 c0       	rjmp	.+16     	; 0xc30 <SCSI_DecodeSCSICommand+0x190>
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     c20:	80 91 46 01 	lds	r24, 0x0146
     c24:	80 7f       	andi	r24, 0xF0	; 240
     c26:	85 60       	ori	r24, 0x05	; 5
     c28:	80 93 46 01 	sts	0x0146, r24
     c2c:	84 e2       	ldi	r24, 0x24	; 36
     c2e:	3e c0       	rjmp	.+124    	; 0xcac <SCSI_DecodeSCSICommand+0x20c>

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
     c30:	78 dc       	rcall	.-1808   	; 0x522 <DataflashManager_CheckDataflashOperation>
     c32:	88 23       	and	r24, r24
     c34:	71 f5       	brne	.+92     	; 0xc92 <SCSI_DecodeSCSICommand+0x1f2>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
     c36:	80 91 46 01 	lds	r24, 0x0146
     c3a:	80 7f       	andi	r24, 0xF0	; 240
     c3c:	84 60       	ori	r24, 0x04	; 4
     c3e:	80 93 46 01 	sts	0x0146, r24
     c42:	10 92 50 01 	sts	0x0150, r1
     c46:	10 92 51 01 	sts	0x0151, r1
     c4a:	33 c0       	rjmp	.+102    	; 0xcb2 <SCSI_DecodeSCSICommand+0x212>
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
     c4c:	c7 01       	movw	r24, r14
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	02 c0       	rjmp	.+4      	; 0xc56 <SCSI_DecodeSCSICommand+0x1b6>
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
     c52:	c7 01       	movw	r24, r14
     c54:	61 e0       	ldi	r22, 0x01	; 1
     c56:	dc de       	rcall	.-584    	; 0xa10 <SCSI_Command_ReadWrite_10>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     c58:	88 23       	and	r24, r24
     c5a:	59 f1       	breq	.+86     	; 0xcb2 <SCSI_DecodeSCSICommand+0x212>
     c5c:	2c c0       	rjmp	.+88     	; 0xcb6 <SCSI_DecodeSCSICommand+0x216>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c5e:	10 92 f1 00 	sts	0x00F1, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c62:	10 92 f1 00 	sts	0x00F1, r1
     c66:	10 92 f1 00 	sts	0x00F1, r1
     c6a:	10 92 f1 00 	sts	0x00F1, r1
     c6e:	80 91 e8 00 	lds	r24, 0x00E8
     c72:	8e 77       	andi	r24, 0x7E	; 126
     c74:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
     c78:	f7 01       	movw	r30, r14
     c7a:	82 89       	ldd	r24, Z+18	; 0x12
     c7c:	93 89       	ldd	r25, Z+19	; 0x13
     c7e:	a4 89       	ldd	r26, Z+20	; 0x14
     c80:	b5 89       	ldd	r27, Z+21	; 0x15
     c82:	04 97       	sbiw	r24, 0x04	; 4
     c84:	a1 09       	sbc	r26, r1
     c86:	b1 09       	sbc	r27, r1
     c88:	82 8b       	std	Z+18, r24	; 0x12
     c8a:	93 8b       	std	Z+19, r25	; 0x13
     c8c:	a4 8b       	std	Z+20, r26	; 0x14
     c8e:	b5 8b       	std	Z+21, r27	; 0x15
     c90:	12 c0       	rjmp	.+36     	; 0xcb6 <SCSI_DecodeSCSICommand+0x216>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
     c92:	f7 01       	movw	r30, r14
     c94:	12 8a       	std	Z+18, r1	; 0x12
     c96:	13 8a       	std	Z+19, r1	; 0x13
     c98:	14 8a       	std	Z+20, r1	; 0x14
     c9a:	15 8a       	std	Z+21, r1	; 0x15
     c9c:	0c c0       	rjmp	.+24     	; 0xcb6 <SCSI_DecodeSCSICommand+0x216>
			break;
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     c9e:	80 91 46 01 	lds	r24, 0x0146
     ca2:	80 7f       	andi	r24, 0xF0	; 240
     ca4:	85 60       	ori	r24, 0x05	; 5
     ca6:	80 93 46 01 	sts	0x0146, r24
     caa:	80 e2       	ldi	r24, 0x20	; 32
     cac:	80 93 50 01 	sts	0x0150, r24
     cb0:	ca cf       	rjmp	.-108    	; 0xc46 <SCSI_DecodeSCSICommand+0x1a6>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	0a c0       	rjmp	.+20     	; 0xcca <SCSI_DecodeSCSICommand+0x22a>
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     cb6:	80 91 46 01 	lds	r24, 0x0146
     cba:	80 7f       	andi	r24, 0xF0	; 240
     cbc:	80 93 46 01 	sts	0x0146, r24
     cc0:	10 92 50 01 	sts	0x0150, r1
     cc4:	10 92 51 01 	sts	0x0151, r1
     cc8:	81 e0       	ldi	r24, 0x01	; 1

		return true;
	}

	return false;
}
     cca:	28 96       	adiw	r28, 0x08	; 8
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	f8 94       	cli
     cd0:	de bf       	out	0x3e, r29	; 62
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	cd bf       	out	0x3d, r28	; 61
     cd6:	cf 91       	pop	r28
     cd8:	df 91       	pop	r29
     cda:	1f 91       	pop	r17
     cdc:	0f 91       	pop	r16
     cde:	ff 90       	pop	r15
     ce0:	ef 90       	pop	r14
     ce2:	df 90       	pop	r13
     ce4:	cf 90       	pop	r12
     ce6:	08 95       	ret

00000ce8 <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
     ce8:	38 2f       	mov	r19, r24
     cea:	28 2f       	mov	r18, r24
     cec:	2c c0       	rjmp	.+88     	; 0xd46 <Endpoint_ConfigureEndpoint_Prv+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     cee:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);
		
		if (EPNum == Number)
     cf2:	23 17       	cp	r18, r19
     cf4:	21 f4       	brne	.+8      	; 0xcfe <Endpoint_ConfigureEndpoint_Prv+0x16>
     cf6:	76 2f       	mov	r23, r22
     cf8:	94 2f       	mov	r25, r20
     cfa:	50 e0       	ldi	r21, 0x00	; 0
     cfc:	06 c0       	rjmp	.+12     	; 0xd0a <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     cfe:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     d02:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
     d06:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     d0a:	91 ff       	sbrs	r25, 1
     d0c:	1b c0       	rjmp	.+54     	; 0xd44 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     d0e:	80 91 eb 00 	lds	r24, 0x00EB
     d12:	8e 7f       	andi	r24, 0xFE	; 254
     d14:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= (1 << ALLOC);
     d18:	80 91 ed 00 	lds	r24, 0x00ED
     d1c:	82 70       	andi	r24, 0x02	; 2
     d1e:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     d22:	80 91 eb 00 	lds	r24, 0x00EB
     d26:	81 60       	ori	r24, 0x01	; 1
     d28:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     d2c:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     d30:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
     d34:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     d38:	80 91 ee 00 	lds	r24, 0x00EE
			
		if (!(Endpoint_IsConfigured()))
     d3c:	87 fd       	sbrc	r24, 7
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else	
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     d44:	2f 5f       	subi	r18, 0xFF	; 255
     d46:	27 30       	cpi	r18, 0x07	; 7
     d48:	90 f2       	brcs	.-92     	; 0xcee <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     d4a:	30 93 e9 00 	sts	0x00E9, r19
     d4e:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     d50:	08 95       	ret

00000d52 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     d52:	80 91 87 01 	lds	r24, 0x0187
     d56:	88 23       	and	r24, r24
     d58:	9c f4       	brge	.+38     	; 0xd80 <Endpoint_ClearStatusStage+0x2e>
     d5a:	04 c0       	rjmp	.+8      	; 0xd64 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     d5c:	80 91 86 01 	lds	r24, 0x0186
     d60:	88 23       	and	r24, r24
     d62:	b9 f0       	breq	.+46     	; 0xd92 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     d64:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     d68:	82 ff       	sbrs	r24, 2
     d6a:	f8 cf       	rjmp	.-16     	; 0xd5c <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d6c:	80 91 e8 00 	lds	r24, 0x00E8
     d70:	8b 77       	andi	r24, 0x7B	; 123
     d72:	80 93 e8 00 	sts	0x00E8, r24
     d76:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     d78:	80 91 86 01 	lds	r24, 0x0186
     d7c:	88 23       	and	r24, r24
     d7e:	49 f0       	breq	.+18     	; 0xd92 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d80:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     d84:	80 ff       	sbrs	r24, 0
     d86:	f8 cf       	rjmp	.-16     	; 0xd78 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d88:	80 91 e8 00 	lds	r24, 0x00E8
     d8c:	8e 77       	andi	r24, 0x7E	; 126
     d8e:	80 93 e8 00 	sts	0x00E8, r24
     d92:	08 95       	ret

00000d94 <Endpoint_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     d94:	40 91 e4 00 	lds	r20, 0x00E4
     d98:	50 91 e5 00 	lds	r21, 0x00E5
     d9c:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
     d9e:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
     da2:	80 ff       	sbrs	r24, 0
     da4:	05 c0       	rjmp	.+10     	; 0xdb0 <Endpoint_WaitUntilReady+0x1c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     da6:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
     daa:	80 ff       	sbrs	r24, 0
     dac:	05 c0       	rjmp	.+10     	; 0xdb8 <Endpoint_WaitUntilReady+0x24>
     dae:	22 c0       	rjmp	.+68     	; 0xdf4 <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     db0:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     db4:	82 fd       	sbrc	r24, 2
     db6:	1e c0       	rjmp	.+60     	; 0xdf4 <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     db8:	80 91 86 01 	lds	r24, 0x0186

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     dbc:	88 23       	and	r24, r24
     dbe:	11 f4       	brne	.+4      	; 0xdc4 <Endpoint_WaitUntilReady+0x30>
     dc0:	82 e0       	ldi	r24, 0x02	; 2
     dc2:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     dc4:	85 30       	cpi	r24, 0x05	; 5
     dc6:	11 f4       	brne	.+4      	; 0xdcc <Endpoint_WaitUntilReady+0x38>
     dc8:	83 e0       	ldi	r24, 0x03	; 3
     dca:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     dcc:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     dd0:	85 ff       	sbrs	r24, 5
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <Endpoint_WaitUntilReady+0x44>
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	08 95       	ret
     dd8:	80 91 e4 00 	lds	r24, 0x00E4
     ddc:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     de0:	84 17       	cp	r24, r20
     de2:	95 07       	cpc	r25, r21
     de4:	e1 f2       	breq	.-72     	; 0xd9e <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     de6:	22 23       	and	r18, r18
     de8:	11 f4       	brne	.+4      	; 0xdee <Endpoint_WaitUntilReady+0x5a>
     dea:	84 e0       	ldi	r24, 0x04	; 4
     dec:	08 95       	ret
     dee:	21 50       	subi	r18, 0x01	; 1
     df0:	ac 01       	movw	r20, r24
     df2:	d5 cf       	rjmp	.-86     	; 0xd9e <Endpoint_WaitUntilReady+0xa>
     df4:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     df6:	08 95       	ret

00000df8 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     df8:	ef 92       	push	r14
     dfa:	ff 92       	push	r15
     dfc:	0f 93       	push	r16
     dfe:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     e00:	4d d0       	rcall	.+154    	; 0xe9c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     e02:	54 d0       	rcall	.+168    	; 0xeac <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
     e04:	08 ed       	ldi	r16, 0xD8	; 216
     e06:	10 e0       	ldi	r17, 0x00	; 0
     e08:	f8 01       	movw	r30, r16
     e0a:	80 81       	ld	r24, Z

				USBCON = (Temp & ~(1 << USBE));
     e0c:	98 2f       	mov	r25, r24
     e0e:	9f 77       	andi	r25, 0x7F	; 127
     e10:	90 83       	st	Z, r25
				USBCON = (Temp |  (1 << USBE));
     e12:	80 68       	ori	r24, 0x80	; 128
     e14:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     e16:	80 81       	ld	r24, Z
     e18:	8f 7d       	andi	r24, 0xDF	; 223
     e1a:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     e1c:	e7 ed       	ldi	r30, 0xD7	; 215
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	80 68       	ori	r24, 0x80	; 128
     e24:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     e26:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
     e28:	10 92 86 01 	sts	0x0186, r1
	USB_ConfigurationNumber  = 0;
     e2c:	10 92 84 01 	sts	0x0184, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
     e30:	10 92 83 01 	sts	0x0183, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
     e34:	10 92 82 01 	sts	0x0182, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     e38:	80 ee       	ldi	r24, 0xE0	; 224
     e3a:	e8 2e       	mov	r14, r24
     e3c:	f1 2c       	mov	r15, r1
     e3e:	f7 01       	movw	r30, r14
     e40:	80 81       	ld	r24, Z
     e42:	8b 7f       	andi	r24, 0xFB	; 251
     e44:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     e46:	f8 01       	movw	r30, r16
     e48:	80 81       	ld	r24, Z
     e4a:	81 60       	ori	r24, 0x01	; 1
     e4c:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	60 e0       	ldi	r22, 0x00	; 0
     e52:	42 e0       	ldi	r20, 0x02	; 2
     e54:	49 df       	rcall	.-366    	; 0xce8 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     e56:	e1 ee       	ldi	r30, 0xE1	; 225
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8e 7f       	andi	r24, 0xFE	; 254
     e5e:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     e60:	e2 ee       	ldi	r30, 0xE2	; 226
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	81 60       	ori	r24, 0x01	; 1
     e68:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     e6a:	80 81       	ld	r24, Z
     e6c:	88 60       	ori	r24, 0x08	; 8
     e6e:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     e70:	f7 01       	movw	r30, r14
     e72:	80 81       	ld	r24, Z
     e74:	8e 7f       	andi	r24, 0xFE	; 254
     e76:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     e78:	f8 01       	movw	r30, r16
     e7a:	80 81       	ld	r24, Z
     e7c:	80 61       	ori	r24, 0x10	; 16
     e7e:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     e80:	1f 91       	pop	r17
     e82:	0f 91       	pop	r16
     e84:	ff 90       	pop	r15
     e86:	ef 90       	pop	r14
     e88:	08 95       	ret

00000e8a <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     e8a:	e7 ed       	ldi	r30, 0xD7	; 215
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	81 60       	ori	r24, 0x01	; 1
     e92:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	80 93 85 01 	sts	0x0185, r24

	USB_ResetInterface();
}
     e9a:	ae cf       	rjmp	.-164    	; 0xdf8 <USB_ResetInterface>

00000e9c <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     e9c:	e8 ed       	ldi	r30, 0xD8	; 216
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	8c 7f       	andi	r24, 0xFC	; 252
     ea4:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     ea6:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     eaa:	08 95       	ret

00000eac <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     eac:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     eb0:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     eb4:	08 95       	ret

00000eb6 <__vector_11>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     eb6:	1f 92       	push	r1
     eb8:	0f 92       	push	r0
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	0f 92       	push	r0
     ebe:	0b b6       	in	r0, 0x3b	; 59
     ec0:	0f 92       	push	r0
     ec2:	11 24       	eor	r1, r1
     ec4:	1f 93       	push	r17
     ec6:	2f 93       	push	r18
     ec8:	3f 93       	push	r19
     eca:	4f 93       	push	r20
     ecc:	5f 93       	push	r21
     ece:	6f 93       	push	r22
     ed0:	7f 93       	push	r23
     ed2:	8f 93       	push	r24
     ed4:	9f 93       	push	r25
     ed6:	af 93       	push	r26
     ed8:	bf 93       	push	r27
     eda:	ef 93       	push	r30
     edc:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     ede:	e9 ee       	ldi	r30, 0xE9	; 233
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	10 81       	ld	r17, Z
     ee4:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     ee6:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     ee8:	e0 ef       	ldi	r30, 0xF0	; 240
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	87 7f       	andi	r24, 0xF7	; 247
     ef0:	80 83       	st	Z, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     ef2:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     ef4:	ec d0       	rcall	.+472    	; 0x10ce <USB_Device_ProcessControlRequest>
     ef6:	a9 ee       	ldi	r26, 0xE9	; 233
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	1c 92       	st	X, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     efc:	e0 ef       	ldi	r30, 0xF0	; 240
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	88 60       	ori	r24, 0x08	; 8
     f04:	80 83       	st	Z, r24
     f06:	1c 93       	st	X, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     f08:	ff 91       	pop	r31
     f0a:	ef 91       	pop	r30
     f0c:	bf 91       	pop	r27
     f0e:	af 91       	pop	r26
     f10:	9f 91       	pop	r25
     f12:	8f 91       	pop	r24
     f14:	7f 91       	pop	r23
     f16:	6f 91       	pop	r22
     f18:	5f 91       	pop	r21
     f1a:	4f 91       	pop	r20
     f1c:	3f 91       	pop	r19
     f1e:	2f 91       	pop	r18
     f20:	1f 91       	pop	r17
     f22:	0f 90       	pop	r0
     f24:	0b be       	out	0x3b, r0	; 59
     f26:	0f 90       	pop	r0
     f28:	0f be       	out	0x3f, r0	; 63
     f2a:	0f 90       	pop	r0
     f2c:	1f 90       	pop	r1
     f2e:	18 95       	reti

00000f30 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     f30:	1f 92       	push	r1
     f32:	0f 92       	push	r0
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	0f 92       	push	r0
     f38:	0b b6       	in	r0, 0x3b	; 59
     f3a:	0f 92       	push	r0
     f3c:	11 24       	eor	r1, r1
     f3e:	2f 93       	push	r18
     f40:	3f 93       	push	r19
     f42:	4f 93       	push	r20
     f44:	5f 93       	push	r21
     f46:	6f 93       	push	r22
     f48:	7f 93       	push	r23
     f4a:	8f 93       	push	r24
     f4c:	9f 93       	push	r25
     f4e:	af 93       	push	r26
     f50:	bf 93       	push	r27
     f52:	ef 93       	push	r30
     f54:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     f56:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     f5a:	82 ff       	sbrs	r24, 2
     f5c:	0a c0       	rjmp	.+20     	; 0xf72 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     f5e:	80 91 e2 00 	lds	r24, 0x00E2
     f62:	82 ff       	sbrs	r24, 2
     f64:	06 c0       	rjmp	.+12     	; 0xf72 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     f66:	80 91 e1 00 	lds	r24, 0x00E1
     f6a:	8b 7f       	andi	r24, 0xFB	; 251
     f6c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     f70:	35 d9       	rcall	.-3478   	; 0x1dc <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     f72:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     f76:	80 ff       	sbrs	r24, 0
     f78:	1e c0       	rjmp	.+60     	; 0xfb6 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     f7a:	80 91 d8 00 	lds	r24, 0x00D8
     f7e:	80 ff       	sbrs	r24, 0
     f80:	1a c0       	rjmp	.+52     	; 0xfb6 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     f82:	80 91 da 00 	lds	r24, 0x00DA
     f86:	8e 7f       	andi	r24, 0xFE	; 254
     f88:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     f8c:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     f90:	80 ff       	sbrs	r24, 0
     f92:	0d c0       	rjmp	.+26     	; 0xfae <__vector_10+0x7e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     f94:	8c e0       	ldi	r24, 0x0C	; 12
     f96:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     f98:	89 b5       	in	r24, 0x29	; 41
     f9a:	82 60       	ori	r24, 0x02	; 2
     f9c:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     f9e:	09 b4       	in	r0, 0x29	; 41
     fa0:	00 fe       	sbrs	r0, 0
     fa2:	fd cf       	rjmp	.-6      	; 0xf9e <__vector_10+0x6e>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	80 93 86 01 	sts	0x0186, r24
			EVENT_USB_Device_Connect();
     faa:	0e d9       	rcall	.-3556   	; 0x1c8 <EVENT_USB_Device_Connect>
     fac:	04 c0       	rjmp	.+8      	; 0xfb6 <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     fae:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     fb0:	10 92 86 01 	sts	0x0186, r1
			EVENT_USB_Device_Disconnect();
     fb4:	0e d9       	rcall	.-3556   	; 0x1d2 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     fb6:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     fba:	80 ff       	sbrs	r24, 0
     fbc:	18 c0       	rjmp	.+48     	; 0xfee <__vector_10+0xbe>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     fbe:	80 91 e2 00 	lds	r24, 0x00E2
     fc2:	80 ff       	sbrs	r24, 0
     fc4:	14 c0       	rjmp	.+40     	; 0xfee <__vector_10+0xbe>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     fc6:	80 91 e2 00 	lds	r24, 0x00E2
     fca:	8e 7f       	andi	r24, 0xFE	; 254
     fcc:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     fd0:	80 91 e2 00 	lds	r24, 0x00E2
     fd4:	80 61       	ori	r24, 0x10	; 16
     fd6:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
     fda:	80 91 d8 00 	lds	r24, 0x00D8
     fde:	80 62       	ori	r24, 0x20	; 32
     fe0:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     fe4:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     fe6:	85 e0       	ldi	r24, 0x05	; 5
     fe8:	80 93 86 01 	sts	0x0186, r24
		EVENT_USB_Device_Suspend();
     fec:	f5 d1       	rcall	.+1002   	; 0x13d8 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     fee:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     ff2:	84 ff       	sbrs	r24, 4
     ff4:	2e c0       	rjmp	.+92     	; 0x1052 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     ff6:	80 91 e2 00 	lds	r24, 0x00E2
     ffa:	84 ff       	sbrs	r24, 4
     ffc:	2a c0       	rjmp	.+84     	; 0x1052 <__vector_10+0x122>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     ffe:	8c e0       	ldi	r24, 0x0C	; 12
    1000:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
    1002:	89 b5       	in	r24, 0x29	; 41
    1004:	82 60       	ori	r24, 0x02	; 2
    1006:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1008:	09 b4       	in	r0, 0x29	; 41
    100a:	00 fe       	sbrs	r0, 0
    100c:	fd cf       	rjmp	.-6      	; 0x1008 <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    100e:	80 91 d8 00 	lds	r24, 0x00D8
    1012:	8f 7d       	andi	r24, 0xDF	; 223
    1014:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1018:	80 91 e1 00 	lds	r24, 0x00E1
    101c:	8f 7e       	andi	r24, 0xEF	; 239
    101e:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1022:	80 91 e2 00 	lds	r24, 0x00E2
    1026:	8f 7e       	andi	r24, 0xEF	; 239
    1028:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    102c:	80 91 e2 00 	lds	r24, 0x00E2
    1030:	81 60       	ori	r24, 0x01	; 1
    1032:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_ConfigurationNumber)
    1036:	80 91 84 01 	lds	r24, 0x0184
    103a:	88 23       	and	r24, r24
    103c:	31 f4       	brne	.+12     	; 0x104a <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    103e:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1042:	87 fd       	sbrc	r24, 7
    1044:	02 c0       	rjmp	.+4      	; 0x104a <__vector_10+0x11a>
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	01 c0       	rjmp	.+2      	; 0x104c <__vector_10+0x11c>
    104a:	84 e0       	ldi	r24, 0x04	; 4
    104c:	80 93 86 01 	sts	0x0186, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1050:	c3 d1       	rcall	.+902    	; 0x13d8 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1052:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1056:	83 ff       	sbrs	r24, 3
    1058:	27 c0       	rjmp	.+78     	; 0x10a8 <__vector_10+0x178>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    105a:	80 91 e2 00 	lds	r24, 0x00E2
    105e:	83 ff       	sbrs	r24, 3
    1060:	23 c0       	rjmp	.+70     	; 0x10a8 <__vector_10+0x178>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1062:	80 91 e1 00 	lds	r24, 0x00E1
    1066:	87 7f       	andi	r24, 0xF7	; 247
    1068:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState         = DEVICE_STATE_Default;
    106c:	82 e0       	ldi	r24, 0x02	; 2
    106e:	80 93 86 01 	sts	0x0186, r24
		USB_ConfigurationNumber = 0;
    1072:	10 92 84 01 	sts	0x0184, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1076:	80 91 e1 00 	lds	r24, 0x00E1
    107a:	8e 7f       	andi	r24, 0xFE	; 254
    107c:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1080:	80 91 e2 00 	lds	r24, 0x00E2
    1084:	8e 7f       	andi	r24, 0xFE	; 254
    1086:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    108a:	80 91 e2 00 	lds	r24, 0x00E2
    108e:	80 61       	ori	r24, 0x10	; 16
    1090:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	60 e0       	ldi	r22, 0x00	; 0
    1098:	42 e0       	ldi	r20, 0x02	; 2
    109a:	26 de       	rcall	.-948    	; 0xce8 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    109c:	80 91 f0 00 	lds	r24, 0x00F0
    10a0:	88 60       	ori	r24, 0x08	; 8
    10a2:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    10a6:	98 d1       	rcall	.+816    	; 0x13d8 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    10a8:	ff 91       	pop	r31
    10aa:	ef 91       	pop	r30
    10ac:	bf 91       	pop	r27
    10ae:	af 91       	pop	r26
    10b0:	9f 91       	pop	r25
    10b2:	8f 91       	pop	r24
    10b4:	7f 91       	pop	r23
    10b6:	6f 91       	pop	r22
    10b8:	5f 91       	pop	r21
    10ba:	4f 91       	pop	r20
    10bc:	3f 91       	pop	r19
    10be:	2f 91       	pop	r18
    10c0:	0f 90       	pop	r0
    10c2:	0b be       	out	0x3b, r0	; 59
    10c4:	0f 90       	pop	r0
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	0f 90       	pop	r0
    10ca:	1f 90       	pop	r1
    10cc:	18 95       	reti

000010ce <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
    10d2:	df 93       	push	r29
    10d4:	cf 93       	push	r28
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	ac 97       	sbiw	r28, 0x2c	; 44
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	de bf       	out	0x3e, r29	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    10e6:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
    10ea:	80 93 87 01 	sts	0x0187, r24
    10ee:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
    10f2:	80 93 88 01 	sts	0x0188, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    10f6:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    10fa:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
    10fe:	e9 e8       	ldi	r30, 0x89	; 137
    1100:	f1 e0       	ldi	r31, 0x01	; 1
    1102:	80 93 89 01 	sts	0x0189, r24
    1106:	90 93 8a 01 	sts	0x018A, r25
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    110a:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    110e:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
    1112:	80 93 8b 01 	sts	0x018B, r24
    1116:	93 83       	std	Z+3, r25	; 0x03
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    1118:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    111c:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
    1120:	80 93 8d 01 	sts	0x018D, r24
    1124:	95 83       	std	Z+5, r25	; 0x05

	EVENT_USB_Device_ControlRequest();
    1126:	b1 d8       	rcall	.-3742   	; 0x28a <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1128:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    112c:	83 ff       	sbrs	r24, 3
    112e:	3b c1       	rjmp	.+630    	; 0x13a6 <USB_Device_ProcessControlRequest+0x2d8>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1130:	80 91 87 01 	lds	r24, 0x0187

		switch (USB_ControlRequest.bRequest)
    1134:	30 91 88 01 	lds	r19, 0x0188
    1138:	35 30       	cpi	r19, 0x05	; 5
    113a:	09 f4       	brne	.+2      	; 0x113e <USB_Device_ProcessControlRequest+0x70>
    113c:	87 c0       	rjmp	.+270    	; 0x124c <USB_Device_ProcessControlRequest+0x17e>
    113e:	36 30       	cpi	r19, 0x06	; 6
    1140:	40 f4       	brcc	.+16     	; 0x1152 <USB_Device_ProcessControlRequest+0x84>
    1142:	31 30       	cpi	r19, 0x01	; 1
    1144:	c9 f1       	breq	.+114    	; 0x11b8 <USB_Device_ProcessControlRequest+0xea>
    1146:	31 30       	cpi	r19, 0x01	; 1
    1148:	70 f0       	brcs	.+28     	; 0x1166 <USB_Device_ProcessControlRequest+0x98>
    114a:	33 30       	cpi	r19, 0x03	; 3
    114c:	09 f0       	breq	.+2      	; 0x1150 <USB_Device_ProcessControlRequest+0x82>
    114e:	2b c1       	rjmp	.+598    	; 0x13a6 <USB_Device_ProcessControlRequest+0x2d8>
    1150:	33 c0       	rjmp	.+102    	; 0x11b8 <USB_Device_ProcessControlRequest+0xea>
    1152:	38 30       	cpi	r19, 0x08	; 8
    1154:	09 f4       	brne	.+2      	; 0x1158 <USB_Device_ProcessControlRequest+0x8a>
    1156:	f8 c0       	rjmp	.+496    	; 0x1348 <USB_Device_ProcessControlRequest+0x27a>
    1158:	39 30       	cpi	r19, 0x09	; 9
    115a:	09 f4       	brne	.+2      	; 0x115e <USB_Device_ProcessControlRequest+0x90>
    115c:	07 c1       	rjmp	.+526    	; 0x136c <USB_Device_ProcessControlRequest+0x29e>
    115e:	36 30       	cpi	r19, 0x06	; 6
    1160:	09 f0       	breq	.+2      	; 0x1164 <USB_Device_ProcessControlRequest+0x96>
    1162:	21 c1       	rjmp	.+578    	; 0x13a6 <USB_Device_ProcessControlRequest+0x2d8>
    1164:	99 c0       	rjmp	.+306    	; 0x1298 <USB_Device_ProcessControlRequest+0x1ca>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1166:	80 38       	cpi	r24, 0x80	; 128
    1168:	21 f0       	breq	.+8      	; 0x1172 <USB_Device_ProcessControlRequest+0xa4>
    116a:	82 38       	cpi	r24, 0x82	; 130
    116c:	09 f0       	breq	.+2      	; 0x1170 <USB_Device_ProcessControlRequest+0xa2>
    116e:	1b c1       	rjmp	.+566    	; 0x13a6 <USB_Device_ProcessControlRequest+0x2d8>
    1170:	08 c0       	rjmp	.+16     	; 0x1182 <USB_Device_ProcessControlRequest+0xb4>
    1172:	90 91 82 01 	lds	r25, 0x0182
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_RemoteWakeupEnabled)
    1176:	80 91 83 01 	lds	r24, 0x0183
    117a:	88 23       	and	r24, r24
    117c:	99 f0       	breq	.+38     	; 0x11a4 <USB_Device_ProcessControlRequest+0xd6>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    117e:	92 60       	ori	r25, 0x02	; 2
    1180:	11 c0       	rjmp	.+34     	; 0x11a4 <USB_Device_ProcessControlRequest+0xd6>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1182:	80 91 8b 01 	lds	r24, 0x018B
    1186:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1188:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    118c:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	25 e0       	ldi	r18, 0x05	; 5
    1194:	96 95       	lsr	r25
    1196:	87 95       	ror	r24
    1198:	2a 95       	dec	r18
    119a:	e1 f7       	brne	.-8      	; 0x1194 <USB_Device_ProcessControlRequest+0xc6>
    119c:	98 2f       	mov	r25, r24
    119e:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    11a0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    11a4:	80 91 e8 00 	lds	r24, 0x00E8
    11a8:	87 7f       	andi	r24, 0xF7	; 247
    11aa:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    11ae:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
    11b2:	10 92 f1 00 	sts	0x00F1, r1
    11b6:	d3 c0       	rjmp	.+422    	; 0x135e <USB_Device_ProcessControlRequest+0x290>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    11b8:	88 23       	and	r24, r24
    11ba:	19 f0       	breq	.+6      	; 0x11c2 <USB_Device_ProcessControlRequest+0xf4>
    11bc:	82 30       	cpi	r24, 0x02	; 2
    11be:	09 f0       	breq	.+2      	; 0x11c2 <USB_Device_ProcessControlRequest+0xf4>
    11c0:	f2 c0       	rjmp	.+484    	; 0x13a6 <USB_Device_ProcessControlRequest+0x2d8>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	8f 71       	andi	r24, 0x1F	; 31
    11c6:	90 70       	andi	r25, 0x00	; 0
    11c8:	00 97       	sbiw	r24, 0x00	; 0
    11ca:	21 f0       	breq	.+8      	; 0x11d4 <USB_Device_ProcessControlRequest+0x106>
    11cc:	02 97       	sbiw	r24, 0x02	; 2
    11ce:	09 f0       	breq	.+2      	; 0x11d2 <USB_Device_ProcessControlRequest+0x104>
    11d0:	ea c0       	rjmp	.+468    	; 0x13a6 <USB_Device_ProcessControlRequest+0x2d8>
    11d2:	0c c0       	rjmp	.+24     	; 0x11ec <USB_Device_ProcessControlRequest+0x11e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    11d4:	80 91 89 01 	lds	r24, 0x0189
    11d8:	81 30       	cpi	r24, 0x01	; 1
    11da:	09 f0       	breq	.+2      	; 0x11de <USB_Device_ProcessControlRequest+0x110>
    11dc:	e4 c0       	rjmp	.+456    	; 0x13a6 <USB_Device_ProcessControlRequest+0x2d8>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    11de:	10 92 83 01 	sts	0x0183, r1
    11e2:	33 30       	cpi	r19, 0x03	; 3
    11e4:	69 f5       	brne	.+90     	; 0x1240 <USB_Device_ProcessControlRequest+0x172>
    11e6:	80 93 83 01 	sts	0x0183, r24
    11ea:	2a c0       	rjmp	.+84     	; 0x1240 <USB_Device_ProcessControlRequest+0x172>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    11ec:	80 91 89 01 	lds	r24, 0x0189
    11f0:	88 23       	and	r24, r24
    11f2:	31 f5       	brne	.+76     	; 0x1240 <USB_Device_ProcessControlRequest+0x172>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    11f4:	20 91 8b 01 	lds	r18, 0x018B
    11f8:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    11fa:	09 f4       	brne	.+2      	; 0x11fe <USB_Device_ProcessControlRequest+0x130>
    11fc:	d4 c0       	rjmp	.+424    	; 0x13a6 <USB_Device_ProcessControlRequest+0x2d8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    11fe:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1202:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1206:	80 ff       	sbrs	r24, 0
    1208:	1b c0       	rjmp	.+54     	; 0x1240 <USB_Device_ProcessControlRequest+0x172>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    120a:	33 30       	cpi	r19, 0x03	; 3
    120c:	21 f4       	brne	.+8      	; 0x1216 <USB_Device_ProcessControlRequest+0x148>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    120e:	80 91 eb 00 	lds	r24, 0x00EB
    1212:	80 62       	ori	r24, 0x20	; 32
    1214:	13 c0       	rjmp	.+38     	; 0x123c <USB_Device_ProcessControlRequest+0x16e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1216:	80 91 eb 00 	lds	r24, 0x00EB
    121a:	80 61       	ori	r24, 0x10	; 16
    121c:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	02 c0       	rjmp	.+4      	; 0x122a <USB_Device_ProcessControlRequest+0x15c>
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	2a 95       	dec	r18
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <USB_Device_ProcessControlRequest+0x158>
    122e:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1232:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1236:	80 91 eb 00 	lds	r24, 0x00EB
    123a:	88 60       	ori	r24, 0x08	; 8
    123c:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1240:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1244:	80 91 e8 00 	lds	r24, 0x00E8
    1248:	87 7f       	andi	r24, 0xF7	; 247
    124a:	8c c0       	rjmp	.+280    	; 0x1364 <USB_Device_ProcessControlRequest+0x296>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    124c:	88 23       	and	r24, r24
    124e:	09 f0       	breq	.+2      	; 0x1252 <USB_Device_ProcessControlRequest+0x184>
    1250:	aa c0       	rjmp	.+340    	; 0x13a6 <USB_Device_ProcessControlRequest+0x2d8>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    1252:	10 91 89 01 	lds	r17, 0x0189
    1256:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1258:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    125a:	f8 94       	cli
    125c:	80 91 e8 00 	lds	r24, 0x00E8
    1260:	87 7f       	andi	r24, 0xF7	; 247
    1262:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1266:	75 dd       	rcall	.-1302   	; 0xd52 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1268:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    126c:	80 ff       	sbrs	r24, 0
    126e:	fc cf       	rjmp	.-8      	; 0x1268 <USB_Device_ProcessControlRequest+0x19a>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
    1270:	80 91 e3 00 	lds	r24, 0x00E3
    1274:	80 78       	andi	r24, 0x80	; 128
    1276:	81 2b       	or	r24, r17
    1278:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR |= (1 << ADDEN);
    127c:	80 91 e3 00 	lds	r24, 0x00E3
    1280:	80 68       	ori	r24, 0x80	; 128
    1282:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1286:	11 23       	and	r17, r17
    1288:	11 f4       	brne	.+4      	; 0x128e <USB_Device_ProcessControlRequest+0x1c0>
    128a:	82 e0       	ldi	r24, 0x02	; 2
    128c:	01 c0       	rjmp	.+2      	; 0x1290 <USB_Device_ProcessControlRequest+0x1c2>
    128e:	83 e0       	ldi	r24, 0x03	; 3
    1290:	80 93 86 01 	sts	0x0186, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1294:	0f bf       	out	0x3f, r16	; 63
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#endif
				
				GCC_MEMORY_BARRIER();
    1296:	87 c0       	rjmp	.+270    	; 0x13a6 <USB_Device_ProcessControlRequest+0x2d8>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1298:	80 58       	subi	r24, 0x80	; 128
    129a:	82 30       	cpi	r24, 0x02	; 2
    129c:	08 f0       	brcs	.+2      	; 0x12a0 <USB_Device_ProcessControlRequest+0x1d2>
    129e:	83 c0       	rjmp	.+262    	; 0x13a6 <USB_Device_ProcessControlRequest+0x2d8>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    12a0:	80 91 89 01 	lds	r24, 0x0189
    12a4:	90 91 8a 01 	lds	r25, 0x018A
    12a8:	23 e0       	ldi	r18, 0x03	; 3
    12aa:	8c 3d       	cpi	r24, 0xDC	; 220
    12ac:	92 07       	cpc	r25, r18
    12ae:	09 f0       	breq	.+2      	; 0x12b2 <USB_Device_ProcessControlRequest+0x1e4>
    12b0:	33 c0       	rjmp	.+102    	; 0x1318 <USB_Device_ProcessControlRequest+0x24a>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    12b2:	83 e0       	ldi	r24, 0x03	; 3
    12b4:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    12b6:	8a e2       	ldi	r24, 0x2A	; 42
    12b8:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    12ba:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    12bc:	f8 94       	cli
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#endif

				GCC_MEMORY_BARRIER();
    12be:	de 01       	movw	r26, r28
    12c0:	15 96       	adiw	r26, 0x05	; 5
    12c2:	6e e0       	ldi	r22, 0x0E	; 14
    12c4:	40 e0       	ldi	r20, 0x00	; 0
    12c6:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    12c8:	11 e2       	ldi	r17, 0x21	; 33
    12ca:	e6 2f       	mov	r30, r22
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	10 93 57 00 	sts	0x0057, r17
    12d2:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
    12d4:	40 ff       	sbrs	r20, 0
    12d6:	03 c0       	rjmp	.+6      	; 0x12de <USB_Device_ProcessControlRequest+0x210>
					{
						SerialByte >>= 4;
    12d8:	82 95       	swap	r24
    12da:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    12dc:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    12de:	8f 70       	andi	r24, 0x0F	; 15
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    12e4:	8a 30       	cpi	r24, 0x0A	; 10
    12e6:	18 f0       	brcs	.+6      	; 0x12ee <USB_Device_ProcessControlRequest+0x220>
    12e8:	c9 01       	movw	r24, r18
    12ea:	c7 96       	adiw	r24, 0x37	; 55
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <USB_Device_ProcessControlRequest+0x224>
    12ee:	c9 01       	movw	r24, r18
    12f0:	c0 96       	adiw	r24, 0x30	; 48
    12f2:	8d 93       	st	X+, r24
    12f4:	9d 93       	st	X+, r25
    12f6:	4f 5f       	subi	r20, 0xFF	; 255
    12f8:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    12fa:	44 31       	cpi	r20, 0x14	; 20
    12fc:	51 05       	cpc	r21, r1
    12fe:	29 f7       	brne	.-54     	; 0x12ca <USB_Device_ProcessControlRequest+0x1fc>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1300:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1302:	80 91 e8 00 	lds	r24, 0x00E8
    1306:	87 7f       	andi	r24, 0xF7	; 247
    1308:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    130c:	ce 01       	movw	r24, r28
    130e:	03 96       	adiw	r24, 0x03	; 3
    1310:	6a e2       	ldi	r22, 0x2A	; 42
    1312:	70 e0       	ldi	r23, 0x00	; 0
    1314:	62 d0       	rcall	.+196    	; 0x13da <Endpoint_Write_Control_Stream_LE>
    1316:	12 c0       	rjmp	.+36     	; 0x133c <USB_Device_ProcessControlRequest+0x26e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1318:	60 91 8b 01 	lds	r22, 0x018B
    131c:	ae 01       	movw	r20, r28
    131e:	4f 5f       	subi	r20, 0xFF	; 255
    1320:	5f 4f       	sbci	r21, 0xFF	; 255
    1322:	2b d8       	rcall	.-4010   	; 0x37a <CALLBACK_USB_GetDescriptor>
    1324:	bc 01       	movw	r22, r24
    1326:	00 97       	sbiw	r24, 0x00	; 0
    1328:	09 f4       	brne	.+2      	; 0x132c <USB_Device_ProcessControlRequest+0x25e>
    132a:	3d c0       	rjmp	.+122    	; 0x13a6 <USB_Device_ProcessControlRequest+0x2d8>
    132c:	80 91 e8 00 	lds	r24, 0x00E8
    1330:	87 7f       	andi	r24, 0xF7	; 247
    1332:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	9a 81       	ldd	r25, Y+2	; 0x02
    133a:	ee d0       	rcall	.+476    	; 0x1518 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    133c:	80 91 e8 00 	lds	r24, 0x00E8
    1340:	8b 77       	andi	r24, 0x7B	; 123
    1342:	80 93 e8 00 	sts	0x00E8, r24
    1346:	2f c0       	rjmp	.+94     	; 0x13a6 <USB_Device_ProcessControlRequest+0x2d8>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1348:	80 38       	cpi	r24, 0x80	; 128
    134a:	69 f5       	brne	.+90     	; 0x13a6 <USB_Device_ProcessControlRequest+0x2d8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    134c:	80 91 e8 00 	lds	r24, 0x00E8
    1350:	87 7f       	andi	r24, 0xF7	; 247
    1352:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_ConfigurationNumber);
    1356:	80 91 84 01 	lds	r24, 0x0184
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    135a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    135e:	80 91 e8 00 	lds	r24, 0x00E8
    1362:	8e 77       	andi	r24, 0x7E	; 126
    1364:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1368:	f4 dc       	rcall	.-1560   	; 0xd52 <Endpoint_ClearStatusStage>
    136a:	1d c0       	rjmp	.+58     	; 0x13a6 <USB_Device_ProcessControlRequest+0x2d8>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    136c:	88 23       	and	r24, r24
    136e:	d9 f4       	brne	.+54     	; 0x13a6 <USB_Device_ProcessControlRequest+0x2d8>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1370:	90 91 89 01 	lds	r25, 0x0189
    1374:	92 30       	cpi	r25, 0x02	; 2
    1376:	b8 f4       	brcc	.+46     	; 0x13a6 <USB_Device_ProcessControlRequest+0x2d8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1378:	80 91 e8 00 	lds	r24, 0x00E8
    137c:	87 7f       	andi	r24, 0xF7	; 247
    137e:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1382:	90 93 84 01 	sts	0x0184, r25

	Endpoint_ClearStatusStage();
    1386:	e5 dc       	rcall	.-1590   	; 0xd52 <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
    1388:	80 91 84 01 	lds	r24, 0x0184
    138c:	88 23       	and	r24, r24
    138e:	31 f4       	brne	.+12     	; 0x139c <USB_Device_ProcessControlRequest+0x2ce>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1390:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1394:	87 fd       	sbrc	r24, 7
    1396:	02 c0       	rjmp	.+4      	; 0x139c <USB_Device_ProcessControlRequest+0x2ce>
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	01 c0       	rjmp	.+2      	; 0x139e <USB_Device_ProcessControlRequest+0x2d0>
    139c:	84 e0       	ldi	r24, 0x04	; 4
    139e:	80 93 86 01 	sts	0x0186, r24

	EVENT_USB_Device_ConfigurationChanged();
    13a2:	0e 94 4d 01 	call	0x29a	; 0x29a <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    13a6:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    13aa:	83 ff       	sbrs	r24, 3
    13ac:	0a c0       	rjmp	.+20     	; 0x13c2 <USB_Device_ProcessControlRequest+0x2f4>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    13ae:	80 91 eb 00 	lds	r24, 0x00EB
    13b2:	80 62       	ori	r24, 0x20	; 32
    13b4:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    13b8:	80 91 e8 00 	lds	r24, 0x00E8
    13bc:	87 7f       	andi	r24, 0xF7	; 247
    13be:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    13c2:	ac 96       	adiw	r28, 0x2c	; 44
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	f8 94       	cli
    13c8:	de bf       	out	0x3e, r29	; 62
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	cd bf       	out	0x3d, r28	; 61
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	1f 91       	pop	r17
    13d4:	0f 91       	pop	r16
    13d6:	08 95       	ret

000013d8 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    13d8:	08 95       	ret

000013da <Endpoint_Write_Control_Stream_LE>:
    13da:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    13dc:	40 91 8d 01 	lds	r20, 0x018D
    13e0:	50 91 8e 01 	lds	r21, 0x018E
    13e4:	46 17       	cp	r20, r22
    13e6:	57 07       	cpc	r21, r23
    13e8:	18 f4       	brcc	.+6      	; 0x13f0 <Endpoint_Write_Control_Stream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    13ea:	f9 01       	movw	r30, r18
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	3d c0       	rjmp	.+122    	; 0x146a <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    13f0:	61 15       	cp	r22, r1
    13f2:	71 05       	cpc	r23, r1
    13f4:	11 f0       	breq	.+4      	; 0x13fa <Endpoint_Write_Control_Stream_LE+0x20>
    13f6:	ab 01       	movw	r20, r22
    13f8:	f8 cf       	rjmp	.-16     	; 0x13ea <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13fa:	80 91 e8 00 	lds	r24, 0x00E8
    13fe:	8e 77       	andi	r24, 0x7E	; 126
    1400:	80 93 e8 00 	sts	0x00E8, r24
    1404:	40 e0       	ldi	r20, 0x00	; 0
    1406:	50 e0       	ldi	r21, 0x00	; 0
    1408:	f0 cf       	rjmp	.-32     	; 0x13ea <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    140a:	80 91 86 01 	lds	r24, 0x0186

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    140e:	88 23       	and	r24, r24
    1410:	f1 f1       	breq	.+124    	; 0x148e <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1412:	85 30       	cpi	r24, 0x05	; 5
    1414:	f1 f1       	breq	.+124    	; 0x1492 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1416:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    141a:	83 ff       	sbrs	r24, 3
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <Endpoint_Write_Control_Stream_LE+0x48>
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1422:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1426:	82 fd       	sbrc	r24, 2
    1428:	2c c0       	rjmp	.+88     	; 0x1482 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    142a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    142e:	80 ff       	sbrs	r24, 0
    1430:	1c c0       	rjmp	.+56     	; 0x146a <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    1432:	20 91 f2 00 	lds	r18, 0x00F2
    1436:	30 91 f3 00 	lds	r19, 0x00F3
    143a:	07 c0       	rjmp	.+14     	; 0x144a <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    143c:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    143e:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1442:	41 50       	subi	r20, 0x01	; 1
    1444:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    1446:	2f 5f       	subi	r18, 0xFF	; 255
    1448:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    144a:	41 15       	cp	r20, r1
    144c:	51 05       	cpc	r21, r1
    144e:	19 f0       	breq	.+6      	; 0x1456 <Endpoint_Write_Control_Stream_LE+0x7c>
    1450:	28 30       	cpi	r18, 0x08	; 8
    1452:	31 05       	cpc	r19, r1
    1454:	98 f3       	brcs	.-26     	; 0x143c <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	28 30       	cpi	r18, 0x08	; 8
    145a:	31 05       	cpc	r19, r1
    145c:	09 f4       	brne	.+2      	; 0x1460 <Endpoint_Write_Control_Stream_LE+0x86>
    145e:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1460:	80 91 e8 00 	lds	r24, 0x00E8
    1464:	8e 77       	andi	r24, 0x7E	; 126
    1466:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    146a:	41 15       	cp	r20, r1
    146c:	51 05       	cpc	r21, r1
    146e:	69 f6       	brne	.-102    	; 0x140a <Endpoint_Write_Control_Stream_LE+0x30>
    1470:	99 23       	and	r25, r25
    1472:	59 f6       	brne	.-106    	; 0x140a <Endpoint_Write_Control_Stream_LE+0x30>
    1474:	06 c0       	rjmp	.+12     	; 0x1482 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1476:	80 91 86 01 	lds	r24, 0x0186

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    147a:	88 23       	and	r24, r24
    147c:	41 f0       	breq	.+16     	; 0x148e <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    147e:	85 30       	cpi	r24, 0x05	; 5
    1480:	41 f0       	breq	.+16     	; 0x1492 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1482:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1486:	82 ff       	sbrs	r24, 2
    1488:	f6 cf       	rjmp	.-20     	; 0x1476 <Endpoint_Write_Control_Stream_LE+0x9c>
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	08 95       	ret
    148e:	82 e0       	ldi	r24, 0x02	; 2
    1490:	08 95       	ret
    1492:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1494:	08 95       	ret

00001496 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    1496:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    1498:	61 15       	cp	r22, r1
    149a:	71 05       	cpc	r23, r1
    149c:	29 f4       	brne	.+10     	; 0x14a8 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    149e:	80 91 e8 00 	lds	r24, 0x00E8
    14a2:	8b 77       	andi	r24, 0x7B	; 123
    14a4:	80 93 e8 00 	sts	0x00E8, r24
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    14a8:	f9 01       	movw	r30, r18
    14aa:	22 c0       	rjmp	.+68     	; 0x14f0 <Endpoint_Read_Control_Stream_LE+0x5a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    14ac:	80 91 86 01 	lds	r24, 0x0186

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    14b0:	88 23       	and	r24, r24
    14b2:	71 f1       	breq	.+92     	; 0x1510 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    14b4:	85 30       	cpi	r24, 0x05	; 5
    14b6:	71 f1       	breq	.+92     	; 0x1514 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    14b8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    14bc:	83 ff       	sbrs	r24, 3
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <Endpoint_Read_Control_Stream_LE+0x2e>
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    14c4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    14c8:	82 ff       	sbrs	r24, 2
    14ca:	f0 cf       	rjmp	.-32     	; 0x14ac <Endpoint_Read_Control_Stream_LE+0x16>
    14cc:	06 c0       	rjmp	.+12     	; 0x14da <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    14ce:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    14d2:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    14d4:	61 50       	subi	r22, 0x01	; 1
    14d6:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    14d8:	31 f0       	breq	.+12     	; 0x14e6 <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    14da:	80 91 f2 00 	lds	r24, 0x00F2
    14de:	90 91 f3 00 	lds	r25, 0x00F3
    14e2:	89 2b       	or	r24, r25
    14e4:	a1 f7       	brne	.-24     	; 0x14ce <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    14e6:	80 91 e8 00 	lds	r24, 0x00E8
    14ea:	8b 77       	andi	r24, 0x7B	; 123
    14ec:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    14f0:	61 15       	cp	r22, r1
    14f2:	71 05       	cpc	r23, r1
    14f4:	d9 f6       	brne	.-74     	; 0x14ac <Endpoint_Read_Control_Stream_LE+0x16>
    14f6:	06 c0       	rjmp	.+12     	; 0x1504 <Endpoint_Read_Control_Stream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    14f8:	80 91 86 01 	lds	r24, 0x0186

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    14fc:	88 23       	and	r24, r24
    14fe:	41 f0       	breq	.+16     	; 0x1510 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1500:	85 30       	cpi	r24, 0x05	; 5
    1502:	41 f0       	breq	.+16     	; 0x1514 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1504:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    1508:	80 ff       	sbrs	r24, 0
    150a:	f6 cf       	rjmp	.-20     	; 0x14f8 <Endpoint_Read_Control_Stream_LE+0x62>
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	08 95       	ret
    1510:	82 e0       	ldi	r24, 0x02	; 2
    1512:	08 95       	ret
    1514:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1516:	08 95       	ret

00001518 <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    1518:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    151a:	40 91 8d 01 	lds	r20, 0x018D
    151e:	50 91 8e 01 	lds	r21, 0x018E
    1522:	46 17       	cp	r20, r22
    1524:	57 07       	cpc	r21, r23
    1526:	18 f4       	brcc	.+6      	; 0x152e <Endpoint_Write_Control_PStream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1528:	f9 01       	movw	r30, r18
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	40 c0       	rjmp	.+128    	; 0x15ae <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    152e:	61 15       	cp	r22, r1
    1530:	71 05       	cpc	r23, r1
    1532:	11 f0       	breq	.+4      	; 0x1538 <Endpoint_Write_Control_PStream_LE+0x20>
    1534:	ab 01       	movw	r20, r22
    1536:	f8 cf       	rjmp	.-16     	; 0x1528 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1538:	80 91 e8 00 	lds	r24, 0x00E8
    153c:	8e 77       	andi	r24, 0x7E	; 126
    153e:	80 93 e8 00 	sts	0x00E8, r24
    1542:	40 e0       	ldi	r20, 0x00	; 0
    1544:	50 e0       	ldi	r21, 0x00	; 0
    1546:	f0 cf       	rjmp	.-32     	; 0x1528 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1548:	80 91 86 01 	lds	r24, 0x0186

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    154c:	88 23       	and	r24, r24
    154e:	09 f4       	brne	.+2      	; 0x1552 <Endpoint_Write_Control_PStream_LE+0x3a>
    1550:	40 c0       	rjmp	.+128    	; 0x15d2 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1552:	85 30       	cpi	r24, 0x05	; 5
    1554:	09 f4       	brne	.+2      	; 0x1558 <Endpoint_Write_Control_PStream_LE+0x40>
    1556:	3f c0       	rjmp	.+126    	; 0x15d6 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1558:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    155c:	83 ff       	sbrs	r24, 3
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <Endpoint_Write_Control_PStream_LE+0x4c>
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1564:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1568:	82 fd       	sbrc	r24, 2
    156a:	2d c0       	rjmp	.+90     	; 0x15c6 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    156c:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1570:	80 ff       	sbrs	r24, 0
    1572:	1d c0       	rjmp	.+58     	; 0x15ae <Endpoint_Write_Control_PStream_LE+0x96>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    1574:	20 91 f2 00 	lds	r18, 0x00F2
    1578:	30 91 f3 00 	lds	r19, 0x00F3
    157c:	08 c0       	rjmp	.+16     	; 0x158e <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    157e:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1580:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1584:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1586:	41 50       	subi	r20, 0x01	; 1
    1588:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    158a:	2f 5f       	subi	r18, 0xFF	; 255
    158c:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    158e:	41 15       	cp	r20, r1
    1590:	51 05       	cpc	r21, r1
    1592:	19 f0       	breq	.+6      	; 0x159a <Endpoint_Write_Control_PStream_LE+0x82>
    1594:	28 30       	cpi	r18, 0x08	; 8
    1596:	31 05       	cpc	r19, r1
    1598:	90 f3       	brcs	.-28     	; 0x157e <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	28 30       	cpi	r18, 0x08	; 8
    159e:	31 05       	cpc	r19, r1
    15a0:	09 f4       	brne	.+2      	; 0x15a4 <Endpoint_Write_Control_PStream_LE+0x8c>
    15a2:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    15a4:	80 91 e8 00 	lds	r24, 0x00E8
    15a8:	8e 77       	andi	r24, 0x7E	; 126
    15aa:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    15ae:	41 15       	cp	r20, r1
    15b0:	51 05       	cpc	r21, r1
    15b2:	51 f6       	brne	.-108    	; 0x1548 <Endpoint_Write_Control_PStream_LE+0x30>
    15b4:	99 23       	and	r25, r25
    15b6:	41 f6       	brne	.-112    	; 0x1548 <Endpoint_Write_Control_PStream_LE+0x30>
    15b8:	06 c0       	rjmp	.+12     	; 0x15c6 <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    15ba:	80 91 86 01 	lds	r24, 0x0186

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    15be:	88 23       	and	r24, r24
    15c0:	41 f0       	breq	.+16     	; 0x15d2 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    15c2:	85 30       	cpi	r24, 0x05	; 5
    15c4:	41 f0       	breq	.+16     	; 0x15d6 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    15c6:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    15ca:	82 ff       	sbrs	r24, 2
    15cc:	f6 cf       	rjmp	.-20     	; 0x15ba <Endpoint_Write_Control_PStream_LE+0xa2>
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	08 95       	ret
    15d2:	82 e0       	ldi	r24, 0x02	; 2
    15d4:	08 95       	ret
    15d6:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    15d8:	08 95       	ret

000015da <Endpoint_Read_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    15da:	bf 92       	push	r11
    15dc:	cf 92       	push	r12
    15de:	df 92       	push	r13
    15e0:	ef 92       	push	r14
    15e2:	ff 92       	push	r15
    15e4:	0f 93       	push	r16
    15e6:	1f 93       	push	r17
    15e8:	cf 93       	push	r28
    15ea:	df 93       	push	r29
    15ec:	18 2f       	mov	r17, r24
    15ee:	09 2f       	mov	r16, r25
    15f0:	7b 01       	movw	r14, r22
    15f2:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    15f4:	cf db       	rcall	.-2146   	; 0xd94 <Endpoint_WaitUntilReady>
    15f6:	b8 2e       	mov	r11, r24
    15f8:	88 23       	and	r24, r24
    15fa:	a9 f5       	brne	.+106    	; 0x1666 <Endpoint_Read_Stream_LE+0x8c>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    15fc:	81 2f       	mov	r24, r17
    15fe:	90 2f       	mov	r25, r16
    1600:	9c 01       	movw	r18, r24
    1602:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1604:	c1 14       	cp	r12, r1
    1606:	d1 04       	cpc	r13, r1
    1608:	39 f0       	breq	.+14     	; 0x1618 <Endpoint_Read_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    160a:	f6 01       	movw	r30, r12
    160c:	80 81       	ld	r24, Z
    160e:	91 81       	ldd	r25, Z+1	; 0x01
    1610:	e8 1a       	sub	r14, r24
    1612:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1614:	c8 0f       	add	r28, r24
    1616:	d9 1f       	adc	r29, r25
    1618:	00 e0       	ldi	r16, 0x00	; 0
    161a:	10 e0       	ldi	r17, 0x00	; 0
    161c:	21 c0       	rjmp	.+66     	; 0x1660 <Endpoint_Read_Stream_LE+0x86>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    161e:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1622:	85 fd       	sbrc	r24, 5
    1624:	15 c0       	rjmp	.+42     	; 0x1650 <Endpoint_Read_Stream_LE+0x76>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1626:	80 91 e8 00 	lds	r24, 0x00E8
    162a:	8b 77       	andi	r24, 0x7B	; 123
    162c:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    1630:	c1 14       	cp	r12, r1
    1632:	d1 04       	cpc	r13, r1
    1634:	49 f0       	breq	.+18     	; 0x1648 <Endpoint_Read_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
    1636:	f6 01       	movw	r30, r12
    1638:	80 81       	ld	r24, Z
    163a:	91 81       	ldd	r25, Z+1	; 0x01
    163c:	80 0f       	add	r24, r16
    163e:	91 1f       	adc	r25, r17
    1640:	91 83       	std	Z+1, r25	; 0x01
    1642:	80 83       	st	Z, r24
    1644:	85 e0       	ldi	r24, 0x05	; 5
    1646:	10 c0       	rjmp	.+32     	; 0x1668 <Endpoint_Read_Stream_LE+0x8e>

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1648:	a5 db       	rcall	.-2230   	; 0xd94 <Endpoint_WaitUntilReady>
    164a:	88 23       	and	r24, r24
    164c:	49 f0       	breq	.+18     	; 0x1660 <Endpoint_Read_Stream_LE+0x86>
    164e:	0c c0       	rjmp	.+24     	; 0x1668 <Endpoint_Read_Stream_LE+0x8e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1650:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1654:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1656:	08 94       	sec
    1658:	e1 08       	sbc	r14, r1
    165a:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    165c:	0f 5f       	subi	r16, 0xFF	; 255
    165e:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1660:	e1 14       	cp	r14, r1
    1662:	f1 04       	cpc	r15, r1
    1664:	e1 f6       	brne	.-72     	; 0x161e <Endpoint_Read_Stream_LE+0x44>
    1666:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	1f 91       	pop	r17
    166e:	0f 91       	pop	r16
    1670:	ff 90       	pop	r15
    1672:	ef 90       	pop	r14
    1674:	df 90       	pop	r13
    1676:	cf 90       	pop	r12
    1678:	bf 90       	pop	r11
    167a:	08 95       	ret

0000167c <Endpoint_Write_Stream_BE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    167c:	bf 92       	push	r11
    167e:	cf 92       	push	r12
    1680:	df 92       	push	r13
    1682:	ef 92       	push	r14
    1684:	ff 92       	push	r15
    1686:	0f 93       	push	r16
    1688:	1f 93       	push	r17
    168a:	cf 93       	push	r28
    168c:	df 93       	push	r29
    168e:	8c 01       	movw	r16, r24
    1690:	eb 01       	movw	r28, r22
    1692:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1694:	7f db       	rcall	.-2306   	; 0xd94 <Endpoint_WaitUntilReady>
    1696:	b8 2e       	mov	r11, r24
    1698:	88 23       	and	r24, r24
    169a:	b1 f5       	brne	.+108    	; 0x1708 <Endpoint_Write_Stream_BE+0x8c>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    169c:	21 97       	sbiw	r28, 0x01	; 1
    169e:	0c 0f       	add	r16, r28
    16a0:	1d 1f       	adc	r17, r29
    16a2:	21 96       	adiw	r28, 0x01	; 1
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    16a4:	c1 14       	cp	r12, r1
    16a6:	d1 04       	cpc	r13, r1
    16a8:	39 f0       	breq	.+14     	; 0x16b8 <Endpoint_Write_Stream_BE+0x3c>
	{
		Length -= *BytesProcessed;
    16aa:	f6 01       	movw	r30, r12
    16ac:	80 81       	ld	r24, Z
    16ae:	91 81       	ldd	r25, Z+1	; 0x01
    16b0:	c8 1b       	sub	r28, r24
    16b2:	d9 0b       	sbc	r29, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    16b4:	08 1b       	sub	r16, r24
    16b6:	19 0b       	sbc	r17, r25
    16b8:	ee 24       	eor	r14, r14
    16ba:	ff 24       	eor	r15, r15
    16bc:	23 c0       	rjmp	.+70     	; 0x1704 <Endpoint_Write_Stream_BE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    16be:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    16c2:	85 fd       	sbrc	r24, 5
    16c4:	15 c0       	rjmp	.+42     	; 0x16f0 <Endpoint_Write_Stream_BE+0x74>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16c6:	80 91 e8 00 	lds	r24, 0x00E8
    16ca:	8e 77       	andi	r24, 0x7E	; 126
    16cc:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    16d0:	c1 14       	cp	r12, r1
    16d2:	d1 04       	cpc	r13, r1
    16d4:	49 f0       	breq	.+18     	; 0x16e8 <Endpoint_Write_Stream_BE+0x6c>
			{
				*BytesProcessed += BytesInTransfer;
    16d6:	f6 01       	movw	r30, r12
    16d8:	80 81       	ld	r24, Z
    16da:	91 81       	ldd	r25, Z+1	; 0x01
    16dc:	8e 0d       	add	r24, r14
    16de:	9f 1d       	adc	r25, r15
    16e0:	91 83       	std	Z+1, r25	; 0x01
    16e2:	80 83       	st	Z, r24
    16e4:	85 e0       	ldi	r24, 0x05	; 5
    16e6:	11 c0       	rjmp	.+34     	; 0x170a <Endpoint_Write_Stream_BE+0x8e>

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    16e8:	55 db       	rcall	.-2390   	; 0xd94 <Endpoint_WaitUntilReady>
    16ea:	88 23       	and	r24, r24
    16ec:	59 f0       	breq	.+22     	; 0x1704 <Endpoint_Write_Stream_BE+0x88>
    16ee:	0d c0       	rjmp	.+26     	; 0x170a <Endpoint_Write_Stream_BE+0x8e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    16f0:	f8 01       	movw	r30, r16
    16f2:	80 81       	ld	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    16f4:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
    16f8:	01 50       	subi	r16, 0x01	; 1
    16fa:	10 40       	sbci	r17, 0x00	; 0
			Length--;
    16fc:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    16fe:	08 94       	sec
    1700:	e1 1c       	adc	r14, r1
    1702:	f1 1c       	adc	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1704:	20 97       	sbiw	r28, 0x00	; 0
    1706:	d9 f6       	brne	.-74     	; 0x16be <Endpoint_Write_Stream_BE+0x42>
    1708:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    170a:	df 91       	pop	r29
    170c:	cf 91       	pop	r28
    170e:	1f 91       	pop	r17
    1710:	0f 91       	pop	r16
    1712:	ff 90       	pop	r15
    1714:	ef 90       	pop	r14
    1716:	df 90       	pop	r13
    1718:	cf 90       	pop	r12
    171a:	bf 90       	pop	r11
    171c:	08 95       	ret

0000171e <Endpoint_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    171e:	bf 92       	push	r11
    1720:	cf 92       	push	r12
    1722:	df 92       	push	r13
    1724:	ef 92       	push	r14
    1726:	ff 92       	push	r15
    1728:	0f 93       	push	r16
    172a:	1f 93       	push	r17
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	18 2f       	mov	r17, r24
    1732:	09 2f       	mov	r16, r25
    1734:	7b 01       	movw	r14, r22
    1736:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1738:	2d db       	rcall	.-2470   	; 0xd94 <Endpoint_WaitUntilReady>
    173a:	b8 2e       	mov	r11, r24
    173c:	88 23       	and	r24, r24
    173e:	a9 f5       	brne	.+106    	; 0x17aa <Endpoint_Write_Stream_LE+0x8c>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1740:	81 2f       	mov	r24, r17
    1742:	90 2f       	mov	r25, r16
    1744:	9c 01       	movw	r18, r24
    1746:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1748:	c1 14       	cp	r12, r1
    174a:	d1 04       	cpc	r13, r1
    174c:	39 f0       	breq	.+14     	; 0x175c <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    174e:	f6 01       	movw	r30, r12
    1750:	80 81       	ld	r24, Z
    1752:	91 81       	ldd	r25, Z+1	; 0x01
    1754:	e8 1a       	sub	r14, r24
    1756:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1758:	c8 0f       	add	r28, r24
    175a:	d9 1f       	adc	r29, r25
    175c:	00 e0       	ldi	r16, 0x00	; 0
    175e:	10 e0       	ldi	r17, 0x00	; 0
    1760:	21 c0       	rjmp	.+66     	; 0x17a4 <Endpoint_Write_Stream_LE+0x86>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1762:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1766:	85 fd       	sbrc	r24, 5
    1768:	15 c0       	rjmp	.+42     	; 0x1794 <Endpoint_Write_Stream_LE+0x76>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    176a:	80 91 e8 00 	lds	r24, 0x00E8
    176e:	8e 77       	andi	r24, 0x7E	; 126
    1770:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    1774:	c1 14       	cp	r12, r1
    1776:	d1 04       	cpc	r13, r1
    1778:	49 f0       	breq	.+18     	; 0x178c <Endpoint_Write_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
    177a:	f6 01       	movw	r30, r12
    177c:	80 81       	ld	r24, Z
    177e:	91 81       	ldd	r25, Z+1	; 0x01
    1780:	80 0f       	add	r24, r16
    1782:	91 1f       	adc	r25, r17
    1784:	91 83       	std	Z+1, r25	; 0x01
    1786:	80 83       	st	Z, r24
    1788:	85 e0       	ldi	r24, 0x05	; 5
    178a:	10 c0       	rjmp	.+32     	; 0x17ac <Endpoint_Write_Stream_LE+0x8e>

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    178c:	03 db       	rcall	.-2554   	; 0xd94 <Endpoint_WaitUntilReady>
    178e:	88 23       	and	r24, r24
    1790:	49 f0       	breq	.+18     	; 0x17a4 <Endpoint_Write_Stream_LE+0x86>
    1792:	0c c0       	rjmp	.+24     	; 0x17ac <Endpoint_Write_Stream_LE+0x8e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1794:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1796:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    179a:	08 94       	sec
    179c:	e1 08       	sbc	r14, r1
    179e:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    17a0:	0f 5f       	subi	r16, 0xFF	; 255
    17a2:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    17a4:	e1 14       	cp	r14, r1
    17a6:	f1 04       	cpc	r15, r1
    17a8:	e1 f6       	brne	.-72     	; 0x1762 <Endpoint_Write_Stream_LE+0x44>
    17aa:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    17ac:	df 91       	pop	r29
    17ae:	cf 91       	pop	r28
    17b0:	1f 91       	pop	r17
    17b2:	0f 91       	pop	r16
    17b4:	ff 90       	pop	r15
    17b6:	ef 90       	pop	r14
    17b8:	df 90       	pop	r13
    17ba:	cf 90       	pop	r12
    17bc:	bf 90       	pop	r11
    17be:	08 95       	ret

000017c0 <Endpoint_Null_Stream>:
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
    17c0:	df 92       	push	r13
    17c2:	ef 92       	push	r14
    17c4:	ff 92       	push	r15
    17c6:	0f 93       	push	r16
    17c8:	1f 93       	push	r17
    17ca:	cf 93       	push	r28
    17cc:	df 93       	push	r29
    17ce:	ec 01       	movw	r28, r24
    17d0:	8b 01       	movw	r16, r22
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;
	
	if ((ErrorCode = Endpoint_WaitUntilReady()))
    17d2:	e0 da       	rcall	.-2624   	; 0xd94 <Endpoint_WaitUntilReady>
    17d4:	d8 2e       	mov	r13, r24
    17d6:	88 23       	and	r24, r24
    17d8:	61 f5       	brne	.+88     	; 0x1832 <Endpoint_Null_Stream+0x72>
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
    17da:	01 15       	cp	r16, r1
    17dc:	11 05       	cpc	r17, r1
    17de:	29 f0       	breq	.+10     	; 0x17ea <Endpoint_Null_Stream+0x2a>
	  Length -= *BytesProcessed;
    17e0:	f8 01       	movw	r30, r16
    17e2:	80 81       	ld	r24, Z
    17e4:	91 81       	ldd	r25, Z+1	; 0x01
    17e6:	c8 1b       	sub	r28, r24
    17e8:	d9 0b       	sbc	r29, r25
    17ea:	ee 24       	eor	r14, r14
    17ec:	ff 24       	eor	r15, r15
    17ee:	1f c0       	rjmp	.+62     	; 0x182e <Endpoint_Null_Stream+0x6e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    17f0:	80 91 e8 00 	lds	r24, 0x00E8

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    17f4:	85 fd       	sbrc	r24, 5
    17f6:	15 c0       	rjmp	.+42     	; 0x1822 <Endpoint_Null_Stream+0x62>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17f8:	80 91 e8 00 	lds	r24, 0x00E8
    17fc:	8e 77       	andi	r24, 0x7E	; 126
    17fe:	80 93 e8 00 	sts	0x00E8, r24
		{
			Endpoint_ClearIN();

			if (BytesProcessed != NULL)
    1802:	01 15       	cp	r16, r1
    1804:	11 05       	cpc	r17, r1
    1806:	49 f0       	breq	.+18     	; 0x181a <Endpoint_Null_Stream+0x5a>
			{
				*BytesProcessed += BytesInTransfer;
    1808:	f8 01       	movw	r30, r16
    180a:	80 81       	ld	r24, Z
    180c:	91 81       	ldd	r25, Z+1	; 0x01
    180e:	8e 0d       	add	r24, r14
    1810:	9f 1d       	adc	r25, r15
    1812:	91 83       	std	Z+1, r25	; 0x01
    1814:	80 83       	st	Z, r24
    1816:	85 e0       	ldi	r24, 0x05	; 5
    1818:	0d c0       	rjmp	.+26     	; 0x1834 <Endpoint_Null_Stream+0x74>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    181a:	bc da       	rcall	.-2696   	; 0xd94 <Endpoint_WaitUntilReady>
    181c:	88 23       	and	r24, r24
    181e:	39 f0       	breq	.+14     	; 0x182e <Endpoint_Null_Stream+0x6e>
    1820:	09 c0       	rjmp	.+18     	; 0x1834 <Endpoint_Null_Stream+0x74>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1822:	10 92 f1 00 	sts	0x00F1, r1
		}
		else
		{
			Endpoint_Write_8(0);

			Length--;
    1826:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    1828:	08 94       	sec
    182a:	e1 1c       	adc	r14, r1
    182c:	f1 1c       	adc	r15, r1
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
    182e:	20 97       	sbiw	r28, 0x00	; 0
    1830:	f9 f6       	brne	.-66     	; 0x17f0 <Endpoint_Null_Stream+0x30>
    1832:	8d 2d       	mov	r24, r13
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
    1834:	df 91       	pop	r29
    1836:	cf 91       	pop	r28
    1838:	1f 91       	pop	r17
    183a:	0f 91       	pop	r16
    183c:	ff 90       	pop	r15
    183e:	ef 90       	pop	r14
    1840:	df 90       	pop	r13
    1842:	08 95       	ret

00001844 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1844:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    1846:	80 91 86 01 	lds	r24, 0x0186
    184a:	88 23       	and	r24, r24
    184c:	61 f0       	breq	.+24     	; 0x1866 <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    184e:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1852:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1856:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    185a:	83 ff       	sbrs	r24, 3
    185c:	01 c0       	rjmp	.+2      	; 0x1860 <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
    185e:	37 dc       	rcall	.-1938   	; 0x10ce <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    1860:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1862:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1866:	1f 91       	pop	r17
    1868:	08 95       	ret

0000186a <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    186a:	4f 92       	push	r4
    186c:	5f 92       	push	r5
    186e:	6f 92       	push	r6
    1870:	7f 92       	push	r7
    1872:	8f 92       	push	r8
    1874:	9f 92       	push	r9
    1876:	af 92       	push	r10
    1878:	bf 92       	push	r11
    187a:	cf 92       	push	r12
    187c:	df 92       	push	r13
    187e:	ef 92       	push	r14
    1880:	ff 92       	push	r15
    1882:	0f 93       	push	r16
    1884:	1f 93       	push	r17
    1886:	df 93       	push	r29
    1888:	cf 93       	push	r28
    188a:	00 d0       	rcall	.+0      	; 0x188c <HID_Device_USBTask+0x22>
    188c:	0f 92       	push	r0
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	7c 01       	movw	r14, r24
			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);

			Endpoint_ClearIN();
		}
	}
}
    1894:	6d b6       	in	r6, 0x3d	; 61
    1896:	7e b6       	in	r7, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1898:	80 91 86 01 	lds	r24, 0x0186
    189c:	84 30       	cpi	r24, 0x04	; 4
    189e:	09 f0       	breq	.+2      	; 0x18a2 <HID_Device_USBTask+0x38>
    18a0:	86 c0       	rjmp	.+268    	; 0x19ae <HID_Device_USBTask+0x144>
	  return;

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
    18a2:	f7 01       	movw	r30, r14
    18a4:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    18a6:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    18aa:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsReadWriteAllowed())
    18ae:	85 ff       	sbrs	r24, 5
    18b0:	7e c0       	rjmp	.+252    	; 0x19ae <HID_Device_USBTask+0x144>
    18b2:	5d b6       	in	r5, 0x3d	; 61
    18b4:	4e b6       	in	r4, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    18b6:	47 81       	ldd	r20, Z+7	; 0x07
    18b8:	8d b7       	in	r24, 0x3d	; 61
    18ba:	9e b7       	in	r25, 0x3e	; 62
    18bc:	84 1b       	sub	r24, r20
    18be:	91 09       	sbc	r25, r1
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	f8 94       	cli
    18c4:	9e bf       	out	0x3e, r25	; 62
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	8d bf       	out	0x3d, r24	; 61
    18ca:	0d b7       	in	r16, 0x3d	; 61
    18cc:	1e b7       	in	r17, 0x3e	; 62
    18ce:	0f 5f       	subi	r16, 0xFF	; 255
    18d0:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t  ReportID     = 0;
    18d2:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
    18d4:	1b 82       	std	Y+3, r1	; 0x03
    18d6:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
    18d8:	c0 2e       	mov	r12, r16
    18da:	91 2e       	mov	r9, r17
    18dc:	c8 01       	movw	r24, r16
    18de:	60 e0       	ldi	r22, 0x00	; 0
    18e0:	70 e0       	ldi	r23, 0x00	; 0
    18e2:	50 e0       	ldi	r21, 0x00	; 0
    18e4:	a1 d3       	rcall	.+1858   	; 0x2028 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
    18e6:	c7 01       	movw	r24, r14
    18e8:	be 01       	movw	r22, r28
    18ea:	6f 5f       	subi	r22, 0xFF	; 255
    18ec:	7f 4f       	sbci	r23, 0xFF	; 255
    18ee:	40 e0       	ldi	r20, 0x00	; 0
    18f0:	98 01       	movw	r18, r16
    18f2:	8e 01       	movw	r16, r28
    18f4:	0e 5f       	subi	r16, 0xFE	; 254
    18f6:	1f 4f       	sbci	r17, 0xFF	; 255
    18f8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <CALLBACK_HID_Device_CreateHIDReport>
    18fc:	88 2e       	mov	r8, r24
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    18fe:	f7 01       	movw	r30, r14
    1900:	81 85       	ldd	r24, Z+9	; 0x09
    1902:	92 85       	ldd	r25, Z+10	; 0x0a
    1904:	89 2b       	or	r24, r25
    1906:	19 f4       	brne	.+6      	; 0x190e <HID_Device_USBTask+0xa4>
    1908:	aa 24       	eor	r10, r10
    190a:	bb 24       	eor	r11, r11
    190c:	0b c0       	rjmp	.+22     	; 0x1924 <HID_Device_USBTask+0xba>
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	f7 01       	movw	r30, r14
    1912:	83 85       	ldd	r24, Z+11	; 0x0b
    1914:	94 85       	ldd	r25, Z+12	; 0x0c
    1916:	89 2b       	or	r24, r25
    1918:	09 f0       	breq	.+2      	; 0x191c <HID_Device_USBTask+0xb2>
    191a:	21 e0       	ldi	r18, 0x01	; 1
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	28 27       	eor	r18, r24
    1920:	a2 2e       	mov	r10, r18
    1922:	bb 24       	eor	r11, r11

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1924:	f7 01       	movw	r30, r14
    1926:	05 81       	ldd	r16, Z+5	; 0x05
    1928:	16 81       	ldd	r17, Z+6	; 0x06
    192a:	01 15       	cp	r16, r1
    192c:	11 05       	cpc	r17, r1
    192e:	11 f4       	brne	.+4      	; 0x1934 <HID_Device_USBTask+0xca>
    1930:	dd 24       	eor	r13, r13
    1932:	12 c0       	rjmp	.+36     	; 0x1958 <HID_Device_USBTask+0xee>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    1934:	4a 81       	ldd	r20, Y+2	; 0x02
    1936:	5b 81       	ldd	r21, Y+3	; 0x03
    1938:	8c 2d       	mov	r24, r12
    193a:	99 2d       	mov	r25, r9
    193c:	b8 01       	movw	r22, r16
    193e:	5e d3       	rcall	.+1724   	; 0x1ffc <memcmp>
    1940:	dd 24       	eor	r13, r13
    1942:	00 97       	sbiw	r24, 0x00	; 0
    1944:	11 f0       	breq	.+4      	; 0x194a <HID_Device_USBTask+0xe0>
    1946:	dd 24       	eor	r13, r13
    1948:	d3 94       	inc	r13
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    194a:	f7 01       	movw	r30, r14
    194c:	47 81       	ldd	r20, Z+7	; 0x07
    194e:	c8 01       	movw	r24, r16
    1950:	6c 2d       	mov	r22, r12
    1952:	79 2d       	mov	r23, r9
    1954:	50 e0       	ldi	r21, 0x00	; 0
    1956:	5f d3       	rcall	.+1726   	; 0x2016 <memcpy>
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	9b 81       	ldd	r25, Y+3	; 0x03
    195c:	89 2b       	or	r24, r25
    195e:	f9 f0       	breq	.+62     	; 0x199e <HID_Device_USBTask+0x134>
    1960:	88 20       	and	r8, r8
    1962:	21 f4       	brne	.+8      	; 0x196c <HID_Device_USBTask+0x102>
    1964:	dd 20       	and	r13, r13
    1966:	11 f4       	brne	.+4      	; 0x196c <HID_Device_USBTask+0x102>
    1968:	ab 28       	or	r10, r11
    196a:	c9 f0       	breq	.+50     	; 0x199e <HID_Device_USBTask+0x134>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    196c:	f7 01       	movw	r30, r14
    196e:	81 85       	ldd	r24, Z+9	; 0x09
    1970:	92 85       	ldd	r25, Z+10	; 0x0a
    1972:	94 87       	std	Z+12, r25	; 0x0c
    1974:	83 87       	std	Z+11, r24	; 0x0b

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
    1976:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1978:	80 93 e9 00 	sts	0x00E9, r24

			if (ReportID)
    197c:	89 81       	ldd	r24, Y+1	; 0x01
    197e:	88 23       	and	r24, r24
    1980:	11 f0       	breq	.+4      	; 0x1986 <HID_Device_USBTask+0x11c>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1982:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    1986:	6a 81       	ldd	r22, Y+2	; 0x02
    1988:	7b 81       	ldd	r23, Y+3	; 0x03
    198a:	8c 2d       	mov	r24, r12
    198c:	99 2d       	mov	r25, r9
    198e:	40 e0       	ldi	r20, 0x00	; 0
    1990:	50 e0       	ldi	r21, 0x00	; 0
    1992:	c5 de       	rcall	.-630    	; 0x171e <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1994:	80 91 e8 00 	lds	r24, 0x00E8
    1998:	8e 77       	andi	r24, 0x7E	; 126
    199a:	80 93 e8 00 	sts	0x00E8, r24
    199e:	85 2d       	mov	r24, r5
    19a0:	94 2d       	mov	r25, r4
    19a2:	9c 01       	movw	r18, r24
    19a4:	0f b6       	in	r0, 0x3f	; 63
    19a6:	f8 94       	cli
    19a8:	3e bf       	out	0x3e, r19	; 62
    19aa:	0f be       	out	0x3f, r0	; 63
    19ac:	2d bf       	out	0x3d, r18	; 61

			Endpoint_ClearIN();
		}
	}
}
    19ae:	0f b6       	in	r0, 0x3f	; 63
    19b0:	f8 94       	cli
    19b2:	7e be       	out	0x3e, r7	; 62
    19b4:	0f be       	out	0x3f, r0	; 63
    19b6:	6d be       	out	0x3d, r6	; 61
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	1f 91       	pop	r17
    19c4:	0f 91       	pop	r16
    19c6:	ff 90       	pop	r15
    19c8:	ef 90       	pop	r14
    19ca:	df 90       	pop	r13
    19cc:	cf 90       	pop	r12
    19ce:	bf 90       	pop	r11
    19d0:	af 90       	pop	r10
    19d2:	9f 90       	pop	r9
    19d4:	8f 90       	pop	r8
    19d6:	7f 90       	pop	r7
    19d8:	6f 90       	pop	r6
    19da:	5f 90       	pop	r5
    19dc:	4f 90       	pop	r4
    19de:	08 95       	ret

000019e0 <HID_Device_ConfigureEndpoints>:
			break;
	}
}

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    19e0:	cf 93       	push	r28
    19e2:	df 93       	push	r29
    19e4:	dc 01       	movw	r26, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    19e6:	08 96       	adiw	r24, 0x08	; 8
    19e8:	fc 01       	movw	r30, r24
    19ea:	85 e0       	ldi	r24, 0x05	; 5
    19ec:	ef 01       	movw	r28, r30
    19ee:	19 92       	st	Y+, r1
    19f0:	8a 95       	dec	r24
    19f2:	e9 f7       	brne	.-6      	; 0x19ee <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	18 96       	adiw	r26, 0x08	; 8
    19f8:	8c 93       	st	X, r24
    19fa:	18 97       	sbiw	r26, 0x08	; 8
	HIDInterfaceInfo->State.IdleCount = 500;
    19fc:	84 ef       	ldi	r24, 0xF4	; 244
    19fe:	91 e0       	ldi	r25, 0x01	; 1
    1a00:	1a 96       	adiw	r26, 0x0a	; 10
    1a02:	9c 93       	st	X, r25
    1a04:	8e 93       	st	-X, r24
    1a06:	19 97       	sbiw	r26, 0x09	; 9

	if (!(Endpoint_ConfigureEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber, EP_TYPE_INTERRUPT,
    1a08:	11 96       	adiw	r26, 0x01	; 1
    1a0a:	3c 91       	ld	r19, X
    1a0c:	11 97       	sbiw	r26, 0x01	; 1
    1a0e:	12 96       	adiw	r26, 0x02	; 2
    1a10:	6d 91       	ld	r22, X+
    1a12:	7c 91       	ld	r23, X
    1a14:	13 97       	sbiw	r26, 0x03	; 3
    1a16:	14 96       	adiw	r26, 0x04	; 4
    1a18:	8c 91       	ld	r24, X
    1a1a:	88 23       	and	r24, r24
    1a1c:	11 f4       	brne	.+4      	; 0x1a22 <HID_Device_ConfigureEndpoints+0x42>
    1a1e:	40 e0       	ldi	r20, 0x00	; 0
    1a20:	01 c0       	rjmp	.+2      	; 0x1a24 <HID_Device_ConfigureEndpoints+0x44>
    1a22:	44 e0       	ldi	r20, 0x04	; 4
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	88 e0       	ldi	r24, 0x08	; 8
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	03 c0       	rjmp	.+6      	; 0x1a32 <HID_Device_ConfigureEndpoints+0x52>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    1a2c:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    1a2e:	88 0f       	add	r24, r24
    1a30:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1a32:	86 17       	cp	r24, r22
    1a34:	97 07       	cpc	r25, r23
    1a36:	d0 f3       	brcs	.-12     	; 0x1a2c <HID_Device_ConfigureEndpoints+0x4c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
    1a38:	42 60       	ori	r20, 0x02	; 2
    1a3a:	22 95       	swap	r18
    1a3c:	20 7f       	andi	r18, 0xF0	; 240
    1a3e:	42 2b       	or	r20, r18
    1a40:	83 2f       	mov	r24, r19
    1a42:	61 ec       	ldi	r22, 0xC1	; 193
    1a44:	51 d9       	rcall	.-3422   	; 0xce8 <Endpoint_ConfigureEndpoint_Prv>
    1a46:	81 11       	cpse	r24, r1
    1a48:	81 e0       	ldi	r24, 0x01	; 1
	{
		return false;
	}

	return true;
}
    1a4a:	df 91       	pop	r29
    1a4c:	cf 91       	pop	r28
    1a4e:	08 95       	ret

00001a50 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1a50:	6f 92       	push	r6
    1a52:	7f 92       	push	r7
    1a54:	8f 92       	push	r8
    1a56:	9f 92       	push	r9
    1a58:	af 92       	push	r10
    1a5a:	bf 92       	push	r11
    1a5c:	cf 92       	push	r12
    1a5e:	df 92       	push	r13
    1a60:	ef 92       	push	r14
    1a62:	ff 92       	push	r15
    1a64:	0f 93       	push	r16
    1a66:	1f 93       	push	r17
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	00 d0       	rcall	.+0      	; 0x1a6e <HID_Device_ProcessControlRequest+0x1e>
    1a6e:	0f 92       	push	r0
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    1a76:	6d b6       	in	r6, 0x3d	; 61
    1a78:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a7a:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    1a7e:	83 ff       	sbrs	r24, 3
    1a80:	0c c1       	rjmp	.+536    	; 0x1c9a <HID_Device_ProcessControlRequest+0x24a>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    1a82:	f6 01       	movw	r30, r12
    1a84:	80 81       	ld	r24, Z
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	20 91 8b 01 	lds	r18, 0x018B
    1a8c:	30 91 8c 01 	lds	r19, 0x018C
    1a90:	28 17       	cp	r18, r24
    1a92:	39 07       	cpc	r19, r25
    1a94:	09 f0       	breq	.+2      	; 0x1a98 <HID_Device_ProcessControlRequest+0x48>
    1a96:	01 c1       	rjmp	.+514    	; 0x1c9a <HID_Device_ProcessControlRequest+0x24a>
	  return;

	switch (USB_ControlRequest.bRequest)
    1a98:	80 91 88 01 	lds	r24, 0x0188
    1a9c:	83 30       	cpi	r24, 0x03	; 3
    1a9e:	09 f4       	brne	.+2      	; 0x1aa2 <HID_Device_ProcessControlRequest+0x52>
    1aa0:	ac c0       	rjmp	.+344    	; 0x1bfa <HID_Device_ProcessControlRequest+0x1aa>
    1aa2:	84 30       	cpi	r24, 0x04	; 4
    1aa4:	30 f4       	brcc	.+12     	; 0x1ab2 <HID_Device_ProcessControlRequest+0x62>
    1aa6:	81 30       	cpi	r24, 0x01	; 1
    1aa8:	71 f0       	breq	.+28     	; 0x1ac6 <HID_Device_ProcessControlRequest+0x76>
    1aaa:	82 30       	cpi	r24, 0x02	; 2
    1aac:	09 f0       	breq	.+2      	; 0x1ab0 <HID_Device_ProcessControlRequest+0x60>
    1aae:	f5 c0       	rjmp	.+490    	; 0x1c9a <HID_Device_ProcessControlRequest+0x24a>
    1ab0:	dc c0       	rjmp	.+440    	; 0x1c6a <HID_Device_ProcessControlRequest+0x21a>
    1ab2:	8a 30       	cpi	r24, 0x0A	; 10
    1ab4:	09 f4       	brne	.+2      	; 0x1ab8 <HID_Device_ProcessControlRequest+0x68>
    1ab6:	c1 c0       	rjmp	.+386    	; 0x1c3a <HID_Device_ProcessControlRequest+0x1ea>
    1ab8:	8b 30       	cpi	r24, 0x0B	; 11
    1aba:	09 f4       	brne	.+2      	; 0x1abe <HID_Device_ProcessControlRequest+0x6e>
    1abc:	ab c0       	rjmp	.+342    	; 0x1c14 <HID_Device_ProcessControlRequest+0x1c4>
    1abe:	89 30       	cpi	r24, 0x09	; 9
    1ac0:	09 f0       	breq	.+2      	; 0x1ac4 <HID_Device_ProcessControlRequest+0x74>
    1ac2:	eb c0       	rjmp	.+470    	; 0x1c9a <HID_Device_ProcessControlRequest+0x24a>
    1ac4:	56 c0       	rjmp	.+172    	; 0x1b72 <HID_Device_ProcessControlRequest+0x122>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1ac6:	80 91 87 01 	lds	r24, 0x0187
    1aca:	81 3a       	cpi	r24, 0xA1	; 161
    1acc:	09 f0       	breq	.+2      	; 0x1ad0 <HID_Device_ProcessControlRequest+0x80>
    1ace:	e5 c0       	rjmp	.+458    	; 0x1c9a <HID_Device_ProcessControlRequest+0x24a>
    1ad0:	9d b6       	in	r9, 0x3d	; 61
    1ad2:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    1ad4:	1b 82       	std	Y+3, r1	; 0x03
    1ad6:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1ad8:	80 91 89 01 	lds	r24, 0x0189
    1adc:	10 91 8a 01 	lds	r17, 0x018A
    1ae0:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1ae2:	f6 01       	movw	r30, r12
    1ae4:	47 81       	ldd	r20, Z+7	; 0x07
    1ae6:	8d b7       	in	r24, 0x3d	; 61
    1ae8:	9e b7       	in	r25, 0x3e	; 62
    1aea:	84 1b       	sub	r24, r20
    1aec:	91 09       	sbc	r25, r1
    1aee:	0f b6       	in	r0, 0x3f	; 63
    1af0:	f8 94       	cli
    1af2:	9e bf       	out	0x3e, r25	; 62
    1af4:	0f be       	out	0x3f, r0	; 63
    1af6:	8d bf       	out	0x3d, r24	; 61
    1af8:	ed b6       	in	r14, 0x3d	; 61
    1afa:	fe b6       	in	r15, 0x3e	; 62
    1afc:	08 94       	sec
    1afe:	e1 1c       	adc	r14, r1
    1b00:	f1 1c       	adc	r15, r1

				memset(ReportData, 0, sizeof(ReportData));
    1b02:	be 2c       	mov	r11, r14
    1b04:	af 2c       	mov	r10, r15
    1b06:	c7 01       	movw	r24, r14
    1b08:	60 e0       	ldi	r22, 0x00	; 0
    1b0a:	70 e0       	ldi	r23, 0x00	; 0
    1b0c:	50 e0       	ldi	r21, 0x00	; 0
    1b0e:	8c d2       	rcall	.+1304   	; 0x2028 <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    1b10:	11 50       	subi	r17, 0x01	; 1
    1b12:	c6 01       	movw	r24, r12
    1b14:	be 01       	movw	r22, r28
    1b16:	6f 5f       	subi	r22, 0xFF	; 255
    1b18:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1a:	41 2f       	mov	r20, r17
    1b1c:	97 01       	movw	r18, r14
    1b1e:	8e 01       	movw	r16, r28
    1b20:	0e 5f       	subi	r16, 0xFE	; 254
    1b22:	1f 4f       	sbci	r17, 0xFF	; 255
    1b24:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1b28:	f6 01       	movw	r30, r12
    1b2a:	25 81       	ldd	r18, Z+5	; 0x05
    1b2c:	36 81       	ldd	r19, Z+6	; 0x06
    1b2e:	21 15       	cp	r18, r1
    1b30:	31 05       	cpc	r19, r1
    1b32:	29 f0       	breq	.+10     	; 0x1b3e <HID_Device_ProcessControlRequest+0xee>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    1b34:	47 81       	ldd	r20, Z+7	; 0x07
    1b36:	c9 01       	movw	r24, r18
    1b38:	b7 01       	movw	r22, r14
    1b3a:	50 e0       	ldi	r21, 0x00	; 0
    1b3c:	6c d2       	rcall	.+1240   	; 0x2016 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1b3e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1b42:	80 91 e8 00 	lds	r24, 0x00E8
    1b46:	87 7f       	andi	r24, 0xF7	; 247
    1b48:	80 93 e8 00 	sts	0x00E8, r24
				}
				
				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1b4c:	6a 81       	ldd	r22, Y+2	; 0x02
    1b4e:	7b 81       	ldd	r23, Y+3	; 0x03
    1b50:	8b 2d       	mov	r24, r11
    1b52:	9a 2d       	mov	r25, r10
    1b54:	42 dc       	rcall	.-1916   	; 0x13da <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1b56:	80 91 e8 00 	lds	r24, 0x00E8
    1b5a:	8b 77       	andi	r24, 0x7B	; 123
    1b5c:	80 93 e8 00 	sts	0x00E8, r24
    1b60:	29 2d       	mov	r18, r9
    1b62:	38 2d       	mov	r19, r8
    1b64:	c9 01       	movw	r24, r18
    1b66:	0f b6       	in	r0, 0x3f	; 63
    1b68:	f8 94       	cli
    1b6a:	9e bf       	out	0x3e, r25	; 62
    1b6c:	0f be       	out	0x3f, r0	; 63
    1b6e:	8d bf       	out	0x3d, r24	; 61
    1b70:	94 c0       	rjmp	.+296    	; 0x1c9a <HID_Device_ProcessControlRequest+0x24a>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1b72:	80 91 87 01 	lds	r24, 0x0187
    1b76:	81 32       	cpi	r24, 0x21	; 33
    1b78:	09 f0       	breq	.+2      	; 0x1b7c <HID_Device_ProcessControlRequest+0x12c>
    1b7a:	8f c0       	rjmp	.+286    	; 0x1c9a <HID_Device_ProcessControlRequest+0x24a>
    1b7c:	9d b6       	in	r9, 0x3d	; 61
    1b7e:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    1b80:	00 91 8d 01 	lds	r16, 0x018D
    1b84:	10 91 8e 01 	lds	r17, 0x018E
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1b88:	a0 90 89 01 	lds	r10, 0x0189
    1b8c:	b0 90 8a 01 	lds	r11, 0x018A
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    1b90:	8d b7       	in	r24, 0x3d	; 61
    1b92:	9e b7       	in	r25, 0x3e	; 62
    1b94:	80 1b       	sub	r24, r16
    1b96:	91 0b       	sbc	r25, r17
    1b98:	0f b6       	in	r0, 0x3f	; 63
    1b9a:	f8 94       	cli
    1b9c:	9e bf       	out	0x3e, r25	; 62
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	8d bf       	out	0x3d, r24	; 61
    1ba2:	ed b6       	in	r14, 0x3d	; 61
    1ba4:	fe b6       	in	r15, 0x3e	; 62
    1ba6:	08 94       	sec
    1ba8:	e1 1c       	adc	r14, r1
    1baa:	f1 1c       	adc	r15, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1bac:	80 91 e8 00 	lds	r24, 0x00E8
    1bb0:	87 7f       	andi	r24, 0xF7	; 247
    1bb2:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    1bb6:	c7 01       	movw	r24, r14
    1bb8:	b8 01       	movw	r22, r16
    1bba:	6d dc       	rcall	.-1830   	; 0x1496 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1bbc:	80 91 e8 00 	lds	r24, 0x00E8
    1bc0:	8e 77       	andi	r24, 0x7E	; 126
    1bc2:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	aa 20       	and	r10, r10
    1bcc:	11 f0       	breq	.+4      	; 0x1bd2 <HID_Device_ProcessControlRequest+0x182>
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	ba 94       	dec	r11
    1bd4:	e8 0e       	add	r14, r24
    1bd6:	f9 1e       	adc	r15, r25
    1bd8:	08 1b       	sub	r16, r24
    1bda:	19 0b       	sbc	r17, r25
    1bdc:	c6 01       	movw	r24, r12
    1bde:	6a 2d       	mov	r22, r10
    1be0:	4b 2d       	mov	r20, r11
    1be2:	97 01       	movw	r18, r14
    1be4:	0e 94 2d 01 	call	0x25a	; 0x25a <CALLBACK_HID_Device_ProcessHIDReport>
    1be8:	89 2d       	mov	r24, r9
    1bea:	98 2d       	mov	r25, r8
    1bec:	9c 01       	movw	r18, r24
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	f8 94       	cli
    1bf2:	3e bf       	out	0x3e, r19	; 62
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	2d bf       	out	0x3d, r18	; 61
    1bf8:	50 c0       	rjmp	.+160    	; 0x1c9a <HID_Device_ProcessControlRequest+0x24a>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1bfa:	80 91 87 01 	lds	r24, 0x0187
    1bfe:	81 3a       	cpi	r24, 0xA1	; 161
    1c00:	09 f0       	breq	.+2      	; 0x1c04 <HID_Device_ProcessControlRequest+0x1b4>
    1c02:	4b c0       	rjmp	.+150    	; 0x1c9a <HID_Device_ProcessControlRequest+0x24a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1c04:	80 91 e8 00 	lds	r24, 0x00E8
    1c08:	87 7f       	andi	r24, 0xF7	; 247
    1c0a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    1c0e:	f6 01       	movw	r30, r12
    1c10:	80 85       	ldd	r24, Z+8	; 0x08
    1c12:	3b c0       	rjmp	.+118    	; 0x1c8a <HID_Device_ProcessControlRequest+0x23a>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1c14:	80 91 87 01 	lds	r24, 0x0187
    1c18:	81 32       	cpi	r24, 0x21	; 33
    1c1a:	09 f0       	breq	.+2      	; 0x1c1e <HID_Device_ProcessControlRequest+0x1ce>
    1c1c:	3e c0       	rjmp	.+124    	; 0x1c9a <HID_Device_ProcessControlRequest+0x24a>
    1c1e:	80 91 e8 00 	lds	r24, 0x00E8
    1c22:	87 7f       	andi	r24, 0xF7	; 247
    1c24:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1c28:	94 d8       	rcall	.-3800   	; 0xd52 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	80 91 89 01 	lds	r24, 0x0189
    1c30:	81 11       	cpse	r24, r1
    1c32:	91 e0       	ldi	r25, 0x01	; 1
    1c34:	f6 01       	movw	r30, r12
    1c36:	90 87       	std	Z+8, r25	; 0x08
    1c38:	30 c0       	rjmp	.+96     	; 0x1c9a <HID_Device_ProcessControlRequest+0x24a>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1c3a:	80 91 87 01 	lds	r24, 0x0187
    1c3e:	81 32       	cpi	r24, 0x21	; 33
    1c40:	61 f5       	brne	.+88     	; 0x1c9a <HID_Device_ProcessControlRequest+0x24a>
    1c42:	80 91 e8 00 	lds	r24, 0x00E8
    1c46:	87 7f       	andi	r24, 0xF7	; 247
    1c48:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1c4c:	82 d8       	rcall	.-3836   	; 0xd52 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    1c4e:	80 91 89 01 	lds	r24, 0x0189
    1c52:	90 91 8a 01 	lds	r25, 0x018A
    1c56:	80 70       	andi	r24, 0x00	; 0
    1c58:	76 e0       	ldi	r23, 0x06	; 6
    1c5a:	96 95       	lsr	r25
    1c5c:	87 95       	ror	r24
    1c5e:	7a 95       	dec	r23
    1c60:	e1 f7       	brne	.-8      	; 0x1c5a <HID_Device_ProcessControlRequest+0x20a>
    1c62:	f6 01       	movw	r30, r12
    1c64:	92 87       	std	Z+10, r25	; 0x0a
    1c66:	81 87       	std	Z+9, r24	; 0x09
    1c68:	18 c0       	rjmp	.+48     	; 0x1c9a <HID_Device_ProcessControlRequest+0x24a>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1c6a:	80 91 87 01 	lds	r24, 0x0187
    1c6e:	81 3a       	cpi	r24, 0xA1	; 161
    1c70:	a1 f4       	brne	.+40     	; 0x1c9a <HID_Device_ProcessControlRequest+0x24a>
    1c72:	80 91 e8 00 	lds	r24, 0x00E8
    1c76:	87 7f       	andi	r24, 0xF7	; 247
    1c78:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    1c7c:	f6 01       	movw	r30, r12
    1c7e:	81 85       	ldd	r24, Z+9	; 0x09
    1c80:	92 85       	ldd	r25, Z+10	; 0x0a
    1c82:	96 95       	lsr	r25
    1c84:	87 95       	ror	r24
    1c86:	96 95       	lsr	r25
    1c88:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1c8a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c8e:	80 91 e8 00 	lds	r24, 0x00E8
    1c92:	8e 77       	andi	r24, 0x7E	; 126
    1c94:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1c98:	5c d8       	rcall	.-3912   	; 0xd52 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    1c9a:	0f b6       	in	r0, 0x3f	; 63
    1c9c:	f8 94       	cli
    1c9e:	7e be       	out	0x3e, r7	; 62
    1ca0:	0f be       	out	0x3f, r0	; 63
    1ca2:	6d be       	out	0x3d, r6	; 61
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	1f 91       	pop	r17
    1cb0:	0f 91       	pop	r16
    1cb2:	ff 90       	pop	r15
    1cb4:	ef 90       	pop	r14
    1cb6:	df 90       	pop	r13
    1cb8:	cf 90       	pop	r12
    1cba:	bf 90       	pop	r11
    1cbc:	af 90       	pop	r10
    1cbe:	9f 90       	pop	r9
    1cc0:	8f 90       	pop	r8
    1cc2:	7f 90       	pop	r7
    1cc4:	6f 90       	pop	r6
    1cc6:	08 95       	ret

00001cc8 <MS_Device_USBTask>:

	return true;
}

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1cc8:	cf 92       	push	r12
    1cca:	df 92       	push	r13
    1ccc:	ef 92       	push	r14
    1cce:	ff 92       	push	r15
    1cd0:	0f 93       	push	r16
    1cd2:	1f 93       	push	r17
    1cd4:	df 93       	push	r29
    1cd6:	cf 93       	push	r28
    1cd8:	00 d0       	rcall	.+0      	; 0x1cda <MS_Device_USBTask+0x12>
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
    1cde:	8c 01       	movw	r16, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1ce0:	80 91 86 01 	lds	r24, 0x0186
    1ce4:	84 30       	cpi	r24, 0x04	; 4
    1ce6:	09 f0       	breq	.+2      	; 0x1cea <MS_Device_USBTask+0x22>
    1ce8:	07 c1       	rjmp	.+526    	; 0x1ef8 <MS_Device_USBTask+0x230>
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    1cea:	f8 01       	movw	r30, r16
    1cec:	95 81       	ldd	r25, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1cee:	90 93 e9 00 	sts	0x00E9, r25
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1cf2:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsReadWriteAllowed())
    1cf6:	85 ff       	sbrs	r24, 5
    1cf8:	c9 c0       	rjmp	.+402    	; 0x1e8c <MS_Device_USBTask+0x1c4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1cfa:	90 93 e9 00 	sts	0x00E9, r25
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
	
	BytesProcessed = 0;
    1cfe:	1a 82       	std	Y+2, r1	; 0x02
    1d00:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1d02:	2a e0       	ldi	r18, 0x0A	; 10
    1d04:	e2 2e       	mov	r14, r18
    1d06:	f1 2c       	mov	r15, r1
    1d08:	e0 0e       	add	r14, r16
    1d0a:	f1 1e       	adc	r15, r17
    1d0c:	6e 01       	movw	r12, r28
    1d0e:	08 94       	sec
    1d10:	c1 1c       	adc	r12, r1
    1d12:	d1 1c       	adc	r13, r1
    1d14:	05 c0       	rjmp	.+10     	; 0x1d20 <MS_Device_USBTask+0x58>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1d16:	f8 01       	movw	r30, r16
    1d18:	86 a9       	ldd	r24, Z+54	; 0x36
    1d1a:	88 23       	and	r24, r24
    1d1c:	09 f0       	breq	.+2      	; 0x1d20 <MS_Device_USBTask+0x58>
    1d1e:	b6 c0       	rjmp	.+364    	; 0x1e8c <MS_Device_USBTask+0x1c4>
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
	
	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1d20:	c7 01       	movw	r24, r14
    1d22:	6f e0       	ldi	r22, 0x0F	; 15
    1d24:	70 e0       	ldi	r23, 0x00	; 0
    1d26:	a6 01       	movw	r20, r12
    1d28:	58 dc       	rcall	.-1872   	; 0x15da <Endpoint_Read_Stream_LE>
    1d2a:	85 30       	cpi	r24, 0x05	; 5
    1d2c:	a1 f3       	breq	.-24     	; 0x1d16 <MS_Device_USBTask+0x4e>
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != MS_CBW_SIGNATURE)                  ||
    1d2e:	f8 01       	movw	r30, r16
    1d30:	82 85       	ldd	r24, Z+10	; 0x0a
    1d32:	93 85       	ldd	r25, Z+11	; 0x0b
    1d34:	a4 85       	ldd	r26, Z+12	; 0x0c
    1d36:	b5 85       	ldd	r27, Z+13	; 0x0d
    1d38:	85 55       	subi	r24, 0x55	; 85
    1d3a:	93 45       	sbci	r25, 0x53	; 83
    1d3c:	a2 44       	sbci	r26, 0x42	; 66
    1d3e:	b3 44       	sbci	r27, 0x43	; 67
    1d40:	81 f4       	brne	.+32     	; 0x1d62 <MS_Device_USBTask+0x9a>
    1d42:	f8 01       	movw	r30, r16
    1d44:	97 89       	ldd	r25, Z+23	; 0x17
    1d46:	81 85       	ldd	r24, Z+9	; 0x09
    1d48:	98 17       	cp	r25, r24
    1d4a:	58 f4       	brcc	.+22     	; 0x1d62 <MS_Device_USBTask+0x9a>
    1d4c:	86 89       	ldd	r24, Z+22	; 0x16
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	8f 71       	andi	r24, 0x1F	; 31
    1d52:	90 70       	andi	r25, 0x00	; 0
    1d54:	89 2b       	or	r24, r25
    1d56:	29 f4       	brne	.+10     	; 0x1d62 <MS_Device_USBTask+0x9a>
    1d58:	80 8d       	ldd	r24, Z+24	; 0x18
    1d5a:	88 23       	and	r24, r24
    1d5c:	11 f0       	breq	.+4      	; 0x1d62 <MS_Device_USBTask+0x9a>
    1d5e:	81 31       	cpi	r24, 0x11	; 17
    1d60:	78 f0       	brcs	.+30     	; 0x1d80 <MS_Device_USBTask+0xb8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1d62:	80 91 eb 00 	lds	r24, 0x00EB
    1d66:	80 62       	ori	r24, 0x20	; 32
    1d68:	80 93 eb 00 	sts	0x00EB, r24
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength >  16))
	{
		Endpoint_StallTransaction();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1d6c:	f8 01       	movw	r30, r16
    1d6e:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1d70:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1d74:	80 91 eb 00 	lds	r24, 0x00EB
    1d78:	80 62       	ori	r24, 0x20	; 32
    1d7a:	80 93 eb 00 	sts	0x00EB, r24
    1d7e:	86 c0       	rjmp	.+268    	; 0x1e8c <MS_Device_USBTask+0x1c4>
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
    1d80:	1a 82       	std	Y+2, r1	; 0x02
    1d82:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    1d84:	99 e1       	ldi	r25, 0x19	; 25
    1d86:	e9 2e       	mov	r14, r25
    1d88:	f1 2c       	mov	r15, r1
    1d8a:	e0 0e       	add	r14, r16
    1d8c:	f1 1e       	adc	r15, r17
    1d8e:	6e 01       	movw	r12, r28
    1d90:	08 94       	sec
    1d92:	c1 1c       	adc	r12, r1
    1d94:	d1 1c       	adc	r13, r1
    1d96:	05 c0       	rjmp	.+10     	; 0x1da2 <MS_Device_USBTask+0xda>
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1d98:	f8 01       	movw	r30, r16
    1d9a:	86 a9       	ldd	r24, Z+54	; 0x36
    1d9c:	88 23       	and	r24, r24
    1d9e:	09 f0       	breq	.+2      	; 0x1da2 <MS_Device_USBTask+0xda>
    1da0:	75 c0       	rjmp	.+234    	; 0x1e8c <MS_Device_USBTask+0x1c4>

		return false;
	}

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    1da2:	f8 01       	movw	r30, r16
    1da4:	60 8d       	ldd	r22, Z+24	; 0x18
    1da6:	c7 01       	movw	r24, r14
    1da8:	70 e0       	ldi	r23, 0x00	; 0
    1daa:	a6 01       	movw	r20, r12
    1dac:	16 dc       	rcall	.-2004   	; 0x15da <Endpoint_Read_Stream_LE>
    1dae:	85 30       	cpi	r24, 0x05	; 5
    1db0:	99 f3       	breq	.-26     	; 0x1d98 <MS_Device_USBTask+0xd0>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1db2:	80 91 e8 00 	lds	r24, 0x00E8
    1db6:	8b 77       	andi	r24, 0x7B	; 123
    1db8:	80 93 e8 00 	sts	0x00E8, r24

	if (Endpoint_IsReadWriteAllowed())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    1dbc:	f8 01       	movw	r30, r16
    1dbe:	86 89       	ldd	r24, Z+22	; 0x16
    1dc0:	87 ff       	sbrs	r24, 7
    1dc2:	03 c0       	rjmp	.+6      	; 0x1dca <MS_Device_USBTask+0x102>
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1dc4:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1dc6:	80 93 e9 00 	sts	0x00E9, r24

			MSInterfaceInfo->State.CommandStatus.Status = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo) ?
    1dca:	c8 01       	movw	r24, r16
    1dcc:	0e 94 3b 01 	call	0x276	; 0x276 <CALLBACK_MS_Device_SCSICommandReceived>
    1dd0:	91 e0       	ldi	r25, 0x01	; 1
    1dd2:	98 27       	eor	r25, r24
    1dd4:	f8 01       	movw	r30, r16
    1dd6:	95 ab       	std	Z+53, r25	; 0x35
			                                               MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
			MSInterfaceInfo->State.CommandStatus.Signature           = MS_CSW_SIGNATURE;
    1dd8:	25 e5       	ldi	r18, 0x55	; 85
    1dda:	33 e5       	ldi	r19, 0x53	; 83
    1ddc:	42 e4       	ldi	r20, 0x42	; 66
    1dde:	53 e5       	ldi	r21, 0x53	; 83
    1de0:	21 a7       	std	Z+41, r18	; 0x29
    1de2:	32 a7       	std	Z+42, r19	; 0x2a
    1de4:	43 a7       	std	Z+43, r20	; 0x2b
    1de6:	54 a7       	std	Z+44, r21	; 0x2c
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    1de8:	26 85       	ldd	r18, Z+14	; 0x0e
    1dea:	37 85       	ldd	r19, Z+15	; 0x0f
    1dec:	40 89       	ldd	r20, Z+16	; 0x10
    1dee:	51 89       	ldd	r21, Z+17	; 0x11
    1df0:	25 a7       	std	Z+45, r18	; 0x2d
    1df2:	36 a7       	std	Z+46, r19	; 0x2e
    1df4:	47 a7       	std	Z+47, r20	; 0x2f
    1df6:	50 ab       	std	Z+48, r21	; 0x30
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    1df8:	22 89       	ldd	r18, Z+18	; 0x12
    1dfa:	33 89       	ldd	r19, Z+19	; 0x13
    1dfc:	44 89       	ldd	r20, Z+20	; 0x14
    1dfe:	55 89       	ldd	r21, Z+21	; 0x15
    1e00:	21 ab       	std	Z+49, r18	; 0x31
    1e02:	32 ab       	std	Z+50, r19	; 0x32
    1e04:	43 ab       	std	Z+51, r20	; 0x33
    1e06:	54 ab       	std	Z+52, r21	; 0x34

			if ((MSInterfaceInfo->State.CommandStatus.Status == MS_SCSI_COMMAND_Fail) &&
    1e08:	91 30       	cpi	r25, 0x01	; 1
    1e0a:	51 f4       	brne	.+20     	; 0x1e20 <MS_Device_USBTask+0x158>
    1e0c:	21 15       	cp	r18, r1
    1e0e:	31 05       	cpc	r19, r1
    1e10:	41 05       	cpc	r20, r1
    1e12:	51 05       	cpc	r21, r1
    1e14:	29 f0       	breq	.+10     	; 0x1e20 <MS_Device_USBTask+0x158>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1e16:	80 91 eb 00 	lds	r24, 0x00EB
    1e1a:	80 62       	ori	r24, 0x20	; 32
    1e1c:	80 93 eb 00 	sts	0x00EB, r24
	return true;
}

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    1e20:	f8 01       	movw	r30, r16
    1e22:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1e24:	80 93 e9 00 	sts	0x00E9, r24
    1e28:	04 c0       	rjmp	.+8      	; 0x1e32 <MS_Device_USBTask+0x16a>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1e2a:	f8 01       	movw	r30, r16
    1e2c:	86 a9       	ldd	r24, Z+54	; 0x36
    1e2e:	88 23       	and	r24, r24
    1e30:	69 f5       	brne	.+90     	; 0x1e8c <MS_Device_USBTask+0x1c4>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1e32:	80 91 eb 00 	lds	r24, 0x00EB

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);

	while (Endpoint_IsStalled())
    1e36:	85 fd       	sbrc	r24, 5
    1e38:	f8 cf       	rjmp	.-16     	; 0x1e2a <MS_Device_USBTask+0x162>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1e3a:	f8 01       	movw	r30, r16
    1e3c:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1e3e:	80 93 e9 00 	sts	0x00E9, r24
    1e42:	04 c0       	rjmp	.+8      	; 0x1e4c <MS_Device_USBTask+0x184>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1e44:	f8 01       	movw	r30, r16
    1e46:	86 a9       	ldd	r24, Z+54	; 0x36
    1e48:	88 23       	and	r24, r24
    1e4a:	01 f5       	brne	.+64     	; 0x1e8c <MS_Device_USBTask+0x1c4>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1e4c:	80 91 eb 00 	lds	r24, 0x00EB
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);

	while (Endpoint_IsStalled())
    1e50:	85 fd       	sbrc	r24, 5
    1e52:	f8 cf       	rjmp	.-16     	; 0x1e44 <MS_Device_USBTask+0x17c>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
    1e54:	1a 82       	std	Y+2, r1	; 0x02
    1e56:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    1e58:	89 e2       	ldi	r24, 0x29	; 41
    1e5a:	e8 2e       	mov	r14, r24
    1e5c:	f1 2c       	mov	r15, r1
    1e5e:	e0 0e       	add	r14, r16
    1e60:	f1 1e       	adc	r15, r17
    1e62:	6e 01       	movw	r12, r28
    1e64:	08 94       	sec
    1e66:	c1 1c       	adc	r12, r1
    1e68:	d1 1c       	adc	r13, r1
    1e6a:	04 c0       	rjmp	.+8      	; 0x1e74 <MS_Device_USBTask+0x1ac>
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1e6c:	f8 01       	movw	r30, r16
    1e6e:	86 a9       	ldd	r24, Z+54	; 0x36
    1e70:	88 23       	and	r24, r24
    1e72:	61 f4       	brne	.+24     	; 0x1e8c <MS_Device_USBTask+0x1c4>
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    1e74:	c7 01       	movw	r24, r14
    1e76:	6d e0       	ldi	r22, 0x0D	; 13
    1e78:	70 e0       	ldi	r23, 0x00	; 0
    1e7a:	a6 01       	movw	r20, r12
    1e7c:	50 dc       	rcall	.-1888   	; 0x171e <Endpoint_Write_Stream_LE>
    1e7e:	85 30       	cpi	r24, 0x05	; 5
    1e80:	a9 f3       	breq	.-22     	; 0x1e6c <MS_Device_USBTask+0x1a4>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1e82:	80 91 e8 00 	lds	r24, 0x00E8
    1e86:	8e 77       	andi	r24, 0x7E	; 126
    1e88:	80 93 e8 00 	sts	0x00E8, r24

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    1e8c:	f8 01       	movw	r30, r16
    1e8e:	86 a9       	ldd	r24, Z+54	; 0x36
    1e90:	88 23       	and	r24, r24
    1e92:	91 f1       	breq	.+100    	; 0x1ef8 <MS_Device_USBTask+0x230>
	{
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    1e94:	45 81       	ldd	r20, Z+5	; 0x05
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    1e96:	21 e0       	ldi	r18, 0x01	; 1
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	c9 01       	movw	r24, r18
    1e9c:	04 2e       	mov	r0, r20
    1e9e:	02 c0       	rjmp	.+4      	; 0x1ea4 <MS_Device_USBTask+0x1dc>
    1ea0:	88 0f       	add	r24, r24
    1ea2:	99 1f       	adc	r25, r25
    1ea4:	0a 94       	dec	r0
    1ea6:	e2 f7       	brpl	.-8      	; 0x1ea0 <MS_Device_USBTask+0x1d8>
    1ea8:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1eac:	10 92 ea 00 	sts	0x00EA, r1
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1eb0:	91 81       	ldd	r25, Z+1	; 0x01
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    1eb2:	09 2e       	mov	r0, r25
    1eb4:	02 c0       	rjmp	.+4      	; 0x1eba <MS_Device_USBTask+0x1f2>
    1eb6:	22 0f       	add	r18, r18
    1eb8:	33 1f       	adc	r19, r19
    1eba:	0a 94       	dec	r0
    1ebc:	e2 f7       	brpl	.-8      	; 0x1eb6 <MS_Device_USBTask+0x1ee>
    1ebe:	20 93 ea 00 	sts	0x00EA, r18
				UERST = 0;
    1ec2:	10 92 ea 00 	sts	0x00EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1ec6:	40 93 e9 00 	sts	0x00E9, r20
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1eca:	80 91 eb 00 	lds	r24, 0x00EB
    1ece:	80 61       	ori	r24, 0x10	; 16
    1ed0:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1ed4:	80 91 eb 00 	lds	r24, 0x00EB
    1ed8:	88 60       	ori	r24, 0x08	; 8
    1eda:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1ede:	90 93 e9 00 	sts	0x00E9, r25
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1ee2:	80 91 eb 00 	lds	r24, 0x00EB
    1ee6:	80 61       	ori	r24, 0x10	; 16
    1ee8:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1eec:	80 91 eb 00 	lds	r24, 0x00EB
    1ef0:	88 60       	ori	r24, 0x08	; 8
    1ef2:	80 93 eb 00 	sts	0x00EB, r24
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    1ef6:	16 aa       	std	Z+54, r1	; 0x36
	}
}
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	cf 91       	pop	r28
    1efe:	df 91       	pop	r29
    1f00:	1f 91       	pop	r17
    1f02:	0f 91       	pop	r16
    1f04:	ff 90       	pop	r15
    1f06:	ef 90       	pop	r14
    1f08:	df 90       	pop	r13
    1f0a:	cf 90       	pop	r12
    1f0c:	08 95       	ret

00001f0e <MS_Device_ConfigureEndpoints>:
			break;
	}
}

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1f0e:	1f 93       	push	r17
    1f10:	cf 93       	push	r28
    1f12:	df 93       	push	r29
    1f14:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    1f16:	0a 96       	adiw	r24, 0x0a	; 10
    1f18:	fc 01       	movw	r30, r24
    1f1a:	8d e2       	ldi	r24, 0x2D	; 45
    1f1c:	df 01       	movw	r26, r30
    1f1e:	1d 92       	st	X+, r1
    1f20:	8a 95       	dec	r24
    1f22:	e9 f7       	brne	.-6      	; 0x1f1e <MS_Device_ConfigureEndpoints+0x10>
    1f24:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == MSInterfaceInfo->Config.DataINEndpointNumber)
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
    1f28:	18 17       	cp	r17, r24
    1f2a:	29 f4       	brne	.+10     	; 0x1f36 <MS_Device_ConfigureEndpoints+0x28>
		{
			Size         = MSInterfaceInfo->Config.DataINEndpointSize;
    1f2c:	ea 81       	ldd	r30, Y+2	; 0x02
    1f2e:	fb 81       	ldd	r31, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataINEndpointDoubleBank;
    1f30:	8c 81       	ldd	r24, Y+4	; 0x04
    1f32:	61 e0       	ldi	r22, 0x01	; 1
    1f34:	07 c0       	rjmp	.+14     	; 0x1f44 <MS_Device_ConfigureEndpoints+0x36>
		}
		else if (EndpointNum == MSInterfaceInfo->Config.DataOUTEndpointNumber)
    1f36:	8d 81       	ldd	r24, Y+5	; 0x05
    1f38:	18 17       	cp	r17, r24
    1f3a:	e9 f4       	brne	.+58     	; 0x1f76 <MS_Device_ConfigureEndpoints+0x68>
		{
			Size         = MSInterfaceInfo->Config.DataOUTEndpointSize;
    1f3c:	ee 81       	ldd	r30, Y+6	; 0x06
    1f3e:	ff 81       	ldd	r31, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataOUTEndpointDoubleBank;
    1f40:	88 85       	ldd	r24, Y+8	; 0x08
    1f42:	60 e0       	ldi	r22, 0x00	; 0
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
    1f44:	88 23       	and	r24, r24
    1f46:	11 f4       	brne	.+4      	; 0x1f4c <MS_Device_ConfigureEndpoints+0x3e>
    1f48:	40 e0       	ldi	r20, 0x00	; 0
    1f4a:	01 c0       	rjmp	.+2      	; 0x1f4e <MS_Device_ConfigureEndpoints+0x40>
    1f4c:	44 e0       	ldi	r20, 0x04	; 4
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	88 e0       	ldi	r24, 0x08	; 8
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	03 c0       	rjmp	.+6      	; 0x1f5c <MS_Device_ConfigureEndpoints+0x4e>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    1f56:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    1f58:	88 0f       	add	r24, r24
    1f5a:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1f5c:	8e 17       	cp	r24, r30
    1f5e:	9f 07       	cpc	r25, r31
    1f60:	d0 f3       	brcs	.-12     	; 0x1f56 <MS_Device_ConfigureEndpoints+0x48>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
    1f62:	60 68       	ori	r22, 0x80	; 128
    1f64:	42 60       	ori	r20, 0x02	; 2
    1f66:	22 95       	swap	r18
    1f68:	20 7f       	andi	r18, 0xF0	; 240
    1f6a:	42 2b       	or	r20, r18
    1f6c:	81 2f       	mov	r24, r17
    1f6e:	0e 94 74 06 	call	0xce8	; 0xce8 <Endpoint_ConfigureEndpoint_Prv>
    1f72:	88 23       	and	r24, r24
    1f74:	21 f0       	breq	.+8      	; 0x1f7e <MS_Device_ConfigureEndpoints+0x70>

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
    1f76:	1f 5f       	subi	r17, 0xFF	; 255
    1f78:	17 30       	cpi	r17, 0x07	; 7
    1f7a:	a9 f6       	brne	.-86     	; 0x1f26 <MS_Device_ConfigureEndpoints+0x18>
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
    1f7e:	df 91       	pop	r29
    1f80:	cf 91       	pop	r28
    1f82:	1f 91       	pop	r17
    1f84:	08 95       	ret

00001f86 <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorage.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1f86:	cf 93       	push	r28
    1f88:	df 93       	push	r29
    1f8a:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1f8c:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    1f90:	83 ff       	sbrs	r24, 3
    1f92:	31 c0       	rjmp	.+98     	; 0x1ff6 <MS_Device_ProcessControlRequest+0x70>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    1f94:	88 81       	ld	r24, Y
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	20 91 8b 01 	lds	r18, 0x018B
    1f9c:	30 91 8c 01 	lds	r19, 0x018C
    1fa0:	28 17       	cp	r18, r24
    1fa2:	39 07       	cpc	r19, r25
    1fa4:	41 f5       	brne	.+80     	; 0x1ff6 <MS_Device_ProcessControlRequest+0x70>
	  return;

	switch (USB_ControlRequest.bRequest)
    1fa6:	80 91 88 01 	lds	r24, 0x0188
    1faa:	8e 3f       	cpi	r24, 0xFE	; 254
    1fac:	81 f0       	breq	.+32     	; 0x1fce <MS_Device_ProcessControlRequest+0x48>
    1fae:	8f 3f       	cpi	r24, 0xFF	; 255
    1fb0:	11 f5       	brne	.+68     	; 0x1ff6 <MS_Device_ProcessControlRequest+0x70>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1fb2:	80 91 87 01 	lds	r24, 0x0187
    1fb6:	81 32       	cpi	r24, 0x21	; 33
    1fb8:	f1 f4       	brne	.+60     	; 0x1ff6 <MS_Device_ProcessControlRequest+0x70>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1fba:	80 91 e8 00 	lds	r24, 0x00E8
    1fbe:	87 7f       	andi	r24, 0xF7	; 247
    1fc0:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1fc4:	0e 94 a9 06 	call	0xd52	; 0xd52 <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	8e ab       	std	Y+54, r24	; 0x36
    1fcc:	14 c0       	rjmp	.+40     	; 0x1ff6 <MS_Device_ProcessControlRequest+0x70>
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1fce:	80 91 87 01 	lds	r24, 0x0187
    1fd2:	81 3a       	cpi	r24, 0xA1	; 161
    1fd4:	81 f4       	brne	.+32     	; 0x1ff6 <MS_Device_ProcessControlRequest+0x70>
    1fd6:	80 91 e8 00 	lds	r24, 0x00E8
    1fda:	87 7f       	andi	r24, 0xF7	; 247
    1fdc:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    1fe0:	89 85       	ldd	r24, Y+9	; 0x09
    1fe2:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1fe4:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1fe8:	80 91 e8 00 	lds	r24, 0x00E8
    1fec:	8e 77       	andi	r24, 0x7E	; 126
    1fee:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1ff2:	0e 94 a9 06 	call	0xd52	; 0xd52 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    1ff6:	df 91       	pop	r29
    1ff8:	cf 91       	pop	r28
    1ffa:	08 95       	ret

00001ffc <memcmp>:
    1ffc:	fb 01       	movw	r30, r22
    1ffe:	dc 01       	movw	r26, r24
    2000:	04 c0       	rjmp	.+8      	; 0x200a <memcmp+0xe>
    2002:	8d 91       	ld	r24, X+
    2004:	01 90       	ld	r0, Z+
    2006:	80 19       	sub	r24, r0
    2008:	21 f4       	brne	.+8      	; 0x2012 <memcmp+0x16>
    200a:	41 50       	subi	r20, 0x01	; 1
    200c:	50 40       	sbci	r21, 0x00	; 0
    200e:	c8 f7       	brcc	.-14     	; 0x2002 <memcmp+0x6>
    2010:	88 1b       	sub	r24, r24
    2012:	99 0b       	sbc	r25, r25
    2014:	08 95       	ret

00002016 <memcpy>:
    2016:	fb 01       	movw	r30, r22
    2018:	dc 01       	movw	r26, r24
    201a:	02 c0       	rjmp	.+4      	; 0x2020 <memcpy+0xa>
    201c:	01 90       	ld	r0, Z+
    201e:	0d 92       	st	X+, r0
    2020:	41 50       	subi	r20, 0x01	; 1
    2022:	50 40       	sbci	r21, 0x00	; 0
    2024:	d8 f7       	brcc	.-10     	; 0x201c <memcpy+0x6>
    2026:	08 95       	ret

00002028 <memset>:
    2028:	dc 01       	movw	r26, r24
    202a:	01 c0       	rjmp	.+2      	; 0x202e <memset+0x6>
    202c:	6d 93       	st	X+, r22
    202e:	41 50       	subi	r20, 0x01	; 1
    2030:	50 40       	sbci	r21, 0x00	; 0
    2032:	e0 f7       	brcc	.-8      	; 0x202c <memset+0x4>
    2034:	08 95       	ret

00002036 <_exit>:
    2036:	f8 94       	cli

00002038 <__stop_program>:
    2038:	ff cf       	rjmp	.-2      	; 0x2038 <__stop_program>
