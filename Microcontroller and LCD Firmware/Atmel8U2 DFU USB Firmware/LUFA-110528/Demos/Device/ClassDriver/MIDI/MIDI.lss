
MIDI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000e16  00000eaa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080010a  0080010a  00000eb4  2**0
                  ALLOC
  3 .debug_aranges 00000468  00000000  00000000  00000eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000c38  00000000  00000000  0000131c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00007d42  00000000  00000000  00001f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001f7e  00000000  00000000  00009c96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000607d  00000000  00000000  0000bc14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000690  00000000  00000000  00011c94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000032f4  00000000  00000000  00012324  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000033fc  00000000  00000000  00015618  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000558  00000000  00000000  00018a14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
   0:	a6 c0       	rjmp	.+332    	; 0x14e <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   2:	00 00       	nop
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
   4:	c1 c0       	rjmp	.+386    	; 0x188 <__bad_interrupt>
   6:	00 00       	nop
   8:	bf c0       	rjmp	.+382    	; 0x188 <__bad_interrupt>
   a:	00 00       	nop
   c:	bd c0       	rjmp	.+378    	; 0x188 <__bad_interrupt>
   e:	00 00       	nop
  10:	bb c0       	rjmp	.+374    	; 0x188 <__bad_interrupt>
  12:	00 00       	nop
  14:	b9 c0       	rjmp	.+370    	; 0x188 <__bad_interrupt>
  16:	00 00       	nop
  18:	b7 c0       	rjmp	.+366    	; 0x188 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b5 c0       	rjmp	.+362    	; 0x188 <__bad_interrupt>
  1e:	00 00       	nop
  20:	b3 c0       	rjmp	.+358    	; 0x188 <__bad_interrupt>
  22:	00 00       	nop
  24:	b1 c0       	rjmp	.+354    	; 0x188 <__bad_interrupt>
  26:	00 00       	nop
  28:	9e c2       	rjmp	.+1340   	; 0x566 <__vector_10>
  2a:	00 00       	nop
  2c:	ad c0       	rjmp	.+346    	; 0x188 <__bad_interrupt>
  2e:	00 00       	nop
  30:	ab c0       	rjmp	.+342    	; 0x188 <__bad_interrupt>
  32:	00 00       	nop
  34:	a9 c0       	rjmp	.+338    	; 0x188 <__bad_interrupt>
  36:	00 00       	nop
  38:	a7 c0       	rjmp	.+334    	; 0x188 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	a5 c0       	rjmp	.+330    	; 0x188 <__bad_interrupt>
  3e:	00 00       	nop
  40:	a3 c0       	rjmp	.+326    	; 0x188 <__bad_interrupt>
  42:	00 00       	nop
  44:	a1 c0       	rjmp	.+322    	; 0x188 <__bad_interrupt>
  46:	00 00       	nop
  48:	9f c0       	rjmp	.+318    	; 0x188 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	9d c0       	rjmp	.+314    	; 0x188 <__bad_interrupt>
  4e:	00 00       	nop
  50:	9b c0       	rjmp	.+310    	; 0x188 <__bad_interrupt>
  52:	00 00       	nop
  54:	99 c0       	rjmp	.+306    	; 0x188 <__bad_interrupt>
  56:	00 00       	nop
  58:	97 c0       	rjmp	.+302    	; 0x188 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	95 c0       	rjmp	.+298    	; 0x188 <__bad_interrupt>
  5e:	00 00       	nop
  60:	93 c0       	rjmp	.+294    	; 0x188 <__bad_interrupt>
  62:	00 00       	nop
  64:	91 c0       	rjmp	.+290    	; 0x188 <__bad_interrupt>
  66:	00 00       	nop
  68:	8f c0       	rjmp	.+286    	; 0x188 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	8d c0       	rjmp	.+282    	; 0x188 <__bad_interrupt>
  6e:	00 00       	nop
  70:	8b c0       	rjmp	.+278    	; 0x188 <__bad_interrupt>
  72:	00 00       	nop
  74:	89 c0       	rjmp	.+274    	; 0x188 <__bad_interrupt>
  76:	00 00       	nop
  78:	87 c0       	rjmp	.+270    	; 0x188 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	85 c0       	rjmp	.+266    	; 0x188 <__bad_interrupt>
  7e:	00 00       	nop
  80:	83 c0       	rjmp	.+262    	; 0x188 <__bad_interrupt>
  82:	00 00       	nop
  84:	81 c0       	rjmp	.+258    	; 0x188 <__bad_interrupt>
  86:	00 00       	nop
  88:	7f c0       	rjmp	.+254    	; 0x188 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	7d c0       	rjmp	.+250    	; 0x188 <__bad_interrupt>
  8e:	00 00       	nop
  90:	7b c0       	rjmp	.+246    	; 0x188 <__bad_interrupt>
  92:	00 00       	nop
  94:	79 c0       	rjmp	.+242    	; 0x188 <__bad_interrupt>
  96:	00 00       	nop

00000098 <DeviceDescriptor>:
  98:	12 01 10 01 00 00 00 08 eb 03 48 20 01 00 01 02     ..........H ....
  a8:	00 01                                               ..

000000aa <ConfigurationDescriptor>:
  aa:	09 02 65 00 02 01 00 c0 32 09 04 00 00 00 01 01     ..e.....2.......
  ba:	00 00 09 24 01 00 01 09 00 01 01 09 04 01 00 02     ...$............
  ca:	01 03 00 00 07 24 01 00 01 41 00 06 24 02 01 01     .....$...A..$...
  da:	00 06 24 02 02 02 00 09 24 03 01 03 01 02 01 00     ..$.....$.......
  ea:	09 24 03 02 04 01 01 01 00 09 05 01 02 40 00 01     .$...........@..
  fa:	00 00 05 25 01 01 01 09 05 82 02 40 00 01 00 00     ...%.......@....
 10a:	05 25 01 01 03                                      .%...

0000010f <LanguageString>:
 10f:	04 03 09 04                                         ....

00000113 <ManufacturerString>:
 113:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
 123:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

0000012d <ProductString>:
 12d:	1e 03 4c 00 55 00 46 00 41 00 20 00 4d 00 49 00     ..L.U.F.A. .M.I.
 13d:	44 00 49 00 20 00 44 00 65 00 6d 00 6f 00 00 00     D.I. .D.e.m.o...
 14d:	00                                                  .

0000014e <__ctors_end>:
 14e:	11 24       	eor	r1, r1
 150:	1f be       	out	0x3f, r1	; 63
 152:	cf ef       	ldi	r28, 0xFF	; 255
 154:	d0 e2       	ldi	r29, 0x20	; 32
 156:	de bf       	out	0x3e, r29	; 62
 158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
 15a:	11 e0       	ldi	r17, 0x01	; 1
 15c:	a0 e0       	ldi	r26, 0x00	; 0
 15e:	b1 e0       	ldi	r27, 0x01	; 1
 160:	e6 e1       	ldi	r30, 0x16	; 22
 162:	fe e0       	ldi	r31, 0x0E	; 14
 164:	00 e0       	ldi	r16, 0x00	; 0
 166:	0b bf       	out	0x3b, r16	; 59
 168:	02 c0       	rjmp	.+4      	; 0x16e <__do_copy_data+0x14>
 16a:	07 90       	elpm	r0, Z+
 16c:	0d 92       	st	X+, r0
 16e:	aa 30       	cpi	r26, 0x0A	; 10
 170:	b1 07       	cpc	r27, r17
 172:	d9 f7       	brne	.-10     	; 0x16a <__do_copy_data+0x10>

00000174 <__do_clear_bss>:
 174:	11 e0       	ldi	r17, 0x01	; 1
 176:	aa e0       	ldi	r26, 0x0A	; 10
 178:	b1 e0       	ldi	r27, 0x01	; 1
 17a:	01 c0       	rjmp	.+2      	; 0x17e <.do_clear_bss_start>

0000017c <.do_clear_bss_loop>:
 17c:	1d 92       	st	X+, r1

0000017e <.do_clear_bss_start>:
 17e:	a8 31       	cpi	r26, 0x18	; 24
 180:	b1 07       	cpc	r27, r17
 182:	e1 f7       	brne	.-8      	; 0x17c <.do_clear_bss_loop>
 184:	a8 d0       	rcall	.+336    	; 0x2d6 <main>
 186:	45 c6       	rjmp	.+3210   	; 0xe12 <_exit>

00000188 <__bad_interrupt>:
 188:	3b cf       	rjmp	.-394    	; 0x0 <__vectors>

0000018a <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 18a:	8b b1       	in	r24, 0x0b	; 11
 18c:	8f 70       	andi	r24, 0x0F	; 15
 18e:	80 6a       	ori	r24, 0xA0	; 160
 190:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
 192:	08 95       	ret

00000194 <EVENT_USB_Device_Disconnect>:
 194:	8b b1       	in	r24, 0x0b	; 11
 196:	8f 70       	andi	r24, 0x0F	; 15
 198:	80 61       	ori	r24, 0x10	; 16
 19a:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
 19c:	08 95       	ret

0000019e <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	MIDI_Device_ProcessControlRequest(&Keyboard_MIDI_Interface);
}
 19e:	08 95       	ret

000001a0 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= MIDI_Device_ConfigureEndpoints(&Keyboard_MIDI_Interface);
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	02 d6       	rcall	.+3076   	; 0xdaa <MIDI_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 1a6:	80 fd       	sbrc	r24, 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <EVENT_USB_Device_ConfigurationChanged+0xe>
 1aa:	90 e9       	ldi	r25, 0x90	; 144
 1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <EVENT_USB_Device_ConfigurationChanged+0x10>
 1ae:	90 e6       	ldi	r25, 0x60	; 96
 1b0:	8b b1       	in	r24, 0x0b	; 11
 1b2:	8f 70       	andi	r24, 0x0F	; 15
 1b4:	98 2b       	or	r25, r24
 1b6:	9b b9       	out	0x0b, r25	; 11
}
 1b8:	08 95       	ret

000001ba <CheckJoystickMovement>:
	USB_Init();
}

/** Checks for changes in the position of the board joystick, sending MIDI events to the host upon each change. */
void CheckJoystickMovement(void)
{
 1ba:	1f 93       	push	r17
 1bc:	df 93       	push	r29
 1be:	cf 93       	push	r28
 1c0:	00 d0       	rcall	.+0      	; 0x1c2 <CheckJoystickMovement+0x8>
 1c2:	00 d0       	rcall	.+0      	; 0x1c4 <CheckJoystickMovement+0xa>
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
 1c8:	13 b1       	in	r17, 0x03	; 3
 1ca:	8c b1       	in	r24, 0x0c	; 12
 1cc:	80 95       	com	r24
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	80 73       	andi	r24, 0x30	; 48
 1d2:	90 70       	andi	r25, 0x00	; 0
 1d4:	95 95       	asr	r25
 1d6:	87 95       	ror	r24
 1d8:	10 95       	com	r17
 1da:	10 7e       	andi	r17, 0xE0	; 224
 1dc:	18 2b       	or	r17, r24
	uint8_t MIDICommand = 0;
	uint8_t MIDIPitch;

	/* Get current joystick mask, XOR with previous to detect joystick changes */
	uint8_t JoystickStatus  = Joystick_GetStatus();
	uint8_t JoystickChanges = (JoystickStatus ^ PrevJoystickStatus);
 1de:	80 91 0a 01 	lds	r24, 0x010A
 1e2:	81 27       	eor	r24, r17

	/* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 1 */
	uint8_t Channel = ((Buttons_GetStatus() & BUTTONS_BUTTON1) ? MIDI_CHANNEL(10) : MIDI_CHANNEL(1));
 1e4:	62 9b       	sbis	0x0c, 2	; 12
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <CheckJoystickMovement+0x32>
 1e8:	40 e0       	ldi	r20, 0x00	; 0
 1ea:	01 c0       	rjmp	.+2      	; 0x1ee <CheckJoystickMovement+0x34>
 1ec:	49 e0       	ldi	r20, 0x09	; 9

	if (JoystickChanges & JOY_LEFT)
 1ee:	38 2f       	mov	r19, r24
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	86 ff       	sbrs	r24, 6
 1f4:	05 c0       	rjmp	.+10     	; 0x200 <CheckJoystickMovement+0x46>
	{
		MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 1f6:	16 fd       	sbrc	r17, 6
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <CheckJoystickMovement+0x44>
 1fa:	90 e8       	ldi	r25, 0x80	; 128
 1fc:	01 c0       	rjmp	.+2      	; 0x200 <CheckJoystickMovement+0x46>
 1fe:	90 e9       	ldi	r25, 0x90	; 144
		MIDIPitch   = 0x3C;
	}

	if (JoystickChanges & JOY_UP)
 200:	87 fd       	sbrc	r24, 7
 202:	02 c0       	rjmp	.+4      	; 0x208 <CheckJoystickMovement+0x4e>
 204:	2c e3       	ldi	r18, 0x3C	; 60
 206:	06 c0       	rjmp	.+12     	; 0x214 <CheckJoystickMovement+0x5a>
	{
		MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 208:	17 fd       	sbrc	r17, 7
 20a:	02 c0       	rjmp	.+4      	; 0x210 <CheckJoystickMovement+0x56>
 20c:	90 e8       	ldi	r25, 0x80	; 128
 20e:	01 c0       	rjmp	.+2      	; 0x212 <CheckJoystickMovement+0x58>
 210:	90 e9       	ldi	r25, 0x90	; 144
 212:	2d e3       	ldi	r18, 0x3D	; 61
		MIDIPitch   = 0x3D;
	}

	if (JoystickChanges & JOY_RIGHT)
 214:	33 ff       	sbrs	r19, 3
 216:	06 c0       	rjmp	.+12     	; 0x224 <CheckJoystickMovement+0x6a>
	{
		MIDICommand = ((JoystickStatus & JOY_RIGHT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 218:	13 fd       	sbrc	r17, 3
 21a:	02 c0       	rjmp	.+4      	; 0x220 <CheckJoystickMovement+0x66>
 21c:	90 e8       	ldi	r25, 0x80	; 128
 21e:	01 c0       	rjmp	.+2      	; 0x222 <CheckJoystickMovement+0x68>
 220:	90 e9       	ldi	r25, 0x90	; 144
 222:	2e e3       	ldi	r18, 0x3E	; 62
		MIDIPitch   = 0x3E;
	}

	if (JoystickChanges & JOY_DOWN)
 224:	34 ff       	sbrs	r19, 4
 226:	06 c0       	rjmp	.+12     	; 0x234 <CheckJoystickMovement+0x7a>
	{
		MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 228:	14 fd       	sbrc	r17, 4
 22a:	02 c0       	rjmp	.+4      	; 0x230 <CheckJoystickMovement+0x76>
 22c:	90 e8       	ldi	r25, 0x80	; 128
 22e:	01 c0       	rjmp	.+2      	; 0x232 <CheckJoystickMovement+0x78>
 230:	90 e9       	ldi	r25, 0x90	; 144
 232:	2f e3       	ldi	r18, 0x3F	; 63
		MIDIPitch   = 0x3F;
	}

	if (JoystickChanges & JOY_PRESS)
 234:	35 ff       	sbrs	r19, 5
 236:	04 c0       	rjmp	.+8      	; 0x240 <CheckJoystickMovement+0x86>
	{
		MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 238:	15 ff       	sbrs	r17, 5
 23a:	20 c0       	rjmp	.+64     	; 0x27c <CheckJoystickMovement+0xc2>
 23c:	90 e9       	ldi	r25, 0x90	; 144
 23e:	1f c0       	rjmp	.+62     	; 0x27e <CheckJoystickMovement+0xc4>
		MIDIPitch   = 0x3B;
	}

	if (MIDICommand)
 240:	99 23       	and	r25, r25
 242:	91 f0       	breq	.+36     	; 0x268 <CheckJoystickMovement+0xae>
				.Command     = (MIDICommand >> 4),

				.Data1       = MIDICommand | Channel,
				.Data2       = MIDIPitch,
				.Data3       = MIDI_STANDARD_VELOCITY,
			};
 244:	89 2f       	mov	r24, r25
 246:	82 95       	swap	r24
 248:	8f 70       	andi	r24, 0x0F	; 15
 24a:	89 83       	std	Y+1, r24	; 0x01
 24c:	94 2b       	or	r25, r20
 24e:	9a 83       	std	Y+2, r25	; 0x02
 250:	2b 83       	std	Y+3, r18	; 0x03
 252:	80 e4       	ldi	r24, 0x40	; 64
 254:	8c 83       	std	Y+4, r24	; 0x04

		MIDI_Device_SendEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent);
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	be 01       	movw	r22, r28
 25c:	6f 5f       	subi	r22, 0xFF	; 255
 25e:	7f 4f       	sbci	r23, 0xFF	; 255
 260:	86 d5       	rcall	.+2828   	; 0xd6e <MIDI_Device_SendEventPacket>
		MIDI_Device_Flush(&Keyboard_MIDI_Interface);
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	63 d5       	rcall	.+2758   	; 0xd2e <MIDI_Device_Flush>
	}

	PrevJoystickStatus = JoystickStatus;
 268:	10 93 0a 01 	sts	0x010A, r17
}
 26c:	0f 90       	pop	r0
 26e:	0f 90       	pop	r0
 270:	0f 90       	pop	r0
 272:	0f 90       	pop	r0
 274:	cf 91       	pop	r28
 276:	df 91       	pop	r29
 278:	1f 91       	pop	r17
 27a:	08 95       	ret
 27c:	90 e8       	ldi	r25, 0x80	; 128
 27e:	2b e3       	ldi	r18, 0x3B	; 59
 280:	e1 cf       	rjmp	.-62     	; 0x244 <CheckJoystickMovement+0x8a>

00000282 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 282:	84 b7       	in	r24, 0x34	; 52
 284:	87 7f       	andi	r24, 0xF7	; 247
 286:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 288:	88 e1       	ldi	r24, 0x18	; 24
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	f8 94       	cli
 28e:	80 93 60 00 	sts	0x0060, r24
 292:	10 92 60 00 	sts	0x0060, r1
 296:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	20 e8       	ldi	r18, 0x80	; 128
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	f8 94       	cli
 2a2:	20 93 61 00 	sts	0x0061, r18
 2a6:	80 93 61 00 	sts	0x0061, r24
 2aa:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
 2ac:	84 b1       	in	r24, 0x04	; 4
 2ae:	8f 71       	andi	r24, 0x1F	; 31
 2b0:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
 2b2:	8d b1       	in	r24, 0x0d	; 13
 2b4:	8f 7c       	andi	r24, 0xCF	; 207
 2b6:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
 2b8:	85 b1       	in	r24, 0x05	; 5
 2ba:	80 6e       	ori	r24, 0xE0	; 224
 2bc:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
 2be:	8e b1       	in	r24, 0x0e	; 14
 2c0:	80 63       	ori	r24, 0x30	; 48
 2c2:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 2c4:	8a b1       	in	r24, 0x0a	; 10
 2c6:	80 6f       	ori	r24, 0xF0	; 240
 2c8:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 2ca:	8b b1       	in	r24, 0x0b	; 11
 2cc:	8f 70       	andi	r24, 0x0F	; 15
 2ce:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
 2d0:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
 2d2:	72 9a       	sbi	0x0e, 2	; 14
	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	Buttons_Init();
	USB_Init();
}
 2d4:	32 c1       	rjmp	.+612    	; 0x53a <USB_Init>

000002d6 <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
 2d6:	0f 93       	push	r16
 2d8:	1f 93       	push	r17
 2da:	df 93       	push	r29
 2dc:	cf 93       	push	r28
 2de:	00 d0       	rcall	.+0      	; 0x2e0 <main+0xa>
 2e0:	00 d0       	rcall	.+0      	; 0x2e2 <main+0xc>
 2e2:	cd b7       	in	r28, 0x3d	; 61
 2e4:	de b7       	in	r29, 0x3e	; 62
	SetupHardware();
 2e6:	cd df       	rcall	.-102    	; 0x282 <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 2e8:	8b b1       	in	r24, 0x0b	; 11
 2ea:	8f 70       	andi	r24, 0x0F	; 15
 2ec:	80 61       	ori	r24, 0x10	; 16
 2ee:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
 2f0:	78 94       	sei
	for (;;)
	{
		CheckJoystickMovement();

		MIDI_EventPacket_t ReceivedMIDIEvent;
		while (MIDI_Device_ReceiveEventPacket(&Keyboard_MIDI_Interface, &ReceivedMIDIEvent))
 2f2:	8e 01       	movw	r16, r28
 2f4:	0f 5f       	subi	r16, 0xFF	; 255
 2f6:	1f 4f       	sbci	r17, 0xFF	; 255
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();

	for (;;)
	{
		CheckJoystickMovement();
 2f8:	60 df       	rcall	.-320    	; 0x1ba <CheckJoystickMovement>
 2fa:	15 c0       	rjmp	.+42     	; 0x326 <main+0x50>

		MIDI_EventPacket_t ReceivedMIDIEvent;
		while (MIDI_Device_ReceiveEventPacket(&Keyboard_MIDI_Interface, &ReceivedMIDIEvent))
		{
			if ((ReceivedMIDIEvent.Command == (MIDI_COMMAND_NOTE_ON >> 4)) && (ReceivedMIDIEvent.Data3 > 0))
 2fc:	89 81       	ldd	r24, Y+1	; 0x01
 2fe:	8f 70       	andi	r24, 0x0F	; 15
 300:	89 30       	cpi	r24, 0x09	; 9
 302:	71 f4       	brne	.+28     	; 0x320 <main+0x4a>
 304:	8c 81       	ldd	r24, Y+4	; 0x04
 306:	88 23       	and	r24, r24
 308:	59 f0       	breq	.+22     	; 0x320 <main+0x4a>
			  LEDs_SetAllLEDs(ReceivedMIDIEvent.Data2 > 64 ? LEDS_LED1 : LEDS_LED2);
 30a:	8b 81       	ldd	r24, Y+3	; 0x03
 30c:	81 34       	cpi	r24, 0x41	; 65
 30e:	10 f4       	brcc	.+4      	; 0x314 <main+0x3e>
 310:	90 e2       	ldi	r25, 0x20	; 32
 312:	01 c0       	rjmp	.+2      	; 0x316 <main+0x40>
 314:	90 e1       	ldi	r25, 0x10	; 16
 316:	8b b1       	in	r24, 0x0b	; 11
 318:	8f 70       	andi	r24, 0x0F	; 15
 31a:	98 2b       	or	r25, r24
 31c:	9b b9       	out	0x0b, r25	; 11
 31e:	03 c0       	rjmp	.+6      	; 0x326 <main+0x50>
	for (;;)
	{
		CheckJoystickMovement();

		MIDI_EventPacket_t ReceivedMIDIEvent;
		while (MIDI_Device_ReceiveEventPacket(&Keyboard_MIDI_Interface, &ReceivedMIDIEvent))
 320:	8b b1       	in	r24, 0x0b	; 11
 322:	8f 70       	andi	r24, 0x0F	; 15
 324:	8b b9       	out	0x0b, r24	; 11
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	b8 01       	movw	r22, r16
 32c:	e1 d4       	rcall	.+2498   	; 0xcf0 <MIDI_Device_ReceiveEventPacket>
 32e:	88 23       	and	r24, r24
 330:	29 f7       	brne	.-54     	; 0x2fc <main+0x26>
			  LEDs_SetAllLEDs(ReceivedMIDIEvent.Data2 > 64 ? LEDS_LED1 : LEDS_LED2);
			else
			  LEDs_SetAllLEDs(LEDS_NO_LEDS);
		}

		MIDI_Device_USBTask(&Keyboard_MIDI_Interface);
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	13 d5       	rcall	.+2598   	; 0xd5e <MIDI_Device_USBTask>
		USB_USBTask();
 338:	c8 d4       	rcall	.+2448   	; 0xcca <USB_USBTask>
 33a:	de cf       	rjmp	.-68     	; 0x2f8 <main+0x22>

0000033c <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
 33c:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 33e:	92 30       	cpi	r25, 0x02	; 2
 340:	49 f0       	breq	.+18     	; 0x354 <CALLBACK_USB_GetDescriptor+0x18>
 342:	93 30       	cpi	r25, 0x03	; 3
 344:	61 f0       	breq	.+24     	; 0x35e <CALLBACK_USB_GetDescriptor+0x22>
 346:	91 30       	cpi	r25, 0x01	; 1
 348:	f9 f4       	brne	.+62     	; 0x388 <CALLBACK_USB_GetDescriptor+0x4c>
 34a:	e8 e9       	ldi	r30, 0x98	; 152
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	22 e1       	ldi	r18, 0x12	; 18
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	1e c0       	rjmp	.+60     	; 0x390 <CALLBACK_USB_GetDescriptor+0x54>
 354:	ea ea       	ldi	r30, 0xAA	; 170
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	25 e6       	ldi	r18, 0x65	; 101
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	19 c0       	rjmp	.+50     	; 0x390 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 35e:	81 30       	cpi	r24, 0x01	; 1
 360:	49 f0       	breq	.+18     	; 0x374 <CALLBACK_USB_GetDescriptor+0x38>
 362:	81 30       	cpi	r24, 0x01	; 1
 364:	18 f0       	brcs	.+6      	; 0x36c <CALLBACK_USB_GetDescriptor+0x30>
 366:	82 30       	cpi	r24, 0x02	; 2
 368:	79 f4       	brne	.+30     	; 0x388 <CALLBACK_USB_GetDescriptor+0x4c>
 36a:	08 c0       	rjmp	.+16     	; 0x37c <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 36c:	ef e0       	ldi	r30, 0x0F	; 15
 36e:	f1 e0       	ldi	r31, 0x01	; 1
 370:	84 91       	lpm	r24, Z+
 372:	07 c0       	rjmp	.+14     	; 0x382 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 374:	e3 e1       	ldi	r30, 0x13	; 19
 376:	f1 e0       	ldi	r31, 0x01	; 1
 378:	84 91       	lpm	r24, Z+
 37a:	03 c0       	rjmp	.+6      	; 0x382 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 37c:	ed e2       	ldi	r30, 0x2D	; 45
 37e:	f1 e0       	ldi	r31, 0x01	; 1
 380:	84 91       	lpm	r24, Z+
 382:	28 2f       	mov	r18, r24
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	04 c0       	rjmp	.+8      	; 0x390 <CALLBACK_USB_GetDescriptor+0x54>
 388:	e0 e0       	ldi	r30, 0x00	; 0
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	20 e0       	ldi	r18, 0x00	; 0
 38e:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 390:	ed 93       	st	X+, r30
 392:	fc 93       	st	X, r31
	return Size;
}
 394:	c9 01       	movw	r24, r18
 396:	08 95       	ret

00000398 <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
 398:	38 2f       	mov	r19, r24
 39a:	28 2f       	mov	r18, r24
 39c:	2c c0       	rjmp	.+88     	; 0x3f6 <Endpoint_ConfigureEndpoint_Prv+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 39e:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);
		
		if (EPNum == Number)
 3a2:	23 17       	cp	r18, r19
 3a4:	21 f4       	brne	.+8      	; 0x3ae <Endpoint_ConfigureEndpoint_Prv+0x16>
 3a6:	76 2f       	mov	r23, r22
 3a8:	94 2f       	mov	r25, r20
 3aa:	50 e0       	ldi	r21, 0x00	; 0
 3ac:	06 c0       	rjmp	.+12     	; 0x3ba <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 3ae:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 3b2:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
 3b6:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 3ba:	91 ff       	sbrs	r25, 1
 3bc:	1b c0       	rjmp	.+54     	; 0x3f4 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 3be:	80 91 eb 00 	lds	r24, 0x00EB
 3c2:	8e 7f       	andi	r24, 0xFE	; 254
 3c4:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= (1 << ALLOC);
 3c8:	80 91 ed 00 	lds	r24, 0x00ED
 3cc:	82 70       	andi	r24, 0x02	; 2
 3ce:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 3d2:	80 91 eb 00 	lds	r24, 0x00EB
 3d6:	81 60       	ori	r24, 0x01	; 1
 3d8:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 3dc:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 3e0:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
 3e4:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 3e8:	80 91 ee 00 	lds	r24, 0x00EE
			
		if (!(Endpoint_IsConfigured()))
 3ec:	87 fd       	sbrc	r24, 7
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <Endpoint_ConfigureEndpoint_Prv+0x5c>
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else	
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 3f4:	2f 5f       	subi	r18, 0xFF	; 255
 3f6:	27 30       	cpi	r18, 0x07	; 7
 3f8:	90 f2       	brcs	.-92     	; 0x39e <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 3fa:	30 93 e9 00 	sts	0x00E9, r19
 3fe:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 400:	08 95       	ret

00000402 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 402:	80 91 10 01 	lds	r24, 0x0110
 406:	88 23       	and	r24, r24
 408:	9c f4       	brge	.+38     	; 0x430 <Endpoint_ClearStatusStage+0x2e>
 40a:	04 c0       	rjmp	.+8      	; 0x414 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 40c:	80 91 0f 01 	lds	r24, 0x010F
 410:	88 23       	and	r24, r24
 412:	b9 f0       	breq	.+46     	; 0x442 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 414:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 418:	82 ff       	sbrs	r24, 2
 41a:	f8 cf       	rjmp	.-16     	; 0x40c <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 41c:	80 91 e8 00 	lds	r24, 0x00E8
 420:	8b 77       	andi	r24, 0x7B	; 123
 422:	80 93 e8 00 	sts	0x00E8, r24
 426:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 428:	80 91 0f 01 	lds	r24, 0x010F
 42c:	88 23       	and	r24, r24
 42e:	49 f0       	breq	.+18     	; 0x442 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 430:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 434:	80 ff       	sbrs	r24, 0
 436:	f8 cf       	rjmp	.-16     	; 0x428 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 438:	80 91 e8 00 	lds	r24, 0x00E8
 43c:	8e 77       	andi	r24, 0x7E	; 126
 43e:	80 93 e8 00 	sts	0x00E8, r24
 442:	08 95       	ret

00000444 <Endpoint_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 444:	40 91 e4 00 	lds	r20, 0x00E4
 448:	50 91 e5 00 	lds	r21, 0x00E5
 44c:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
 44e:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 452:	80 ff       	sbrs	r24, 0
 454:	05 c0       	rjmp	.+10     	; 0x460 <Endpoint_WaitUntilReady+0x1c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 456:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
 45a:	80 ff       	sbrs	r24, 0
 45c:	05 c0       	rjmp	.+10     	; 0x468 <Endpoint_WaitUntilReady+0x24>
 45e:	22 c0       	rjmp	.+68     	; 0x4a4 <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 460:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 464:	82 fd       	sbrc	r24, 2
 466:	1e c0       	rjmp	.+60     	; 0x4a4 <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 468:	80 91 0f 01 	lds	r24, 0x010F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 46c:	88 23       	and	r24, r24
 46e:	11 f4       	brne	.+4      	; 0x474 <Endpoint_WaitUntilReady+0x30>
 470:	82 e0       	ldi	r24, 0x02	; 2
 472:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 474:	85 30       	cpi	r24, 0x05	; 5
 476:	11 f4       	brne	.+4      	; 0x47c <Endpoint_WaitUntilReady+0x38>
 478:	83 e0       	ldi	r24, 0x03	; 3
 47a:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 47c:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 480:	85 ff       	sbrs	r24, 5
 482:	02 c0       	rjmp	.+4      	; 0x488 <Endpoint_WaitUntilReady+0x44>
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	08 95       	ret
 488:	80 91 e4 00 	lds	r24, 0x00E4
 48c:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 490:	84 17       	cp	r24, r20
 492:	95 07       	cpc	r25, r21
 494:	e1 f2       	breq	.-72     	; 0x44e <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 496:	22 23       	and	r18, r18
 498:	11 f4       	brne	.+4      	; 0x49e <Endpoint_WaitUntilReady+0x5a>
 49a:	84 e0       	ldi	r24, 0x04	; 4
 49c:	08 95       	ret
 49e:	21 50       	subi	r18, 0x01	; 1
 4a0:	ac 01       	movw	r20, r24
 4a2:	d5 cf       	rjmp	.-86     	; 0x44e <Endpoint_WaitUntilReady+0xa>
 4a4:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 4a6:	08 95       	ret

000004a8 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
 4a8:	ef 92       	push	r14
 4aa:	ff 92       	push	r15
 4ac:	0f 93       	push	r16
 4ae:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 4b0:	4d d0       	rcall	.+154    	; 0x54c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 4b2:	54 d0       	rcall	.+168    	; 0x55c <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
 4b4:	08 ed       	ldi	r16, 0xD8	; 216
 4b6:	10 e0       	ldi	r17, 0x00	; 0
 4b8:	f8 01       	movw	r30, r16
 4ba:	80 81       	ld	r24, Z

				USBCON = (Temp & ~(1 << USBE));
 4bc:	98 2f       	mov	r25, r24
 4be:	9f 77       	andi	r25, 0x7F	; 127
 4c0:	90 83       	st	Z, r25
				USBCON = (Temp |  (1 << USBE));
 4c2:	80 68       	ori	r24, 0x80	; 128
 4c4:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 4c6:	80 81       	ld	r24, Z
 4c8:	8f 7d       	andi	r24, 0xDF	; 223
 4ca:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 4cc:	e7 ed       	ldi	r30, 0xD7	; 215
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	80 81       	ld	r24, Z
 4d2:	80 68       	ori	r24, 0x80	; 128
 4d4:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
 4d6:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
 4d8:	10 92 0f 01 	sts	0x010F, r1
	USB_ConfigurationNumber  = 0;
 4dc:	10 92 0d 01 	sts	0x010D, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
 4e0:	10 92 0c 01 	sts	0x010C, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
 4e4:	10 92 0b 01 	sts	0x010B, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 4e8:	80 ee       	ldi	r24, 0xE0	; 224
 4ea:	e8 2e       	mov	r14, r24
 4ec:	f1 2c       	mov	r15, r1
 4ee:	f7 01       	movw	r30, r14
 4f0:	80 81       	ld	r24, Z
 4f2:	8b 7f       	andi	r24, 0xFB	; 251
 4f4:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 4f6:	f8 01       	movw	r30, r16
 4f8:	80 81       	ld	r24, Z
 4fa:	81 60       	ori	r24, 0x01	; 1
 4fc:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	60 e0       	ldi	r22, 0x00	; 0
 502:	42 e0       	ldi	r20, 0x02	; 2
 504:	49 df       	rcall	.-366    	; 0x398 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 506:	e1 ee       	ldi	r30, 0xE1	; 225
 508:	f0 e0       	ldi	r31, 0x00	; 0
 50a:	80 81       	ld	r24, Z
 50c:	8e 7f       	andi	r24, 0xFE	; 254
 50e:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 510:	e2 ee       	ldi	r30, 0xE2	; 226
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	80 81       	ld	r24, Z
 516:	81 60       	ori	r24, 0x01	; 1
 518:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 51a:	80 81       	ld	r24, Z
 51c:	88 60       	ori	r24, 0x08	; 8
 51e:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 520:	f7 01       	movw	r30, r14
 522:	80 81       	ld	r24, Z
 524:	8e 7f       	andi	r24, 0xFE	; 254
 526:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 528:	f8 01       	movw	r30, r16
 52a:	80 81       	ld	r24, Z
 52c:	80 61       	ori	r24, 0x10	; 16
 52e:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 530:	1f 91       	pop	r17
 532:	0f 91       	pop	r16
 534:	ff 90       	pop	r15
 536:	ef 90       	pop	r14
 538:	08 95       	ret

0000053a <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 53a:	e7 ed       	ldi	r30, 0xD7	; 215
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	80 81       	ld	r24, Z
 540:	81 60       	ori	r24, 0x01	; 1
 542:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	80 93 0e 01 	sts	0x010E, r24

	USB_ResetInterface();
}
 54a:	ae cf       	rjmp	.-164    	; 0x4a8 <USB_ResetInterface>

0000054c <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 54c:	e8 ed       	ldi	r30, 0xD8	; 216
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	80 81       	ld	r24, Z
 552:	8c 7f       	andi	r24, 0xFC	; 252
 554:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 556:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 55a:	08 95       	ret

0000055c <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 55c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 560:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 564:	08 95       	ret

00000566 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 566:	1f 92       	push	r1
 568:	0f 92       	push	r0
 56a:	0f b6       	in	r0, 0x3f	; 63
 56c:	0f 92       	push	r0
 56e:	0b b6       	in	r0, 0x3b	; 59
 570:	0f 92       	push	r0
 572:	11 24       	eor	r1, r1
 574:	2f 93       	push	r18
 576:	3f 93       	push	r19
 578:	4f 93       	push	r20
 57a:	5f 93       	push	r21
 57c:	6f 93       	push	r22
 57e:	7f 93       	push	r23
 580:	8f 93       	push	r24
 582:	9f 93       	push	r25
 584:	af 93       	push	r26
 586:	bf 93       	push	r27
 588:	ef 93       	push	r30
 58a:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 58c:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 590:	82 ff       	sbrs	r24, 2
 592:	0a c0       	rjmp	.+20     	; 0x5a8 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 594:	80 91 e2 00 	lds	r24, 0x00E2
 598:	82 ff       	sbrs	r24, 2
 59a:	06 c0       	rjmp	.+12     	; 0x5a8 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 59c:	80 91 e1 00 	lds	r24, 0x00E1
 5a0:	8b 7f       	andi	r24, 0xFB	; 251
 5a2:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 5a6:	2d d2       	rcall	.+1114   	; 0xa02 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 5a8:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 5ac:	80 ff       	sbrs	r24, 0
 5ae:	1e c0       	rjmp	.+60     	; 0x5ec <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 5b0:	80 91 d8 00 	lds	r24, 0x00D8
 5b4:	80 ff       	sbrs	r24, 0
 5b6:	1a c0       	rjmp	.+52     	; 0x5ec <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 5b8:	80 91 da 00 	lds	r24, 0x00DA
 5bc:	8e 7f       	andi	r24, 0xFE	; 254
 5be:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 5c2:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 5c6:	80 ff       	sbrs	r24, 0
 5c8:	0d c0       	rjmp	.+26     	; 0x5e4 <__vector_10+0x7e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 5ca:	8c e0       	ldi	r24, 0x0C	; 12
 5cc:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 5ce:	89 b5       	in	r24, 0x29	; 41
 5d0:	82 60       	ori	r24, 0x02	; 2
 5d2:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 5d4:	09 b4       	in	r0, 0x29	; 41
 5d6:	00 fe       	sbrs	r0, 0
 5d8:	fd cf       	rjmp	.-6      	; 0x5d4 <__vector_10+0x6e>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	80 93 0f 01 	sts	0x010F, r24
			EVENT_USB_Device_Connect();
 5e0:	d4 dd       	rcall	.-1112   	; 0x18a <EVENT_USB_Device_Connect>
 5e2:	04 c0       	rjmp	.+8      	; 0x5ec <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
 5e4:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 5e6:	10 92 0f 01 	sts	0x010F, r1
			EVENT_USB_Device_Disconnect();
 5ea:	d4 dd       	rcall	.-1112   	; 0x194 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 5ec:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 5f0:	80 ff       	sbrs	r24, 0
 5f2:	18 c0       	rjmp	.+48     	; 0x624 <__vector_10+0xbe>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 5f4:	80 91 e2 00 	lds	r24, 0x00E2
 5f8:	80 ff       	sbrs	r24, 0
 5fa:	14 c0       	rjmp	.+40     	; 0x624 <__vector_10+0xbe>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 5fc:	80 91 e2 00 	lds	r24, 0x00E2
 600:	8e 7f       	andi	r24, 0xFE	; 254
 602:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 606:	80 91 e2 00 	lds	r24, 0x00E2
 60a:	80 61       	ori	r24, 0x10	; 16
 60c:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 610:	80 91 d8 00 	lds	r24, 0x00D8
 614:	80 62       	ori	r24, 0x20	; 32
 616:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
 61a:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 61c:	85 e0       	ldi	r24, 0x05	; 5
 61e:	80 93 0f 01 	sts	0x010F, r24
		EVENT_USB_Device_Suspend();
 622:	ef d1       	rcall	.+990    	; 0xa02 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 624:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 628:	84 ff       	sbrs	r24, 4
 62a:	2e c0       	rjmp	.+92     	; 0x688 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 62c:	80 91 e2 00 	lds	r24, 0x00E2
 630:	84 ff       	sbrs	r24, 4
 632:	2a c0       	rjmp	.+84     	; 0x688 <__vector_10+0x122>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 634:	8c e0       	ldi	r24, 0x0C	; 12
 636:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 638:	89 b5       	in	r24, 0x29	; 41
 63a:	82 60       	ori	r24, 0x02	; 2
 63c:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 63e:	09 b4       	in	r0, 0x29	; 41
 640:	00 fe       	sbrs	r0, 0
 642:	fd cf       	rjmp	.-6      	; 0x63e <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 644:	80 91 d8 00 	lds	r24, 0x00D8
 648:	8f 7d       	andi	r24, 0xDF	; 223
 64a:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 64e:	80 91 e1 00 	lds	r24, 0x00E1
 652:	8f 7e       	andi	r24, 0xEF	; 239
 654:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 658:	80 91 e2 00 	lds	r24, 0x00E2
 65c:	8f 7e       	andi	r24, 0xEF	; 239
 65e:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 662:	80 91 e2 00 	lds	r24, 0x00E2
 666:	81 60       	ori	r24, 0x01	; 1
 668:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_ConfigurationNumber)
 66c:	80 91 0d 01 	lds	r24, 0x010D
 670:	88 23       	and	r24, r24
 672:	31 f4       	brne	.+12     	; 0x680 <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 674:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 678:	87 fd       	sbrc	r24, 7
 67a:	02 c0       	rjmp	.+4      	; 0x680 <__vector_10+0x11a>
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	01 c0       	rjmp	.+2      	; 0x682 <__vector_10+0x11c>
 680:	84 e0       	ldi	r24, 0x04	; 4
 682:	80 93 0f 01 	sts	0x010F, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 686:	bd d1       	rcall	.+890    	; 0xa02 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 688:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 68c:	83 ff       	sbrs	r24, 3
 68e:	22 c0       	rjmp	.+68     	; 0x6d4 <__vector_10+0x16e>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 690:	80 91 e2 00 	lds	r24, 0x00E2
 694:	83 ff       	sbrs	r24, 3
 696:	1e c0       	rjmp	.+60     	; 0x6d4 <__vector_10+0x16e>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 698:	80 91 e1 00 	lds	r24, 0x00E1
 69c:	87 7f       	andi	r24, 0xF7	; 247
 69e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState         = DEVICE_STATE_Default;
 6a2:	82 e0       	ldi	r24, 0x02	; 2
 6a4:	80 93 0f 01 	sts	0x010F, r24
		USB_ConfigurationNumber = 0;
 6a8:	10 92 0d 01 	sts	0x010D, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 6ac:	80 91 e1 00 	lds	r24, 0x00E1
 6b0:	8e 7f       	andi	r24, 0xFE	; 254
 6b2:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 6b6:	80 91 e2 00 	lds	r24, 0x00E2
 6ba:	8e 7f       	andi	r24, 0xFE	; 254
 6bc:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 6c0:	80 91 e2 00 	lds	r24, 0x00E2
 6c4:	80 61       	ori	r24, 0x10	; 16
 6c6:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
 6ca:	80 e0       	ldi	r24, 0x00	; 0
 6cc:	60 e0       	ldi	r22, 0x00	; 0
 6ce:	42 e0       	ldi	r20, 0x02	; 2
 6d0:	63 de       	rcall	.-826    	; 0x398 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 6d2:	97 d1       	rcall	.+814    	; 0xa02 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 6d4:	ff 91       	pop	r31
 6d6:	ef 91       	pop	r30
 6d8:	bf 91       	pop	r27
 6da:	af 91       	pop	r26
 6dc:	9f 91       	pop	r25
 6de:	8f 91       	pop	r24
 6e0:	7f 91       	pop	r23
 6e2:	6f 91       	pop	r22
 6e4:	5f 91       	pop	r21
 6e6:	4f 91       	pop	r20
 6e8:	3f 91       	pop	r19
 6ea:	2f 91       	pop	r18
 6ec:	0f 90       	pop	r0
 6ee:	0b be       	out	0x3b, r0	; 59
 6f0:	0f 90       	pop	r0
 6f2:	0f be       	out	0x3f, r0	; 63
 6f4:	0f 90       	pop	r0
 6f6:	1f 90       	pop	r1
 6f8:	18 95       	reti

000006fa <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 6fa:	0f 93       	push	r16
 6fc:	1f 93       	push	r17
 6fe:	df 93       	push	r29
 700:	cf 93       	push	r28
 702:	cd b7       	in	r28, 0x3d	; 61
 704:	de b7       	in	r29, 0x3e	; 62
 706:	ac 97       	sbiw	r28, 0x2c	; 44
 708:	0f b6       	in	r0, 0x3f	; 63
 70a:	f8 94       	cli
 70c:	de bf       	out	0x3e, r29	; 62
 70e:	0f be       	out	0x3f, r0	; 63
 710:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 712:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
 716:	80 93 10 01 	sts	0x0110, r24
 71a:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
 71e:	80 93 11 01 	sts	0x0111, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 722:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 726:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
 72a:	e2 e1       	ldi	r30, 0x12	; 18
 72c:	f1 e0       	ldi	r31, 0x01	; 1
 72e:	80 93 12 01 	sts	0x0112, r24
 732:	90 93 13 01 	sts	0x0113, r25
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 736:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 73a:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
 73e:	80 93 14 01 	sts	0x0114, r24
 742:	93 83       	std	Z+3, r25	; 0x03
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 744:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 748:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
 74c:	80 93 16 01 	sts	0x0116, r24
 750:	95 83       	std	Z+5, r25	; 0x05

	EVENT_USB_Device_ControlRequest();
 752:	25 dd       	rcall	.-1462   	; 0x19e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 754:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 758:	83 ff       	sbrs	r24, 3
 75a:	3a c1       	rjmp	.+628    	; 0x9d0 <USB_Device_ProcessControlRequest+0x2d6>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 75c:	80 91 10 01 	lds	r24, 0x0110

		switch (USB_ControlRequest.bRequest)
 760:	30 91 11 01 	lds	r19, 0x0111
 764:	35 30       	cpi	r19, 0x05	; 5
 766:	09 f4       	brne	.+2      	; 0x76a <USB_Device_ProcessControlRequest+0x70>
 768:	87 c0       	rjmp	.+270    	; 0x878 <USB_Device_ProcessControlRequest+0x17e>
 76a:	36 30       	cpi	r19, 0x06	; 6
 76c:	40 f4       	brcc	.+16     	; 0x77e <USB_Device_ProcessControlRequest+0x84>
 76e:	31 30       	cpi	r19, 0x01	; 1
 770:	c9 f1       	breq	.+114    	; 0x7e4 <USB_Device_ProcessControlRequest+0xea>
 772:	31 30       	cpi	r19, 0x01	; 1
 774:	70 f0       	brcs	.+28     	; 0x792 <USB_Device_ProcessControlRequest+0x98>
 776:	33 30       	cpi	r19, 0x03	; 3
 778:	09 f0       	breq	.+2      	; 0x77c <USB_Device_ProcessControlRequest+0x82>
 77a:	2a c1       	rjmp	.+596    	; 0x9d0 <USB_Device_ProcessControlRequest+0x2d6>
 77c:	33 c0       	rjmp	.+102    	; 0x7e4 <USB_Device_ProcessControlRequest+0xea>
 77e:	38 30       	cpi	r19, 0x08	; 8
 780:	09 f4       	brne	.+2      	; 0x784 <USB_Device_ProcessControlRequest+0x8a>
 782:	f8 c0       	rjmp	.+496    	; 0x974 <USB_Device_ProcessControlRequest+0x27a>
 784:	39 30       	cpi	r19, 0x09	; 9
 786:	09 f4       	brne	.+2      	; 0x78a <USB_Device_ProcessControlRequest+0x90>
 788:	07 c1       	rjmp	.+526    	; 0x998 <USB_Device_ProcessControlRequest+0x29e>
 78a:	36 30       	cpi	r19, 0x06	; 6
 78c:	09 f0       	breq	.+2      	; 0x790 <USB_Device_ProcessControlRequest+0x96>
 78e:	20 c1       	rjmp	.+576    	; 0x9d0 <USB_Device_ProcessControlRequest+0x2d6>
 790:	99 c0       	rjmp	.+306    	; 0x8c4 <USB_Device_ProcessControlRequest+0x1ca>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 792:	80 38       	cpi	r24, 0x80	; 128
 794:	21 f0       	breq	.+8      	; 0x79e <USB_Device_ProcessControlRequest+0xa4>
 796:	82 38       	cpi	r24, 0x82	; 130
 798:	09 f0       	breq	.+2      	; 0x79c <USB_Device_ProcessControlRequest+0xa2>
 79a:	1a c1       	rjmp	.+564    	; 0x9d0 <USB_Device_ProcessControlRequest+0x2d6>
 79c:	08 c0       	rjmp	.+16     	; 0x7ae <USB_Device_ProcessControlRequest+0xb4>
 79e:	90 91 0b 01 	lds	r25, 0x010B
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_RemoteWakeupEnabled)
 7a2:	80 91 0c 01 	lds	r24, 0x010C
 7a6:	88 23       	and	r24, r24
 7a8:	99 f0       	breq	.+38     	; 0x7d0 <USB_Device_ProcessControlRequest+0xd6>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 7aa:	92 60       	ori	r25, 0x02	; 2
 7ac:	11 c0       	rjmp	.+34     	; 0x7d0 <USB_Device_ProcessControlRequest+0xd6>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 7ae:	80 91 14 01 	lds	r24, 0x0114
 7b2:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 7b4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 7b8:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	25 e0       	ldi	r18, 0x05	; 5
 7c0:	96 95       	lsr	r25
 7c2:	87 95       	ror	r24
 7c4:	2a 95       	dec	r18
 7c6:	e1 f7       	brne	.-8      	; 0x7c0 <USB_Device_ProcessControlRequest+0xc6>
 7c8:	98 2f       	mov	r25, r24
 7ca:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 7cc:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 7d0:	80 91 e8 00 	lds	r24, 0x00E8
 7d4:	87 7f       	andi	r24, 0xF7	; 247
 7d6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 7da:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
 7de:	10 92 f1 00 	sts	0x00F1, r1
 7e2:	d3 c0       	rjmp	.+422    	; 0x98a <USB_Device_ProcessControlRequest+0x290>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 7e4:	88 23       	and	r24, r24
 7e6:	19 f0       	breq	.+6      	; 0x7ee <USB_Device_ProcessControlRequest+0xf4>
 7e8:	82 30       	cpi	r24, 0x02	; 2
 7ea:	09 f0       	breq	.+2      	; 0x7ee <USB_Device_ProcessControlRequest+0xf4>
 7ec:	f1 c0       	rjmp	.+482    	; 0x9d0 <USB_Device_ProcessControlRequest+0x2d6>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	8f 71       	andi	r24, 0x1F	; 31
 7f2:	90 70       	andi	r25, 0x00	; 0
 7f4:	00 97       	sbiw	r24, 0x00	; 0
 7f6:	21 f0       	breq	.+8      	; 0x800 <USB_Device_ProcessControlRequest+0x106>
 7f8:	02 97       	sbiw	r24, 0x02	; 2
 7fa:	09 f0       	breq	.+2      	; 0x7fe <USB_Device_ProcessControlRequest+0x104>
 7fc:	e9 c0       	rjmp	.+466    	; 0x9d0 <USB_Device_ProcessControlRequest+0x2d6>
 7fe:	0c c0       	rjmp	.+24     	; 0x818 <USB_Device_ProcessControlRequest+0x11e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 800:	80 91 12 01 	lds	r24, 0x0112
 804:	81 30       	cpi	r24, 0x01	; 1
 806:	09 f0       	breq	.+2      	; 0x80a <USB_Device_ProcessControlRequest+0x110>
 808:	e3 c0       	rjmp	.+454    	; 0x9d0 <USB_Device_ProcessControlRequest+0x2d6>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 80a:	10 92 0c 01 	sts	0x010C, r1
 80e:	33 30       	cpi	r19, 0x03	; 3
 810:	69 f5       	brne	.+90     	; 0x86c <USB_Device_ProcessControlRequest+0x172>
 812:	80 93 0c 01 	sts	0x010C, r24
 816:	2a c0       	rjmp	.+84     	; 0x86c <USB_Device_ProcessControlRequest+0x172>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 818:	80 91 12 01 	lds	r24, 0x0112
 81c:	88 23       	and	r24, r24
 81e:	31 f5       	brne	.+76     	; 0x86c <USB_Device_ProcessControlRequest+0x172>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 820:	20 91 14 01 	lds	r18, 0x0114
 824:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 826:	09 f4       	brne	.+2      	; 0x82a <USB_Device_ProcessControlRequest+0x130>
 828:	d3 c0       	rjmp	.+422    	; 0x9d0 <USB_Device_ProcessControlRequest+0x2d6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 82a:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 82e:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 832:	80 ff       	sbrs	r24, 0
 834:	1b c0       	rjmp	.+54     	; 0x86c <USB_Device_ProcessControlRequest+0x172>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 836:	33 30       	cpi	r19, 0x03	; 3
 838:	21 f4       	brne	.+8      	; 0x842 <USB_Device_ProcessControlRequest+0x148>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 83a:	80 91 eb 00 	lds	r24, 0x00EB
 83e:	80 62       	ori	r24, 0x20	; 32
 840:	13 c0       	rjmp	.+38     	; 0x868 <USB_Device_ProcessControlRequest+0x16e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 842:	80 91 eb 00 	lds	r24, 0x00EB
 846:	80 61       	ori	r24, 0x10	; 16
 848:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 84c:	81 e0       	ldi	r24, 0x01	; 1
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	02 c0       	rjmp	.+4      	; 0x856 <USB_Device_ProcessControlRequest+0x15c>
 852:	88 0f       	add	r24, r24
 854:	99 1f       	adc	r25, r25
 856:	2a 95       	dec	r18
 858:	e2 f7       	brpl	.-8      	; 0x852 <USB_Device_ProcessControlRequest+0x158>
 85a:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 85e:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 862:	80 91 eb 00 	lds	r24, 0x00EB
 866:	88 60       	ori	r24, 0x08	; 8
 868:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 86c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 870:	80 91 e8 00 	lds	r24, 0x00E8
 874:	87 7f       	andi	r24, 0xF7	; 247
 876:	8c c0       	rjmp	.+280    	; 0x990 <USB_Device_ProcessControlRequest+0x296>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 878:	88 23       	and	r24, r24
 87a:	09 f0       	breq	.+2      	; 0x87e <USB_Device_ProcessControlRequest+0x184>
 87c:	a9 c0       	rjmp	.+338    	; 0x9d0 <USB_Device_ProcessControlRequest+0x2d6>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 87e:	10 91 12 01 	lds	r17, 0x0112
 882:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 884:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 886:	f8 94       	cli
 888:	80 91 e8 00 	lds	r24, 0x00E8
 88c:	87 7f       	andi	r24, 0xF7	; 247
 88e:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 892:	b7 dd       	rcall	.-1170   	; 0x402 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 894:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
 898:	80 ff       	sbrs	r24, 0
 89a:	fc cf       	rjmp	.-8      	; 0x894 <USB_Device_ProcessControlRequest+0x19a>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
 89c:	80 91 e3 00 	lds	r24, 0x00E3
 8a0:	80 78       	andi	r24, 0x80	; 128
 8a2:	81 2b       	or	r24, r17
 8a4:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR |= (1 << ADDEN);
 8a8:	80 91 e3 00 	lds	r24, 0x00E3
 8ac:	80 68       	ori	r24, 0x80	; 128
 8ae:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 8b2:	11 23       	and	r17, r17
 8b4:	11 f4       	brne	.+4      	; 0x8ba <USB_Device_ProcessControlRequest+0x1c0>
 8b6:	82 e0       	ldi	r24, 0x02	; 2
 8b8:	01 c0       	rjmp	.+2      	; 0x8bc <USB_Device_ProcessControlRequest+0x1c2>
 8ba:	83 e0       	ldi	r24, 0x03	; 3
 8bc:	80 93 0f 01 	sts	0x010F, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 8c0:	0f bf       	out	0x3f, r16	; 63
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#endif
				
				GCC_MEMORY_BARRIER();
 8c2:	86 c0       	rjmp	.+268    	; 0x9d0 <USB_Device_ProcessControlRequest+0x2d6>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 8c4:	80 58       	subi	r24, 0x80	; 128
 8c6:	82 30       	cpi	r24, 0x02	; 2
 8c8:	08 f0       	brcs	.+2      	; 0x8cc <USB_Device_ProcessControlRequest+0x1d2>
 8ca:	82 c0       	rjmp	.+260    	; 0x9d0 <USB_Device_ProcessControlRequest+0x2d6>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 8cc:	80 91 12 01 	lds	r24, 0x0112
 8d0:	90 91 13 01 	lds	r25, 0x0113
 8d4:	23 e0       	ldi	r18, 0x03	; 3
 8d6:	8c 3d       	cpi	r24, 0xDC	; 220
 8d8:	92 07       	cpc	r25, r18
 8da:	09 f0       	breq	.+2      	; 0x8de <USB_Device_ProcessControlRequest+0x1e4>
 8dc:	33 c0       	rjmp	.+102    	; 0x944 <USB_Device_ProcessControlRequest+0x24a>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 8de:	83 e0       	ldi	r24, 0x03	; 3
 8e0:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 8e2:	8a e2       	ldi	r24, 0x2A	; 42
 8e4:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 8e6:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 8e8:	f8 94       	cli
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#endif

				GCC_MEMORY_BARRIER();
 8ea:	de 01       	movw	r26, r28
 8ec:	15 96       	adiw	r26, 0x05	; 5
 8ee:	6e e0       	ldi	r22, 0x0E	; 14
 8f0:	40 e0       	ldi	r20, 0x00	; 0
 8f2:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 8f4:	11 e2       	ldi	r17, 0x21	; 33
 8f6:	e6 2f       	mov	r30, r22
 8f8:	f0 e0       	ldi	r31, 0x00	; 0
 8fa:	10 93 57 00 	sts	0x0057, r17
 8fe:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
 900:	40 ff       	sbrs	r20, 0
 902:	03 c0       	rjmp	.+6      	; 0x90a <USB_Device_ProcessControlRequest+0x210>
					{
						SerialByte >>= 4;
 904:	82 95       	swap	r24
 906:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
 908:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 90a:	8f 70       	andi	r24, 0x0F	; 15
 90c:	28 2f       	mov	r18, r24
 90e:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 910:	8a 30       	cpi	r24, 0x0A	; 10
 912:	18 f0       	brcs	.+6      	; 0x91a <USB_Device_ProcessControlRequest+0x220>
 914:	c9 01       	movw	r24, r18
 916:	c7 96       	adiw	r24, 0x37	; 55
 918:	02 c0       	rjmp	.+4      	; 0x91e <USB_Device_ProcessControlRequest+0x224>
 91a:	c9 01       	movw	r24, r18
 91c:	c0 96       	adiw	r24, 0x30	; 48
 91e:	8d 93       	st	X+, r24
 920:	9d 93       	st	X+, r25
 922:	4f 5f       	subi	r20, 0xFF	; 255
 924:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 926:	44 31       	cpi	r20, 0x14	; 20
 928:	51 05       	cpc	r21, r1
 92a:	29 f7       	brne	.-54     	; 0x8f6 <USB_Device_ProcessControlRequest+0x1fc>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 92c:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 92e:	80 91 e8 00 	lds	r24, 0x00E8
 932:	87 7f       	andi	r24, 0xF7	; 247
 934:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 938:	ce 01       	movw	r24, r28
 93a:	03 96       	adiw	r24, 0x03	; 3
 93c:	6a e2       	ldi	r22, 0x2A	; 42
 93e:	70 e0       	ldi	r23, 0x00	; 0
 940:	61 d0       	rcall	.+194    	; 0xa04 <Endpoint_Write_Control_Stream_LE>
 942:	12 c0       	rjmp	.+36     	; 0x968 <USB_Device_ProcessControlRequest+0x26e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 944:	60 91 14 01 	lds	r22, 0x0114
 948:	ae 01       	movw	r20, r28
 94a:	4f 5f       	subi	r20, 0xFF	; 255
 94c:	5f 4f       	sbci	r21, 0xFF	; 255
 94e:	f6 dc       	rcall	.-1556   	; 0x33c <CALLBACK_USB_GetDescriptor>
 950:	bc 01       	movw	r22, r24
 952:	00 97       	sbiw	r24, 0x00	; 0
 954:	09 f4       	brne	.+2      	; 0x958 <USB_Device_ProcessControlRequest+0x25e>
 956:	3c c0       	rjmp	.+120    	; 0x9d0 <USB_Device_ProcessControlRequest+0x2d6>
 958:	80 91 e8 00 	lds	r24, 0x00E8
 95c:	87 7f       	andi	r24, 0xF7	; 247
 95e:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 962:	89 81       	ldd	r24, Y+1	; 0x01
 964:	9a 81       	ldd	r25, Y+2	; 0x02
 966:	ac d0       	rcall	.+344    	; 0xac0 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 968:	80 91 e8 00 	lds	r24, 0x00E8
 96c:	8b 77       	andi	r24, 0x7B	; 123
 96e:	80 93 e8 00 	sts	0x00E8, r24
 972:	2e c0       	rjmp	.+92     	; 0x9d0 <USB_Device_ProcessControlRequest+0x2d6>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 974:	80 38       	cpi	r24, 0x80	; 128
 976:	61 f5       	brne	.+88     	; 0x9d0 <USB_Device_ProcessControlRequest+0x2d6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 978:	80 91 e8 00 	lds	r24, 0x00E8
 97c:	87 7f       	andi	r24, 0xF7	; 247
 97e:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_ConfigurationNumber);
 982:	80 91 0d 01 	lds	r24, 0x010D
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 986:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 98a:	80 91 e8 00 	lds	r24, 0x00E8
 98e:	8e 77       	andi	r24, 0x7E	; 126
 990:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 994:	36 dd       	rcall	.-1428   	; 0x402 <Endpoint_ClearStatusStage>
 996:	1c c0       	rjmp	.+56     	; 0x9d0 <USB_Device_ProcessControlRequest+0x2d6>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 998:	88 23       	and	r24, r24
 99a:	d1 f4       	brne	.+52     	; 0x9d0 <USB_Device_ProcessControlRequest+0x2d6>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 99c:	90 91 12 01 	lds	r25, 0x0112
 9a0:	92 30       	cpi	r25, 0x02	; 2
 9a2:	b0 f4       	brcc	.+44     	; 0x9d0 <USB_Device_ProcessControlRequest+0x2d6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9a4:	80 91 e8 00 	lds	r24, 0x00E8
 9a8:	87 7f       	andi	r24, 0xF7	; 247
 9aa:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 9ae:	90 93 0d 01 	sts	0x010D, r25

	Endpoint_ClearStatusStage();
 9b2:	27 dd       	rcall	.-1458   	; 0x402 <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
 9b4:	80 91 0d 01 	lds	r24, 0x010D
 9b8:	88 23       	and	r24, r24
 9ba:	31 f4       	brne	.+12     	; 0x9c8 <USB_Device_ProcessControlRequest+0x2ce>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 9bc:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 9c0:	87 fd       	sbrc	r24, 7
 9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <USB_Device_ProcessControlRequest+0x2ce>
 9c4:	81 e0       	ldi	r24, 0x01	; 1
 9c6:	01 c0       	rjmp	.+2      	; 0x9ca <USB_Device_ProcessControlRequest+0x2d0>
 9c8:	84 e0       	ldi	r24, 0x04	; 4
 9ca:	80 93 0f 01 	sts	0x010F, r24

	EVENT_USB_Device_ConfigurationChanged();
 9ce:	e8 db       	rcall	.-2096   	; 0x1a0 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9d0:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 9d4:	83 ff       	sbrs	r24, 3
 9d6:	0a c0       	rjmp	.+20     	; 0x9ec <USB_Device_ProcessControlRequest+0x2f2>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 9d8:	80 91 eb 00 	lds	r24, 0x00EB
 9dc:	80 62       	ori	r24, 0x20	; 32
 9de:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9e2:	80 91 e8 00 	lds	r24, 0x00E8
 9e6:	87 7f       	andi	r24, 0xF7	; 247
 9e8:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 9ec:	ac 96       	adiw	r28, 0x2c	; 44
 9ee:	0f b6       	in	r0, 0x3f	; 63
 9f0:	f8 94       	cli
 9f2:	de bf       	out	0x3e, r29	; 62
 9f4:	0f be       	out	0x3f, r0	; 63
 9f6:	cd bf       	out	0x3d, r28	; 61
 9f8:	cf 91       	pop	r28
 9fa:	df 91       	pop	r29
 9fc:	1f 91       	pop	r17
 9fe:	0f 91       	pop	r16
 a00:	08 95       	ret

00000a02 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 a02:	08 95       	ret

00000a04 <Endpoint_Write_Control_Stream_LE>:
 a04:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 a06:	40 91 16 01 	lds	r20, 0x0116
 a0a:	50 91 17 01 	lds	r21, 0x0117
 a0e:	46 17       	cp	r20, r22
 a10:	57 07       	cpc	r21, r23
 a12:	18 f4       	brcc	.+6      	; 0xa1a <Endpoint_Write_Control_Stream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 a14:	f9 01       	movw	r30, r18
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	3d c0       	rjmp	.+122    	; 0xa94 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 a1a:	61 15       	cp	r22, r1
 a1c:	71 05       	cpc	r23, r1
 a1e:	11 f0       	breq	.+4      	; 0xa24 <Endpoint_Write_Control_Stream_LE+0x20>
 a20:	ab 01       	movw	r20, r22
 a22:	f8 cf       	rjmp	.-16     	; 0xa14 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 a24:	80 91 e8 00 	lds	r24, 0x00E8
 a28:	8e 77       	andi	r24, 0x7E	; 126
 a2a:	80 93 e8 00 	sts	0x00E8, r24
 a2e:	40 e0       	ldi	r20, 0x00	; 0
 a30:	50 e0       	ldi	r21, 0x00	; 0
 a32:	f0 cf       	rjmp	.-32     	; 0xa14 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 a34:	80 91 0f 01 	lds	r24, 0x010F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 a38:	88 23       	and	r24, r24
 a3a:	f1 f1       	breq	.+124    	; 0xab8 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 a3c:	85 30       	cpi	r24, 0x05	; 5
 a3e:	f1 f1       	breq	.+124    	; 0xabc <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a40:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 a44:	83 ff       	sbrs	r24, 3
 a46:	02 c0       	rjmp	.+4      	; 0xa4c <Endpoint_Write_Control_Stream_LE+0x48>
 a48:	81 e0       	ldi	r24, 0x01	; 1
 a4a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 a4c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 a50:	82 fd       	sbrc	r24, 2
 a52:	2c c0       	rjmp	.+88     	; 0xaac <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 a54:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 a58:	80 ff       	sbrs	r24, 0
 a5a:	1c c0       	rjmp	.+56     	; 0xa94 <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 a5c:	20 91 f2 00 	lds	r18, 0x00F2
 a60:	30 91 f3 00 	lds	r19, 0x00F3
 a64:	07 c0       	rjmp	.+14     	; 0xa74 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 a66:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 a68:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 a6c:	41 50       	subi	r20, 0x01	; 1
 a6e:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 a70:	2f 5f       	subi	r18, 0xFF	; 255
 a72:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 a74:	41 15       	cp	r20, r1
 a76:	51 05       	cpc	r21, r1
 a78:	19 f0       	breq	.+6      	; 0xa80 <Endpoint_Write_Control_Stream_LE+0x7c>
 a7a:	28 30       	cpi	r18, 0x08	; 8
 a7c:	31 05       	cpc	r19, r1
 a7e:	98 f3       	brcs	.-26     	; 0xa66 <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	28 30       	cpi	r18, 0x08	; 8
 a84:	31 05       	cpc	r19, r1
 a86:	09 f4       	brne	.+2      	; 0xa8a <Endpoint_Write_Control_Stream_LE+0x86>
 a88:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 a8a:	80 91 e8 00 	lds	r24, 0x00E8
 a8e:	8e 77       	andi	r24, 0x7E	; 126
 a90:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 a94:	41 15       	cp	r20, r1
 a96:	51 05       	cpc	r21, r1
 a98:	69 f6       	brne	.-102    	; 0xa34 <Endpoint_Write_Control_Stream_LE+0x30>
 a9a:	99 23       	and	r25, r25
 a9c:	59 f6       	brne	.-106    	; 0xa34 <Endpoint_Write_Control_Stream_LE+0x30>
 a9e:	06 c0       	rjmp	.+12     	; 0xaac <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 aa0:	80 91 0f 01 	lds	r24, 0x010F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 aa4:	88 23       	and	r24, r24
 aa6:	41 f0       	breq	.+16     	; 0xab8 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 aa8:	85 30       	cpi	r24, 0x05	; 5
 aaa:	41 f0       	breq	.+16     	; 0xabc <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 aac:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 ab0:	82 ff       	sbrs	r24, 2
 ab2:	f6 cf       	rjmp	.-20     	; 0xaa0 <Endpoint_Write_Control_Stream_LE+0x9c>
 ab4:	80 e0       	ldi	r24, 0x00	; 0
 ab6:	08 95       	ret
 ab8:	82 e0       	ldi	r24, 0x02	; 2
 aba:	08 95       	ret
 abc:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 abe:	08 95       	ret

00000ac0 <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
 ac0:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 ac2:	40 91 16 01 	lds	r20, 0x0116
 ac6:	50 91 17 01 	lds	r21, 0x0117
 aca:	46 17       	cp	r20, r22
 acc:	57 07       	cpc	r21, r23
 ace:	18 f4       	brcc	.+6      	; 0xad6 <Endpoint_Write_Control_PStream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 ad0:	f9 01       	movw	r30, r18
 ad2:	90 e0       	ldi	r25, 0x00	; 0
 ad4:	40 c0       	rjmp	.+128    	; 0xb56 <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 ad6:	61 15       	cp	r22, r1
 ad8:	71 05       	cpc	r23, r1
 ada:	11 f0       	breq	.+4      	; 0xae0 <Endpoint_Write_Control_PStream_LE+0x20>
 adc:	ab 01       	movw	r20, r22
 ade:	f8 cf       	rjmp	.-16     	; 0xad0 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 ae0:	80 91 e8 00 	lds	r24, 0x00E8
 ae4:	8e 77       	andi	r24, 0x7E	; 126
 ae6:	80 93 e8 00 	sts	0x00E8, r24
 aea:	40 e0       	ldi	r20, 0x00	; 0
 aec:	50 e0       	ldi	r21, 0x00	; 0
 aee:	f0 cf       	rjmp	.-32     	; 0xad0 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 af0:	80 91 0f 01 	lds	r24, 0x010F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 af4:	88 23       	and	r24, r24
 af6:	09 f4       	brne	.+2      	; 0xafa <Endpoint_Write_Control_PStream_LE+0x3a>
 af8:	40 c0       	rjmp	.+128    	; 0xb7a <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 afa:	85 30       	cpi	r24, 0x05	; 5
 afc:	09 f4       	brne	.+2      	; 0xb00 <Endpoint_Write_Control_PStream_LE+0x40>
 afe:	3f c0       	rjmp	.+126    	; 0xb7e <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b00:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 b04:	83 ff       	sbrs	r24, 3
 b06:	02 c0       	rjmp	.+4      	; 0xb0c <Endpoint_Write_Control_PStream_LE+0x4c>
 b08:	81 e0       	ldi	r24, 0x01	; 1
 b0a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 b0c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 b10:	82 fd       	sbrc	r24, 2
 b12:	2d c0       	rjmp	.+90     	; 0xb6e <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 b14:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 b18:	80 ff       	sbrs	r24, 0
 b1a:	1d c0       	rjmp	.+58     	; 0xb56 <Endpoint_Write_Control_PStream_LE+0x96>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 b1c:	20 91 f2 00 	lds	r18, 0x00F2
 b20:	30 91 f3 00 	lds	r19, 0x00F3
 b24:	08 c0       	rjmp	.+16     	; 0xb36 <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 b26:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 b28:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 b2c:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 b2e:	41 50       	subi	r20, 0x01	; 1
 b30:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 b32:	2f 5f       	subi	r18, 0xFF	; 255
 b34:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 b36:	41 15       	cp	r20, r1
 b38:	51 05       	cpc	r21, r1
 b3a:	19 f0       	breq	.+6      	; 0xb42 <Endpoint_Write_Control_PStream_LE+0x82>
 b3c:	28 30       	cpi	r18, 0x08	; 8
 b3e:	31 05       	cpc	r19, r1
 b40:	90 f3       	brcs	.-28     	; 0xb26 <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 b42:	90 e0       	ldi	r25, 0x00	; 0
 b44:	28 30       	cpi	r18, 0x08	; 8
 b46:	31 05       	cpc	r19, r1
 b48:	09 f4       	brne	.+2      	; 0xb4c <Endpoint_Write_Control_PStream_LE+0x8c>
 b4a:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 b4c:	80 91 e8 00 	lds	r24, 0x00E8
 b50:	8e 77       	andi	r24, 0x7E	; 126
 b52:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 b56:	41 15       	cp	r20, r1
 b58:	51 05       	cpc	r21, r1
 b5a:	51 f6       	brne	.-108    	; 0xaf0 <Endpoint_Write_Control_PStream_LE+0x30>
 b5c:	99 23       	and	r25, r25
 b5e:	41 f6       	brne	.-112    	; 0xaf0 <Endpoint_Write_Control_PStream_LE+0x30>
 b60:	06 c0       	rjmp	.+12     	; 0xb6e <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 b62:	80 91 0f 01 	lds	r24, 0x010F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 b66:	88 23       	and	r24, r24
 b68:	41 f0       	breq	.+16     	; 0xb7a <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 b6a:	85 30       	cpi	r24, 0x05	; 5
 b6c:	41 f0       	breq	.+16     	; 0xb7e <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 b6e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 b72:	82 ff       	sbrs	r24, 2
 b74:	f6 cf       	rjmp	.-20     	; 0xb62 <Endpoint_Write_Control_PStream_LE+0xa2>
 b76:	80 e0       	ldi	r24, 0x00	; 0
 b78:	08 95       	ret
 b7a:	82 e0       	ldi	r24, 0x02	; 2
 b7c:	08 95       	ret
 b7e:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 b80:	08 95       	ret

00000b82 <Endpoint_Read_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 b82:	bf 92       	push	r11
 b84:	cf 92       	push	r12
 b86:	df 92       	push	r13
 b88:	ef 92       	push	r14
 b8a:	ff 92       	push	r15
 b8c:	0f 93       	push	r16
 b8e:	1f 93       	push	r17
 b90:	cf 93       	push	r28
 b92:	df 93       	push	r29
 b94:	18 2f       	mov	r17, r24
 b96:	09 2f       	mov	r16, r25
 b98:	7b 01       	movw	r14, r22
 b9a:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 b9c:	53 dc       	rcall	.-1882   	; 0x444 <Endpoint_WaitUntilReady>
 b9e:	b8 2e       	mov	r11, r24
 ba0:	88 23       	and	r24, r24
 ba2:	b1 f5       	brne	.+108    	; 0xc10 <Endpoint_Read_Stream_LE+0x8e>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 ba4:	81 2f       	mov	r24, r17
 ba6:	90 2f       	mov	r25, r16
 ba8:	9c 01       	movw	r18, r24
 baa:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
 bac:	c1 14       	cp	r12, r1
 bae:	d1 04       	cpc	r13, r1
 bb0:	39 f0       	breq	.+14     	; 0xbc0 <Endpoint_Read_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
 bb2:	f6 01       	movw	r30, r12
 bb4:	80 81       	ld	r24, Z
 bb6:	91 81       	ldd	r25, Z+1	; 0x01
 bb8:	e8 1a       	sub	r14, r24
 bba:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 bbc:	c8 0f       	add	r28, r24
 bbe:	d9 1f       	adc	r29, r25
 bc0:	00 e0       	ldi	r16, 0x00	; 0
 bc2:	10 e0       	ldi	r17, 0x00	; 0
 bc4:	22 c0       	rjmp	.+68     	; 0xc0a <Endpoint_Read_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 bc6:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 bca:	85 fd       	sbrc	r24, 5
 bcc:	16 c0       	rjmp	.+44     	; 0xbfa <Endpoint_Read_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 bce:	80 91 e8 00 	lds	r24, 0x00E8
 bd2:	8b 77       	andi	r24, 0x7B	; 123
 bd4:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
 bd8:	c1 14       	cp	r12, r1
 bda:	d1 04       	cpc	r13, r1
 bdc:	49 f0       	breq	.+18     	; 0xbf0 <Endpoint_Read_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
 bde:	f6 01       	movw	r30, r12
 be0:	80 81       	ld	r24, Z
 be2:	91 81       	ldd	r25, Z+1	; 0x01
 be4:	80 0f       	add	r24, r16
 be6:	91 1f       	adc	r25, r17
 be8:	91 83       	std	Z+1, r25	; 0x01
 bea:	80 83       	st	Z, r24
 bec:	85 e0       	ldi	r24, 0x05	; 5
 bee:	11 c0       	rjmp	.+34     	; 0xc12 <Endpoint_Read_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 bf0:	6c d0       	rcall	.+216    	; 0xcca <USB_USBTask>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 bf2:	28 dc       	rcall	.-1968   	; 0x444 <Endpoint_WaitUntilReady>
 bf4:	88 23       	and	r24, r24
 bf6:	49 f0       	breq	.+18     	; 0xc0a <Endpoint_Read_Stream_LE+0x88>
 bf8:	0c c0       	rjmp	.+24     	; 0xc12 <Endpoint_Read_Stream_LE+0x90>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 bfa:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 bfe:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 c00:	08 94       	sec
 c02:	e1 08       	sbc	r14, r1
 c04:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
 c06:	0f 5f       	subi	r16, 0xFF	; 255
 c08:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 c0a:	e1 14       	cp	r14, r1
 c0c:	f1 04       	cpc	r15, r1
 c0e:	d9 f6       	brne	.-74     	; 0xbc6 <Endpoint_Read_Stream_LE+0x44>
 c10:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 c12:	df 91       	pop	r29
 c14:	cf 91       	pop	r28
 c16:	1f 91       	pop	r17
 c18:	0f 91       	pop	r16
 c1a:	ff 90       	pop	r15
 c1c:	ef 90       	pop	r14
 c1e:	df 90       	pop	r13
 c20:	cf 90       	pop	r12
 c22:	bf 90       	pop	r11
 c24:	08 95       	ret

00000c26 <Endpoint_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 c26:	bf 92       	push	r11
 c28:	cf 92       	push	r12
 c2a:	df 92       	push	r13
 c2c:	ef 92       	push	r14
 c2e:	ff 92       	push	r15
 c30:	0f 93       	push	r16
 c32:	1f 93       	push	r17
 c34:	cf 93       	push	r28
 c36:	df 93       	push	r29
 c38:	18 2f       	mov	r17, r24
 c3a:	09 2f       	mov	r16, r25
 c3c:	7b 01       	movw	r14, r22
 c3e:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 c40:	01 dc       	rcall	.-2046   	; 0x444 <Endpoint_WaitUntilReady>
 c42:	b8 2e       	mov	r11, r24
 c44:	88 23       	and	r24, r24
 c46:	b1 f5       	brne	.+108    	; 0xcb4 <Endpoint_Write_Stream_LE+0x8e>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 c48:	81 2f       	mov	r24, r17
 c4a:	90 2f       	mov	r25, r16
 c4c:	9c 01       	movw	r18, r24
 c4e:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
 c50:	c1 14       	cp	r12, r1
 c52:	d1 04       	cpc	r13, r1
 c54:	39 f0       	breq	.+14     	; 0xc64 <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
 c56:	f6 01       	movw	r30, r12
 c58:	80 81       	ld	r24, Z
 c5a:	91 81       	ldd	r25, Z+1	; 0x01
 c5c:	e8 1a       	sub	r14, r24
 c5e:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 c60:	c8 0f       	add	r28, r24
 c62:	d9 1f       	adc	r29, r25
 c64:	00 e0       	ldi	r16, 0x00	; 0
 c66:	10 e0       	ldi	r17, 0x00	; 0
 c68:	22 c0       	rjmp	.+68     	; 0xcae <Endpoint_Write_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 c6a:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 c6e:	85 fd       	sbrc	r24, 5
 c70:	16 c0       	rjmp	.+44     	; 0xc9e <Endpoint_Write_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c72:	80 91 e8 00 	lds	r24, 0x00E8
 c76:	8e 77       	andi	r24, 0x7E	; 126
 c78:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
 c7c:	c1 14       	cp	r12, r1
 c7e:	d1 04       	cpc	r13, r1
 c80:	49 f0       	breq	.+18     	; 0xc94 <Endpoint_Write_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
 c82:	f6 01       	movw	r30, r12
 c84:	80 81       	ld	r24, Z
 c86:	91 81       	ldd	r25, Z+1	; 0x01
 c88:	80 0f       	add	r24, r16
 c8a:	91 1f       	adc	r25, r17
 c8c:	91 83       	std	Z+1, r25	; 0x01
 c8e:	80 83       	st	Z, r24
 c90:	85 e0       	ldi	r24, 0x05	; 5
 c92:	11 c0       	rjmp	.+34     	; 0xcb6 <Endpoint_Write_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 c94:	1a d0       	rcall	.+52     	; 0xcca <USB_USBTask>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 c96:	d6 db       	rcall	.-2132   	; 0x444 <Endpoint_WaitUntilReady>
 c98:	88 23       	and	r24, r24
 c9a:	49 f0       	breq	.+18     	; 0xcae <Endpoint_Write_Stream_LE+0x88>
 c9c:	0c c0       	rjmp	.+24     	; 0xcb6 <Endpoint_Write_Stream_LE+0x90>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 c9e:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 ca0:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 ca4:	08 94       	sec
 ca6:	e1 08       	sbc	r14, r1
 ca8:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
 caa:	0f 5f       	subi	r16, 0xFF	; 255
 cac:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 cae:	e1 14       	cp	r14, r1
 cb0:	f1 04       	cpc	r15, r1
 cb2:	d9 f6       	brne	.-74     	; 0xc6a <Endpoint_Write_Stream_LE+0x44>
 cb4:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 cb6:	df 91       	pop	r29
 cb8:	cf 91       	pop	r28
 cba:	1f 91       	pop	r17
 cbc:	0f 91       	pop	r16
 cbe:	ff 90       	pop	r15
 cc0:	ef 90       	pop	r14
 cc2:	df 90       	pop	r13
 cc4:	cf 90       	pop	r12
 cc6:	bf 90       	pop	r11
 cc8:	08 95       	ret

00000cca <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 cca:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 ccc:	80 91 0f 01 	lds	r24, 0x010F
 cd0:	88 23       	and	r24, r24
 cd2:	61 f0       	breq	.+24     	; 0xcec <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 cd4:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 cd8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 cdc:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 ce0:	83 ff       	sbrs	r24, 3
 ce2:	01 c0       	rjmp	.+2      	; 0xce6 <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
 ce4:	0a dd       	rcall	.-1516   	; 0x6fa <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 ce6:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 ce8:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 cec:	1f 91       	pop	r17
 cee:	08 95       	ret

00000cf0 <MIDI_Device_ReceiveEventPacket>:
	return ENDPOINT_READYWAIT_NoError;
}

bool MIDI_Device_ReceiveEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    MIDI_EventPacket_t* const Event)
{
 cf0:	fc 01       	movw	r30, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
 cf2:	80 91 0f 01 	lds	r24, 0x010F
 cf6:	84 30       	cpi	r24, 0x04	; 4
 cf8:	c1 f4       	brne	.+48     	; 0xd2a <MIDI_Device_ReceiveEventPacket+0x3a>
	  return false;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataOUTEndpointNumber);
 cfa:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 cfc:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 d00:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
 d04:	85 ff       	sbrs	r24, 5
 d06:	11 c0       	rjmp	.+34     	; 0xd2a <MIDI_Device_ReceiveEventPacket+0x3a>
	  return false;

	Endpoint_Read_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL);
 d08:	cb 01       	movw	r24, r22
 d0a:	64 e0       	ldi	r22, 0x04	; 4
 d0c:	70 e0       	ldi	r23, 0x00	; 0
 d0e:	40 e0       	ldi	r20, 0x00	; 0
 d10:	50 e0       	ldi	r21, 0x00	; 0
 d12:	37 df       	rcall	.-402    	; 0xb82 <Endpoint_Read_Stream_LE>
 d14:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
 d18:	85 fd       	sbrc	r24, 5
 d1a:	05 c0       	rjmp	.+10     	; 0xd26 <MIDI_Device_ReceiveEventPacket+0x36>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 d1c:	80 91 e8 00 	lds	r24, 0x00E8
 d20:	8b 77       	andi	r24, 0x7B	; 123
 d22:	80 93 e8 00 	sts	0x00E8, r24
 d26:	81 e0       	ldi	r24, 0x01	; 1
 d28:	08 95       	ret
 d2a:	80 e0       	ldi	r24, 0x00	; 0
	  Endpoint_ClearOUT();

	return true;
}
 d2c:	08 95       	ret

00000d2e <MIDI_Device_Flush>:

	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t MIDI_Device_Flush(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
 d2e:	fc 01       	movw	r30, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
 d30:	80 91 0f 01 	lds	r24, 0x010F
 d34:	84 30       	cpi	r24, 0x04	; 4
 d36:	11 f0       	breq	.+4      	; 0xd3c <MIDI_Device_Flush+0xe>
 d38:	82 e0       	ldi	r24, 0x02	; 2
 d3a:	08 95       	ret
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpointNumber);
 d3c:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 d3e:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 d42:	80 91 f2 00 	lds	r24, 0x00F2
 d46:	90 91 f3 00 	lds	r25, 0x00F3

	if (Endpoint_BytesInEndpoint())
 d4a:	89 2b       	or	r24, r25
 d4c:	11 f4       	brne	.+4      	; 0xd52 <MIDI_Device_Flush+0x24>
 d4e:	80 e0       	ldi	r24, 0x00	; 0
 d50:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d52:	80 91 e8 00 	lds	r24, 0x00E8
 d56:	8e 77       	andi	r24, 0x7E	; 126
 d58:	80 93 e8 00 	sts	0x00E8, r24
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	return ENDPOINT_READYWAIT_NoError;
}
 d5c:	73 cb       	rjmp	.-2330   	; 0x444 <Endpoint_WaitUntilReady>

00000d5e <MIDI_Device_USBTask>:

	return true;
}

void MIDI_Device_USBTask(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
 d5e:	9c 01       	movw	r18, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
 d60:	80 91 0f 01 	lds	r24, 0x010F
 d64:	84 30       	cpi	r24, 0x04	; 4
 d66:	11 f4       	brne	.+4      	; 0xd6c <MIDI_Device_USBTask+0xe>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	MIDI_Device_Flush(MIDIInterfaceInfo);
 d68:	c9 01       	movw	r24, r18
 d6a:	e1 cf       	rjmp	.-62     	; 0xd2e <MIDI_Device_Flush>
 d6c:	08 95       	ret

00000d6e <MIDI_Device_SendEventPacket>:
	#endif
}

uint8_t MIDI_Device_SendEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    const MIDI_EventPacket_t* const Event)
{
 d6e:	fc 01       	movw	r30, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
 d70:	80 91 0f 01 	lds	r24, 0x010F
 d74:	84 30       	cpi	r24, 0x04	; 4
 d76:	11 f0       	breq	.+4      	; 0xd7c <MIDI_Device_SendEventPacket+0xe>
 d78:	92 e0       	ldi	r25, 0x02	; 2
 d7a:	15 c0       	rjmp	.+42     	; 0xda6 <MIDI_Device_SendEventPacket+0x38>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpointNumber);
 d7c:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 d7e:	80 93 e9 00 	sts	0x00E9, r24

	if ((ErrorCode = Endpoint_Write_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL)) != ENDPOINT_RWSTREAM_NoError)
 d82:	cb 01       	movw	r24, r22
 d84:	64 e0       	ldi	r22, 0x04	; 4
 d86:	70 e0       	ldi	r23, 0x00	; 0
 d88:	40 e0       	ldi	r20, 0x00	; 0
 d8a:	50 e0       	ldi	r21, 0x00	; 0
 d8c:	4c df       	rcall	.-360    	; 0xc26 <Endpoint_Write_Stream_LE>
 d8e:	98 2f       	mov	r25, r24
 d90:	88 23       	and	r24, r24
 d92:	49 f4       	brne	.+18     	; 0xda6 <MIDI_Device_SendEventPacket+0x38>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 d94:	80 91 e8 00 	lds	r24, 0x00E8
	  return ErrorCode;

	if (!(Endpoint_IsReadWriteAllowed()))
 d98:	85 fd       	sbrc	r24, 5
 d9a:	05 c0       	rjmp	.+10     	; 0xda6 <MIDI_Device_SendEventPacket+0x38>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d9c:	80 91 e8 00 	lds	r24, 0x00E8
 da0:	8e 77       	andi	r24, 0x7E	; 126
 da2:	80 93 e8 00 	sts	0x00E8, r24
	  Endpoint_ClearIN();

	return ENDPOINT_RWSTREAM_NoError;
}
 da6:	89 2f       	mov	r24, r25
 da8:	08 95       	ret

00000daa <MIDI_Device_ConfigureEndpoints>:
#define  __INCLUDE_FROM_MIDI_DRIVER
#define  __INCLUDE_FROM_MIDI_DEVICE_C
#include "MIDI.h"

bool MIDI_Device_ConfigureEndpoints(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
 daa:	1f 93       	push	r17
 dac:	cf 93       	push	r28
 dae:	df 93       	push	r29
 db0:	ec 01       	movw	r28, r24
 db2:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == MIDIInterfaceInfo->Config.DataINEndpointNumber)
 db4:	89 81       	ldd	r24, Y+1	; 0x01
 db6:	18 17       	cp	r17, r24
 db8:	29 f4       	brne	.+10     	; 0xdc4 <MIDI_Device_ConfigureEndpoints+0x1a>
		{
			Size         = MIDIInterfaceInfo->Config.DataINEndpointSize;
 dba:	ea 81       	ldd	r30, Y+2	; 0x02
 dbc:	fb 81       	ldd	r31, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MIDIInterfaceInfo->Config.DataINEndpointDoubleBank;
 dbe:	8c 81       	ldd	r24, Y+4	; 0x04
 dc0:	61 e0       	ldi	r22, 0x01	; 1
 dc2:	07 c0       	rjmp	.+14     	; 0xdd2 <MIDI_Device_ConfigureEndpoints+0x28>
		}
		else if (EndpointNum == MIDIInterfaceInfo->Config.DataOUTEndpointNumber)
 dc4:	8d 81       	ldd	r24, Y+5	; 0x05
 dc6:	18 17       	cp	r17, r24
 dc8:	e1 f4       	brne	.+56     	; 0xe02 <MIDI_Device_ConfigureEndpoints+0x58>
		{
			Size         = MIDIInterfaceInfo->Config.DataOUTEndpointSize;
 dca:	ee 81       	ldd	r30, Y+6	; 0x06
 dcc:	ff 81       	ldd	r31, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MIDIInterfaceInfo->Config.DataOUTEndpointDoubleBank;
 dce:	88 85       	ldd	r24, Y+8	; 0x08
 dd0:	60 e0       	ldi	r22, 0x00	; 0
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
 dd2:	88 23       	and	r24, r24
 dd4:	11 f4       	brne	.+4      	; 0xdda <MIDI_Device_ConfigureEndpoints+0x30>
 dd6:	40 e0       	ldi	r20, 0x00	; 0
 dd8:	01 c0       	rjmp	.+2      	; 0xddc <MIDI_Device_ConfigureEndpoints+0x32>
 dda:	44 e0       	ldi	r20, 0x04	; 4
 ddc:	20 e0       	ldi	r18, 0x00	; 0
 dde:	88 e0       	ldi	r24, 0x08	; 8
 de0:	90 e0       	ldi	r25, 0x00	; 0
 de2:	03 c0       	rjmp	.+6      	; 0xdea <MIDI_Device_ConfigureEndpoints+0x40>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
 de4:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
 de6:	88 0f       	add	r24, r24
 de8:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
 dea:	8e 17       	cp	r24, r30
 dec:	9f 07       	cpc	r25, r31
 dee:	d0 f3       	brcs	.-12     	; 0xde4 <MIDI_Device_ConfigureEndpoints+0x3a>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
 df0:	60 68       	ori	r22, 0x80	; 128
 df2:	42 60       	ori	r20, 0x02	; 2
 df4:	22 95       	swap	r18
 df6:	20 7f       	andi	r18, 0xF0	; 240
 df8:	42 2b       	or	r20, r18
 dfa:	81 2f       	mov	r24, r17
 dfc:	cd da       	rcall	.-2662   	; 0x398 <Endpoint_ConfigureEndpoint_Prv>
 dfe:	88 23       	and	r24, r24
 e00:	21 f0       	breq	.+8      	; 0xe0a <MIDI_Device_ConfigureEndpoints+0x60>

bool MIDI_Device_ConfigureEndpoints(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
 e02:	1f 5f       	subi	r17, 0xFF	; 255
 e04:	17 30       	cpi	r17, 0x07	; 7
 e06:	b1 f6       	brne	.-84     	; 0xdb4 <MIDI_Device_ConfigureEndpoints+0xa>
 e08:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
 e0a:	df 91       	pop	r29
 e0c:	cf 91       	pop	r28
 e0e:	1f 91       	pop	r17
 e10:	08 95       	ret

00000e12 <_exit>:
 e12:	f8 94       	cli

00000e14 <__stop_program>:
 e14:	ff cf       	rjmp	.-2      	; 0xe14 <__stop_program>
