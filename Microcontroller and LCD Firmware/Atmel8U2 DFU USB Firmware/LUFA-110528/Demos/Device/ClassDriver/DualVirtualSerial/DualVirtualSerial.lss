
DualVirtualSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  00000f52  00000fe6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080017e  0080017e  00001064  2**0
                  ALLOC
  3 .debug_aranges 00000468  00000000  00000000  00001064  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000c5e  00000000  00000000  000014cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00007c7a  00000000  00000000  0000212a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001f55  00000000  00000000  00009da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00006026  00000000  00000000  0000bcf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000690  00000000  00000000  00011d20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003293  00000000  00000000  000123b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003418  00000000  00000000  00015643  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000558  00000000  00000000  00018a5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
   0:	b9 c0       	rjmp	.+370    	; 0x174 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   2:	00 00       	nop
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
   4:	d4 c0       	rjmp	.+424    	; 0x1ae <__bad_interrupt>
	}
	else
	{
		return 0;
	}
}
   6:	00 00       	nop
   8:	d2 c0       	rjmp	.+420    	; 0x1ae <__bad_interrupt>
   a:	00 00       	nop
   c:	d0 c0       	rjmp	.+416    	; 0x1ae <__bad_interrupt>
   e:	00 00       	nop
  10:	ce c0       	rjmp	.+412    	; 0x1ae <__bad_interrupt>
  12:	00 00       	nop
  14:	cc c0       	rjmp	.+408    	; 0x1ae <__bad_interrupt>
  16:	00 00       	nop
  18:	ca c0       	rjmp	.+404    	; 0x1ae <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c8 c0       	rjmp	.+400    	; 0x1ae <__bad_interrupt>
  1e:	00 00       	nop
  20:	c6 c0       	rjmp	.+396    	; 0x1ae <__bad_interrupt>
  22:	00 00       	nop
  24:	c4 c0       	rjmp	.+392    	; 0x1ae <__bad_interrupt>
  26:	00 00       	nop
  28:	75 c2       	rjmp	.+1258   	; 0x514 <__vector_10>
  2a:	00 00       	nop
  2c:	c0 c0       	rjmp	.+384    	; 0x1ae <__bad_interrupt>
  2e:	00 00       	nop
  30:	be c0       	rjmp	.+380    	; 0x1ae <__bad_interrupt>
  32:	00 00       	nop
  34:	bc c0       	rjmp	.+376    	; 0x1ae <__bad_interrupt>
  36:	00 00       	nop
  38:	ba c0       	rjmp	.+372    	; 0x1ae <__bad_interrupt>
  3a:	00 00       	nop
  3c:	b8 c0       	rjmp	.+368    	; 0x1ae <__bad_interrupt>
  3e:	00 00       	nop
  40:	b6 c0       	rjmp	.+364    	; 0x1ae <__bad_interrupt>
  42:	00 00       	nop
  44:	b4 c0       	rjmp	.+360    	; 0x1ae <__bad_interrupt>
  46:	00 00       	nop
  48:	b2 c0       	rjmp	.+356    	; 0x1ae <__bad_interrupt>
  4a:	00 00       	nop
  4c:	b0 c0       	rjmp	.+352    	; 0x1ae <__bad_interrupt>
  4e:	00 00       	nop
  50:	ae c0       	rjmp	.+348    	; 0x1ae <__bad_interrupt>
  52:	00 00       	nop
  54:	ac c0       	rjmp	.+344    	; 0x1ae <__bad_interrupt>
  56:	00 00       	nop
  58:	aa c0       	rjmp	.+340    	; 0x1ae <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a8 c0       	rjmp	.+336    	; 0x1ae <__bad_interrupt>
  5e:	00 00       	nop
  60:	a6 c0       	rjmp	.+332    	; 0x1ae <__bad_interrupt>
  62:	00 00       	nop
  64:	a4 c0       	rjmp	.+328    	; 0x1ae <__bad_interrupt>
  66:	00 00       	nop
  68:	a2 c0       	rjmp	.+324    	; 0x1ae <__bad_interrupt>
  6a:	00 00       	nop
  6c:	a0 c0       	rjmp	.+320    	; 0x1ae <__bad_interrupt>
  6e:	00 00       	nop
  70:	9e c0       	rjmp	.+316    	; 0x1ae <__bad_interrupt>
  72:	00 00       	nop
  74:	9c c0       	rjmp	.+312    	; 0x1ae <__bad_interrupt>
  76:	00 00       	nop
  78:	9a c0       	rjmp	.+308    	; 0x1ae <__bad_interrupt>
  7a:	00 00       	nop
  7c:	98 c0       	rjmp	.+304    	; 0x1ae <__bad_interrupt>
  7e:	00 00       	nop
  80:	96 c0       	rjmp	.+300    	; 0x1ae <__bad_interrupt>
  82:	00 00       	nop
  84:	94 c0       	rjmp	.+296    	; 0x1ae <__bad_interrupt>
  86:	00 00       	nop
  88:	92 c0       	rjmp	.+292    	; 0x1ae <__bad_interrupt>
  8a:	00 00       	nop
  8c:	90 c0       	rjmp	.+288    	; 0x1ae <__bad_interrupt>
  8e:	00 00       	nop
  90:	8e c0       	rjmp	.+284    	; 0x1ae <__bad_interrupt>
  92:	00 00       	nop
  94:	8c c0       	rjmp	.+280    	; 0x1ae <__bad_interrupt>
  96:	00 00       	nop

00000098 <DeviceDescriptor>:
  98:	12 01 10 01 ef 02 01 08 eb 03 4e 20 01 00 01 02     ..........N ....
  a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
  aa:	09 02 83 00 04 01 00 c0 32 08 0b 00 02 02 02 01     ........2.......
  ba:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
  ca:	24 02 06 05 24 06 00 01 07 05 83 03 08 00 ff 09     $...$...........
  da:	04 01 00 02 0a 00 00 00 07 05 02 02 10 00 01 07     ................
  ea:	05 81 02 10 00 01 08 0b 02 02 02 02 01 00 09 04     ................
  fa:	02 00 01 02 02 01 00 05 24 00 10 01 04 24 02 06     ........$....$..
 10a:	05 24 06 02 03 07 05 86 03 08 00 ff 09 04 03 00     .$..............
 11a:	02 0a 00 00 00 07 05 05 02 10 00 01 07 05 84 02     ................
 12a:	10 00 01                                            ...

0000012d <LanguageString>:
 12d:	04 03 09 04                                         ....

00000131 <ManufacturerString>:
 131:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
 141:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

0000014b <ProductString>:
 14b:	1c 03 4c 00 55 00 46 00 41 00 20 00 44 00 75 00     ..L.U.F.A. .D.u.
 15b:	61 00 6c 00 20 00 43 00 44 00 43 00 20 00 44 00     a.l. .C.D.C. .D.
 16b:	65 00 6d 00 6f 00 00 00 00                          e.m.o....

00000174 <__ctors_end>:
 174:	11 24       	eor	r1, r1
 176:	1f be       	out	0x3f, r1	; 63
 178:	cf ef       	ldi	r28, 0xFF	; 255
 17a:	d0 e2       	ldi	r29, 0x20	; 32
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	cd bf       	out	0x3d, r28	; 61

00000180 <__do_copy_data>:
 180:	11 e0       	ldi	r17, 0x01	; 1
 182:	a0 e0       	ldi	r26, 0x00	; 0
 184:	b1 e0       	ldi	r27, 0x01	; 1
 186:	e2 e5       	ldi	r30, 0x52	; 82
 188:	ff e0       	ldi	r31, 0x0F	; 15
 18a:	00 e0       	ldi	r16, 0x00	; 0
 18c:	0b bf       	out	0x3b, r16	; 59
 18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x14>
 190:	07 90       	elpm	r0, Z+
 192:	0d 92       	st	X+, r0
 194:	ae 37       	cpi	r26, 0x7E	; 126
 196:	b1 07       	cpc	r27, r17
 198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0x10>

0000019a <__do_clear_bss>:
 19a:	11 e0       	ldi	r17, 0x01	; 1
 19c:	ae e7       	ldi	r26, 0x7E	; 126
 19e:	b1 e0       	ldi	r27, 0x01	; 1
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
 1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
 1a4:	ac 38       	cpi	r26, 0x8C	; 140
 1a6:	b1 07       	cpc	r27, r17
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
 1aa:	84 d0       	rcall	.+264    	; 0x2b4 <main>
 1ac:	d0 c6       	rjmp	.+3488   	; 0xf4e <_exit>

000001ae <__bad_interrupt>:
 1ae:	28 cf       	rjmp	.-432    	; 0x0 <__vectors>

000001b0 <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 1b0:	8b b1       	in	r24, 0x0b	; 11
 1b2:	8f 70       	andi	r24, 0x0F	; 15
 1b4:	80 6a       	ori	r24, 0xA0	; 160
 1b6:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
 1b8:	08 95       	ret

000001ba <EVENT_USB_Device_Disconnect>:
 1ba:	8b b1       	in	r24, 0x0b	; 11
 1bc:	8f 70       	andi	r24, 0x0F	; 15
 1be:	80 61       	ori	r24, 0x10	; 16
 1c0:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
 1c2:	08 95       	ret

000001c4 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial1_CDC_Interface);
 1c4:	82 e5       	ldi	r24, 0x52	; 82
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	55 d6       	rcall	.+3242   	; 0xe74 <CDC_Device_ProcessControlRequest>
	CDC_Device_ProcessControlRequest(&VirtualSerial2_CDC_Interface);
 1ca:	88 e6       	ldi	r24, 0x68	; 104
 1cc:	91 e0       	ldi	r25, 0x01	; 1
}
 1ce:	52 c6       	rjmp	.+3236   	; 0xe74 <CDC_Device_ProcessControlRequest>

000001d0 <EVENT_USB_Device_ConfigurationChanged>:
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
 1d0:	0f 93       	push	r16
 1d2:	1f 93       	push	r17
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial1_CDC_Interface);
 1d4:	82 e5       	ldi	r24, 0x52	; 82
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	04 d6       	rcall	.+3080   	; 0xde2 <CDC_Device_ConfigureEndpoints>
 1da:	08 2f       	mov	r16, r24
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial2_CDC_Interface);
 1dc:	88 e6       	ldi	r24, 0x68	; 104
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	00 d6       	rcall	.+3072   	; 0xde2 <CDC_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 1e2:	10 e0       	ldi	r17, 0x00	; 0
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	08 23       	and	r16, r24
 1e8:	19 23       	and	r17, r25
 1ea:	00 ff       	sbrs	r16, 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <EVENT_USB_Device_ConfigurationChanged+0x22>
 1ee:	90 e6       	ldi	r25, 0x60	; 96
 1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <EVENT_USB_Device_ConfigurationChanged+0x24>
 1f2:	90 e9       	ldi	r25, 0x90	; 144
 1f4:	8b b1       	in	r24, 0x0b	; 11
 1f6:	8f 70       	andi	r24, 0x0F	; 15
 1f8:	98 2b       	or	r25, r24
 1fa:	9b b9       	out	0x0b, r25	; 11
}
 1fc:	1f 91       	pop	r17
 1fe:	0f 91       	pop	r16
 200:	08 95       	ret

00000202 <CheckJoystickMovement>:
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
 202:	23 b1       	in	r18, 0x03	; 3
 204:	8c b1       	in	r24, 0x0c	; 12
 206:	80 95       	com	r24
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	80 73       	andi	r24, 0x30	; 48
 20c:	90 70       	andi	r25, 0x00	; 0
 20e:	95 95       	asr	r25
 210:	87 95       	ror	r24
 212:	20 95       	com	r18
 214:	20 7e       	andi	r18, 0xE0	; 224
 216:	28 2b       	or	r18, r24
{
	uint8_t     JoyStatus_LCL = Joystick_GetStatus();
	char*       ReportString  = NULL;
	static bool ActionSent = false;

	if (JoyStatus_LCL & JOY_UP)
 218:	27 fd       	sbrc	r18, 7
 21a:	17 c0       	rjmp	.+46     	; 0x24a <CheckJoystickMovement+0x48>
	  ReportString = "Joystick Up\r\n";
	else if (JoyStatus_LCL & JOY_DOWN)
 21c:	24 ff       	sbrs	r18, 4
 21e:	03 c0       	rjmp	.+6      	; 0x226 <CheckJoystickMovement+0x24>
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	71 e0       	ldi	r23, 0x01	; 1
 224:	14 c0       	rjmp	.+40     	; 0x24e <CheckJoystickMovement+0x4c>
	  ReportString = "Joystick Down\r\n";
	else if (JoyStatus_LCL & JOY_LEFT)
 226:	26 ff       	sbrs	r18, 6
 228:	03 c0       	rjmp	.+6      	; 0x230 <CheckJoystickMovement+0x2e>
 22a:	60 e1       	ldi	r22, 0x10	; 16
 22c:	71 e0       	ldi	r23, 0x01	; 1
 22e:	0f c0       	rjmp	.+30     	; 0x24e <CheckJoystickMovement+0x4c>
	  ReportString = "Joystick Left\r\n";
	else if (JoyStatus_LCL & JOY_RIGHT)
 230:	23 ff       	sbrs	r18, 3
 232:	03 c0       	rjmp	.+6      	; 0x23a <CheckJoystickMovement+0x38>
 234:	60 e2       	ldi	r22, 0x20	; 32
 236:	71 e0       	ldi	r23, 0x01	; 1
 238:	0a c0       	rjmp	.+20     	; 0x24e <CheckJoystickMovement+0x4c>
	  ReportString = "Joystick Right\r\n";
	else if (JoyStatus_LCL & JOY_PRESS)
 23a:	25 ff       	sbrs	r18, 5
 23c:	03 c0       	rjmp	.+6      	; 0x244 <CheckJoystickMovement+0x42>
 23e:	61 e3       	ldi	r22, 0x31	; 49
 240:	71 e0       	ldi	r23, 0x01	; 1
 242:	05 c0       	rjmp	.+10     	; 0x24e <CheckJoystickMovement+0x4c>
	  ReportString = "Joystick Pressed\r\n";
	else
	  ActionSent = false;
 244:	10 92 7e 01 	sts	0x017E, r1
 248:	08 95       	ret
 24a:	64 e4       	ldi	r22, 0x44	; 68
 24c:	71 e0       	ldi	r23, 0x01	; 1

	if ((ReportString != NULL) && (ActionSent == false))
 24e:	80 91 7e 01 	lds	r24, 0x017E
 252:	88 23       	and	r24, r24
 254:	31 f4       	brne	.+12     	; 0x262 <CheckJoystickMovement+0x60>
	{
		ActionSent = true;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	80 93 7e 01 	sts	0x017E, r24

		CDC_Device_SendString(&VirtualSerial1_CDC_Interface, ReportString);
 25c:	82 e5       	ldi	r24, 0x52	; 82
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	a2 c5       	rjmp	.+2884   	; 0xda6 <CDC_Device_SendString>
 262:	08 95       	ret

00000264 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 264:	84 b7       	in	r24, 0x34	; 52
 266:	87 7f       	andi	r24, 0xF7	; 247
 268:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 26a:	88 e1       	ldi	r24, 0x18	; 24
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	f8 94       	cli
 270:	80 93 60 00 	sts	0x0060, r24
 274:	10 92 60 00 	sts	0x0060, r1
 278:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	20 e8       	ldi	r18, 0x80	; 128
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	f8 94       	cli
 284:	20 93 61 00 	sts	0x0061, r18
 288:	80 93 61 00 	sts	0x0061, r24
 28c:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
 28e:	84 b1       	in	r24, 0x04	; 4
 290:	8f 71       	andi	r24, 0x1F	; 31
 292:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
 294:	8d b1       	in	r24, 0x0d	; 13
 296:	8f 7c       	andi	r24, 0xCF	; 207
 298:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
 29a:	85 b1       	in	r24, 0x05	; 5
 29c:	80 6e       	ori	r24, 0xE0	; 224
 29e:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
 2a0:	8e b1       	in	r24, 0x0e	; 14
 2a2:	80 63       	ori	r24, 0x30	; 48
 2a4:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 2a6:	8a b1       	in	r24, 0x0a	; 10
 2a8:	80 6f       	ori	r24, 0xF0	; 240
 2aa:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 2ac:	8b b1       	in	r24, 0x0b	; 11
 2ae:	8f 70       	andi	r24, 0x0F	; 15
 2b0:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	USB_Init();
}
 2b2:	1a c1       	rjmp	.+564    	; 0x4e8 <USB_Init>

000002b4 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
 2b4:	d7 df       	rcall	.-82     	; 0x264 <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 2b6:	8b b1       	in	r24, 0x0b	; 11
 2b8:	8f 70       	andi	r24, 0x0F	; 15
 2ba:	80 61       	ori	r24, 0x10	; 16
 2bc:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
 2be:	78 94       	sei

	for (;;)
	{
		CheckJoystickMovement();
 2c0:	a0 df       	rcall	.-192    	; 0x202 <CheckJoystickMovement>

		/* Discard all received data on the first CDC interface */
		CDC_Device_ReceiveByte(&VirtualSerial1_CDC_Interface);
 2c2:	82 e5       	ldi	r24, 0x52	; 82
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	da d4       	rcall	.+2484   	; 0xc7c <CDC_Device_ReceiveByte>

		/* Echo all received data on the second CDC interface */
		int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial2_CDC_Interface);
 2c8:	88 e6       	ldi	r24, 0x68	; 104
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	d7 d4       	rcall	.+2478   	; 0xc7c <CDC_Device_ReceiveByte>
 2ce:	bc 01       	movw	r22, r24
		if (!(ReceivedByte < 0))
 2d0:	97 fd       	sbrc	r25, 7
 2d2:	03 c0       	rjmp	.+6      	; 0x2da <main+0x26>
		  CDC_Device_SendByte(&VirtualSerial2_CDC_Interface, (uint8_t)ReceivedByte);
 2d4:	88 e6       	ldi	r24, 0x68	; 104
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	41 d5       	rcall	.+2690   	; 0xd5c <CDC_Device_SendByte>

		CDC_Device_USBTask(&VirtualSerial1_CDC_Interface);
 2da:	82 e5       	ldi	r24, 0x52	; 82
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	2e d5       	rcall	.+2652   	; 0xd3c <CDC_Device_USBTask>
		CDC_Device_USBTask(&VirtualSerial2_CDC_Interface);
 2e0:	88 e6       	ldi	r24, 0x68	; 104
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	2b d5       	rcall	.+2646   	; 0xd3c <CDC_Device_USBTask>
		USB_USBTask();
 2e6:	b7 d4       	rcall	.+2414   	; 0xc56 <USB_USBTask>
 2e8:	eb cf       	rjmp	.-42     	; 0x2c0 <main+0xc>

000002ea <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
 2ea:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 2ec:	92 30       	cpi	r25, 0x02	; 2
 2ee:	49 f0       	breq	.+18     	; 0x302 <CALLBACK_USB_GetDescriptor+0x18>
 2f0:	93 30       	cpi	r25, 0x03	; 3
 2f2:	61 f0       	breq	.+24     	; 0x30c <CALLBACK_USB_GetDescriptor+0x22>
 2f4:	91 30       	cpi	r25, 0x01	; 1
 2f6:	f9 f4       	brne	.+62     	; 0x336 <CALLBACK_USB_GetDescriptor+0x4c>
 2f8:	e8 e9       	ldi	r30, 0x98	; 152
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	22 e1       	ldi	r18, 0x12	; 18
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	1e c0       	rjmp	.+60     	; 0x33e <CALLBACK_USB_GetDescriptor+0x54>
 302:	ea ea       	ldi	r30, 0xAA	; 170
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	23 e8       	ldi	r18, 0x83	; 131
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	19 c0       	rjmp	.+50     	; 0x33e <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 30c:	81 30       	cpi	r24, 0x01	; 1
 30e:	49 f0       	breq	.+18     	; 0x322 <CALLBACK_USB_GetDescriptor+0x38>
 310:	81 30       	cpi	r24, 0x01	; 1
 312:	18 f0       	brcs	.+6      	; 0x31a <CALLBACK_USB_GetDescriptor+0x30>
 314:	82 30       	cpi	r24, 0x02	; 2
 316:	79 f4       	brne	.+30     	; 0x336 <CALLBACK_USB_GetDescriptor+0x4c>
 318:	08 c0       	rjmp	.+16     	; 0x32a <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 31a:	ed e2       	ldi	r30, 0x2D	; 45
 31c:	f1 e0       	ldi	r31, 0x01	; 1
 31e:	84 91       	lpm	r24, Z+
 320:	07 c0       	rjmp	.+14     	; 0x330 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 322:	e1 e3       	ldi	r30, 0x31	; 49
 324:	f1 e0       	ldi	r31, 0x01	; 1
 326:	84 91       	lpm	r24, Z+
 328:	03 c0       	rjmp	.+6      	; 0x330 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 32a:	eb e4       	ldi	r30, 0x4B	; 75
 32c:	f1 e0       	ldi	r31, 0x01	; 1
 32e:	84 91       	lpm	r24, Z+
 330:	28 2f       	mov	r18, r24
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	04 c0       	rjmp	.+8      	; 0x33e <CALLBACK_USB_GetDescriptor+0x54>
 336:	e0 e0       	ldi	r30, 0x00	; 0
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	20 e0       	ldi	r18, 0x00	; 0
 33c:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 33e:	ed 93       	st	X+, r30
 340:	fc 93       	st	X, r31
	return Size;
}
 342:	c9 01       	movw	r24, r18
 344:	08 95       	ret

00000346 <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
 346:	38 2f       	mov	r19, r24
 348:	28 2f       	mov	r18, r24
 34a:	2c c0       	rjmp	.+88     	; 0x3a4 <Endpoint_ConfigureEndpoint_Prv+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 34c:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);
		
		if (EPNum == Number)
 350:	23 17       	cp	r18, r19
 352:	21 f4       	brne	.+8      	; 0x35c <Endpoint_ConfigureEndpoint_Prv+0x16>
 354:	76 2f       	mov	r23, r22
 356:	94 2f       	mov	r25, r20
 358:	50 e0       	ldi	r21, 0x00	; 0
 35a:	06 c0       	rjmp	.+12     	; 0x368 <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 35c:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 360:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
 364:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 368:	91 ff       	sbrs	r25, 1
 36a:	1b c0       	rjmp	.+54     	; 0x3a2 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 36c:	80 91 eb 00 	lds	r24, 0x00EB
 370:	8e 7f       	andi	r24, 0xFE	; 254
 372:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= (1 << ALLOC);
 376:	80 91 ed 00 	lds	r24, 0x00ED
 37a:	82 70       	andi	r24, 0x02	; 2
 37c:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 380:	80 91 eb 00 	lds	r24, 0x00EB
 384:	81 60       	ori	r24, 0x01	; 1
 386:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 38a:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 38e:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
 392:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 396:	80 91 ee 00 	lds	r24, 0x00EE
			
		if (!(Endpoint_IsConfigured()))
 39a:	87 fd       	sbrc	r24, 7
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <Endpoint_ConfigureEndpoint_Prv+0x5c>
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else	
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 3a2:	2f 5f       	subi	r18, 0xFF	; 255
 3a4:	27 30       	cpi	r18, 0x07	; 7
 3a6:	90 f2       	brcs	.-92     	; 0x34c <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 3a8:	30 93 e9 00 	sts	0x00E9, r19
 3ac:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 3ae:	08 95       	ret

000003b0 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 3b0:	80 91 84 01 	lds	r24, 0x0184
 3b4:	88 23       	and	r24, r24
 3b6:	9c f4       	brge	.+38     	; 0x3de <Endpoint_ClearStatusStage+0x2e>
 3b8:	04 c0       	rjmp	.+8      	; 0x3c2 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 3ba:	80 91 83 01 	lds	r24, 0x0183
 3be:	88 23       	and	r24, r24
 3c0:	b9 f0       	breq	.+46     	; 0x3f0 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 3c2:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 3c6:	82 ff       	sbrs	r24, 2
 3c8:	f8 cf       	rjmp	.-16     	; 0x3ba <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 3ca:	80 91 e8 00 	lds	r24, 0x00E8
 3ce:	8b 77       	andi	r24, 0x7B	; 123
 3d0:	80 93 e8 00 	sts	0x00E8, r24
 3d4:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 3d6:	80 91 83 01 	lds	r24, 0x0183
 3da:	88 23       	and	r24, r24
 3dc:	49 f0       	breq	.+18     	; 0x3f0 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 3de:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 3e2:	80 ff       	sbrs	r24, 0
 3e4:	f8 cf       	rjmp	.-16     	; 0x3d6 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 3e6:	80 91 e8 00 	lds	r24, 0x00E8
 3ea:	8e 77       	andi	r24, 0x7E	; 126
 3ec:	80 93 e8 00 	sts	0x00E8, r24
 3f0:	08 95       	ret

000003f2 <Endpoint_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 3f2:	40 91 e4 00 	lds	r20, 0x00E4
 3f6:	50 91 e5 00 	lds	r21, 0x00E5
 3fa:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
 3fc:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 400:	80 ff       	sbrs	r24, 0
 402:	05 c0       	rjmp	.+10     	; 0x40e <Endpoint_WaitUntilReady+0x1c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 404:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
 408:	80 ff       	sbrs	r24, 0
 40a:	05 c0       	rjmp	.+10     	; 0x416 <Endpoint_WaitUntilReady+0x24>
 40c:	22 c0       	rjmp	.+68     	; 0x452 <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 40e:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 412:	82 fd       	sbrc	r24, 2
 414:	1e c0       	rjmp	.+60     	; 0x452 <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 416:	80 91 83 01 	lds	r24, 0x0183

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 41a:	88 23       	and	r24, r24
 41c:	11 f4       	brne	.+4      	; 0x422 <Endpoint_WaitUntilReady+0x30>
 41e:	82 e0       	ldi	r24, 0x02	; 2
 420:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 422:	85 30       	cpi	r24, 0x05	; 5
 424:	11 f4       	brne	.+4      	; 0x42a <Endpoint_WaitUntilReady+0x38>
 426:	83 e0       	ldi	r24, 0x03	; 3
 428:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 42a:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 42e:	85 ff       	sbrs	r24, 5
 430:	02 c0       	rjmp	.+4      	; 0x436 <Endpoint_WaitUntilReady+0x44>
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	08 95       	ret
 436:	80 91 e4 00 	lds	r24, 0x00E4
 43a:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 43e:	84 17       	cp	r24, r20
 440:	95 07       	cpc	r25, r21
 442:	e1 f2       	breq	.-72     	; 0x3fc <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 444:	22 23       	and	r18, r18
 446:	11 f4       	brne	.+4      	; 0x44c <Endpoint_WaitUntilReady+0x5a>
 448:	84 e0       	ldi	r24, 0x04	; 4
 44a:	08 95       	ret
 44c:	21 50       	subi	r18, 0x01	; 1
 44e:	ac 01       	movw	r20, r24
 450:	d5 cf       	rjmp	.-86     	; 0x3fc <Endpoint_WaitUntilReady+0xa>
 452:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 454:	08 95       	ret

00000456 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
 456:	ef 92       	push	r14
 458:	ff 92       	push	r15
 45a:	0f 93       	push	r16
 45c:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 45e:	4d d0       	rcall	.+154    	; 0x4fa <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 460:	54 d0       	rcall	.+168    	; 0x50a <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
 462:	08 ed       	ldi	r16, 0xD8	; 216
 464:	10 e0       	ldi	r17, 0x00	; 0
 466:	f8 01       	movw	r30, r16
 468:	80 81       	ld	r24, Z

				USBCON = (Temp & ~(1 << USBE));
 46a:	98 2f       	mov	r25, r24
 46c:	9f 77       	andi	r25, 0x7F	; 127
 46e:	90 83       	st	Z, r25
				USBCON = (Temp |  (1 << USBE));
 470:	80 68       	ori	r24, 0x80	; 128
 472:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 474:	80 81       	ld	r24, Z
 476:	8f 7d       	andi	r24, 0xDF	; 223
 478:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 47a:	e7 ed       	ldi	r30, 0xD7	; 215
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	80 81       	ld	r24, Z
 480:	80 68       	ori	r24, 0x80	; 128
 482:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
 484:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
 486:	10 92 83 01 	sts	0x0183, r1
	USB_ConfigurationNumber  = 0;
 48a:	10 92 81 01 	sts	0x0181, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
 48e:	10 92 80 01 	sts	0x0180, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
 492:	10 92 7f 01 	sts	0x017F, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 496:	80 ee       	ldi	r24, 0xE0	; 224
 498:	e8 2e       	mov	r14, r24
 49a:	f1 2c       	mov	r15, r1
 49c:	f7 01       	movw	r30, r14
 49e:	80 81       	ld	r24, Z
 4a0:	8b 7f       	andi	r24, 0xFB	; 251
 4a2:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 4a4:	f8 01       	movw	r30, r16
 4a6:	80 81       	ld	r24, Z
 4a8:	81 60       	ori	r24, 0x01	; 1
 4aa:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	60 e0       	ldi	r22, 0x00	; 0
 4b0:	42 e0       	ldi	r20, 0x02	; 2
 4b2:	49 df       	rcall	.-366    	; 0x346 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 4b4:	e1 ee       	ldi	r30, 0xE1	; 225
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	80 81       	ld	r24, Z
 4ba:	8e 7f       	andi	r24, 0xFE	; 254
 4bc:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 4be:	e2 ee       	ldi	r30, 0xE2	; 226
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	80 81       	ld	r24, Z
 4c4:	81 60       	ori	r24, 0x01	; 1
 4c6:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 4c8:	80 81       	ld	r24, Z
 4ca:	88 60       	ori	r24, 0x08	; 8
 4cc:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 4ce:	f7 01       	movw	r30, r14
 4d0:	80 81       	ld	r24, Z
 4d2:	8e 7f       	andi	r24, 0xFE	; 254
 4d4:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 4d6:	f8 01       	movw	r30, r16
 4d8:	80 81       	ld	r24, Z
 4da:	80 61       	ori	r24, 0x10	; 16
 4dc:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 4de:	1f 91       	pop	r17
 4e0:	0f 91       	pop	r16
 4e2:	ff 90       	pop	r15
 4e4:	ef 90       	pop	r14
 4e6:	08 95       	ret

000004e8 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 4e8:	e7 ed       	ldi	r30, 0xD7	; 215
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	80 81       	ld	r24, Z
 4ee:	81 60       	ori	r24, 0x01	; 1
 4f0:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	80 93 82 01 	sts	0x0182, r24

	USB_ResetInterface();
}
 4f8:	ae cf       	rjmp	.-164    	; 0x456 <USB_ResetInterface>

000004fa <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 4fa:	e8 ed       	ldi	r30, 0xD8	; 216
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	80 81       	ld	r24, Z
 500:	8c 7f       	andi	r24, 0xFC	; 252
 502:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 504:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 508:	08 95       	ret

0000050a <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 50a:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 50e:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 512:	08 95       	ret

00000514 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 514:	1f 92       	push	r1
 516:	0f 92       	push	r0
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	0f 92       	push	r0
 51c:	0b b6       	in	r0, 0x3b	; 59
 51e:	0f 92       	push	r0
 520:	11 24       	eor	r1, r1
 522:	2f 93       	push	r18
 524:	3f 93       	push	r19
 526:	4f 93       	push	r20
 528:	5f 93       	push	r21
 52a:	6f 93       	push	r22
 52c:	7f 93       	push	r23
 52e:	8f 93       	push	r24
 530:	9f 93       	push	r25
 532:	af 93       	push	r26
 534:	bf 93       	push	r27
 536:	ef 93       	push	r30
 538:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 53a:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 53e:	82 ff       	sbrs	r24, 2
 540:	0a c0       	rjmp	.+20     	; 0x556 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 542:	80 91 e2 00 	lds	r24, 0x00E2
 546:	82 ff       	sbrs	r24, 2
 548:	06 c0       	rjmp	.+12     	; 0x556 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 54a:	80 91 e1 00 	lds	r24, 0x00E1
 54e:	8b 7f       	andi	r24, 0xFB	; 251
 550:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 554:	2d d2       	rcall	.+1114   	; 0x9b0 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 556:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 55a:	80 ff       	sbrs	r24, 0
 55c:	1e c0       	rjmp	.+60     	; 0x59a <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 55e:	80 91 d8 00 	lds	r24, 0x00D8
 562:	80 ff       	sbrs	r24, 0
 564:	1a c0       	rjmp	.+52     	; 0x59a <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 566:	80 91 da 00 	lds	r24, 0x00DA
 56a:	8e 7f       	andi	r24, 0xFE	; 254
 56c:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 570:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 574:	80 ff       	sbrs	r24, 0
 576:	0d c0       	rjmp	.+26     	; 0x592 <__vector_10+0x7e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 578:	8c e0       	ldi	r24, 0x0C	; 12
 57a:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 57c:	89 b5       	in	r24, 0x29	; 41
 57e:	82 60       	ori	r24, 0x02	; 2
 580:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 582:	09 b4       	in	r0, 0x29	; 41
 584:	00 fe       	sbrs	r0, 0
 586:	fd cf       	rjmp	.-6      	; 0x582 <__vector_10+0x6e>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	80 93 83 01 	sts	0x0183, r24
			EVENT_USB_Device_Connect();
 58e:	10 de       	rcall	.-992    	; 0x1b0 <EVENT_USB_Device_Connect>
 590:	04 c0       	rjmp	.+8      	; 0x59a <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
 592:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 594:	10 92 83 01 	sts	0x0183, r1
			EVENT_USB_Device_Disconnect();
 598:	10 de       	rcall	.-992    	; 0x1ba <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 59a:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 59e:	80 ff       	sbrs	r24, 0
 5a0:	18 c0       	rjmp	.+48     	; 0x5d2 <__vector_10+0xbe>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 5a2:	80 91 e2 00 	lds	r24, 0x00E2
 5a6:	80 ff       	sbrs	r24, 0
 5a8:	14 c0       	rjmp	.+40     	; 0x5d2 <__vector_10+0xbe>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 5aa:	80 91 e2 00 	lds	r24, 0x00E2
 5ae:	8e 7f       	andi	r24, 0xFE	; 254
 5b0:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 5b4:	80 91 e2 00 	lds	r24, 0x00E2
 5b8:	80 61       	ori	r24, 0x10	; 16
 5ba:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 5be:	80 91 d8 00 	lds	r24, 0x00D8
 5c2:	80 62       	ori	r24, 0x20	; 32
 5c4:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
 5c8:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 5ca:	85 e0       	ldi	r24, 0x05	; 5
 5cc:	80 93 83 01 	sts	0x0183, r24
		EVENT_USB_Device_Suspend();
 5d0:	ef d1       	rcall	.+990    	; 0x9b0 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 5d2:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 5d6:	84 ff       	sbrs	r24, 4
 5d8:	2e c0       	rjmp	.+92     	; 0x636 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 5da:	80 91 e2 00 	lds	r24, 0x00E2
 5de:	84 ff       	sbrs	r24, 4
 5e0:	2a c0       	rjmp	.+84     	; 0x636 <__vector_10+0x122>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 5e2:	8c e0       	ldi	r24, 0x0C	; 12
 5e4:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 5e6:	89 b5       	in	r24, 0x29	; 41
 5e8:	82 60       	ori	r24, 0x02	; 2
 5ea:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 5ec:	09 b4       	in	r0, 0x29	; 41
 5ee:	00 fe       	sbrs	r0, 0
 5f0:	fd cf       	rjmp	.-6      	; 0x5ec <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 5f2:	80 91 d8 00 	lds	r24, 0x00D8
 5f6:	8f 7d       	andi	r24, 0xDF	; 223
 5f8:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 5fc:	80 91 e1 00 	lds	r24, 0x00E1
 600:	8f 7e       	andi	r24, 0xEF	; 239
 602:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 606:	80 91 e2 00 	lds	r24, 0x00E2
 60a:	8f 7e       	andi	r24, 0xEF	; 239
 60c:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 610:	80 91 e2 00 	lds	r24, 0x00E2
 614:	81 60       	ori	r24, 0x01	; 1
 616:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_ConfigurationNumber)
 61a:	80 91 81 01 	lds	r24, 0x0181
 61e:	88 23       	and	r24, r24
 620:	31 f4       	brne	.+12     	; 0x62e <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 622:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 626:	87 fd       	sbrc	r24, 7
 628:	02 c0       	rjmp	.+4      	; 0x62e <__vector_10+0x11a>
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	01 c0       	rjmp	.+2      	; 0x630 <__vector_10+0x11c>
 62e:	84 e0       	ldi	r24, 0x04	; 4
 630:	80 93 83 01 	sts	0x0183, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 634:	bd d1       	rcall	.+890    	; 0x9b0 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 636:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 63a:	83 ff       	sbrs	r24, 3
 63c:	22 c0       	rjmp	.+68     	; 0x682 <__vector_10+0x16e>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 63e:	80 91 e2 00 	lds	r24, 0x00E2
 642:	83 ff       	sbrs	r24, 3
 644:	1e c0       	rjmp	.+60     	; 0x682 <__vector_10+0x16e>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 646:	80 91 e1 00 	lds	r24, 0x00E1
 64a:	87 7f       	andi	r24, 0xF7	; 247
 64c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState         = DEVICE_STATE_Default;
 650:	82 e0       	ldi	r24, 0x02	; 2
 652:	80 93 83 01 	sts	0x0183, r24
		USB_ConfigurationNumber = 0;
 656:	10 92 81 01 	sts	0x0181, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 65a:	80 91 e1 00 	lds	r24, 0x00E1
 65e:	8e 7f       	andi	r24, 0xFE	; 254
 660:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 664:	80 91 e2 00 	lds	r24, 0x00E2
 668:	8e 7f       	andi	r24, 0xFE	; 254
 66a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 66e:	80 91 e2 00 	lds	r24, 0x00E2
 672:	80 61       	ori	r24, 0x10	; 16
 674:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
 678:	80 e0       	ldi	r24, 0x00	; 0
 67a:	60 e0       	ldi	r22, 0x00	; 0
 67c:	42 e0       	ldi	r20, 0x02	; 2
 67e:	63 de       	rcall	.-826    	; 0x346 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 680:	97 d1       	rcall	.+814    	; 0x9b0 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 682:	ff 91       	pop	r31
 684:	ef 91       	pop	r30
 686:	bf 91       	pop	r27
 688:	af 91       	pop	r26
 68a:	9f 91       	pop	r25
 68c:	8f 91       	pop	r24
 68e:	7f 91       	pop	r23
 690:	6f 91       	pop	r22
 692:	5f 91       	pop	r21
 694:	4f 91       	pop	r20
 696:	3f 91       	pop	r19
 698:	2f 91       	pop	r18
 69a:	0f 90       	pop	r0
 69c:	0b be       	out	0x3b, r0	; 59
 69e:	0f 90       	pop	r0
 6a0:	0f be       	out	0x3f, r0	; 63
 6a2:	0f 90       	pop	r0
 6a4:	1f 90       	pop	r1
 6a6:	18 95       	reti

000006a8 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 6a8:	0f 93       	push	r16
 6aa:	1f 93       	push	r17
 6ac:	df 93       	push	r29
 6ae:	cf 93       	push	r28
 6b0:	cd b7       	in	r28, 0x3d	; 61
 6b2:	de b7       	in	r29, 0x3e	; 62
 6b4:	ac 97       	sbiw	r28, 0x2c	; 44
 6b6:	0f b6       	in	r0, 0x3f	; 63
 6b8:	f8 94       	cli
 6ba:	de bf       	out	0x3e, r29	; 62
 6bc:	0f be       	out	0x3f, r0	; 63
 6be:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 6c0:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
 6c4:	80 93 84 01 	sts	0x0184, r24
 6c8:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
 6cc:	80 93 85 01 	sts	0x0185, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 6d0:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 6d4:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
 6d8:	e6 e8       	ldi	r30, 0x86	; 134
 6da:	f1 e0       	ldi	r31, 0x01	; 1
 6dc:	80 93 86 01 	sts	0x0186, r24
 6e0:	90 93 87 01 	sts	0x0187, r25
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 6e4:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 6e8:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
 6ec:	80 93 88 01 	sts	0x0188, r24
 6f0:	93 83       	std	Z+3, r25	; 0x03
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 6f2:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 6f6:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
 6fa:	80 93 8a 01 	sts	0x018A, r24
 6fe:	95 83       	std	Z+5, r25	; 0x05

	EVENT_USB_Device_ControlRequest();
 700:	61 dd       	rcall	.-1342   	; 0x1c4 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 702:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 706:	83 ff       	sbrs	r24, 3
 708:	3a c1       	rjmp	.+628    	; 0x97e <USB_Device_ProcessControlRequest+0x2d6>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 70a:	80 91 84 01 	lds	r24, 0x0184

		switch (USB_ControlRequest.bRequest)
 70e:	30 91 85 01 	lds	r19, 0x0185
 712:	35 30       	cpi	r19, 0x05	; 5
 714:	09 f4       	brne	.+2      	; 0x718 <USB_Device_ProcessControlRequest+0x70>
 716:	87 c0       	rjmp	.+270    	; 0x826 <USB_Device_ProcessControlRequest+0x17e>
 718:	36 30       	cpi	r19, 0x06	; 6
 71a:	40 f4       	brcc	.+16     	; 0x72c <USB_Device_ProcessControlRequest+0x84>
 71c:	31 30       	cpi	r19, 0x01	; 1
 71e:	c9 f1       	breq	.+114    	; 0x792 <USB_Device_ProcessControlRequest+0xea>
 720:	31 30       	cpi	r19, 0x01	; 1
 722:	70 f0       	brcs	.+28     	; 0x740 <USB_Device_ProcessControlRequest+0x98>
 724:	33 30       	cpi	r19, 0x03	; 3
 726:	09 f0       	breq	.+2      	; 0x72a <USB_Device_ProcessControlRequest+0x82>
 728:	2a c1       	rjmp	.+596    	; 0x97e <USB_Device_ProcessControlRequest+0x2d6>
 72a:	33 c0       	rjmp	.+102    	; 0x792 <USB_Device_ProcessControlRequest+0xea>
 72c:	38 30       	cpi	r19, 0x08	; 8
 72e:	09 f4       	brne	.+2      	; 0x732 <USB_Device_ProcessControlRequest+0x8a>
 730:	f8 c0       	rjmp	.+496    	; 0x922 <USB_Device_ProcessControlRequest+0x27a>
 732:	39 30       	cpi	r19, 0x09	; 9
 734:	09 f4       	brne	.+2      	; 0x738 <USB_Device_ProcessControlRequest+0x90>
 736:	07 c1       	rjmp	.+526    	; 0x946 <USB_Device_ProcessControlRequest+0x29e>
 738:	36 30       	cpi	r19, 0x06	; 6
 73a:	09 f0       	breq	.+2      	; 0x73e <USB_Device_ProcessControlRequest+0x96>
 73c:	20 c1       	rjmp	.+576    	; 0x97e <USB_Device_ProcessControlRequest+0x2d6>
 73e:	99 c0       	rjmp	.+306    	; 0x872 <USB_Device_ProcessControlRequest+0x1ca>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 740:	80 38       	cpi	r24, 0x80	; 128
 742:	21 f0       	breq	.+8      	; 0x74c <USB_Device_ProcessControlRequest+0xa4>
 744:	82 38       	cpi	r24, 0x82	; 130
 746:	09 f0       	breq	.+2      	; 0x74a <USB_Device_ProcessControlRequest+0xa2>
 748:	1a c1       	rjmp	.+564    	; 0x97e <USB_Device_ProcessControlRequest+0x2d6>
 74a:	08 c0       	rjmp	.+16     	; 0x75c <USB_Device_ProcessControlRequest+0xb4>
 74c:	90 91 7f 01 	lds	r25, 0x017F
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_RemoteWakeupEnabled)
 750:	80 91 80 01 	lds	r24, 0x0180
 754:	88 23       	and	r24, r24
 756:	99 f0       	breq	.+38     	; 0x77e <USB_Device_ProcessControlRequest+0xd6>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 758:	92 60       	ori	r25, 0x02	; 2
 75a:	11 c0       	rjmp	.+34     	; 0x77e <USB_Device_ProcessControlRequest+0xd6>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 75c:	80 91 88 01 	lds	r24, 0x0188
 760:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 762:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 766:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	25 e0       	ldi	r18, 0x05	; 5
 76e:	96 95       	lsr	r25
 770:	87 95       	ror	r24
 772:	2a 95       	dec	r18
 774:	e1 f7       	brne	.-8      	; 0x76e <USB_Device_ProcessControlRequest+0xc6>
 776:	98 2f       	mov	r25, r24
 778:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 77a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 77e:	80 91 e8 00 	lds	r24, 0x00E8
 782:	87 7f       	andi	r24, 0xF7	; 247
 784:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 788:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
 78c:	10 92 f1 00 	sts	0x00F1, r1
 790:	d3 c0       	rjmp	.+422    	; 0x938 <USB_Device_ProcessControlRequest+0x290>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 792:	88 23       	and	r24, r24
 794:	19 f0       	breq	.+6      	; 0x79c <USB_Device_ProcessControlRequest+0xf4>
 796:	82 30       	cpi	r24, 0x02	; 2
 798:	09 f0       	breq	.+2      	; 0x79c <USB_Device_ProcessControlRequest+0xf4>
 79a:	f1 c0       	rjmp	.+482    	; 0x97e <USB_Device_ProcessControlRequest+0x2d6>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	8f 71       	andi	r24, 0x1F	; 31
 7a0:	90 70       	andi	r25, 0x00	; 0
 7a2:	00 97       	sbiw	r24, 0x00	; 0
 7a4:	21 f0       	breq	.+8      	; 0x7ae <USB_Device_ProcessControlRequest+0x106>
 7a6:	02 97       	sbiw	r24, 0x02	; 2
 7a8:	09 f0       	breq	.+2      	; 0x7ac <USB_Device_ProcessControlRequest+0x104>
 7aa:	e9 c0       	rjmp	.+466    	; 0x97e <USB_Device_ProcessControlRequest+0x2d6>
 7ac:	0c c0       	rjmp	.+24     	; 0x7c6 <USB_Device_ProcessControlRequest+0x11e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 7ae:	80 91 86 01 	lds	r24, 0x0186
 7b2:	81 30       	cpi	r24, 0x01	; 1
 7b4:	09 f0       	breq	.+2      	; 0x7b8 <USB_Device_ProcessControlRequest+0x110>
 7b6:	e3 c0       	rjmp	.+454    	; 0x97e <USB_Device_ProcessControlRequest+0x2d6>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 7b8:	10 92 80 01 	sts	0x0180, r1
 7bc:	33 30       	cpi	r19, 0x03	; 3
 7be:	69 f5       	brne	.+90     	; 0x81a <USB_Device_ProcessControlRequest+0x172>
 7c0:	80 93 80 01 	sts	0x0180, r24
 7c4:	2a c0       	rjmp	.+84     	; 0x81a <USB_Device_ProcessControlRequest+0x172>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 7c6:	80 91 86 01 	lds	r24, 0x0186
 7ca:	88 23       	and	r24, r24
 7cc:	31 f5       	brne	.+76     	; 0x81a <USB_Device_ProcessControlRequest+0x172>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 7ce:	20 91 88 01 	lds	r18, 0x0188
 7d2:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 7d4:	09 f4       	brne	.+2      	; 0x7d8 <USB_Device_ProcessControlRequest+0x130>
 7d6:	d3 c0       	rjmp	.+422    	; 0x97e <USB_Device_ProcessControlRequest+0x2d6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 7d8:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 7dc:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 7e0:	80 ff       	sbrs	r24, 0
 7e2:	1b c0       	rjmp	.+54     	; 0x81a <USB_Device_ProcessControlRequest+0x172>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 7e4:	33 30       	cpi	r19, 0x03	; 3
 7e6:	21 f4       	brne	.+8      	; 0x7f0 <USB_Device_ProcessControlRequest+0x148>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 7e8:	80 91 eb 00 	lds	r24, 0x00EB
 7ec:	80 62       	ori	r24, 0x20	; 32
 7ee:	13 c0       	rjmp	.+38     	; 0x816 <USB_Device_ProcessControlRequest+0x16e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 7f0:	80 91 eb 00 	lds	r24, 0x00EB
 7f4:	80 61       	ori	r24, 0x10	; 16
 7f6:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 7fa:	81 e0       	ldi	r24, 0x01	; 1
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	02 c0       	rjmp	.+4      	; 0x804 <USB_Device_ProcessControlRequest+0x15c>
 800:	88 0f       	add	r24, r24
 802:	99 1f       	adc	r25, r25
 804:	2a 95       	dec	r18
 806:	e2 f7       	brpl	.-8      	; 0x800 <USB_Device_ProcessControlRequest+0x158>
 808:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 80c:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 810:	80 91 eb 00 	lds	r24, 0x00EB
 814:	88 60       	ori	r24, 0x08	; 8
 816:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 81a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 81e:	80 91 e8 00 	lds	r24, 0x00E8
 822:	87 7f       	andi	r24, 0xF7	; 247
 824:	8c c0       	rjmp	.+280    	; 0x93e <USB_Device_ProcessControlRequest+0x296>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 826:	88 23       	and	r24, r24
 828:	09 f0       	breq	.+2      	; 0x82c <USB_Device_ProcessControlRequest+0x184>
 82a:	a9 c0       	rjmp	.+338    	; 0x97e <USB_Device_ProcessControlRequest+0x2d6>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 82c:	10 91 86 01 	lds	r17, 0x0186
 830:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 832:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 834:	f8 94       	cli
 836:	80 91 e8 00 	lds	r24, 0x00E8
 83a:	87 7f       	andi	r24, 0xF7	; 247
 83c:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 840:	b7 dd       	rcall	.-1170   	; 0x3b0 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 842:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
 846:	80 ff       	sbrs	r24, 0
 848:	fc cf       	rjmp	.-8      	; 0x842 <USB_Device_ProcessControlRequest+0x19a>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
 84a:	80 91 e3 00 	lds	r24, 0x00E3
 84e:	80 78       	andi	r24, 0x80	; 128
 850:	81 2b       	or	r24, r17
 852:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR |= (1 << ADDEN);
 856:	80 91 e3 00 	lds	r24, 0x00E3
 85a:	80 68       	ori	r24, 0x80	; 128
 85c:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 860:	11 23       	and	r17, r17
 862:	11 f4       	brne	.+4      	; 0x868 <USB_Device_ProcessControlRequest+0x1c0>
 864:	82 e0       	ldi	r24, 0x02	; 2
 866:	01 c0       	rjmp	.+2      	; 0x86a <USB_Device_ProcessControlRequest+0x1c2>
 868:	83 e0       	ldi	r24, 0x03	; 3
 86a:	80 93 83 01 	sts	0x0183, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 86e:	0f bf       	out	0x3f, r16	; 63
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#endif
				
				GCC_MEMORY_BARRIER();
 870:	86 c0       	rjmp	.+268    	; 0x97e <USB_Device_ProcessControlRequest+0x2d6>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 872:	80 58       	subi	r24, 0x80	; 128
 874:	82 30       	cpi	r24, 0x02	; 2
 876:	08 f0       	brcs	.+2      	; 0x87a <USB_Device_ProcessControlRequest+0x1d2>
 878:	82 c0       	rjmp	.+260    	; 0x97e <USB_Device_ProcessControlRequest+0x2d6>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 87a:	80 91 86 01 	lds	r24, 0x0186
 87e:	90 91 87 01 	lds	r25, 0x0187
 882:	23 e0       	ldi	r18, 0x03	; 3
 884:	8c 3d       	cpi	r24, 0xDC	; 220
 886:	92 07       	cpc	r25, r18
 888:	09 f0       	breq	.+2      	; 0x88c <USB_Device_ProcessControlRequest+0x1e4>
 88a:	33 c0       	rjmp	.+102    	; 0x8f2 <USB_Device_ProcessControlRequest+0x24a>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 88c:	83 e0       	ldi	r24, 0x03	; 3
 88e:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 890:	8a e2       	ldi	r24, 0x2A	; 42
 892:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 894:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 896:	f8 94       	cli
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#endif

				GCC_MEMORY_BARRIER();
 898:	de 01       	movw	r26, r28
 89a:	15 96       	adiw	r26, 0x05	; 5
 89c:	6e e0       	ldi	r22, 0x0E	; 14
 89e:	40 e0       	ldi	r20, 0x00	; 0
 8a0:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 8a2:	11 e2       	ldi	r17, 0x21	; 33
 8a4:	e6 2f       	mov	r30, r22
 8a6:	f0 e0       	ldi	r31, 0x00	; 0
 8a8:	10 93 57 00 	sts	0x0057, r17
 8ac:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
 8ae:	40 ff       	sbrs	r20, 0
 8b0:	03 c0       	rjmp	.+6      	; 0x8b8 <USB_Device_ProcessControlRequest+0x210>
					{
						SerialByte >>= 4;
 8b2:	82 95       	swap	r24
 8b4:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
 8b6:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 8b8:	8f 70       	andi	r24, 0x0F	; 15
 8ba:	28 2f       	mov	r18, r24
 8bc:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 8be:	8a 30       	cpi	r24, 0x0A	; 10
 8c0:	18 f0       	brcs	.+6      	; 0x8c8 <USB_Device_ProcessControlRequest+0x220>
 8c2:	c9 01       	movw	r24, r18
 8c4:	c7 96       	adiw	r24, 0x37	; 55
 8c6:	02 c0       	rjmp	.+4      	; 0x8cc <USB_Device_ProcessControlRequest+0x224>
 8c8:	c9 01       	movw	r24, r18
 8ca:	c0 96       	adiw	r24, 0x30	; 48
 8cc:	8d 93       	st	X+, r24
 8ce:	9d 93       	st	X+, r25
 8d0:	4f 5f       	subi	r20, 0xFF	; 255
 8d2:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 8d4:	44 31       	cpi	r20, 0x14	; 20
 8d6:	51 05       	cpc	r21, r1
 8d8:	29 f7       	brne	.-54     	; 0x8a4 <USB_Device_ProcessControlRequest+0x1fc>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 8da:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 8dc:	80 91 e8 00 	lds	r24, 0x00E8
 8e0:	87 7f       	andi	r24, 0xF7	; 247
 8e2:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 8e6:	ce 01       	movw	r24, r28
 8e8:	03 96       	adiw	r24, 0x03	; 3
 8ea:	6a e2       	ldi	r22, 0x2A	; 42
 8ec:	70 e0       	ldi	r23, 0x00	; 0
 8ee:	61 d0       	rcall	.+194    	; 0x9b2 <Endpoint_Write_Control_Stream_LE>
 8f0:	12 c0       	rjmp	.+36     	; 0x916 <USB_Device_ProcessControlRequest+0x26e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 8f2:	60 91 88 01 	lds	r22, 0x0188
 8f6:	ae 01       	movw	r20, r28
 8f8:	4f 5f       	subi	r20, 0xFF	; 255
 8fa:	5f 4f       	sbci	r21, 0xFF	; 255
 8fc:	f6 dc       	rcall	.-1556   	; 0x2ea <CALLBACK_USB_GetDescriptor>
 8fe:	bc 01       	movw	r22, r24
 900:	00 97       	sbiw	r24, 0x00	; 0
 902:	09 f4       	brne	.+2      	; 0x906 <USB_Device_ProcessControlRequest+0x25e>
 904:	3c c0       	rjmp	.+120    	; 0x97e <USB_Device_ProcessControlRequest+0x2d6>
 906:	80 91 e8 00 	lds	r24, 0x00E8
 90a:	87 7f       	andi	r24, 0xF7	; 247
 90c:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 910:	89 81       	ldd	r24, Y+1	; 0x01
 912:	9a 81       	ldd	r25, Y+2	; 0x02
 914:	ed d0       	rcall	.+474    	; 0xaf0 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 916:	80 91 e8 00 	lds	r24, 0x00E8
 91a:	8b 77       	andi	r24, 0x7B	; 123
 91c:	80 93 e8 00 	sts	0x00E8, r24
 920:	2e c0       	rjmp	.+92     	; 0x97e <USB_Device_ProcessControlRequest+0x2d6>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 922:	80 38       	cpi	r24, 0x80	; 128
 924:	61 f5       	brne	.+88     	; 0x97e <USB_Device_ProcessControlRequest+0x2d6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 926:	80 91 e8 00 	lds	r24, 0x00E8
 92a:	87 7f       	andi	r24, 0xF7	; 247
 92c:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_ConfigurationNumber);
 930:	80 91 81 01 	lds	r24, 0x0181
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 934:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 938:	80 91 e8 00 	lds	r24, 0x00E8
 93c:	8e 77       	andi	r24, 0x7E	; 126
 93e:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 942:	36 dd       	rcall	.-1428   	; 0x3b0 <Endpoint_ClearStatusStage>
 944:	1c c0       	rjmp	.+56     	; 0x97e <USB_Device_ProcessControlRequest+0x2d6>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 946:	88 23       	and	r24, r24
 948:	d1 f4       	brne	.+52     	; 0x97e <USB_Device_ProcessControlRequest+0x2d6>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 94a:	90 91 86 01 	lds	r25, 0x0186
 94e:	92 30       	cpi	r25, 0x02	; 2
 950:	b0 f4       	brcc	.+44     	; 0x97e <USB_Device_ProcessControlRequest+0x2d6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 952:	80 91 e8 00 	lds	r24, 0x00E8
 956:	87 7f       	andi	r24, 0xF7	; 247
 958:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 95c:	90 93 81 01 	sts	0x0181, r25

	Endpoint_ClearStatusStage();
 960:	27 dd       	rcall	.-1458   	; 0x3b0 <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
 962:	80 91 81 01 	lds	r24, 0x0181
 966:	88 23       	and	r24, r24
 968:	31 f4       	brne	.+12     	; 0x976 <USB_Device_ProcessControlRequest+0x2ce>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 96a:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 96e:	87 fd       	sbrc	r24, 7
 970:	02 c0       	rjmp	.+4      	; 0x976 <USB_Device_ProcessControlRequest+0x2ce>
 972:	81 e0       	ldi	r24, 0x01	; 1
 974:	01 c0       	rjmp	.+2      	; 0x978 <USB_Device_ProcessControlRequest+0x2d0>
 976:	84 e0       	ldi	r24, 0x04	; 4
 978:	80 93 83 01 	sts	0x0183, r24

	EVENT_USB_Device_ConfigurationChanged();
 97c:	29 dc       	rcall	.-1966   	; 0x1d0 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 97e:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 982:	83 ff       	sbrs	r24, 3
 984:	0a c0       	rjmp	.+20     	; 0x99a <USB_Device_ProcessControlRequest+0x2f2>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 986:	80 91 eb 00 	lds	r24, 0x00EB
 98a:	80 62       	ori	r24, 0x20	; 32
 98c:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 990:	80 91 e8 00 	lds	r24, 0x00E8
 994:	87 7f       	andi	r24, 0xF7	; 247
 996:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 99a:	ac 96       	adiw	r28, 0x2c	; 44
 99c:	0f b6       	in	r0, 0x3f	; 63
 99e:	f8 94       	cli
 9a0:	de bf       	out	0x3e, r29	; 62
 9a2:	0f be       	out	0x3f, r0	; 63
 9a4:	cd bf       	out	0x3d, r28	; 61
 9a6:	cf 91       	pop	r28
 9a8:	df 91       	pop	r29
 9aa:	1f 91       	pop	r17
 9ac:	0f 91       	pop	r16
 9ae:	08 95       	ret

000009b0 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 9b0:	08 95       	ret

000009b2 <Endpoint_Write_Control_Stream_LE>:
 9b2:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 9b4:	40 91 8a 01 	lds	r20, 0x018A
 9b8:	50 91 8b 01 	lds	r21, 0x018B
 9bc:	46 17       	cp	r20, r22
 9be:	57 07       	cpc	r21, r23
 9c0:	18 f4       	brcc	.+6      	; 0x9c8 <Endpoint_Write_Control_Stream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 9c2:	f9 01       	movw	r30, r18
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	3d c0       	rjmp	.+122    	; 0xa42 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 9c8:	61 15       	cp	r22, r1
 9ca:	71 05       	cpc	r23, r1
 9cc:	11 f0       	breq	.+4      	; 0x9d2 <Endpoint_Write_Control_Stream_LE+0x20>
 9ce:	ab 01       	movw	r20, r22
 9d0:	f8 cf       	rjmp	.-16     	; 0x9c2 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 9d2:	80 91 e8 00 	lds	r24, 0x00E8
 9d6:	8e 77       	andi	r24, 0x7E	; 126
 9d8:	80 93 e8 00 	sts	0x00E8, r24
 9dc:	40 e0       	ldi	r20, 0x00	; 0
 9de:	50 e0       	ldi	r21, 0x00	; 0
 9e0:	f0 cf       	rjmp	.-32     	; 0x9c2 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 9e2:	80 91 83 01 	lds	r24, 0x0183

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 9e6:	88 23       	and	r24, r24
 9e8:	f1 f1       	breq	.+124    	; 0xa66 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 9ea:	85 30       	cpi	r24, 0x05	; 5
 9ec:	f1 f1       	breq	.+124    	; 0xa6a <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9ee:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 9f2:	83 ff       	sbrs	r24, 3
 9f4:	02 c0       	rjmp	.+4      	; 0x9fa <Endpoint_Write_Control_Stream_LE+0x48>
 9f6:	81 e0       	ldi	r24, 0x01	; 1
 9f8:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 9fa:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 9fe:	82 fd       	sbrc	r24, 2
 a00:	2c c0       	rjmp	.+88     	; 0xa5a <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 a02:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 a06:	80 ff       	sbrs	r24, 0
 a08:	1c c0       	rjmp	.+56     	; 0xa42 <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 a0a:	20 91 f2 00 	lds	r18, 0x00F2
 a0e:	30 91 f3 00 	lds	r19, 0x00F3
 a12:	07 c0       	rjmp	.+14     	; 0xa22 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 a14:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 a16:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 a1a:	41 50       	subi	r20, 0x01	; 1
 a1c:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 a1e:	2f 5f       	subi	r18, 0xFF	; 255
 a20:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 a22:	41 15       	cp	r20, r1
 a24:	51 05       	cpc	r21, r1
 a26:	19 f0       	breq	.+6      	; 0xa2e <Endpoint_Write_Control_Stream_LE+0x7c>
 a28:	28 30       	cpi	r18, 0x08	; 8
 a2a:	31 05       	cpc	r19, r1
 a2c:	98 f3       	brcs	.-26     	; 0xa14 <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	28 30       	cpi	r18, 0x08	; 8
 a32:	31 05       	cpc	r19, r1
 a34:	09 f4       	brne	.+2      	; 0xa38 <Endpoint_Write_Control_Stream_LE+0x86>
 a36:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 a38:	80 91 e8 00 	lds	r24, 0x00E8
 a3c:	8e 77       	andi	r24, 0x7E	; 126
 a3e:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 a42:	41 15       	cp	r20, r1
 a44:	51 05       	cpc	r21, r1
 a46:	69 f6       	brne	.-102    	; 0x9e2 <Endpoint_Write_Control_Stream_LE+0x30>
 a48:	99 23       	and	r25, r25
 a4a:	59 f6       	brne	.-106    	; 0x9e2 <Endpoint_Write_Control_Stream_LE+0x30>
 a4c:	06 c0       	rjmp	.+12     	; 0xa5a <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 a4e:	80 91 83 01 	lds	r24, 0x0183

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 a52:	88 23       	and	r24, r24
 a54:	41 f0       	breq	.+16     	; 0xa66 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 a56:	85 30       	cpi	r24, 0x05	; 5
 a58:	41 f0       	breq	.+16     	; 0xa6a <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 a5a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 a5e:	82 ff       	sbrs	r24, 2
 a60:	f6 cf       	rjmp	.-20     	; 0xa4e <Endpoint_Write_Control_Stream_LE+0x9c>
 a62:	80 e0       	ldi	r24, 0x00	; 0
 a64:	08 95       	ret
 a66:	82 e0       	ldi	r24, 0x02	; 2
 a68:	08 95       	ret
 a6a:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 a6c:	08 95       	ret

00000a6e <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
 a6e:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
 a70:	61 15       	cp	r22, r1
 a72:	71 05       	cpc	r23, r1
 a74:	29 f4       	brne	.+10     	; 0xa80 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 a76:	80 91 e8 00 	lds	r24, 0x00E8
 a7a:	8b 77       	andi	r24, 0x7B	; 123
 a7c:	80 93 e8 00 	sts	0x00E8, r24
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 a80:	f9 01       	movw	r30, r18
 a82:	22 c0       	rjmp	.+68     	; 0xac8 <Endpoint_Read_Control_Stream_LE+0x5a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 a84:	80 91 83 01 	lds	r24, 0x0183

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 a88:	88 23       	and	r24, r24
 a8a:	71 f1       	breq	.+92     	; 0xae8 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 a8c:	85 30       	cpi	r24, 0x05	; 5
 a8e:	71 f1       	breq	.+92     	; 0xaec <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a90:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 a94:	83 ff       	sbrs	r24, 3
 a96:	02 c0       	rjmp	.+4      	; 0xa9c <Endpoint_Read_Control_Stream_LE+0x2e>
 a98:	81 e0       	ldi	r24, 0x01	; 1
 a9a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 a9c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
 aa0:	82 ff       	sbrs	r24, 2
 aa2:	f0 cf       	rjmp	.-32     	; 0xa84 <Endpoint_Read_Control_Stream_LE+0x16>
 aa4:	06 c0       	rjmp	.+12     	; 0xab2 <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 aa6:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 aaa:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 aac:	61 50       	subi	r22, 0x01	; 1
 aae:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
 ab0:	31 f0       	breq	.+12     	; 0xabe <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 ab2:	80 91 f2 00 	lds	r24, 0x00F2
 ab6:	90 91 f3 00 	lds	r25, 0x00F3
 aba:	89 2b       	or	r24, r25
 abc:	a1 f7       	brne	.-24     	; 0xaa6 <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 abe:	80 91 e8 00 	lds	r24, 0x00E8
 ac2:	8b 77       	andi	r24, 0x7B	; 123
 ac4:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
 ac8:	61 15       	cp	r22, r1
 aca:	71 05       	cpc	r23, r1
 acc:	d9 f6       	brne	.-74     	; 0xa84 <Endpoint_Read_Control_Stream_LE+0x16>
 ace:	06 c0       	rjmp	.+12     	; 0xadc <Endpoint_Read_Control_Stream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 ad0:	80 91 83 01 	lds	r24, 0x0183

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 ad4:	88 23       	and	r24, r24
 ad6:	41 f0       	breq	.+16     	; 0xae8 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 ad8:	85 30       	cpi	r24, 0x05	; 5
 ada:	41 f0       	breq	.+16     	; 0xaec <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 adc:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
 ae0:	80 ff       	sbrs	r24, 0
 ae2:	f6 cf       	rjmp	.-20     	; 0xad0 <Endpoint_Read_Control_Stream_LE+0x62>
 ae4:	80 e0       	ldi	r24, 0x00	; 0
 ae6:	08 95       	ret
 ae8:	82 e0       	ldi	r24, 0x02	; 2
 aea:	08 95       	ret
 aec:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 aee:	08 95       	ret

00000af0 <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
 af0:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 af2:	40 91 8a 01 	lds	r20, 0x018A
 af6:	50 91 8b 01 	lds	r21, 0x018B
 afa:	46 17       	cp	r20, r22
 afc:	57 07       	cpc	r21, r23
 afe:	18 f4       	brcc	.+6      	; 0xb06 <Endpoint_Write_Control_PStream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 b00:	f9 01       	movw	r30, r18
 b02:	90 e0       	ldi	r25, 0x00	; 0
 b04:	40 c0       	rjmp	.+128    	; 0xb86 <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 b06:	61 15       	cp	r22, r1
 b08:	71 05       	cpc	r23, r1
 b0a:	11 f0       	breq	.+4      	; 0xb10 <Endpoint_Write_Control_PStream_LE+0x20>
 b0c:	ab 01       	movw	r20, r22
 b0e:	f8 cf       	rjmp	.-16     	; 0xb00 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 b10:	80 91 e8 00 	lds	r24, 0x00E8
 b14:	8e 77       	andi	r24, 0x7E	; 126
 b16:	80 93 e8 00 	sts	0x00E8, r24
 b1a:	40 e0       	ldi	r20, 0x00	; 0
 b1c:	50 e0       	ldi	r21, 0x00	; 0
 b1e:	f0 cf       	rjmp	.-32     	; 0xb00 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 b20:	80 91 83 01 	lds	r24, 0x0183

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 b24:	88 23       	and	r24, r24
 b26:	09 f4       	brne	.+2      	; 0xb2a <Endpoint_Write_Control_PStream_LE+0x3a>
 b28:	40 c0       	rjmp	.+128    	; 0xbaa <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 b2a:	85 30       	cpi	r24, 0x05	; 5
 b2c:	09 f4       	brne	.+2      	; 0xb30 <Endpoint_Write_Control_PStream_LE+0x40>
 b2e:	3f c0       	rjmp	.+126    	; 0xbae <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b30:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 b34:	83 ff       	sbrs	r24, 3
 b36:	02 c0       	rjmp	.+4      	; 0xb3c <Endpoint_Write_Control_PStream_LE+0x4c>
 b38:	81 e0       	ldi	r24, 0x01	; 1
 b3a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 b3c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 b40:	82 fd       	sbrc	r24, 2
 b42:	2d c0       	rjmp	.+90     	; 0xb9e <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 b44:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 b48:	80 ff       	sbrs	r24, 0
 b4a:	1d c0       	rjmp	.+58     	; 0xb86 <Endpoint_Write_Control_PStream_LE+0x96>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 b4c:	20 91 f2 00 	lds	r18, 0x00F2
 b50:	30 91 f3 00 	lds	r19, 0x00F3
 b54:	08 c0       	rjmp	.+16     	; 0xb66 <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 b56:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 b58:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 b5c:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 b5e:	41 50       	subi	r20, 0x01	; 1
 b60:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 b62:	2f 5f       	subi	r18, 0xFF	; 255
 b64:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 b66:	41 15       	cp	r20, r1
 b68:	51 05       	cpc	r21, r1
 b6a:	19 f0       	breq	.+6      	; 0xb72 <Endpoint_Write_Control_PStream_LE+0x82>
 b6c:	28 30       	cpi	r18, 0x08	; 8
 b6e:	31 05       	cpc	r19, r1
 b70:	90 f3       	brcs	.-28     	; 0xb56 <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 b72:	90 e0       	ldi	r25, 0x00	; 0
 b74:	28 30       	cpi	r18, 0x08	; 8
 b76:	31 05       	cpc	r19, r1
 b78:	09 f4       	brne	.+2      	; 0xb7c <Endpoint_Write_Control_PStream_LE+0x8c>
 b7a:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 b7c:	80 91 e8 00 	lds	r24, 0x00E8
 b80:	8e 77       	andi	r24, 0x7E	; 126
 b82:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 b86:	41 15       	cp	r20, r1
 b88:	51 05       	cpc	r21, r1
 b8a:	51 f6       	brne	.-108    	; 0xb20 <Endpoint_Write_Control_PStream_LE+0x30>
 b8c:	99 23       	and	r25, r25
 b8e:	41 f6       	brne	.-112    	; 0xb20 <Endpoint_Write_Control_PStream_LE+0x30>
 b90:	06 c0       	rjmp	.+12     	; 0xb9e <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 b92:	80 91 83 01 	lds	r24, 0x0183

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 b96:	88 23       	and	r24, r24
 b98:	41 f0       	breq	.+16     	; 0xbaa <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 b9a:	85 30       	cpi	r24, 0x05	; 5
 b9c:	41 f0       	breq	.+16     	; 0xbae <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 b9e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 ba2:	82 ff       	sbrs	r24, 2
 ba4:	f6 cf       	rjmp	.-20     	; 0xb92 <Endpoint_Write_Control_PStream_LE+0xa2>
 ba6:	80 e0       	ldi	r24, 0x00	; 0
 ba8:	08 95       	ret
 baa:	82 e0       	ldi	r24, 0x02	; 2
 bac:	08 95       	ret
 bae:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 bb0:	08 95       	ret

00000bb2 <Endpoint_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 bb2:	bf 92       	push	r11
 bb4:	cf 92       	push	r12
 bb6:	df 92       	push	r13
 bb8:	ef 92       	push	r14
 bba:	ff 92       	push	r15
 bbc:	0f 93       	push	r16
 bbe:	1f 93       	push	r17
 bc0:	cf 93       	push	r28
 bc2:	df 93       	push	r29
 bc4:	18 2f       	mov	r17, r24
 bc6:	09 2f       	mov	r16, r25
 bc8:	7b 01       	movw	r14, r22
 bca:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 bcc:	12 dc       	rcall	.-2012   	; 0x3f2 <Endpoint_WaitUntilReady>
 bce:	b8 2e       	mov	r11, r24
 bd0:	88 23       	and	r24, r24
 bd2:	b1 f5       	brne	.+108    	; 0xc40 <Endpoint_Write_Stream_LE+0x8e>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 bd4:	81 2f       	mov	r24, r17
 bd6:	90 2f       	mov	r25, r16
 bd8:	9c 01       	movw	r18, r24
 bda:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
 bdc:	c1 14       	cp	r12, r1
 bde:	d1 04       	cpc	r13, r1
 be0:	39 f0       	breq	.+14     	; 0xbf0 <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
 be2:	f6 01       	movw	r30, r12
 be4:	80 81       	ld	r24, Z
 be6:	91 81       	ldd	r25, Z+1	; 0x01
 be8:	e8 1a       	sub	r14, r24
 bea:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 bec:	c8 0f       	add	r28, r24
 bee:	d9 1f       	adc	r29, r25
 bf0:	00 e0       	ldi	r16, 0x00	; 0
 bf2:	10 e0       	ldi	r17, 0x00	; 0
 bf4:	22 c0       	rjmp	.+68     	; 0xc3a <Endpoint_Write_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 bf6:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 bfa:	85 fd       	sbrc	r24, 5
 bfc:	16 c0       	rjmp	.+44     	; 0xc2a <Endpoint_Write_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 bfe:	80 91 e8 00 	lds	r24, 0x00E8
 c02:	8e 77       	andi	r24, 0x7E	; 126
 c04:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
 c08:	c1 14       	cp	r12, r1
 c0a:	d1 04       	cpc	r13, r1
 c0c:	49 f0       	breq	.+18     	; 0xc20 <Endpoint_Write_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
 c0e:	f6 01       	movw	r30, r12
 c10:	80 81       	ld	r24, Z
 c12:	91 81       	ldd	r25, Z+1	; 0x01
 c14:	80 0f       	add	r24, r16
 c16:	91 1f       	adc	r25, r17
 c18:	91 83       	std	Z+1, r25	; 0x01
 c1a:	80 83       	st	Z, r24
 c1c:	85 e0       	ldi	r24, 0x05	; 5
 c1e:	11 c0       	rjmp	.+34     	; 0xc42 <Endpoint_Write_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 c20:	1a d0       	rcall	.+52     	; 0xc56 <USB_USBTask>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 c22:	e7 db       	rcall	.-2098   	; 0x3f2 <Endpoint_WaitUntilReady>
 c24:	88 23       	and	r24, r24
 c26:	49 f0       	breq	.+18     	; 0xc3a <Endpoint_Write_Stream_LE+0x88>
 c28:	0c c0       	rjmp	.+24     	; 0xc42 <Endpoint_Write_Stream_LE+0x90>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 c2a:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 c2c:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 c30:	08 94       	sec
 c32:	e1 08       	sbc	r14, r1
 c34:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
 c36:	0f 5f       	subi	r16, 0xFF	; 255
 c38:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 c3a:	e1 14       	cp	r14, r1
 c3c:	f1 04       	cpc	r15, r1
 c3e:	d9 f6       	brne	.-74     	; 0xbf6 <Endpoint_Write_Stream_LE+0x44>
 c40:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 c42:	df 91       	pop	r29
 c44:	cf 91       	pop	r28
 c46:	1f 91       	pop	r17
 c48:	0f 91       	pop	r16
 c4a:	ff 90       	pop	r15
 c4c:	ef 90       	pop	r14
 c4e:	df 90       	pop	r13
 c50:	cf 90       	pop	r12
 c52:	bf 90       	pop	r11
 c54:	08 95       	ret

00000c56 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 c56:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 c58:	80 91 83 01 	lds	r24, 0x0183
 c5c:	88 23       	and	r24, r24
 c5e:	61 f0       	breq	.+24     	; 0xc78 <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 c60:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c64:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c68:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 c6c:	83 ff       	sbrs	r24, 3
 c6e:	01 c0       	rjmp	.+2      	; 0xc72 <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
 c70:	1b dd       	rcall	.-1482   	; 0x6a8 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 c72:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c74:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 c78:	1f 91       	pop	r17
 c7a:	08 95       	ret

00000c7c <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 c7c:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 c7e:	80 91 83 01 	lds	r24, 0x0183
 c82:	84 30       	cpi	r24, 0x04	; 4
 c84:	41 f5       	brne	.+80     	; 0xcd6 <CDC_Device_ReceiveByte+0x5a>
 c86:	87 85       	ldd	r24, Z+15	; 0x0f
 c88:	90 89       	ldd	r25, Z+16	; 0x10
 c8a:	a1 89       	ldd	r26, Z+17	; 0x11
 c8c:	b2 89       	ldd	r27, Z+18	; 0x12
 c8e:	00 97       	sbiw	r24, 0x00	; 0
 c90:	a1 05       	cpc	r26, r1
 c92:	b1 05       	cpc	r27, r1
 c94:	01 f1       	breq	.+64     	; 0xcd6 <CDC_Device_ReceiveByte+0x5a>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
 c96:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c98:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 c9c:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsOUTReceived())
 ca0:	82 ff       	sbrs	r24, 2
 ca2:	19 c0       	rjmp	.+50     	; 0xcd6 <CDC_Device_ReceiveByte+0x5a>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 ca4:	80 91 f2 00 	lds	r24, 0x00F2
 ca8:	90 91 f3 00 	lds	r25, 0x00F3
	{
		if (Endpoint_BytesInEndpoint())
 cac:	89 2b       	or	r24, r25
 cae:	19 f4       	brne	.+6      	; 0xcb6 <CDC_Device_ReceiveByte+0x3a>
 cb0:	2f ef       	ldi	r18, 0xFF	; 255
 cb2:	3f ef       	ldi	r19, 0xFF	; 255
 cb4:	04 c0       	rjmp	.+8      	; 0xcbe <CDC_Device_ReceiveByte+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 cb6:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
 cba:	28 2f       	mov	r18, r24
 cbc:	30 e0       	ldi	r19, 0x00	; 0
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 cbe:	80 91 f2 00 	lds	r24, 0x00F2
 cc2:	90 91 f3 00 	lds	r25, 0x00F3

		if (!(Endpoint_BytesInEndpoint()))
 cc6:	89 2b       	or	r24, r25
 cc8:	41 f4       	brne	.+16     	; 0xcda <CDC_Device_ReceiveByte+0x5e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 cca:	80 91 e8 00 	lds	r24, 0x00E8
 cce:	8b 77       	andi	r24, 0x7B	; 123
 cd0:	80 93 e8 00 	sts	0x00E8, r24
 cd4:	02 c0       	rjmp	.+4      	; 0xcda <CDC_Device_ReceiveByte+0x5e>
 cd6:	2f ef       	ldi	r18, 0xFF	; 255
 cd8:	3f ef       	ldi	r19, 0xFF	; 255
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
 cda:	c9 01       	movw	r24, r18
 cdc:	08 95       	ret

00000cde <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
 cde:	08 95       	ret

00000ce0 <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 ce0:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 ce2:	80 91 83 01 	lds	r24, 0x0183
 ce6:	84 30       	cpi	r24, 0x04	; 4
 ce8:	21 f5       	brne	.+72     	; 0xd32 <CDC_Device_Flush+0x52>
 cea:	87 85       	ldd	r24, Z+15	; 0x0f
 cec:	90 89       	ldd	r25, Z+16	; 0x10
 cee:	a1 89       	ldd	r26, Z+17	; 0x11
 cf0:	b2 89       	ldd	r27, Z+18	; 0x12
 cf2:	00 97       	sbiw	r24, 0x00	; 0
 cf4:	a1 05       	cpc	r26, r1
 cf6:	b1 05       	cpc	r27, r1
 cf8:	e1 f0       	breq	.+56     	; 0xd32 <CDC_Device_Flush+0x52>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
 cfa:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 cfc:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 d00:	80 91 f2 00 	lds	r24, 0x00F2
 d04:	90 91 f3 00 	lds	r25, 0x00F3

	if (!(Endpoint_BytesInEndpoint()))
 d08:	89 2b       	or	r24, r25
 d0a:	a9 f0       	breq	.+42     	; 0xd36 <CDC_Device_Flush+0x56>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 d0c:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d10:	80 91 e8 00 	lds	r24, 0x00E8
 d14:	8e 77       	andi	r24, 0x7E	; 126
 d16:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
 d1a:	95 fd       	sbrc	r25, 5
 d1c:	0c c0       	rjmp	.+24     	; 0xd36 <CDC_Device_Flush+0x56>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 d1e:	69 db       	rcall	.-2350   	; 0x3f2 <Endpoint_WaitUntilReady>
 d20:	98 2f       	mov	r25, r24
 d22:	88 23       	and	r24, r24
 d24:	49 f4       	brne	.+18     	; 0xd38 <CDC_Device_Flush+0x58>
 d26:	80 91 e8 00 	lds	r24, 0x00E8
 d2a:	8e 77       	andi	r24, 0x7E	; 126
 d2c:	80 93 e8 00 	sts	0x00E8, r24
 d30:	03 c0       	rjmp	.+6      	; 0xd38 <CDC_Device_Flush+0x58>
 d32:	92 e0       	ldi	r25, 0x02	; 2
 d34:	01 c0       	rjmp	.+2      	; 0xd38 <CDC_Device_Flush+0x58>
 d36:	90 e0       	ldi	r25, 0x00	; 0

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
 d38:	89 2f       	mov	r24, r25
 d3a:	08 95       	ret

00000d3c <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 d3c:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 d3e:	80 91 83 01 	lds	r24, 0x0183
 d42:	84 30       	cpi	r24, 0x04	; 4
 d44:	51 f4       	brne	.+20     	; 0xd5a <CDC_Device_USBTask+0x1e>
 d46:	87 85       	ldd	r24, Z+15	; 0x0f
 d48:	90 89       	ldd	r25, Z+16	; 0x10
 d4a:	a1 89       	ldd	r26, Z+17	; 0x11
 d4c:	b2 89       	ldd	r27, Z+18	; 0x12
 d4e:	00 97       	sbiw	r24, 0x00	; 0
 d50:	a1 05       	cpc	r26, r1
 d52:	b1 05       	cpc	r27, r1
 d54:	11 f0       	breq	.+4      	; 0xd5a <CDC_Device_USBTask+0x1e>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Device_Flush(CDCInterfaceInfo);
 d56:	cf 01       	movw	r24, r30
 d58:	c3 cf       	rjmp	.-122    	; 0xce0 <CDC_Device_Flush>
 d5a:	08 95       	ret

00000d5c <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
 d5c:	1f 93       	push	r17
 d5e:	fc 01       	movw	r30, r24
 d60:	16 2f       	mov	r17, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 d62:	80 91 83 01 	lds	r24, 0x0183
 d66:	84 30       	cpi	r24, 0x04	; 4
 d68:	d9 f4       	brne	.+54     	; 0xda0 <CDC_Device_SendByte+0x44>
 d6a:	87 85       	ldd	r24, Z+15	; 0x0f
 d6c:	90 89       	ldd	r25, Z+16	; 0x10
 d6e:	a1 89       	ldd	r26, Z+17	; 0x11
 d70:	b2 89       	ldd	r27, Z+18	; 0x12
 d72:	00 97       	sbiw	r24, 0x00	; 0
 d74:	a1 05       	cpc	r26, r1
 d76:	b1 05       	cpc	r27, r1
 d78:	99 f0       	breq	.+38     	; 0xda0 <CDC_Device_SendByte+0x44>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
 d7a:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 d7c:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 d80:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
 d84:	85 fd       	sbrc	r24, 5
 d86:	08 c0       	rjmp	.+16     	; 0xd98 <CDC_Device_SendByte+0x3c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d88:	80 91 e8 00 	lds	r24, 0x00E8
 d8c:	8e 77       	andi	r24, 0x7E	; 126
 d8e:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 d92:	2f db       	rcall	.-2466   	; 0x3f2 <Endpoint_WaitUntilReady>
 d94:	88 23       	and	r24, r24
 d96:	29 f4       	brne	.+10     	; 0xda2 <CDC_Device_SendByte+0x46>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 d98:	10 93 f1 00 	sts	0x00F1, r17
 d9c:	80 e0       	ldi	r24, 0x00	; 0
 d9e:	01 c0       	rjmp	.+2      	; 0xda2 <CDC_Device_SendByte+0x46>
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
 da0:	82 e0       	ldi	r24, 0x02	; 2
}
 da2:	1f 91       	pop	r17
 da4:	08 95       	ret

00000da6 <CDC_Device_SendString>:
	#endif
}

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                              const char* const String)
{
 da6:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 da8:	80 91 83 01 	lds	r24, 0x0183
 dac:	84 30       	cpi	r24, 0x04	; 4
 dae:	b9 f4       	brne	.+46     	; 0xdde <CDC_Device_SendString+0x38>
 db0:	87 85       	ldd	r24, Z+15	; 0x0f
 db2:	90 89       	ldd	r25, Z+16	; 0x10
 db4:	a1 89       	ldd	r26, Z+17	; 0x11
 db6:	b2 89       	ldd	r27, Z+18	; 0x12
 db8:	00 97       	sbiw	r24, 0x00	; 0
 dba:	a1 05       	cpc	r26, r1
 dbc:	b1 05       	cpc	r27, r1
 dbe:	79 f0       	breq	.+30     	; 0xdde <CDC_Device_SendString+0x38>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
 dc0:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 dc2:	80 93 e9 00 	sts	0x00E9, r24
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
 dc6:	db 01       	movw	r26, r22
 dc8:	0d 90       	ld	r0, X+
 dca:	00 20       	and	r0, r0
 dcc:	e9 f7       	brne	.-6      	; 0xdc8 <CDC_Device_SendString+0x22>
 dce:	11 97       	sbiw	r26, 0x01	; 1
 dd0:	a6 1b       	sub	r26, r22
 dd2:	b7 0b       	sbc	r27, r23
 dd4:	cb 01       	movw	r24, r22
 dd6:	bd 01       	movw	r22, r26
 dd8:	40 e0       	ldi	r20, 0x00	; 0
 dda:	50 e0       	ldi	r21, 0x00	; 0
 ddc:	ea ce       	rjmp	.-556    	; 0xbb2 <Endpoint_Write_Stream_LE>
 dde:	82 e0       	ldi	r24, 0x02	; 2
}
 de0:	08 95       	ret

00000de2 <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 de2:	1f 93       	push	r17
 de4:	cf 93       	push	r28
 de6:	df 93       	push	r29
 de8:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 dea:	0d 96       	adiw	r24, 0x0d	; 13
 dec:	fc 01       	movw	r30, r24
 dee:	89 e0       	ldi	r24, 0x09	; 9
 df0:	df 01       	movw	r26, r30
 df2:	1d 92       	st	X+, r1
 df4:	8a 95       	dec	r24
 df6:	e9 f7       	brne	.-6      	; 0xdf2 <CDC_Device_ConfigureEndpoints+0x10>
 df8:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == CDCInterfaceInfo->Config.DataINEndpointNumber)
 dfa:	89 81       	ldd	r24, Y+1	; 0x01
 dfc:	18 17       	cp	r17, r24
 dfe:	29 f4       	brne	.+10     	; 0xe0a <CDC_Device_ConfigureEndpoints+0x28>
		{
			Size         = CDCInterfaceInfo->Config.DataINEndpointSize;
 e00:	ea 81       	ldd	r30, Y+2	; 0x02
 e02:	fb 81       	ldd	r31, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataINEndpointDoubleBank;
 e04:	8c 81       	ldd	r24, Y+4	; 0x04
 e06:	62 e0       	ldi	r22, 0x02	; 2
 e08:	10 c0       	rjmp	.+32     	; 0xe2a <CDC_Device_ConfigureEndpoints+0x48>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.DataOUTEndpointNumber)
 e0a:	8d 81       	ldd	r24, Y+5	; 0x05
 e0c:	18 17       	cp	r17, r24
 e0e:	31 f4       	brne	.+12     	; 0xe1c <CDC_Device_ConfigureEndpoints+0x3a>
		{
			Size         = CDCInterfaceInfo->Config.DataOUTEndpointSize;
 e10:	ee 81       	ldd	r30, Y+6	; 0x06
 e12:	ff 81       	ldd	r31, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
 e14:	88 85       	ldd	r24, Y+8	; 0x08
 e16:	62 e0       	ldi	r22, 0x02	; 2
 e18:	30 e0       	ldi	r19, 0x00	; 0
 e1a:	08 c0       	rjmp	.+16     	; 0xe2c <CDC_Device_ConfigureEndpoints+0x4a>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.NotificationEndpointNumber)
 e1c:	89 85       	ldd	r24, Y+9	; 0x09
 e1e:	18 17       	cp	r17, r24
 e20:	09 f5       	brne	.+66     	; 0xe64 <CDC_Device_ConfigureEndpoints+0x82>
		{
			Size         = CDCInterfaceInfo->Config.NotificationEndpointSize;
 e22:	ea 85       	ldd	r30, Y+10	; 0x0a
 e24:	fb 85       	ldd	r31, Y+11	; 0x0b
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_INTERRUPT;
			DoubleBanked = CDCInterfaceInfo->Config.NotificationEndpointDoubleBank;
 e26:	8c 85       	ldd	r24, Y+12	; 0x0c
 e28:	63 e0       	ldi	r22, 0x03	; 3
 e2a:	31 e0       	ldi	r19, 0x01	; 1
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
 e2c:	88 23       	and	r24, r24
 e2e:	11 f4       	brne	.+4      	; 0xe34 <CDC_Device_ConfigureEndpoints+0x52>
 e30:	40 e0       	ldi	r20, 0x00	; 0
 e32:	01 c0       	rjmp	.+2      	; 0xe36 <CDC_Device_ConfigureEndpoints+0x54>
 e34:	44 e0       	ldi	r20, 0x04	; 4
 e36:	20 e0       	ldi	r18, 0x00	; 0
 e38:	88 e0       	ldi	r24, 0x08	; 8
 e3a:	90 e0       	ldi	r25, 0x00	; 0
 e3c:	03 c0       	rjmp	.+6      	; 0xe44 <CDC_Device_ConfigureEndpoints+0x62>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
 e3e:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
 e40:	88 0f       	add	r24, r24
 e42:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
 e44:	8e 17       	cp	r24, r30
 e46:	9f 07       	cpc	r25, r31
 e48:	d0 f3       	brcs	.-12     	; 0xe3e <CDC_Device_ConfigureEndpoints+0x5c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
 e4a:	62 95       	swap	r22
 e4c:	66 0f       	add	r22, r22
 e4e:	66 0f       	add	r22, r22
 e50:	60 7c       	andi	r22, 0xC0	; 192
 e52:	63 2b       	or	r22, r19
 e54:	42 60       	ori	r20, 0x02	; 2
 e56:	22 95       	swap	r18
 e58:	20 7f       	andi	r18, 0xF0	; 240
 e5a:	42 2b       	or	r20, r18
 e5c:	81 2f       	mov	r24, r17
 e5e:	73 da       	rcall	.-2842   	; 0x346 <Endpoint_ConfigureEndpoint_Prv>
 e60:	88 23       	and	r24, r24
 e62:	21 f0       	breq	.+8      	; 0xe6c <CDC_Device_ConfigureEndpoints+0x8a>

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
 e64:	1f 5f       	subi	r17, 0xFF	; 255
 e66:	17 30       	cpi	r17, 0x07	; 7
 e68:	41 f6       	brne	.-112    	; 0xdfa <CDC_Device_ConfigureEndpoints+0x18>
 e6a:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
 e6c:	df 91       	pop	r29
 e6e:	cf 91       	pop	r28
 e70:	1f 91       	pop	r17
 e72:	08 95       	ret

00000e74 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDC.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 e74:	cf 93       	push	r28
 e76:	df 93       	push	r29
 e78:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 e7a:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
 e7e:	83 ff       	sbrs	r24, 3
 e80:	63 c0       	rjmp	.+198    	; 0xf48 <CDC_Device_ProcessControlRequest+0xd4>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 e82:	88 81       	ld	r24, Y
 e84:	90 e0       	ldi	r25, 0x00	; 0
 e86:	20 91 88 01 	lds	r18, 0x0188
 e8a:	30 91 89 01 	lds	r19, 0x0189
 e8e:	28 17       	cp	r18, r24
 e90:	39 07       	cpc	r19, r25
 e92:	09 f0       	breq	.+2      	; 0xe96 <CDC_Device_ProcessControlRequest+0x22>
 e94:	59 c0       	rjmp	.+178    	; 0xf48 <CDC_Device_ProcessControlRequest+0xd4>
	  return;

	switch (USB_ControlRequest.bRequest)
 e96:	80 91 85 01 	lds	r24, 0x0185
 e9a:	81 32       	cpi	r24, 0x21	; 33
 e9c:	61 f0       	breq	.+24     	; 0xeb6 <CDC_Device_ProcessControlRequest+0x42>
 e9e:	82 32       	cpi	r24, 0x22	; 34
 ea0:	20 f4       	brcc	.+8      	; 0xeaa <CDC_Device_ProcessControlRequest+0x36>
 ea2:	80 32       	cpi	r24, 0x20	; 32
 ea4:	09 f0       	breq	.+2      	; 0xea8 <CDC_Device_ProcessControlRequest+0x34>
 ea6:	50 c0       	rjmp	.+160    	; 0xf48 <CDC_Device_ProcessControlRequest+0xd4>
 ea8:	1b c0       	rjmp	.+54     	; 0xee0 <CDC_Device_ProcessControlRequest+0x6c>
 eaa:	82 32       	cpi	r24, 0x22	; 34
 eac:	79 f1       	breq	.+94     	; 0xf0c <CDC_Device_ProcessControlRequest+0x98>
 eae:	83 32       	cpi	r24, 0x23	; 35
 eb0:	09 f0       	breq	.+2      	; 0xeb4 <CDC_Device_ProcessControlRequest+0x40>
 eb2:	4a c0       	rjmp	.+148    	; 0xf48 <CDC_Device_ProcessControlRequest+0xd4>
 eb4:	3b c0       	rjmp	.+118    	; 0xf2c <CDC_Device_ProcessControlRequest+0xb8>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 eb6:	80 91 84 01 	lds	r24, 0x0184
 eba:	81 3a       	cpi	r24, 0xA1	; 161
 ebc:	09 f0       	breq	.+2      	; 0xec0 <CDC_Device_ProcessControlRequest+0x4c>
 ebe:	44 c0       	rjmp	.+136    	; 0xf48 <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ec0:	80 91 e8 00 	lds	r24, 0x00E8
 ec4:	87 7f       	andi	r24, 0xF7	; 247
 ec6:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
 eca:	ce 01       	movw	r24, r28
 ecc:	0f 96       	adiw	r24, 0x0f	; 15
 ece:	67 e0       	ldi	r22, 0x07	; 7
 ed0:	70 e0       	ldi	r23, 0x00	; 0
 ed2:	6f dd       	rcall	.-1314   	; 0x9b2 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 ed4:	80 91 e8 00 	lds	r24, 0x00E8
 ed8:	8b 77       	andi	r24, 0x7B	; 123
 eda:	80 93 e8 00 	sts	0x00E8, r24
 ede:	34 c0       	rjmp	.+104    	; 0xf48 <CDC_Device_ProcessControlRequest+0xd4>
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 ee0:	80 91 84 01 	lds	r24, 0x0184
 ee4:	81 32       	cpi	r24, 0x21	; 33
 ee6:	81 f5       	brne	.+96     	; 0xf48 <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ee8:	80 91 e8 00 	lds	r24, 0x00E8
 eec:	87 7f       	andi	r24, 0xF7	; 247
 eee:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
 ef2:	ce 01       	movw	r24, r28
 ef4:	0f 96       	adiw	r24, 0x0f	; 15
 ef6:	67 e0       	ldi	r22, 0x07	; 7
 ef8:	70 e0       	ldi	r23, 0x00	; 0
 efa:	b9 dd       	rcall	.-1166   	; 0xa6e <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 efc:	80 91 e8 00 	lds	r24, 0x00E8
 f00:	8e 77       	andi	r24, 0x7E	; 126
 f02:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 f06:	ce 01       	movw	r24, r28
 f08:	ea de       	rcall	.-556    	; 0xcde <CDC_Device_Event_Stub>
 f0a:	1e c0       	rjmp	.+60     	; 0xf48 <CDC_Device_ProcessControlRequest+0xd4>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 f0c:	80 91 84 01 	lds	r24, 0x0184
 f10:	81 32       	cpi	r24, 0x21	; 33
 f12:	d1 f4       	brne	.+52     	; 0xf48 <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 f14:	80 91 e8 00 	lds	r24, 0x00E8
 f18:	87 7f       	andi	r24, 0xF7	; 247
 f1a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 f1e:	48 da       	rcall	.-2928   	; 0x3b0 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 f20:	80 91 86 01 	lds	r24, 0x0186
 f24:	8d 87       	std	Y+13, r24	; 0x0d

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 f26:	ce 01       	movw	r24, r28
 f28:	da de       	rcall	.-588    	; 0xcde <CDC_Device_Event_Stub>
 f2a:	0e c0       	rjmp	.+28     	; 0xf48 <CDC_Device_ProcessControlRequest+0xd4>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 f2c:	80 91 84 01 	lds	r24, 0x0184
 f30:	81 32       	cpi	r24, 0x21	; 33
 f32:	51 f4       	brne	.+20     	; 0xf48 <CDC_Device_ProcessControlRequest+0xd4>
 f34:	80 91 e8 00 	lds	r24, 0x00E8
 f38:	87 7f       	andi	r24, 0xF7	; 247
 f3a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 f3e:	38 da       	rcall	.-2960   	; 0x3b0 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 f40:	ce 01       	movw	r24, r28
 f42:	60 91 86 01 	lds	r22, 0x0186
 f46:	cb de       	rcall	.-618    	; 0xcde <CDC_Device_Event_Stub>
			}

			break;
	}
}
 f48:	df 91       	pop	r29
 f4a:	cf 91       	pop	r28
 f4c:	08 95       	ret

00000f4e <_exit>:
 f4e:	f8 94       	cli

00000f50 <__stop_program>:
 f50:	ff cf       	rjmp	.-2      	; 0xf50 <__stop_program>
