
MassStorage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  0000199a  00001a2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000199a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080016e  0080016e  00001a9c  2**0
                  ALLOC
  3 .debug_aranges 00000500  00000000  00000000  00001a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000d78  00000000  00000000  00001f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00009f51  00000000  00000000  00002d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002504  00000000  00000000  0000cc65  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000075e8  00000000  00000000  0000f169  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000780  00000000  00000000  00016754  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000035b0  00000000  00000000  00016ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003af3  00000000  00000000  0001a484  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000006b8  00000000  00000000  0001df77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
 *  \param[in] BufferPtr     Pointer to the data source RAM buffer
 */
void DataflashManager_WriteBlocks_RAM(const uint32_t BlockAddress,
                                      uint16_t TotalBlocks,
                                      uint8_t* BufferPtr)
{
       0:	8b c0       	rjmp	.+278    	; 0x118 <__ctors_end>
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       2:	00 00       	nop
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       4:	a7 c0       	rjmp	.+334    	; 0x154 <__bad_interrupt>
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       6:	00 00       	nop
       8:	a5 c0       	rjmp	.+330    	; 0x154 <__bad_interrupt>
       a:	00 00       	nop
       c:	a3 c0       	rjmp	.+326    	; 0x154 <__bad_interrupt>
       e:	00 00       	nop
      10:	a1 c0       	rjmp	.+322    	; 0x154 <__bad_interrupt>
      12:	00 00       	nop
      14:	9f c0       	rjmp	.+318    	; 0x154 <__bad_interrupt>
      16:	00 00       	nop
      18:	9d c0       	rjmp	.+314    	; 0x154 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9b c0       	rjmp	.+310    	; 0x154 <__bad_interrupt>
      1e:	00 00       	nop
      20:	99 c0       	rjmp	.+306    	; 0x154 <__bad_interrupt>
      22:	00 00       	nop
      24:	97 c0       	rjmp	.+302    	; 0x154 <__bad_interrupt>
      26:	00 00       	nop
      28:	c3 c6       	rjmp	.+3462   	; 0xdb0 <__vector_10>
      2a:	00 00       	nop
      2c:	84 c6       	rjmp	.+3336   	; 0xd36 <__vector_11>
      2e:	00 00       	nop
      30:	91 c0       	rjmp	.+290    	; 0x154 <__bad_interrupt>
      32:	00 00       	nop
      34:	8f c0       	rjmp	.+286    	; 0x154 <__bad_interrupt>
      36:	00 00       	nop
      38:	8d c0       	rjmp	.+282    	; 0x154 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8b c0       	rjmp	.+278    	; 0x154 <__bad_interrupt>
      3e:	00 00       	nop
      40:	89 c0       	rjmp	.+274    	; 0x154 <__bad_interrupt>
      42:	00 00       	nop
      44:	87 c0       	rjmp	.+270    	; 0x154 <__bad_interrupt>
      46:	00 00       	nop
      48:	85 c0       	rjmp	.+266    	; 0x154 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	83 c0       	rjmp	.+262    	; 0x154 <__bad_interrupt>
      4e:	00 00       	nop
      50:	81 c0       	rjmp	.+258    	; 0x154 <__bad_interrupt>
      52:	00 00       	nop
      54:	7f c0       	rjmp	.+254    	; 0x154 <__bad_interrupt>
      56:	00 00       	nop
      58:	7d c0       	rjmp	.+250    	; 0x154 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7b c0       	rjmp	.+246    	; 0x154 <__bad_interrupt>
      5e:	00 00       	nop
      60:	79 c0       	rjmp	.+242    	; 0x154 <__bad_interrupt>
      62:	00 00       	nop
      64:	77 c0       	rjmp	.+238    	; 0x154 <__bad_interrupt>
      66:	00 00       	nop
      68:	75 c0       	rjmp	.+234    	; 0x154 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	73 c0       	rjmp	.+230    	; 0x154 <__bad_interrupt>
      6e:	00 00       	nop
      70:	71 c0       	rjmp	.+226    	; 0x154 <__bad_interrupt>
      72:	00 00       	nop
      74:	6f c0       	rjmp	.+222    	; 0x154 <__bad_interrupt>
      76:	00 00       	nop
      78:	6d c0       	rjmp	.+218    	; 0x154 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6b c0       	rjmp	.+214    	; 0x154 <__bad_interrupt>
      7e:	00 00       	nop
      80:	69 c0       	rjmp	.+210    	; 0x154 <__bad_interrupt>
      82:	00 00       	nop
      84:	67 c0       	rjmp	.+206    	; 0x154 <__bad_interrupt>
      86:	00 00       	nop
      88:	65 c0       	rjmp	.+202    	; 0x154 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	63 c0       	rjmp	.+198    	; 0x154 <__bad_interrupt>
      8e:	00 00       	nop
      90:	61 c0       	rjmp	.+194    	; 0x154 <__bad_interrupt>
      92:	00 00       	nop
      94:	5f c0       	rjmp	.+190    	; 0x154 <__bad_interrupt>
      96:	00 00       	nop

00000098 <DeviceDescriptor>:
      98:	12 01 10 01 00 00 00 08 eb 03 45 20 01 00 01 02     ..........E ....
      a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
      aa:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 08 06     .. .....2.......
      ba:	50 00 07 05 83 02 40 00 01 07 05 04 02 40 00 01     P.....@......@..

000000ca <LanguageString>:
      ca:	04 03 09 04                                         ....

000000ce <ManufacturerString>:
      ce:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      de:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e8 <ProductString>:
      e8:	2e 03 4c 00 55 00 46 00 41 00 20 00 4d 00 61 00     ..L.U.F.A. .M.a.
      f8:	73 00 73 00 20 00 53 00 74 00 6f 00 72 00 61 00     s.s. .S.t.o.r.a.
     108:	67 00 65 00 20 00 44 00 65 00 6d 00 6f 00 00 00     g.e. .D.e.m.o...

00000118 <__ctors_end>:
     118:	11 24       	eor	r1, r1
     11a:	1f be       	out	0x3f, r1	; 63
     11c:	cf ef       	ldi	r28, 0xFF	; 255
     11e:	d0 e2       	ldi	r29, 0x20	; 32
     120:	de bf       	out	0x3e, r29	; 62
     122:	cd bf       	out	0x3d, r28	; 61

00000124 <__do_copy_data>:
     124:	11 e0       	ldi	r17, 0x01	; 1
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	ea e9       	ldi	r30, 0x9A	; 154
     12c:	f9 e1       	ldi	r31, 0x19	; 25
     12e:	00 e0       	ldi	r16, 0x00	; 0
     130:	0b bf       	out	0x3b, r16	; 59
     132:	02 c0       	rjmp	.+4      	; 0x138 <__do_copy_data+0x14>
     134:	07 90       	elpm	r0, Z+
     136:	0d 92       	st	X+, r0
     138:	ae 36       	cpi	r26, 0x6E	; 110
     13a:	b1 07       	cpc	r27, r17
     13c:	d9 f7       	brne	.-10     	; 0x134 <__do_copy_data+0x10>

0000013e <__do_clear_bss>:
     13e:	11 e0       	ldi	r17, 0x01	; 1
     140:	ae e6       	ldi	r26, 0x6E	; 110
     142:	b1 e0       	ldi	r27, 0x01	; 1
     144:	01 c0       	rjmp	.+2      	; 0x148 <.do_clear_bss_start>

00000146 <.do_clear_bss_loop>:
     146:	1d 92       	st	X+, r1

00000148 <.do_clear_bss_start>:
     148:	ab 37       	cpi	r26, 0x7B	; 123
     14a:	b1 07       	cpc	r27, r17
     14c:	e1 f7       	brne	.-8      	; 0x146 <.do_clear_bss_loop>
     14e:	5a d0       	rcall	.+180    	; 0x204 <main>
     150:	0c 94 cb 0c 	jmp	0x1996	; 0x1996 <_exit>

00000154 <__bad_interrupt>:
     154:	55 cf       	rjmp	.-342    	; 0x0 <__vectors>

00000156 <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     156:	8b b1       	in	r24, 0x0b	; 11
     158:	8f 70       	andi	r24, 0x0F	; 15
     15a:	80 6a       	ori	r24, 0xA0	; 160
     15c:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     15e:	08 95       	ret

00000160 <EVENT_USB_Device_Disconnect>:
     160:	8b b1       	in	r24, 0x0b	; 11
     162:	8f 70       	andi	r24, 0x0F	; 15
     164:	80 61       	ori	r24, 0x10	; 16
     166:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     168:	08 95       	ret

0000016a <CALLBACK_MS_Device_SCSICommandReceived>:
     16a:	2b b1       	in	r18, 0x0b	; 11
     16c:	2f 70       	andi	r18, 0x0F	; 15
     16e:	20 62       	ori	r18, 0x20	; 32
     170:	2b b9       	out	0x0b, r18	; 11
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
     172:	d6 d3       	rcall	.+1964   	; 0x920 <SCSI_DecodeSCSICommand>
     174:	9b b1       	in	r25, 0x0b	; 11
     176:	9f 70       	andi	r25, 0x0F	; 15
     178:	90 66       	ori	r25, 0x60	; 96
     17a:	9b b9       	out	0x0b, r25	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);

	return CommandSuccess;
}
     17c:	08 95       	ret

0000017e <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	91 e0       	ldi	r25, 0x01	; 1
     182:	0c 94 92 0c 	jmp	0x1924	; 0x1924 <MS_Device_ProcessControlRequest>

00000186 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	91 e0       	ldi	r25, 0x01	; 1
     18a:	0e 94 57 0c 	call	0x18ae	; 0x18ae <MS_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     18e:	80 fd       	sbrc	r24, 0
     190:	02 c0       	rjmp	.+4      	; 0x196 <EVENT_USB_Device_ConfigurationChanged+0x10>
     192:	90 e9       	ldi	r25, 0x90	; 144
     194:	01 c0       	rjmp	.+2      	; 0x198 <EVENT_USB_Device_ConfigurationChanged+0x12>
     196:	90 e6       	ldi	r25, 0x60	; 96
     198:	8b b1       	in	r24, 0x0b	; 11
     19a:	8f 70       	andi	r24, 0x0F	; 15
     19c:	98 2b       	or	r25, r24
     19e:	9b b9       	out	0x0b, r25	; 11
}
     1a0:	08 95       	ret

000001a2 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     1a2:	84 b7       	in	r24, 0x34	; 52
     1a4:	87 7f       	andi	r24, 0xF7	; 247
     1a6:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     1a8:	88 e1       	ldi	r24, 0x18	; 24
     1aa:	0f b6       	in	r0, 0x3f	; 63
     1ac:	f8 94       	cli
     1ae:	80 93 60 00 	sts	0x0060, r24
     1b2:	10 92 60 00 	sts	0x0060, r1
     1b6:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	20 e8       	ldi	r18, 0x80	; 128
     1be:	0f b6       	in	r0, 0x3f	; 63
     1c0:	f8 94       	cli
     1c2:	20 93 61 00 	sts	0x0061, r18
     1c6:	80 93 61 00 	sts	0x0061, r24
     1ca:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     1cc:	8a b1       	in	r24, 0x0a	; 10
     1ce:	80 6f       	ori	r24, 0xF0	; 240
     1d0:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     1d2:	8b b1       	in	r24, 0x0b	; 11
     1d4:	8f 70       	andi	r24, 0x0F	; 15
     1d6:	8b b9       	out	0x0b, r24	; 11
			 *  \param[in] SPIOptions  SPI Options, a mask consisting of one of each of the \c SPI_SPEED_*,
			 *                         \c SPI_SCK_*, \c SPI_SAMPLE_*, \c SPI_ORDER_* and \c SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				DDRB  |=  ((1 << 1) | (1 << 2));
     1d8:	84 b1       	in	r24, 0x04	; 4
     1da:	86 60       	ori	r24, 0x06	; 6
     1dc:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~((1 << 0) | (1 << 3));
     1de:	84 b1       	in	r24, 0x04	; 4
     1e0:	86 7f       	andi	r24, 0xF6	; 246
     1e2:	84 b9       	out	0x04, r24	; 4
				PORTB |=  ((1 << 0) | (1 << 3));
     1e4:	85 b1       	in	r24, 0x05	; 5
     1e6:	89 60       	ori	r24, 0x09	; 9
     1e8:	85 b9       	out	0x05, r24	; 5

				SPCR   = ((1 << SPE) | SPIOptions);
     1ea:	8c e5       	ldi	r24, 0x5C	; 92
     1ec:	8c bd       	out	0x2c, r24	; 44

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     1ee:	8d b5       	in	r24, 0x2d	; 45
     1f0:	81 60       	ori	r24, 0x01	; 1
     1f2:	8d bd       	out	0x2d, r24	; 45
			/** Initialises the dataflash driver so that commands and data may be sent to an attached dataflash IC.
			 *  The microcontroller's SPI driver MUST be initialized before any of the dataflash commands are used.
			 */
			static inline void Dataflash_Init(void)
			{
				DATAFLASH_CHIPCS_DDR  |= DATAFLASH_CHIPCS_MASK;
     1f4:	8d b1       	in	r24, 0x0d	; 13
     1f6:	83 60       	ori	r24, 0x03	; 3
     1f8:	8d b9       	out	0x0d, r24	; 13
				DATAFLASH_CHIPCS_PORT |= DATAFLASH_CHIPCS_MASK;
     1fa:	8e b1       	in	r24, 0x0e	; 14
     1fc:	83 60       	ori	r24, 0x03	; 3
     1fe:	8e b9       	out	0x0e, r24	; 14

	/* Hardware Initialization */
	LEDs_Init();
	SPI_Init(SPI_SPEED_FCPU_DIV_2 | SPI_ORDER_MSB_FIRST | SPI_SCK_LEAD_FALLING | SPI_SAMPLE_TRAILING | SPI_MODE_MASTER);
	Dataflash_Init();
	USB_Init();
     200:	84 d5       	rcall	.+2824   	; 0xd0a <USB_Init>

	/* Clear Dataflash sector protections, if enabled */
	DataflashManager_ResetDataflashProtections();
}
     202:	81 c0       	rjmp	.+258    	; 0x306 <DataflashManager_ResetDataflashProtections>

00000204 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     204:	ce df       	rcall	.-100    	; 0x1a2 <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     206:	8b b1       	in	r24, 0x0b	; 11
     208:	8f 70       	andi	r24, 0x0F	; 15
     20a:	80 61       	ori	r24, 0x10	; 16
     20c:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     20e:	78 94       	sei

	for (;;)
	{
		MS_Device_USBTask(&Disk_MS_Interface);
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	91 e0       	ldi	r25, 0x01	; 1
     214:	0e 94 34 0b 	call	0x1668	; 0x1668 <MS_Device_USBTask>
		USB_USBTask();
     218:	0e 94 21 0b 	call	0x1642	; 0x1642 <USB_USBTask>
     21c:	f9 cf       	rjmp	.-14     	; 0x210 <main+0xc>

0000021e <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     21e:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     220:	92 30       	cpi	r25, 0x02	; 2
     222:	49 f0       	breq	.+18     	; 0x236 <CALLBACK_USB_GetDescriptor+0x18>
     224:	93 30       	cpi	r25, 0x03	; 3
     226:	61 f0       	breq	.+24     	; 0x240 <CALLBACK_USB_GetDescriptor+0x22>
     228:	91 30       	cpi	r25, 0x01	; 1
     22a:	f9 f4       	brne	.+62     	; 0x26a <CALLBACK_USB_GetDescriptor+0x4c>
     22c:	e8 e9       	ldi	r30, 0x98	; 152
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	22 e1       	ldi	r18, 0x12	; 18
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	1e c0       	rjmp	.+60     	; 0x272 <CALLBACK_USB_GetDescriptor+0x54>
     236:	ea ea       	ldi	r30, 0xAA	; 170
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	20 e2       	ldi	r18, 0x20	; 32
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	19 c0       	rjmp	.+50     	; 0x272 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     240:	81 30       	cpi	r24, 0x01	; 1
     242:	49 f0       	breq	.+18     	; 0x256 <CALLBACK_USB_GetDescriptor+0x38>
     244:	81 30       	cpi	r24, 0x01	; 1
     246:	18 f0       	brcs	.+6      	; 0x24e <CALLBACK_USB_GetDescriptor+0x30>
     248:	82 30       	cpi	r24, 0x02	; 2
     24a:	79 f4       	brne	.+30     	; 0x26a <CALLBACK_USB_GetDescriptor+0x4c>
     24c:	08 c0       	rjmp	.+16     	; 0x25e <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     24e:	ea ec       	ldi	r30, 0xCA	; 202
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	84 91       	lpm	r24, Z+
     254:	07 c0       	rjmp	.+14     	; 0x264 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     256:	ee ec       	ldi	r30, 0xCE	; 206
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	84 91       	lpm	r24, Z+
     25c:	03 c0       	rjmp	.+6      	; 0x264 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     25e:	e8 ee       	ldi	r30, 0xE8	; 232
     260:	f0 e0       	ldi	r31, 0x00	; 0
     262:	84 91       	lpm	r24, Z+
     264:	28 2f       	mov	r18, r24
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	04 c0       	rjmp	.+8      	; 0x272 <CALLBACK_USB_GetDescriptor+0x54>
     26a:	e0 e0       	ldi	r30, 0x00	; 0
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	20 e0       	ldi	r18, 0x00	; 0
     270:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     272:	ed 93       	st	X+, r30
     274:	fc 93       	st	X, r31
	return Size;
}
     276:	c9 01       	movw	r24, r18
     278:	08 95       	ret

0000027a <Dataflash_SelectChipFromPage>:
			 *
			 *  \param[in] PageAddress  Address of the page to manipulate, ranging from
			 *                          ((DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS) - 1).
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
     27a:	9c 01       	movw	r18, r24
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     27c:	8e b1       	in	r24, 0x0e	; 14
     27e:	83 60       	ori	r24, 0x03	; 3
     280:	8e b9       	out	0x0e, r24	; 14
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
				Dataflash_DeselectChip();

				if (PageAddress >= (DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS))
     282:	80 e4       	ldi	r24, 0x40	; 64
     284:	20 30       	cpi	r18, 0x00	; 0
     286:	38 07       	cpc	r19, r24
     288:	58 f4       	brcc	.+22     	; 0x2a0 <Dataflash_SelectChipFromPage+0x26>
				  return;

				if (PageAddress & 0x01)
     28a:	20 ff       	sbrs	r18, 0
     28c:	05 c0       	rjmp	.+10     	; 0x298 <Dataflash_SelectChipFromPage+0x1e>
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     28e:	8e b1       	in	r24, 0x0e	; 14
     290:	8c 7f       	andi	r24, 0xFC	; 252
     292:	81 60       	ori	r24, 0x01	; 1
     294:	8e b9       	out	0x0e, r24	; 14
     296:	08 95       	ret
     298:	8e b1       	in	r24, 0x0e	; 14
     29a:	8c 7f       	andi	r24, 0xFC	; 252
     29c:	82 60       	ori	r24, 0x02	; 2
     29e:	8e b9       	out	0x0e, r24	; 14
     2a0:	08 95       	ret

000002a2 <Dataflash_ToggleSelectedChipCS>:
			 *  or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     2a2:	8e b1       	in	r24, 0x0e	; 14
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     2a4:	9e b1       	in	r25, 0x0e	; 14
     2a6:	93 60       	ori	r25, 0x03	; 3
     2a8:	9e b9       	out	0x0e, r25	; 14
			{
				uint8_t SelectedChipMask = Dataflash_GetSelectedChip();

				Dataflash_DeselectChip();
				Dataflash_SelectChip(SelectedChipMask);
			}
     2aa:	9e b1       	in	r25, 0x0e	; 14
     2ac:	83 70       	andi	r24, 0x03	; 3
     2ae:	9c 7f       	andi	r25, 0xFC	; 252
     2b0:	89 2b       	or	r24, r25
     2b2:	8e b9       	out	0x0e, r24	; 14
     2b4:	08 95       	ret

000002b6 <Dataflash_WaitWhileBusy>:
			/** Spin-loops while the currently selected dataflash is busy executing a command, such as a main
			 *  memory page program or main memory to buffer transfer.
			 */
			static inline void Dataflash_WaitWhileBusy(void)
			{
				Dataflash_ToggleSelectedChipCS();
     2b6:	f5 df       	rcall	.-22     	; 0x2a2 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     2b8:	87 ed       	ldi	r24, 0xD7	; 215
     2ba:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     2bc:	0d b4       	in	r0, 0x2d	; 45
     2be:	07 fe       	sbrs	r0, 7
     2c0:	fd cf       	rjmp	.-6      	; 0x2bc <Dataflash_WaitWhileBusy+0x6>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     2c2:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     2c4:	0d b4       	in	r0, 0x2d	; 45
     2c6:	07 fe       	sbrs	r0, 7
     2c8:	fd cf       	rjmp	.-6      	; 0x2c4 <Dataflash_WaitWhileBusy+0xe>
				Dataflash_SendByte(DF_CMD_GETSTATUS);
				while (!(Dataflash_ReceiveByte() & DF_STATUS_READY));
     2ca:	0e b4       	in	r0, 0x2e	; 46
     2cc:	07 fe       	sbrs	r0, 7
     2ce:	f9 cf       	rjmp	.-14     	; 0x2c2 <Dataflash_WaitWhileBusy+0xc>
				Dataflash_ToggleSelectedChipCS();
			}
     2d0:	e8 cf       	rjmp	.-48     	; 0x2a2 <Dataflash_ToggleSelectedChipCS>

000002d2 <Dataflash_SendAddressBytes>:
			 *  \param[in] BufferByte   Address within the dataflash's buffer
			 */
			static inline void Dataflash_SendAddressBytes(uint16_t PageAddress,
			                                              const uint16_t BufferByte)
			{
				PageAddress >>= 1;
     2d2:	9c 01       	movw	r18, r24
     2d4:	36 95       	lsr	r19
     2d6:	27 95       	ror	r18

				Dataflash_SendByte(PageAddress >> 5);
     2d8:	36 e0       	ldi	r19, 0x06	; 6
     2da:	96 95       	lsr	r25
     2dc:	87 95       	ror	r24
     2de:	3a 95       	dec	r19
     2e0:	e1 f7       	brne	.-8      	; 0x2da <Dataflash_SendAddressBytes+0x8>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     2e2:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     2e4:	0d b4       	in	r0, 0x2d	; 45
     2e6:	07 fe       	sbrs	r0, 7
     2e8:	fd cf       	rjmp	.-6      	; 0x2e4 <Dataflash_SendAddressBytes+0x12>
				Dataflash_SendByte((PageAddress << 3) | (BufferByte >> 8));
     2ea:	82 2f       	mov	r24, r18
     2ec:	88 0f       	add	r24, r24
     2ee:	88 0f       	add	r24, r24
     2f0:	88 0f       	add	r24, r24
     2f2:	87 2b       	or	r24, r23
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     2f4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     2f6:	0d b4       	in	r0, 0x2d	; 45
     2f8:	07 fe       	sbrs	r0, 7
     2fa:	fd cf       	rjmp	.-6      	; 0x2f6 <Dataflash_SendAddressBytes+0x24>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     2fc:	6e bd       	out	0x2e, r22	; 46
				while (!(SPSR & (1 << SPIF)));
     2fe:	0d b4       	in	r0, 0x2d	; 45
     300:	07 fe       	sbrs	r0, 7
     302:	fd cf       	rjmp	.-6      	; 0x2fe <Dataflash_SendAddressBytes+0x2c>
				Dataflash_SendByte(BufferByte);
			}
     304:	08 95       	ret

00000306 <DataflashManager_ResetDataflashProtections>:
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     306:	8e b1       	in	r24, 0x0e	; 14
     308:	8c 7f       	andi	r24, 0xFC	; 252
     30a:	82 60       	ori	r24, 0x02	; 2
     30c:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     30e:	87 ed       	ldi	r24, 0xD7	; 215
     310:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     312:	0d b4       	in	r0, 0x2d	; 45
     314:	07 fe       	sbrs	r0, 7
     316:	fd cf       	rjmp	.-6      	; 0x312 <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     318:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     31a:	0d b4       	in	r0, 0x2d	; 45
     31c:	07 fe       	sbrs	r0, 7
     31e:	fd cf       	rjmp	.-6      	; 0x31a <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     320:	0e b4       	in	r0, 0x2e	; 46
     322:	01 fe       	sbrs	r0, 1
     324:	15 c0       	rjmp	.+42     	; 0x350 <DataflashManager_ResetDataflashProtections+0x4a>
	{
		Dataflash_ToggleSelectedChipCS();
     326:	bd df       	rcall	.-134    	; 0x2a2 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     328:	8d e3       	ldi	r24, 0x3D	; 61
     32a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     32c:	0d b4       	in	r0, 0x2d	; 45
     32e:	07 fe       	sbrs	r0, 7
     330:	fd cf       	rjmp	.-6      	; 0x32c <DataflashManager_ResetDataflashProtections+0x26>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     332:	8a e2       	ldi	r24, 0x2A	; 42
     334:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     336:	0d b4       	in	r0, 0x2d	; 45
     338:	07 fe       	sbrs	r0, 7
     33a:	fd cf       	rjmp	.-6      	; 0x336 <DataflashManager_ResetDataflashProtections+0x30>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     33c:	8f e7       	ldi	r24, 0x7F	; 127
     33e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     340:	0d b4       	in	r0, 0x2d	; 45
     342:	07 fe       	sbrs	r0, 7
     344:	fd cf       	rjmp	.-6      	; 0x340 <DataflashManager_ResetDataflashProtections+0x3a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     346:	8a e9       	ldi	r24, 0x9A	; 154
     348:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     34a:	0d b4       	in	r0, 0x2d	; 45
     34c:	07 fe       	sbrs	r0, 7
     34e:	fd cf       	rjmp	.-6      	; 0x34a <DataflashManager_ResetDataflashProtections+0x44>
     350:	8e b1       	in	r24, 0x0e	; 14
     352:	8c 7f       	andi	r24, 0xFC	; 252
     354:	81 60       	ori	r24, 0x01	; 1
     356:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     358:	87 ed       	ldi	r24, 0xD7	; 215
     35a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     35c:	0d b4       	in	r0, 0x2d	; 45
     35e:	07 fe       	sbrs	r0, 7
     360:	fd cf       	rjmp	.-6      	; 0x35c <DataflashManager_ResetDataflashProtections+0x56>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     362:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     364:	0d b4       	in	r0, 0x2d	; 45
     366:	07 fe       	sbrs	r0, 7
     368:	fd cf       	rjmp	.-6      	; 0x364 <DataflashManager_ResetDataflashProtections+0x5e>
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     36a:	0e b4       	in	r0, 0x2e	; 46
     36c:	01 fe       	sbrs	r0, 1
     36e:	15 c0       	rjmp	.+42     	; 0x39a <DataflashManager_ResetDataflashProtections+0x94>
	{
		Dataflash_ToggleSelectedChipCS();
     370:	98 df       	rcall	.-208    	; 0x2a2 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     372:	8d e3       	ldi	r24, 0x3D	; 61
     374:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     376:	0d b4       	in	r0, 0x2d	; 45
     378:	07 fe       	sbrs	r0, 7
     37a:	fd cf       	rjmp	.-6      	; 0x376 <DataflashManager_ResetDataflashProtections+0x70>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     37c:	8a e2       	ldi	r24, 0x2A	; 42
     37e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     380:	0d b4       	in	r0, 0x2d	; 45
     382:	07 fe       	sbrs	r0, 7
     384:	fd cf       	rjmp	.-6      	; 0x380 <DataflashManager_ResetDataflashProtections+0x7a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     386:	8f e7       	ldi	r24, 0x7F	; 127
     388:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     38a:	0d b4       	in	r0, 0x2d	; 45
     38c:	07 fe       	sbrs	r0, 7
     38e:	fd cf       	rjmp	.-6      	; 0x38a <DataflashManager_ResetDataflashProtections+0x84>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     390:	8a e9       	ldi	r24, 0x9A	; 154
     392:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     394:	0d b4       	in	r0, 0x2d	; 45
     396:	07 fe       	sbrs	r0, 7
     398:	fd cf       	rjmp	.-6      	; 0x394 <DataflashManager_ResetDataflashProtections+0x8e>
     39a:	8e b1       	in	r24, 0x0e	; 14
     39c:	83 60       	ori	r24, 0x03	; 3
     39e:	8e b9       	out	0x0e, r24	; 14
	}
	#endif

	/* Deselect current Dataflash chip */
	Dataflash_DeselectChip();
}
     3a0:	08 95       	ret

000003a2 <DataflashManager_CheckDataflashOperation>:
     3a2:	8e b1       	in	r24, 0x0e	; 14
     3a4:	8c 7f       	andi	r24, 0xFC	; 252
     3a6:	82 60       	ori	r24, 0x02	; 2
     3a8:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     3aa:	8f e9       	ldi	r24, 0x9F	; 159
     3ac:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     3ae:	0d b4       	in	r0, 0x2d	; 45
     3b0:	07 fe       	sbrs	r0, 7
     3b2:	fd cf       	rjmp	.-6      	; 0x3ae <DataflashManager_CheckDataflashOperation+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     3b4:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     3b6:	0d b4       	in	r0, 0x2d	; 45
     3b8:	07 fe       	sbrs	r0, 7
     3ba:	fd cf       	rjmp	.-6      	; 0x3b6 <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
     3bc:	9e b5       	in	r25, 0x2e	; 46
     3be:	8e b1       	in	r24, 0x0e	; 14
     3c0:	83 60       	ori	r24, 0x03	; 3
     3c2:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     3c4:	9f 31       	cpi	r25, 0x1F	; 31
     3c6:	11 f0       	breq	.+4      	; 0x3cc <DataflashManager_CheckDataflashOperation+0x2a>
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	08 95       	ret
     3cc:	8e b1       	in	r24, 0x0e	; 14
     3ce:	8c 7f       	andi	r24, 0xFC	; 252
     3d0:	81 60       	ori	r24, 0x01	; 1
     3d2:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     3d4:	8f e9       	ldi	r24, 0x9F	; 159
     3d6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     3d8:	0d b4       	in	r0, 0x2d	; 45
     3da:	07 fe       	sbrs	r0, 7
     3dc:	fd cf       	rjmp	.-6      	; 0x3d8 <DataflashManager_CheckDataflashOperation+0x36>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     3de:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     3e0:	0d b4       	in	r0, 0x2d	; 45
     3e2:	07 fe       	sbrs	r0, 7
     3e4:	fd cf       	rjmp	.-6      	; 0x3e0 <DataflashManager_CheckDataflashOperation+0x3e>
				return SPDR;
     3e6:	9e b5       	in	r25, 0x2e	; 46
     3e8:	8e b1       	in	r24, 0x0e	; 14
     3ea:	83 60       	ori	r24, 0x03	; 3
     3ec:	8e b9       	out	0x0e, r24	; 14
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	9f 31       	cpi	r25, 0x1F	; 31
     3f2:	09 f4       	brne	.+2      	; 0x3f6 <DataflashManager_CheckDataflashOperation+0x54>
     3f4:	81 e0       	ldi	r24, 0x01	; 1
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     3f6:	08 95       	ret

000003f8 <DataflashManager_ReadBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to read
 */
void DataflashManager_ReadBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
     3f8:	af 92       	push	r10
     3fa:	bf 92       	push	r11
     3fc:	cf 92       	push	r12
     3fe:	df 92       	push	r13
     400:	ef 92       	push	r14
     402:	ff 92       	push	r15
     404:	0f 93       	push	r16
     406:	1f 93       	push	r17
     408:	df 93       	push	r29
     40a:	cf 93       	push	r28
     40c:	0f 92       	push	r0
     40e:	cd b7       	in	r28, 0x3d	; 61
     410:	de b7       	in	r29, 0x3e	; 62
     412:	5c 01       	movw	r10, r24
     414:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     416:	e9 e0       	ldi	r30, 0x09	; 9
     418:	44 0f       	add	r20, r20
     41a:	55 1f       	adc	r21, r21
     41c:	66 1f       	adc	r22, r22
     41e:	77 1f       	adc	r23, r23
     420:	ea 95       	dec	r30
     422:	d1 f7       	brne	.-12     	; 0x418 <DataflashManager_ReadBlocks+0x20>
     424:	db 01       	movw	r26, r22
     426:	ca 01       	movw	r24, r20
     428:	3a e0       	ldi	r19, 0x0A	; 10
     42a:	b6 95       	lsr	r27
     42c:	a7 95       	ror	r26
     42e:	97 95       	ror	r25
     430:	87 95       	ror	r24
     432:	3a 95       	dec	r19
     434:	d1 f7       	brne	.-12     	; 0x42a <DataflashManager_ReadBlocks+0x32>
     436:	8c 01       	movw	r16, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     438:	2f ef       	ldi	r18, 0xFF	; 255
     43a:	c2 2e       	mov	r12, r18
     43c:	23 e0       	ldi	r18, 0x03	; 3
     43e:	d2 2e       	mov	r13, r18
     440:	c4 22       	and	r12, r20
     442:	d5 22       	and	r13, r21
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     444:	1a df       	rcall	.-460    	; 0x27a <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     446:	82 ed       	ldi	r24, 0xD2	; 210
     448:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     44a:	0d b4       	in	r0, 0x2d	; 45
     44c:	07 fe       	sbrs	r0, 7
     44e:	fd cf       	rjmp	.-6      	; 0x44a <DataflashManager_ReadBlocks+0x52>

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
     450:	c8 01       	movw	r24, r16
     452:	b6 01       	movw	r22, r12
     454:	3e df       	rcall	.-388    	; 0x2d2 <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     456:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     458:	0d b4       	in	r0, 0x2d	; 45
     45a:	07 fe       	sbrs	r0, 7
     45c:	fd cf       	rjmp	.-6      	; 0x458 <DataflashManager_ReadBlocks+0x60>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     45e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     460:	0d b4       	in	r0, 0x2d	; 45
     462:	07 fe       	sbrs	r0, 7
     464:	fd cf       	rjmp	.-6      	; 0x460 <DataflashManager_ReadBlocks+0x68>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     466:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     468:	0d b4       	in	r0, 0x2d	; 45
     46a:	07 fe       	sbrs	r0, 7
     46c:	fd cf       	rjmp	.-6      	; 0x468 <DataflashManager_ReadBlocks+0x70>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     46e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     470:	0d b4       	in	r0, 0x2d	; 45
     472:	07 fe       	sbrs	r0, 7
     474:	fd cf       	rjmp	.-6      	; 0x470 <DataflashManager_ReadBlocks+0x78>
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     476:	ce d3       	rcall	.+1948   	; 0xc14 <Endpoint_WaitUntilReady>
     478:	88 23       	and	r24, r24
     47a:	09 f0       	breq	.+2      	; 0x47e <DataflashManager_ReadBlocks+0x86>
     47c:	c5 c0       	rjmp	.+394    	; 0x608 <DataflashManager_ReadBlocks+0x210>
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     47e:	94 e0       	ldi	r25, 0x04	; 4
     480:	d6 94       	lsr	r13
     482:	c7 94       	ror	r12
     484:	9a 95       	dec	r25
     486:	e1 f7       	brne	.-8      	; 0x480 <DataflashManager_ReadBlocks+0x88>
     488:	9c 2d       	mov	r25, r12
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     48a:	82 ed       	ldi	r24, 0xD2	; 210
     48c:	c8 2e       	mov	r12, r24
     48e:	ac c0       	rjmp	.+344    	; 0x5e8 <DataflashManager_ReadBlocks+0x1f0>
     490:	dd 24       	eor	r13, r13
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     492:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently full */
			if (!(Endpoint_IsReadWriteAllowed()))
     496:	85 fd       	sbrc	r24, 5
     498:	0b c0       	rjmp	.+22     	; 0x4b0 <DataflashManager_ReadBlocks+0xb8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     49a:	80 91 e8 00 	lds	r24, 0x00E8
     49e:	8e 77       	andi	r24, 0x7E	; 126
     4a0:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the endpoint bank to send its contents to the host */
				Endpoint_ClearIN();

				/* Wait until the endpoint is ready for more data */
				if (Endpoint_WaitUntilReady())
     4a4:	99 83       	std	Y+1, r25	; 0x01
     4a6:	b6 d3       	rcall	.+1900   	; 0xc14 <Endpoint_WaitUntilReady>
     4a8:	99 81       	ldd	r25, Y+1	; 0x01
     4aa:	88 23       	and	r24, r24
     4ac:	09 f0       	breq	.+2      	; 0x4b0 <DataflashManager_ReadBlocks+0xb8>
     4ae:	ac c0       	rjmp	.+344    	; 0x608 <DataflashManager_ReadBlocks+0x210>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     4b0:	90 34       	cpi	r25, 0x40	; 64
     4b2:	e9 f4       	brne	.+58     	; 0x4ee <DataflashManager_ReadBlocks+0xf6>
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     4b4:	0f 5f       	subi	r16, 0xFF	; 255
     4b6:	1f 4f       	sbci	r17, 0xFF	; 255

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     4b8:	c8 01       	movw	r24, r16
     4ba:	df de       	rcall	.-578    	; 0x27a <Dataflash_SelectChipFromPage>
     4bc:	ce bc       	out	0x2e, r12	; 46
				while (!(SPSR & (1 << SPIF)));
     4be:	0d b4       	in	r0, 0x2d	; 45
     4c0:	07 fe       	sbrs	r0, 7
     4c2:	fd cf       	rjmp	.-6      	; 0x4be <DataflashManager_ReadBlocks+0xc6>

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     4c4:	c8 01       	movw	r24, r16
     4c6:	60 e0       	ldi	r22, 0x00	; 0
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	03 df       	rcall	.-506    	; 0x2d2 <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4cc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     4ce:	0d b4       	in	r0, 0x2d	; 45
     4d0:	07 fe       	sbrs	r0, 7
     4d2:	fd cf       	rjmp	.-6      	; 0x4ce <DataflashManager_ReadBlocks+0xd6>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4d4:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     4d6:	0d b4       	in	r0, 0x2d	; 45
     4d8:	07 fe       	sbrs	r0, 7
     4da:	fd cf       	rjmp	.-6      	; 0x4d6 <DataflashManager_ReadBlocks+0xde>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4dc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     4de:	0d b4       	in	r0, 0x2d	; 45
     4e0:	07 fe       	sbrs	r0, 7
     4e2:	fd cf       	rjmp	.-6      	; 0x4de <DataflashManager_ReadBlocks+0xe6>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4e4:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     4e6:	0d b4       	in	r0, 0x2d	; 45
     4e8:	07 fe       	sbrs	r0, 7
     4ea:	fd cf       	rjmp	.-6      	; 0x4e6 <DataflashManager_ReadBlocks+0xee>
     4ec:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     4ee:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     4f0:	0d b4       	in	r0, 0x2d	; 45
     4f2:	07 fe       	sbrs	r0, 7
     4f4:	fd cf       	rjmp	.-6      	; 0x4f0 <DataflashManager_ReadBlocks+0xf8>
				return SPDR;
     4f6:	8e b5       	in	r24, 0x2e	; 46
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     4f8:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     4fc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     4fe:	0d b4       	in	r0, 0x2d	; 45
     500:	07 fe       	sbrs	r0, 7
     502:	fd cf       	rjmp	.-6      	; 0x4fe <DataflashManager_ReadBlocks+0x106>
				return SPDR;
     504:	8e b5       	in	r24, 0x2e	; 46
     506:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     50a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     50c:	0d b4       	in	r0, 0x2d	; 45
     50e:	07 fe       	sbrs	r0, 7
     510:	fd cf       	rjmp	.-6      	; 0x50c <DataflashManager_ReadBlocks+0x114>
				return SPDR;
     512:	8e b5       	in	r24, 0x2e	; 46
     514:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     518:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     51a:	0d b4       	in	r0, 0x2d	; 45
     51c:	07 fe       	sbrs	r0, 7
     51e:	fd cf       	rjmp	.-6      	; 0x51a <DataflashManager_ReadBlocks+0x122>
				return SPDR;
     520:	8e b5       	in	r24, 0x2e	; 46
     522:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     526:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     528:	0d b4       	in	r0, 0x2d	; 45
     52a:	07 fe       	sbrs	r0, 7
     52c:	fd cf       	rjmp	.-6      	; 0x528 <DataflashManager_ReadBlocks+0x130>
				return SPDR;
     52e:	8e b5       	in	r24, 0x2e	; 46
     530:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     534:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     536:	0d b4       	in	r0, 0x2d	; 45
     538:	07 fe       	sbrs	r0, 7
     53a:	fd cf       	rjmp	.-6      	; 0x536 <DataflashManager_ReadBlocks+0x13e>
				return SPDR;
     53c:	8e b5       	in	r24, 0x2e	; 46
     53e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     542:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     544:	0d b4       	in	r0, 0x2d	; 45
     546:	07 fe       	sbrs	r0, 7
     548:	fd cf       	rjmp	.-6      	; 0x544 <DataflashManager_ReadBlocks+0x14c>
				return SPDR;
     54a:	8e b5       	in	r24, 0x2e	; 46
     54c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     550:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     552:	0d b4       	in	r0, 0x2d	; 45
     554:	07 fe       	sbrs	r0, 7
     556:	fd cf       	rjmp	.-6      	; 0x552 <DataflashManager_ReadBlocks+0x15a>
				return SPDR;
     558:	8e b5       	in	r24, 0x2e	; 46
     55a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     55e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     560:	0d b4       	in	r0, 0x2d	; 45
     562:	07 fe       	sbrs	r0, 7
     564:	fd cf       	rjmp	.-6      	; 0x560 <DataflashManager_ReadBlocks+0x168>
				return SPDR;
     566:	8e b5       	in	r24, 0x2e	; 46
     568:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     56c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     56e:	0d b4       	in	r0, 0x2d	; 45
     570:	07 fe       	sbrs	r0, 7
     572:	fd cf       	rjmp	.-6      	; 0x56e <DataflashManager_ReadBlocks+0x176>
				return SPDR;
     574:	8e b5       	in	r24, 0x2e	; 46
     576:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     57a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     57c:	0d b4       	in	r0, 0x2d	; 45
     57e:	07 fe       	sbrs	r0, 7
     580:	fd cf       	rjmp	.-6      	; 0x57c <DataflashManager_ReadBlocks+0x184>
				return SPDR;
     582:	8e b5       	in	r24, 0x2e	; 46
     584:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     588:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     58a:	0d b4       	in	r0, 0x2d	; 45
     58c:	07 fe       	sbrs	r0, 7
     58e:	fd cf       	rjmp	.-6      	; 0x58a <DataflashManager_ReadBlocks+0x192>
				return SPDR;
     590:	8e b5       	in	r24, 0x2e	; 46
     592:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     596:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     598:	0d b4       	in	r0, 0x2d	; 45
     59a:	07 fe       	sbrs	r0, 7
     59c:	fd cf       	rjmp	.-6      	; 0x598 <DataflashManager_ReadBlocks+0x1a0>
				return SPDR;
     59e:	8e b5       	in	r24, 0x2e	; 46
     5a0:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     5a4:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5a6:	0d b4       	in	r0, 0x2d	; 45
     5a8:	07 fe       	sbrs	r0, 7
     5aa:	fd cf       	rjmp	.-6      	; 0x5a6 <DataflashManager_ReadBlocks+0x1ae>
				return SPDR;
     5ac:	8e b5       	in	r24, 0x2e	; 46
     5ae:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     5b2:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5b4:	0d b4       	in	r0, 0x2d	; 45
     5b6:	07 fe       	sbrs	r0, 7
     5b8:	fd cf       	rjmp	.-6      	; 0x5b4 <DataflashManager_ReadBlocks+0x1bc>
				return SPDR;
     5ba:	8e b5       	in	r24, 0x2e	; 46
     5bc:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     5c0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5c2:	0d b4       	in	r0, 0x2d	; 45
     5c4:	07 fe       	sbrs	r0, 7
     5c6:	fd cf       	rjmp	.-6      	; 0x5c2 <DataflashManager_ReadBlocks+0x1ca>
				return SPDR;
     5c8:	8e b5       	in	r24, 0x2e	; 46
     5ca:	80 93 f1 00 	sts	0x00F1, r24

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     5ce:	f5 01       	movw	r30, r10
     5d0:	86 a9       	ldd	r24, Z+54	; 0x36
     5d2:	88 23       	and	r24, r24
     5d4:	c9 f4       	brne	.+50     	; 0x608 <DataflashManager_ReadBlocks+0x210>
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     5d6:	9f 5f       	subi	r25, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     5d8:	d3 94       	inc	r13
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     5da:	f0 e2       	ldi	r31, 0x20	; 32
     5dc:	df 16       	cp	r13, r31
     5de:	09 f0       	breq	.+2      	; 0x5e2 <DataflashManager_ReadBlocks+0x1ea>
     5e0:	58 cf       	rjmp	.-336    	; 0x492 <DataflashManager_ReadBlocks+0x9a>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     5e2:	08 94       	sec
     5e4:	e1 08       	sbc	r14, r1
     5e6:	f1 08       	sbc	r15, r1

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	09 f0       	breq	.+2      	; 0x5f0 <DataflashManager_ReadBlocks+0x1f8>
     5ee:	50 cf       	rjmp	.-352    	; 0x490 <DataflashManager_ReadBlocks+0x98>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     5f0:	80 91 e8 00 	lds	r24, 0x00E8
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     5f4:	85 fd       	sbrc	r24, 5
     5f6:	05 c0       	rjmp	.+10     	; 0x602 <DataflashManager_ReadBlocks+0x20a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5f8:	80 91 e8 00 	lds	r24, 0x00E8
     5fc:	8e 77       	andi	r24, 0x7E	; 126
     5fe:	80 93 e8 00 	sts	0x00E8, r24
     602:	8e b1       	in	r24, 0x0e	; 14
     604:	83 60       	ori	r24, 0x03	; 3
     606:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearIN();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     608:	0f 90       	pop	r0
     60a:	cf 91       	pop	r28
     60c:	df 91       	pop	r29
     60e:	1f 91       	pop	r17
     610:	0f 91       	pop	r16
     612:	ff 90       	pop	r15
     614:	ef 90       	pop	r14
     616:	df 90       	pop	r13
     618:	cf 90       	pop	r12
     61a:	bf 90       	pop	r11
     61c:	af 90       	pop	r10
     61e:	08 95       	ret

00000620 <DataflashManager_WriteBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
void DataflashManager_WriteBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
     620:	8f 92       	push	r8
     622:	9f 92       	push	r9
     624:	af 92       	push	r10
     626:	bf 92       	push	r11
     628:	cf 92       	push	r12
     62a:	df 92       	push	r13
     62c:	ef 92       	push	r14
     62e:	ff 92       	push	r15
     630:	0f 93       	push	r16
     632:	1f 93       	push	r17
     634:	df 93       	push	r29
     636:	cf 93       	push	r28
     638:	0f 92       	push	r0
     63a:	cd b7       	in	r28, 0x3d	; 61
     63c:	de b7       	in	r29, 0x3e	; 62
     63e:	5c 01       	movw	r10, r24
     640:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     642:	09 e0       	ldi	r16, 0x09	; 9
     644:	44 0f       	add	r20, r20
     646:	55 1f       	adc	r21, r21
     648:	66 1f       	adc	r22, r22
     64a:	77 1f       	adc	r23, r23
     64c:	0a 95       	dec	r16
     64e:	d1 f7       	brne	.-12     	; 0x644 <DataflashManager_WriteBlocks+0x24>
     650:	db 01       	movw	r26, r22
     652:	ca 01       	movw	r24, r20
     654:	1a e0       	ldi	r17, 0x0A	; 10
     656:	b6 95       	lsr	r27
     658:	a7 95       	ror	r26
     65a:	97 95       	ror	r25
     65c:	87 95       	ror	r24
     65e:	1a 95       	dec	r17
     660:	d1 f7       	brne	.-12     	; 0x656 <DataflashManager_WriteBlocks+0x36>
     662:	8c 01       	movw	r16, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     664:	bf ef       	ldi	r27, 0xFF	; 255
     666:	cb 2e       	mov	r12, r27
     668:	b3 e0       	ldi	r27, 0x03	; 3
     66a:	db 2e       	mov	r13, r27
     66c:	c4 22       	and	r12, r20
     66e:	d5 22       	and	r13, r21
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
	bool     UsingSecondBuffer   = false;

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     670:	04 de       	rcall	.-1016   	; 0x27a <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     672:	83 e5       	ldi	r24, 0x53	; 83
     674:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     676:	0d b4       	in	r0, 0x2d	; 45
     678:	07 fe       	sbrs	r0, 7
     67a:	fd cf       	rjmp	.-6      	; 0x676 <DataflashManager_WriteBlocks+0x56>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
	/* Copy selected dataflash's current page contents to the Dataflash buffer */
	Dataflash_SendByte(DF_CMD_MAINMEMTOBUFF1);
	Dataflash_SendAddressBytes(CurrDFPage, 0);
     67c:	c8 01       	movw	r24, r16
     67e:	60 e0       	ldi	r22, 0x00	; 0
     680:	70 e0       	ldi	r23, 0x00	; 0
     682:	27 de       	rcall	.-946    	; 0x2d2 <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     684:	18 de       	rcall	.-976    	; 0x2b6 <Dataflash_WaitWhileBusy>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     686:	84 e8       	ldi	r24, 0x84	; 132
     688:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     68a:	0d b4       	in	r0, 0x2d	; 45
     68c:	07 fe       	sbrs	r0, 7
     68e:	fd cf       	rjmp	.-6      	; 0x68a <DataflashManager_WriteBlocks+0x6a>
#endif

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	b6 01       	movw	r22, r12
     696:	1d de       	rcall	.-966    	; 0x2d2 <Dataflash_SendAddressBytes>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     698:	bd d2       	rcall	.+1402   	; 0xc14 <Endpoint_WaitUntilReady>
     69a:	88 23       	and	r24, r24
     69c:	09 f0       	breq	.+2      	; 0x6a0 <DataflashManager_WriteBlocks+0x80>
     69e:	ea c0       	rjmp	.+468    	; 0x874 <DataflashManager_WriteBlocks+0x254>
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     6a0:	a4 e0       	ldi	r26, 0x04	; 4
     6a2:	d6 94       	lsr	r13
     6a4:	c7 94       	ror	r12
     6a6:	aa 95       	dec	r26
     6a8:	e1 f7       	brne	.-8      	; 0x6a2 <DataflashManager_WriteBlocks+0x82>
     6aa:	9c 2d       	mov	r25, r12
     6ac:	47 01       	movw	r8, r14
     6ae:	f5 e0       	ldi	r31, 0x05	; 5
     6b0:	88 0c       	add	r8, r8
     6b2:	99 1c       	adc	r9, r9
     6b4:	fa 95       	dec	r31
     6b6:	e1 f7       	brne	.-8      	; 0x6b0 <DataflashManager_WriteBlocks+0x90>
     6b8:	dd 24       	eor	r13, r13
     6ba:	bd c0       	rjmp	.+378    	; 0x836 <DataflashManager_WriteBlocks+0x216>
     6bc:	cc 24       	eor	r12, r12
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     6be:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently empty */
			if (!(Endpoint_IsReadWriteAllowed()))
     6c2:	85 fd       	sbrc	r24, 5
     6c4:	0b c0       	rjmp	.+22     	; 0x6dc <DataflashManager_WriteBlocks+0xbc>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     6c6:	80 91 e8 00 	lds	r24, 0x00E8
     6ca:	8b 77       	andi	r24, 0x7B	; 123
     6cc:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the current endpoint bank */
				Endpoint_ClearOUT();

				/* Wait until the host has sent another packet */
				if (Endpoint_WaitUntilReady())
     6d0:	99 83       	std	Y+1, r25	; 0x01
     6d2:	a0 d2       	rcall	.+1344   	; 0xc14 <Endpoint_WaitUntilReady>
     6d4:	99 81       	ldd	r25, Y+1	; 0x01
     6d6:	88 23       	and	r24, r24
     6d8:	09 f0       	breq	.+2      	; 0x6dc <DataflashManager_WriteBlocks+0xbc>
     6da:	cc c0       	rjmp	.+408    	; 0x874 <DataflashManager_WriteBlocks+0x254>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     6dc:	90 34       	cpi	r25, 0x40	; 64
     6de:	09 f0       	breq	.+2      	; 0x6e2 <DataflashManager_WriteBlocks+0xc2>
     6e0:	39 c0       	rjmp	.+114    	; 0x754 <DataflashManager_WriteBlocks+0x134>
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
     6e2:	e9 dd       	rcall	.-1070   	; 0x2b6 <Dataflash_WaitWhileBusy>
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     6e4:	dd 20       	and	r13, r13
     6e6:	11 f4       	brne	.+4      	; 0x6ec <DataflashManager_WriteBlocks+0xcc>
     6e8:	83 e8       	ldi	r24, 0x83	; 131
     6ea:	01 c0       	rjmp	.+2      	; 0x6ee <DataflashManager_WriteBlocks+0xce>
     6ec:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6ee:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     6f0:	0d b4       	in	r0, 0x2d	; 45
     6f2:	07 fe       	sbrs	r0, 7
     6f4:	fd cf       	rjmp	.-6      	; 0x6f0 <DataflashManager_WriteBlocks+0xd0>
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     6f6:	c8 01       	movw	r24, r16
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea dd       	rcall	.-1068   	; 0x2d2 <Dataflash_SendAddressBytes>

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     6fe:	0f 5f       	subi	r16, 0xFF	; 255
     700:	1f 4f       	sbci	r17, 0xFF	; 255
			 *  or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     702:	8e b1       	in	r24, 0x0e	; 14

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     704:	83 70       	andi	r24, 0x03	; 3
     706:	81 30       	cpi	r24, 0x01	; 1
     708:	09 f4       	brne	.+2      	; 0x70c <DataflashManager_WriteBlocks+0xec>
				  UsingSecondBuffer = !(UsingSecondBuffer);
     70a:	d8 26       	eor	r13, r24

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     70c:	c8 01       	movw	r24, r16
     70e:	b5 dd       	rcall	.-1174   	; 0x27a <Dataflash_SelectChipFromPage>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     710:	20 e4       	ldi	r18, 0x40	; 64
     712:	82 16       	cp	r8, r18
     714:	91 04       	cpc	r9, r1
     716:	78 f4       	brcc	.+30     	; 0x736 <DataflashManager_WriteBlocks+0x116>
				{
					/* Copy selected dataflash's current page contents to the Dataflash buffer */
					Dataflash_WaitWhileBusy();
     718:	ce dd       	rcall	.-1124   	; 0x2b6 <Dataflash_WaitWhileBusy>
					Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_MAINMEMTOBUFF2 : DF_CMD_MAINMEMTOBUFF1);
     71a:	dd 20       	and	r13, r13
     71c:	11 f4       	brne	.+4      	; 0x722 <DataflashManager_WriteBlocks+0x102>
     71e:	83 e5       	ldi	r24, 0x53	; 83
     720:	01 c0       	rjmp	.+2      	; 0x724 <DataflashManager_WriteBlocks+0x104>
     722:	85 e5       	ldi	r24, 0x55	; 85
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     724:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     726:	0d b4       	in	r0, 0x2d	; 45
     728:	07 fe       	sbrs	r0, 7
     72a:	fd cf       	rjmp	.-6      	; 0x726 <DataflashManager_WriteBlocks+0x106>
					Dataflash_SendAddressBytes(CurrDFPage, 0);
     72c:	c8 01       	movw	r24, r16
     72e:	60 e0       	ldi	r22, 0x00	; 0
     730:	70 e0       	ldi	r23, 0x00	; 0
     732:	cf dd       	rcall	.-1122   	; 0x2d2 <Dataflash_SendAddressBytes>
					Dataflash_WaitWhileBusy();
     734:	c0 dd       	rcall	.-1152   	; 0x2b6 <Dataflash_WaitWhileBusy>
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
     736:	dd 20       	and	r13, r13
     738:	11 f4       	brne	.+4      	; 0x73e <DataflashManager_WriteBlocks+0x11e>
     73a:	84 e8       	ldi	r24, 0x84	; 132
     73c:	01 c0       	rjmp	.+2      	; 0x740 <DataflashManager_WriteBlocks+0x120>
     73e:	87 e8       	ldi	r24, 0x87	; 135
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     740:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     742:	0d b4       	in	r0, 0x2d	; 45
     744:	07 fe       	sbrs	r0, 7
     746:	fd cf       	rjmp	.-6      	; 0x742 <DataflashManager_WriteBlocks+0x122>
				Dataflash_SendAddressBytes(0, 0);
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	60 e0       	ldi	r22, 0x00	; 0
     74e:	70 e0       	ldi	r23, 0x00	; 0
     750:	c0 dd       	rcall	.-1152   	; 0x2d2 <Dataflash_SendAddressBytes>
     752:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     754:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     758:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     75a:	0d b4       	in	r0, 0x2d	; 45
     75c:	07 fe       	sbrs	r0, 7
     75e:	fd cf       	rjmp	.-6      	; 0x75a <DataflashManager_WriteBlocks+0x13a>
     760:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     764:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     766:	0d b4       	in	r0, 0x2d	; 45
     768:	07 fe       	sbrs	r0, 7
     76a:	fd cf       	rjmp	.-6      	; 0x766 <DataflashManager_WriteBlocks+0x146>
     76c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     770:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     772:	0d b4       	in	r0, 0x2d	; 45
     774:	07 fe       	sbrs	r0, 7
     776:	fd cf       	rjmp	.-6      	; 0x772 <DataflashManager_WriteBlocks+0x152>
     778:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     77c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     77e:	0d b4       	in	r0, 0x2d	; 45
     780:	07 fe       	sbrs	r0, 7
     782:	fd cf       	rjmp	.-6      	; 0x77e <DataflashManager_WriteBlocks+0x15e>
     784:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     788:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     78a:	0d b4       	in	r0, 0x2d	; 45
     78c:	07 fe       	sbrs	r0, 7
     78e:	fd cf       	rjmp	.-6      	; 0x78a <DataflashManager_WriteBlocks+0x16a>
     790:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     794:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     796:	0d b4       	in	r0, 0x2d	; 45
     798:	07 fe       	sbrs	r0, 7
     79a:	fd cf       	rjmp	.-6      	; 0x796 <DataflashManager_WriteBlocks+0x176>
     79c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7a0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7a2:	0d b4       	in	r0, 0x2d	; 45
     7a4:	07 fe       	sbrs	r0, 7
     7a6:	fd cf       	rjmp	.-6      	; 0x7a2 <DataflashManager_WriteBlocks+0x182>
     7a8:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7ac:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7ae:	0d b4       	in	r0, 0x2d	; 45
     7b0:	07 fe       	sbrs	r0, 7
     7b2:	fd cf       	rjmp	.-6      	; 0x7ae <DataflashManager_WriteBlocks+0x18e>
     7b4:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7b8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7ba:	0d b4       	in	r0, 0x2d	; 45
     7bc:	07 fe       	sbrs	r0, 7
     7be:	fd cf       	rjmp	.-6      	; 0x7ba <DataflashManager_WriteBlocks+0x19a>
     7c0:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7c4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7c6:	0d b4       	in	r0, 0x2d	; 45
     7c8:	07 fe       	sbrs	r0, 7
     7ca:	fd cf       	rjmp	.-6      	; 0x7c6 <DataflashManager_WriteBlocks+0x1a6>
     7cc:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7d0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7d2:	0d b4       	in	r0, 0x2d	; 45
     7d4:	07 fe       	sbrs	r0, 7
     7d6:	fd cf       	rjmp	.-6      	; 0x7d2 <DataflashManager_WriteBlocks+0x1b2>
     7d8:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7dc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7de:	0d b4       	in	r0, 0x2d	; 45
     7e0:	07 fe       	sbrs	r0, 7
     7e2:	fd cf       	rjmp	.-6      	; 0x7de <DataflashManager_WriteBlocks+0x1be>
     7e4:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7e8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7ea:	0d b4       	in	r0, 0x2d	; 45
     7ec:	07 fe       	sbrs	r0, 7
     7ee:	fd cf       	rjmp	.-6      	; 0x7ea <DataflashManager_WriteBlocks+0x1ca>
     7f0:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7f4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7f6:	0d b4       	in	r0, 0x2d	; 45
     7f8:	07 fe       	sbrs	r0, 7
     7fa:	fd cf       	rjmp	.-6      	; 0x7f6 <DataflashManager_WriteBlocks+0x1d6>
     7fc:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     800:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     802:	0d b4       	in	r0, 0x2d	; 45
     804:	07 fe       	sbrs	r0, 7
     806:	fd cf       	rjmp	.-6      	; 0x802 <DataflashManager_WriteBlocks+0x1e2>
     808:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     80c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     80e:	0d b4       	in	r0, 0x2d	; 45
     810:	07 fe       	sbrs	r0, 7
     812:	fd cf       	rjmp	.-6      	; 0x80e <DataflashManager_WriteBlocks+0x1ee>

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     814:	f5 01       	movw	r30, r10
     816:	86 a9       	ldd	r24, Z+54	; 0x36
     818:	88 23       	and	r24, r24
     81a:	61 f5       	brne	.+88     	; 0x874 <DataflashManager_WriteBlocks+0x254>
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     81c:	9f 5f       	subi	r25, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     81e:	c3 94       	inc	r12
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     820:	f0 e2       	ldi	r31, 0x20	; 32
     822:	cf 16       	cp	r12, r31
     824:	09 f0       	breq	.+2      	; 0x828 <DataflashManager_WriteBlocks+0x208>
     826:	4b cf       	rjmp	.-362    	; 0x6be <DataflashManager_WriteBlocks+0x9e>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter and reset the sub block counter */
		TotalBlocks--;
     828:	08 94       	sec
     82a:	e1 08       	sbc	r14, r1
     82c:	f1 08       	sbc	r15, r1
     82e:	20 ee       	ldi	r18, 0xE0	; 224
     830:	3f ef       	ldi	r19, 0xFF	; 255
     832:	82 0e       	add	r8, r18
     834:	93 1e       	adc	r9, r19

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     836:	e1 14       	cp	r14, r1
     838:	f1 04       	cpc	r15, r1
     83a:	09 f0       	breq	.+2      	; 0x83e <DataflashManager_WriteBlocks+0x21e>
     83c:	3f cf       	rjmp	.-386    	; 0x6bc <DataflashManager_WriteBlocks+0x9c>
		/* Decrement the blocks remaining counter and reset the sub block counter */
		TotalBlocks--;
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
     83e:	3b dd       	rcall	.-1418   	; 0x2b6 <Dataflash_WaitWhileBusy>
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     840:	dd 20       	and	r13, r13
     842:	11 f4       	brne	.+4      	; 0x848 <DataflashManager_WriteBlocks+0x228>
     844:	83 e8       	ldi	r24, 0x83	; 131
     846:	01 c0       	rjmp	.+2      	; 0x84a <DataflashManager_WriteBlocks+0x22a>
     848:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     84a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     84c:	0d b4       	in	r0, 0x2d	; 45
     84e:	07 fe       	sbrs	r0, 7
     850:	fd cf       	rjmp	.-6      	; 0x84c <DataflashManager_WriteBlocks+0x22c>
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
     852:	c8 01       	movw	r24, r16
     854:	60 e0       	ldi	r22, 0x00	; 0
     856:	70 e0       	ldi	r23, 0x00	; 0
     858:	3c dd       	rcall	.-1416   	; 0x2d2 <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     85a:	2d dd       	rcall	.-1446   	; 0x2b6 <Dataflash_WaitWhileBusy>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     85c:	80 91 e8 00 	lds	r24, 0x00E8

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     860:	85 fd       	sbrc	r24, 5
     862:	05 c0       	rjmp	.+10     	; 0x86e <DataflashManager_WriteBlocks+0x24e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     864:	80 91 e8 00 	lds	r24, 0x00E8
     868:	8b 77       	andi	r24, 0x7B	; 123
     86a:	80 93 e8 00 	sts	0x00E8, r24
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     86e:	8e b1       	in	r24, 0x0e	; 14
     870:	83 60       	ori	r24, 0x03	; 3
     872:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearOUT();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     874:	0f 90       	pop	r0
     876:	cf 91       	pop	r28
     878:	df 91       	pop	r29
     87a:	1f 91       	pop	r17
     87c:	0f 91       	pop	r16
     87e:	ff 90       	pop	r15
     880:	ef 90       	pop	r14
     882:	df 90       	pop	r13
     884:	cf 90       	pop	r12
     886:	bf 90       	pop	r11
     888:	af 90       	pop	r10
     88a:	9f 90       	pop	r9
     88c:	8f 90       	pop	r8
     88e:	08 95       	ret

00000890 <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
     890:	0f 93       	push	r16
     892:	1f 93       	push	r17
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	8c 01       	movw	r16, r24
     89a:	86 2f       	mov	r24, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     89c:	f8 01       	movw	r30, r16
     89e:	46 8d       	ldd	r20, Z+30	; 0x1e
     8a0:	55 8d       	ldd	r21, Z+29	; 0x1d
     8a2:	64 8d       	ldd	r22, Z+28	; 0x1c
     8a4:	73 8d       	ldd	r23, Z+27	; 0x1b

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     8a6:	c1 a1       	ldd	r28, Z+33	; 0x21
     8a8:	d0 a1       	ldd	r29, Z+32	; 0x20

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     8aa:	40 30       	cpi	r20, 0x00	; 0
     8ac:	f0 e8       	ldi	r31, 0x80	; 128
     8ae:	5f 07       	cpc	r21, r31
     8b0:	f0 e0       	ldi	r31, 0x00	; 0
     8b2:	6f 07       	cpc	r22, r31
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	7f 07       	cpc	r23, r31
     8b8:	68 f0       	brcs	.+26     	; 0x8d4 <SCSI_Command_ReadWrite_10+0x44>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     8ba:	80 91 39 01 	lds	r24, 0x0139
     8be:	80 7f       	andi	r24, 0xF0	; 240
     8c0:	85 60       	ori	r24, 0x05	; 5
     8c2:	80 93 39 01 	sts	0x0139, r24
     8c6:	81 e2       	ldi	r24, 0x21	; 33
     8c8:	80 93 43 01 	sts	0x0143, r24
     8cc:	10 92 44 01 	sts	0x0144, r1
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	21 c0       	rjmp	.+66     	; 0x916 <SCSI_Command_ReadWrite_10+0x86>
	/* Adjust the given block address to the real media address based on the selected LUN */
	BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif
	
	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
     8d4:	88 23       	and	r24, r24
     8d6:	21 f0       	breq	.+8      	; 0x8e0 <SCSI_Command_ReadWrite_10+0x50>
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     8d8:	c8 01       	movw	r24, r16
     8da:	9e 01       	movw	r18, r28
     8dc:	8d dd       	rcall	.-1254   	; 0x3f8 <DataflashManager_ReadBlocks>
     8de:	03 c0       	rjmp	.+6      	; 0x8e6 <SCSI_Command_ReadWrite_10+0x56>
	else
	  DataflashManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     8e0:	c8 01       	movw	r24, r16
     8e2:	9e 01       	movw	r18, r28
     8e4:	9d de       	rcall	.-710    	; 0x620 <DataflashManager_WriteBlocks>

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     8e6:	9e 01       	movw	r18, r28
     8e8:	40 e0       	ldi	r20, 0x00	; 0
     8ea:	50 e0       	ldi	r21, 0x00	; 0
     8ec:	89 e0       	ldi	r24, 0x09	; 9
     8ee:	22 0f       	add	r18, r18
     8f0:	33 1f       	adc	r19, r19
     8f2:	44 1f       	adc	r20, r20
     8f4:	55 1f       	adc	r21, r21
     8f6:	8a 95       	dec	r24
     8f8:	d1 f7       	brne	.-12     	; 0x8ee <SCSI_Command_ReadWrite_10+0x5e>
     8fa:	f8 01       	movw	r30, r16
     8fc:	82 89       	ldd	r24, Z+18	; 0x12
     8fe:	93 89       	ldd	r25, Z+19	; 0x13
     900:	a4 89       	ldd	r26, Z+20	; 0x14
     902:	b5 89       	ldd	r27, Z+21	; 0x15
     904:	82 1b       	sub	r24, r18
     906:	93 0b       	sbc	r25, r19
     908:	a4 0b       	sbc	r26, r20
     90a:	b5 0b       	sbc	r27, r21
     90c:	82 8b       	std	Z+18, r24	; 0x12
     90e:	93 8b       	std	Z+19, r25	; 0x13
     910:	a4 8b       	std	Z+20, r26	; 0x14
     912:	b5 8b       	std	Z+21, r27	; 0x15
     914:	81 e0       	ldi	r24, 0x01	; 1

	return true;
}
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	08 95       	ret

00000920 <SCSI_DecodeSCSICommand>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean true if the command completed successfully, false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     920:	cf 92       	push	r12
     922:	df 92       	push	r13
     924:	ef 92       	push	r14
     926:	ff 92       	push	r15
     928:	0f 93       	push	r16
     92a:	1f 93       	push	r17
     92c:	df 93       	push	r29
     92e:	cf 93       	push	r28
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
     934:	28 97       	sbiw	r28, 0x08	; 8
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	f8 94       	cli
     93a:	de bf       	out	0x3e, r29	; 62
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	cd bf       	out	0x3d, r28	; 61
     940:	7c 01       	movw	r14, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     942:	fc 01       	movw	r30, r24
     944:	81 8d       	ldd	r24, Z+25	; 0x19
     946:	8d 31       	cpi	r24, 0x1D	; 29
     948:	09 f4       	brne	.+2      	; 0x94c <SCSI_DecodeSCSICommand+0x2c>
     94a:	a6 c0       	rjmp	.+332    	; 0xa98 <SCSI_DecodeSCSICommand+0x178>
     94c:	8e 31       	cpi	r24, 0x1E	; 30
     94e:	78 f4       	brcc	.+30     	; 0x96e <SCSI_DecodeSCSICommand+0x4e>
     950:	83 30       	cpi	r24, 0x03	; 3
     952:	09 f4       	brne	.+2      	; 0x956 <SCSI_DecodeSCSICommand+0x36>
     954:	52 c0       	rjmp	.+164    	; 0x9fa <SCSI_DecodeSCSICommand+0xda>
     956:	84 30       	cpi	r24, 0x04	; 4
     958:	20 f4       	brcc	.+8      	; 0x962 <SCSI_DecodeSCSICommand+0x42>
     95a:	88 23       	and	r24, r24
     95c:	09 f4       	brne	.+2      	; 0x960 <SCSI_DecodeSCSICommand+0x40>
     95e:	d9 c0       	rjmp	.+434    	; 0xb12 <SCSI_DecodeSCSICommand+0x1f2>
     960:	de c0       	rjmp	.+444    	; 0xb1e <SCSI_DecodeSCSICommand+0x1fe>
     962:	82 31       	cpi	r24, 0x12	; 18
     964:	b9 f0       	breq	.+46     	; 0x994 <SCSI_DecodeSCSICommand+0x74>
     966:	8a 31       	cpi	r24, 0x1A	; 26
     968:	09 f0       	breq	.+2      	; 0x96c <SCSI_DecodeSCSICommand+0x4c>
     96a:	d9 c0       	rjmp	.+434    	; 0xb1e <SCSI_DecodeSCSICommand+0x1fe>
     96c:	b8 c0       	rjmp	.+368    	; 0xade <SCSI_DecodeSCSICommand+0x1be>
     96e:	88 32       	cpi	r24, 0x28	; 40
     970:	09 f4       	brne	.+2      	; 0x974 <SCSI_DecodeSCSICommand+0x54>
     972:	af c0       	rjmp	.+350    	; 0xad2 <SCSI_DecodeSCSICommand+0x1b2>
     974:	89 32       	cpi	r24, 0x29	; 41
     976:	38 f4       	brcc	.+14     	; 0x986 <SCSI_DecodeSCSICommand+0x66>
     978:	8e 31       	cpi	r24, 0x1E	; 30
     97a:	09 f4       	brne	.+2      	; 0x97e <SCSI_DecodeSCSICommand+0x5e>
     97c:	ca c0       	rjmp	.+404    	; 0xb12 <SCSI_DecodeSCSICommand+0x1f2>
     97e:	85 32       	cpi	r24, 0x25	; 37
     980:	09 f0       	breq	.+2      	; 0x984 <SCSI_DecodeSCSICommand+0x64>
     982:	cd c0       	rjmp	.+410    	; 0xb1e <SCSI_DecodeSCSICommand+0x1fe>
     984:	5d c0       	rjmp	.+186    	; 0xa40 <SCSI_DecodeSCSICommand+0x120>
     986:	8a 32       	cpi	r24, 0x2A	; 42
     988:	09 f4       	brne	.+2      	; 0x98c <SCSI_DecodeSCSICommand+0x6c>
     98a:	a0 c0       	rjmp	.+320    	; 0xacc <SCSI_DecodeSCSICommand+0x1ac>
     98c:	8f 32       	cpi	r24, 0x2F	; 47
     98e:	09 f0       	breq	.+2      	; 0x992 <SCSI_DecodeSCSICommand+0x72>
     990:	c6 c0       	rjmp	.+396    	; 0xb1e <SCSI_DecodeSCSICommand+0x1fe>
     992:	bf c0       	rjmp	.+382    	; 0xb12 <SCSI_DecodeSCSICommand+0x1f2>
     994:	f7 01       	movw	r30, r14
     996:	05 8d       	ldd	r16, Z+29	; 0x1d
     998:	14 8d       	ldd	r17, Z+28	; 0x1c
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     99a:	82 8d       	ldd	r24, Z+26	; 0x1a
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	83 70       	andi	r24, 0x03	; 3
     9a0:	90 70       	andi	r25, 0x00	; 0
     9a2:	89 2b       	or	r24, r25
     9a4:	09 f0       	breq	.+2      	; 0x9a8 <SCSI_DecodeSCSICommand+0x88>
     9a6:	7c c0       	rjmp	.+248    	; 0xaa0 <SCSI_DecodeSCSICommand+0x180>
     9a8:	83 8d       	ldd	r24, Z+27	; 0x1b
     9aa:	88 23       	and	r24, r24
     9ac:	09 f0       	breq	.+2      	; 0x9b0 <SCSI_DecodeSCSICommand+0x90>
     9ae:	78 c0       	rjmp	.+240    	; 0xaa0 <SCSI_DecodeSCSICommand+0x180>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     9b0:	68 01       	movw	r12, r16
     9b2:	05 32       	cpi	r16, 0x25	; 37
     9b4:	11 05       	cpc	r17, r1
     9b6:	18 f0       	brcs	.+6      	; 0x9be <SCSI_DecodeSCSICommand+0x9e>
     9b8:	94 e2       	ldi	r25, 0x24	; 36
     9ba:	c9 2e       	mov	r12, r25
     9bc:	d1 2c       	mov	r13, r1
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     9be:	89 e4       	ldi	r24, 0x49	; 73
     9c0:	91 e0       	ldi	r25, 0x01	; 1
     9c2:	b6 01       	movw	r22, r12
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	a9 d5       	rcall	.+2898   	; 0x151c <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     9ca:	c8 01       	movw	r24, r16
     9cc:	8c 19       	sub	r24, r12
     9ce:	9d 09       	sbc	r25, r13
     9d0:	60 e0       	ldi	r22, 0x00	; 0
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	f4 d5       	rcall	.+3048   	; 0x15be <Endpoint_Null_Stream>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9d6:	80 91 e8 00 	lds	r24, 0x00E8
     9da:	8e 77       	andi	r24, 0x7E	; 126
     9dc:	80 93 e8 00 	sts	0x00E8, r24

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     9e0:	96 01       	movw	r18, r12
     9e2:	40 e0       	ldi	r20, 0x00	; 0
     9e4:	50 e0       	ldi	r21, 0x00	; 0
     9e6:	f7 01       	movw	r30, r14
     9e8:	82 89       	ldd	r24, Z+18	; 0x12
     9ea:	93 89       	ldd	r25, Z+19	; 0x13
     9ec:	a4 89       	ldd	r26, Z+20	; 0x14
     9ee:	b5 89       	ldd	r27, Z+21	; 0x15
     9f0:	82 1b       	sub	r24, r18
     9f2:	93 0b       	sbc	r25, r19
     9f4:	a4 0b       	sbc	r26, r20
     9f6:	b5 0b       	sbc	r27, r21
     9f8:	87 c0       	rjmp	.+270    	; 0xb08 <SCSI_DecodeSCSICommand+0x1e8>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
     9fa:	f7 01       	movw	r30, r14
     9fc:	15 8d       	ldd	r17, Z+29	; 0x1d
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     9fe:	01 2f       	mov	r16, r17
     a00:	13 31       	cpi	r17, 0x13	; 19
     a02:	08 f0       	brcs	.+2      	; 0xa06 <SCSI_DecodeSCSICommand+0xe6>
     a04:	02 e1       	ldi	r16, 0x12	; 18

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     a06:	87 e3       	ldi	r24, 0x37	; 55
     a08:	91 e0       	ldi	r25, 0x01	; 1
     a0a:	60 2f       	mov	r22, r16
     a0c:	70 e0       	ldi	r23, 0x00	; 0
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	50 e0       	ldi	r21, 0x00	; 0
     a12:	84 d5       	rcall	.+2824   	; 0x151c <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     a14:	81 2f       	mov	r24, r17
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	80 1b       	sub	r24, r16
     a1a:	91 09       	sbc	r25, r1
     a1c:	60 e0       	ldi	r22, 0x00	; 0
     a1e:	70 e0       	ldi	r23, 0x00	; 0
     a20:	ce d5       	rcall	.+2972   	; 0x15be <Endpoint_Null_Stream>
     a22:	80 91 e8 00 	lds	r24, 0x00E8
     a26:	8e 77       	andi	r24, 0x7E	; 126
     a28:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     a2c:	f7 01       	movw	r30, r14
     a2e:	82 89       	ldd	r24, Z+18	; 0x12
     a30:	93 89       	ldd	r25, Z+19	; 0x13
     a32:	a4 89       	ldd	r26, Z+20	; 0x14
     a34:	b5 89       	ldd	r27, Z+21	; 0x15
     a36:	80 1b       	sub	r24, r16
     a38:	91 09       	sbc	r25, r1
     a3a:	a1 09       	sbc	r26, r1
     a3c:	b1 09       	sbc	r27, r1
     a3e:	64 c0       	rjmp	.+200    	; 0xb08 <SCSI_DecodeSCSICommand+0x1e8>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN = (LUN_MEDIA_BLOCKS - 1);
     a40:	8f ef       	ldi	r24, 0xFF	; 255
     a42:	9f e7       	ldi	r25, 0x7F	; 127
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	89 83       	std	Y+1, r24	; 0x01
     a4a:	9a 83       	std	Y+2, r25	; 0x02
     a4c:	ab 83       	std	Y+3, r26	; 0x03
     a4e:	bc 83       	std	Y+4, r27	; 0x04
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	92 e0       	ldi	r25, 0x02	; 2
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	b0 e0       	ldi	r27, 0x00	; 0
     a58:	8d 83       	std	Y+5, r24	; 0x05
     a5a:	9e 83       	std	Y+6, r25	; 0x06
     a5c:	af 83       	std	Y+7, r26	; 0x07
     a5e:	b8 87       	std	Y+8, r27	; 0x08

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
     a60:	ce 01       	movw	r24, r28
     a62:	01 96       	adiw	r24, 0x01	; 1
     a64:	64 e0       	ldi	r22, 0x04	; 4
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	40 e0       	ldi	r20, 0x00	; 0
     a6a:	50 e0       	ldi	r21, 0x00	; 0
     a6c:	06 d5       	rcall	.+2572   	; 0x147a <Endpoint_Write_Stream_BE>
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
     a6e:	ce 01       	movw	r24, r28
     a70:	05 96       	adiw	r24, 0x05	; 5
     a72:	64 e0       	ldi	r22, 0x04	; 4
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	ff d4       	rcall	.+2558   	; 0x147a <Endpoint_Write_Stream_BE>
     a7c:	80 91 e8 00 	lds	r24, 0x00E8
     a80:	8e 77       	andi	r24, 0x7E	; 126
     a82:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
     a86:	f7 01       	movw	r30, r14
     a88:	82 89       	ldd	r24, Z+18	; 0x12
     a8a:	93 89       	ldd	r25, Z+19	; 0x13
     a8c:	a4 89       	ldd	r26, Z+20	; 0x14
     a8e:	b5 89       	ldd	r27, Z+21	; 0x15
     a90:	08 97       	sbiw	r24, 0x08	; 8
     a92:	a1 09       	sbc	r26, r1
     a94:	b1 09       	sbc	r27, r1
     a96:	38 c0       	rjmp	.+112    	; 0xb08 <SCSI_DecodeSCSICommand+0x1e8>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
     a98:	f7 01       	movw	r30, r14
     a9a:	82 8d       	ldd	r24, Z+26	; 0x1a
     a9c:	82 fd       	sbrc	r24, 2
     a9e:	08 c0       	rjmp	.+16     	; 0xab0 <SCSI_DecodeSCSICommand+0x190>
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     aa0:	80 91 39 01 	lds	r24, 0x0139
     aa4:	80 7f       	andi	r24, 0xF0	; 240
     aa6:	85 60       	ori	r24, 0x05	; 5
     aa8:	80 93 39 01 	sts	0x0139, r24
     aac:	84 e2       	ldi	r24, 0x24	; 36
     aae:	3e c0       	rjmp	.+124    	; 0xb2c <SCSI_DecodeSCSICommand+0x20c>

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
     ab0:	78 dc       	rcall	.-1808   	; 0x3a2 <DataflashManager_CheckDataflashOperation>
     ab2:	88 23       	and	r24, r24
     ab4:	71 f5       	brne	.+92     	; 0xb12 <SCSI_DecodeSCSICommand+0x1f2>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
     ab6:	80 91 39 01 	lds	r24, 0x0139
     aba:	80 7f       	andi	r24, 0xF0	; 240
     abc:	84 60       	ori	r24, 0x04	; 4
     abe:	80 93 39 01 	sts	0x0139, r24
     ac2:	10 92 43 01 	sts	0x0143, r1
     ac6:	10 92 44 01 	sts	0x0144, r1
     aca:	33 c0       	rjmp	.+102    	; 0xb32 <SCSI_DecodeSCSICommand+0x212>
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
     acc:	c7 01       	movw	r24, r14
     ace:	60 e0       	ldi	r22, 0x00	; 0
     ad0:	02 c0       	rjmp	.+4      	; 0xad6 <SCSI_DecodeSCSICommand+0x1b6>
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
     ad2:	c7 01       	movw	r24, r14
     ad4:	61 e0       	ldi	r22, 0x01	; 1
     ad6:	dc de       	rcall	.-584    	; 0x890 <SCSI_Command_ReadWrite_10>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     ad8:	88 23       	and	r24, r24
     ada:	59 f1       	breq	.+86     	; 0xb32 <SCSI_DecodeSCSICommand+0x212>
     adc:	2c c0       	rjmp	.+88     	; 0xb36 <SCSI_DecodeSCSICommand+0x216>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ade:	10 92 f1 00 	sts	0x00F1, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ae2:	10 92 f1 00 	sts	0x00F1, r1
     ae6:	10 92 f1 00 	sts	0x00F1, r1
     aea:	10 92 f1 00 	sts	0x00F1, r1
     aee:	80 91 e8 00 	lds	r24, 0x00E8
     af2:	8e 77       	andi	r24, 0x7E	; 126
     af4:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
     af8:	f7 01       	movw	r30, r14
     afa:	82 89       	ldd	r24, Z+18	; 0x12
     afc:	93 89       	ldd	r25, Z+19	; 0x13
     afe:	a4 89       	ldd	r26, Z+20	; 0x14
     b00:	b5 89       	ldd	r27, Z+21	; 0x15
     b02:	04 97       	sbiw	r24, 0x04	; 4
     b04:	a1 09       	sbc	r26, r1
     b06:	b1 09       	sbc	r27, r1
     b08:	82 8b       	std	Z+18, r24	; 0x12
     b0a:	93 8b       	std	Z+19, r25	; 0x13
     b0c:	a4 8b       	std	Z+20, r26	; 0x14
     b0e:	b5 8b       	std	Z+21, r27	; 0x15
     b10:	12 c0       	rjmp	.+36     	; 0xb36 <SCSI_DecodeSCSICommand+0x216>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
     b12:	f7 01       	movw	r30, r14
     b14:	12 8a       	std	Z+18, r1	; 0x12
     b16:	13 8a       	std	Z+19, r1	; 0x13
     b18:	14 8a       	std	Z+20, r1	; 0x14
     b1a:	15 8a       	std	Z+21, r1	; 0x15
     b1c:	0c c0       	rjmp	.+24     	; 0xb36 <SCSI_DecodeSCSICommand+0x216>
			break;
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     b1e:	80 91 39 01 	lds	r24, 0x0139
     b22:	80 7f       	andi	r24, 0xF0	; 240
     b24:	85 60       	ori	r24, 0x05	; 5
     b26:	80 93 39 01 	sts	0x0139, r24
     b2a:	80 e2       	ldi	r24, 0x20	; 32
     b2c:	80 93 43 01 	sts	0x0143, r24
     b30:	ca cf       	rjmp	.-108    	; 0xac6 <SCSI_DecodeSCSICommand+0x1a6>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	0a c0       	rjmp	.+20     	; 0xb4a <SCSI_DecodeSCSICommand+0x22a>
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     b36:	80 91 39 01 	lds	r24, 0x0139
     b3a:	80 7f       	andi	r24, 0xF0	; 240
     b3c:	80 93 39 01 	sts	0x0139, r24
     b40:	10 92 43 01 	sts	0x0143, r1
     b44:	10 92 44 01 	sts	0x0144, r1
     b48:	81 e0       	ldi	r24, 0x01	; 1

		return true;
	}

	return false;
}
     b4a:	28 96       	adiw	r28, 0x08	; 8
     b4c:	0f b6       	in	r0, 0x3f	; 63
     b4e:	f8 94       	cli
     b50:	de bf       	out	0x3e, r29	; 62
     b52:	0f be       	out	0x3f, r0	; 63
     b54:	cd bf       	out	0x3d, r28	; 61
     b56:	cf 91       	pop	r28
     b58:	df 91       	pop	r29
     b5a:	1f 91       	pop	r17
     b5c:	0f 91       	pop	r16
     b5e:	ff 90       	pop	r15
     b60:	ef 90       	pop	r14
     b62:	df 90       	pop	r13
     b64:	cf 90       	pop	r12
     b66:	08 95       	ret

00000b68 <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
     b68:	38 2f       	mov	r19, r24
     b6a:	28 2f       	mov	r18, r24
     b6c:	2c c0       	rjmp	.+88     	; 0xbc6 <Endpoint_ConfigureEndpoint_Prv+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     b6e:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);
		
		if (EPNum == Number)
     b72:	23 17       	cp	r18, r19
     b74:	21 f4       	brne	.+8      	; 0xb7e <Endpoint_ConfigureEndpoint_Prv+0x16>
     b76:	76 2f       	mov	r23, r22
     b78:	94 2f       	mov	r25, r20
     b7a:	50 e0       	ldi	r21, 0x00	; 0
     b7c:	06 c0       	rjmp	.+12     	; 0xb8a <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     b7e:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     b82:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
     b86:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     b8a:	91 ff       	sbrs	r25, 1
     b8c:	1b c0       	rjmp	.+54     	; 0xbc4 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     b8e:	80 91 eb 00 	lds	r24, 0x00EB
     b92:	8e 7f       	andi	r24, 0xFE	; 254
     b94:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= (1 << ALLOC);
     b98:	80 91 ed 00 	lds	r24, 0x00ED
     b9c:	82 70       	andi	r24, 0x02	; 2
     b9e:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     ba2:	80 91 eb 00 	lds	r24, 0x00EB
     ba6:	81 60       	ori	r24, 0x01	; 1
     ba8:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     bac:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     bb0:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
     bb4:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     bb8:	80 91 ee 00 	lds	r24, 0x00EE
			
		if (!(Endpoint_IsConfigured()))
     bbc:	87 fd       	sbrc	r24, 7
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else	
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     bc4:	2f 5f       	subi	r18, 0xFF	; 255
     bc6:	27 30       	cpi	r18, 0x07	; 7
     bc8:	90 f2       	brcs	.-92     	; 0xb6e <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     bca:	30 93 e9 00 	sts	0x00E9, r19
     bce:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     bd0:	08 95       	ret

00000bd2 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     bd2:	80 91 73 01 	lds	r24, 0x0173
     bd6:	88 23       	and	r24, r24
     bd8:	9c f4       	brge	.+38     	; 0xc00 <Endpoint_ClearStatusStage+0x2e>
     bda:	04 c0       	rjmp	.+8      	; 0xbe4 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     bdc:	80 91 72 01 	lds	r24, 0x0172
     be0:	88 23       	and	r24, r24
     be2:	b9 f0       	breq	.+46     	; 0xc12 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     be4:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     be8:	82 ff       	sbrs	r24, 2
     bea:	f8 cf       	rjmp	.-16     	; 0xbdc <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     bec:	80 91 e8 00 	lds	r24, 0x00E8
     bf0:	8b 77       	andi	r24, 0x7B	; 123
     bf2:	80 93 e8 00 	sts	0x00E8, r24
     bf6:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     bf8:	80 91 72 01 	lds	r24, 0x0172
     bfc:	88 23       	and	r24, r24
     bfe:	49 f0       	breq	.+18     	; 0xc12 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c00:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     c04:	80 ff       	sbrs	r24, 0
     c06:	f8 cf       	rjmp	.-16     	; 0xbf8 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c08:	80 91 e8 00 	lds	r24, 0x00E8
     c0c:	8e 77       	andi	r24, 0x7E	; 126
     c0e:	80 93 e8 00 	sts	0x00E8, r24
     c12:	08 95       	ret

00000c14 <Endpoint_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     c14:	40 91 e4 00 	lds	r20, 0x00E4
     c18:	50 91 e5 00 	lds	r21, 0x00E5
     c1c:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
     c1e:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
     c22:	80 ff       	sbrs	r24, 0
     c24:	05 c0       	rjmp	.+10     	; 0xc30 <Endpoint_WaitUntilReady+0x1c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c26:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
     c2a:	80 ff       	sbrs	r24, 0
     c2c:	05 c0       	rjmp	.+10     	; 0xc38 <Endpoint_WaitUntilReady+0x24>
     c2e:	22 c0       	rjmp	.+68     	; 0xc74 <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c30:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     c34:	82 fd       	sbrc	r24, 2
     c36:	1e c0       	rjmp	.+60     	; 0xc74 <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     c38:	80 91 72 01 	lds	r24, 0x0172

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     c3c:	88 23       	and	r24, r24
     c3e:	11 f4       	brne	.+4      	; 0xc44 <Endpoint_WaitUntilReady+0x30>
     c40:	82 e0       	ldi	r24, 0x02	; 2
     c42:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     c44:	85 30       	cpi	r24, 0x05	; 5
     c46:	11 f4       	brne	.+4      	; 0xc4c <Endpoint_WaitUntilReady+0x38>
     c48:	83 e0       	ldi	r24, 0x03	; 3
     c4a:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     c4c:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     c50:	85 ff       	sbrs	r24, 5
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <Endpoint_WaitUntilReady+0x44>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	08 95       	ret
     c58:	80 91 e4 00 	lds	r24, 0x00E4
     c5c:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     c60:	84 17       	cp	r24, r20
     c62:	95 07       	cpc	r25, r21
     c64:	e1 f2       	breq	.-72     	; 0xc1e <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     c66:	22 23       	and	r18, r18
     c68:	11 f4       	brne	.+4      	; 0xc6e <Endpoint_WaitUntilReady+0x5a>
     c6a:	84 e0       	ldi	r24, 0x04	; 4
     c6c:	08 95       	ret
     c6e:	21 50       	subi	r18, 0x01	; 1
     c70:	ac 01       	movw	r20, r24
     c72:	d5 cf       	rjmp	.-86     	; 0xc1e <Endpoint_WaitUntilReady+0xa>
     c74:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     c76:	08 95       	ret

00000c78 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     c78:	ef 92       	push	r14
     c7a:	ff 92       	push	r15
     c7c:	0f 93       	push	r16
     c7e:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     c80:	4d d0       	rcall	.+154    	; 0xd1c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     c82:	54 d0       	rcall	.+168    	; 0xd2c <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
     c84:	08 ed       	ldi	r16, 0xD8	; 216
     c86:	10 e0       	ldi	r17, 0x00	; 0
     c88:	f8 01       	movw	r30, r16
     c8a:	80 81       	ld	r24, Z

				USBCON = (Temp & ~(1 << USBE));
     c8c:	98 2f       	mov	r25, r24
     c8e:	9f 77       	andi	r25, 0x7F	; 127
     c90:	90 83       	st	Z, r25
				USBCON = (Temp |  (1 << USBE));
     c92:	80 68       	ori	r24, 0x80	; 128
     c94:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     c96:	80 81       	ld	r24, Z
     c98:	8f 7d       	andi	r24, 0xDF	; 223
     c9a:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     c9c:	e7 ed       	ldi	r30, 0xD7	; 215
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	80 68       	ori	r24, 0x80	; 128
     ca4:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     ca6:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
     ca8:	10 92 72 01 	sts	0x0172, r1
	USB_ConfigurationNumber  = 0;
     cac:	10 92 70 01 	sts	0x0170, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
     cb0:	10 92 6f 01 	sts	0x016F, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
     cb4:	10 92 6e 01 	sts	0x016E, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     cb8:	80 ee       	ldi	r24, 0xE0	; 224
     cba:	e8 2e       	mov	r14, r24
     cbc:	f1 2c       	mov	r15, r1
     cbe:	f7 01       	movw	r30, r14
     cc0:	80 81       	ld	r24, Z
     cc2:	8b 7f       	andi	r24, 0xFB	; 251
     cc4:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     cc6:	f8 01       	movw	r30, r16
     cc8:	80 81       	ld	r24, Z
     cca:	81 60       	ori	r24, 0x01	; 1
     ccc:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	60 e0       	ldi	r22, 0x00	; 0
     cd2:	42 e0       	ldi	r20, 0x02	; 2
     cd4:	49 df       	rcall	.-366    	; 0xb68 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     cd6:	e1 ee       	ldi	r30, 0xE1	; 225
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	8e 7f       	andi	r24, 0xFE	; 254
     cde:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     ce0:	e2 ee       	ldi	r30, 0xE2	; 226
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	81 60       	ori	r24, 0x01	; 1
     ce8:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     cea:	80 81       	ld	r24, Z
     cec:	88 60       	ori	r24, 0x08	; 8
     cee:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     cf0:	f7 01       	movw	r30, r14
     cf2:	80 81       	ld	r24, Z
     cf4:	8e 7f       	andi	r24, 0xFE	; 254
     cf6:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     cf8:	f8 01       	movw	r30, r16
     cfa:	80 81       	ld	r24, Z
     cfc:	80 61       	ori	r24, 0x10	; 16
     cfe:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     d00:	1f 91       	pop	r17
     d02:	0f 91       	pop	r16
     d04:	ff 90       	pop	r15
     d06:	ef 90       	pop	r14
     d08:	08 95       	ret

00000d0a <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     d0a:	e7 ed       	ldi	r30, 0xD7	; 215
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	81 60       	ori	r24, 0x01	; 1
     d12:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	80 93 71 01 	sts	0x0171, r24

	USB_ResetInterface();
}
     d1a:	ae cf       	rjmp	.-164    	; 0xc78 <USB_ResetInterface>

00000d1c <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     d1c:	e8 ed       	ldi	r30, 0xD8	; 216
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	8c 7f       	andi	r24, 0xFC	; 252
     d24:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     d26:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     d2a:	08 95       	ret

00000d2c <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     d2c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     d30:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     d34:	08 95       	ret

00000d36 <__vector_11>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     d36:	1f 92       	push	r1
     d38:	0f 92       	push	r0
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	0f 92       	push	r0
     d3e:	0b b6       	in	r0, 0x3b	; 59
     d40:	0f 92       	push	r0
     d42:	11 24       	eor	r1, r1
     d44:	1f 93       	push	r17
     d46:	2f 93       	push	r18
     d48:	3f 93       	push	r19
     d4a:	4f 93       	push	r20
     d4c:	5f 93       	push	r21
     d4e:	6f 93       	push	r22
     d50:	7f 93       	push	r23
     d52:	8f 93       	push	r24
     d54:	9f 93       	push	r25
     d56:	af 93       	push	r26
     d58:	bf 93       	push	r27
     d5a:	ef 93       	push	r30
     d5c:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     d5e:	e9 ee       	ldi	r30, 0xE9	; 233
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	10 81       	ld	r17, Z
     d64:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     d66:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     d68:	e0 ef       	ldi	r30, 0xF0	; 240
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	87 7f       	andi	r24, 0xF7	; 247
     d70:	80 83       	st	Z, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     d72:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     d74:	ec d0       	rcall	.+472    	; 0xf4e <USB_Device_ProcessControlRequest>
     d76:	a9 ee       	ldi	r26, 0xE9	; 233
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	1c 92       	st	X, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     d7c:	e0 ef       	ldi	r30, 0xF0	; 240
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	88 60       	ori	r24, 0x08	; 8
     d84:	80 83       	st	Z, r24
     d86:	1c 93       	st	X, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     d88:	ff 91       	pop	r31
     d8a:	ef 91       	pop	r30
     d8c:	bf 91       	pop	r27
     d8e:	af 91       	pop	r26
     d90:	9f 91       	pop	r25
     d92:	8f 91       	pop	r24
     d94:	7f 91       	pop	r23
     d96:	6f 91       	pop	r22
     d98:	5f 91       	pop	r21
     d9a:	4f 91       	pop	r20
     d9c:	3f 91       	pop	r19
     d9e:	2f 91       	pop	r18
     da0:	1f 91       	pop	r17
     da2:	0f 90       	pop	r0
     da4:	0b be       	out	0x3b, r0	; 59
     da6:	0f 90       	pop	r0
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	0f 90       	pop	r0
     dac:	1f 90       	pop	r1
     dae:	18 95       	reti

00000db0 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     db0:	1f 92       	push	r1
     db2:	0f 92       	push	r0
     db4:	0f b6       	in	r0, 0x3f	; 63
     db6:	0f 92       	push	r0
     db8:	0b b6       	in	r0, 0x3b	; 59
     dba:	0f 92       	push	r0
     dbc:	11 24       	eor	r1, r1
     dbe:	2f 93       	push	r18
     dc0:	3f 93       	push	r19
     dc2:	4f 93       	push	r20
     dc4:	5f 93       	push	r21
     dc6:	6f 93       	push	r22
     dc8:	7f 93       	push	r23
     dca:	8f 93       	push	r24
     dcc:	9f 93       	push	r25
     dce:	af 93       	push	r26
     dd0:	bf 93       	push	r27
     dd2:	ef 93       	push	r30
     dd4:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     dd6:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     dda:	82 ff       	sbrs	r24, 2
     ddc:	0a c0       	rjmp	.+20     	; 0xdf2 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     dde:	80 91 e2 00 	lds	r24, 0x00E2
     de2:	82 ff       	sbrs	r24, 2
     de4:	06 c0       	rjmp	.+12     	; 0xdf2 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     de6:	80 91 e1 00 	lds	r24, 0x00E1
     dea:	8b 7f       	andi	r24, 0xFB	; 251
     dec:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     df0:	33 d2       	rcall	.+1126   	; 0x1258 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     df2:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     df6:	80 ff       	sbrs	r24, 0
     df8:	1e c0       	rjmp	.+60     	; 0xe36 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     dfa:	80 91 d8 00 	lds	r24, 0x00D8
     dfe:	80 ff       	sbrs	r24, 0
     e00:	1a c0       	rjmp	.+52     	; 0xe36 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     e02:	80 91 da 00 	lds	r24, 0x00DA
     e06:	8e 7f       	andi	r24, 0xFE	; 254
     e08:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     e0c:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     e10:	80 ff       	sbrs	r24, 0
     e12:	0d c0       	rjmp	.+26     	; 0xe2e <__vector_10+0x7e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     e14:	8c e0       	ldi	r24, 0x0C	; 12
     e16:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     e18:	89 b5       	in	r24, 0x29	; 41
     e1a:	82 60       	ori	r24, 0x02	; 2
     e1c:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     e1e:	09 b4       	in	r0, 0x29	; 41
     e20:	00 fe       	sbrs	r0, 0
     e22:	fd cf       	rjmp	.-6      	; 0xe1e <__vector_10+0x6e>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	80 93 72 01 	sts	0x0172, r24
			EVENT_USB_Device_Connect();
     e2a:	95 d9       	rcall	.-3286   	; 0x156 <EVENT_USB_Device_Connect>
     e2c:	04 c0       	rjmp	.+8      	; 0xe36 <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     e2e:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     e30:	10 92 72 01 	sts	0x0172, r1
			EVENT_USB_Device_Disconnect();
     e34:	95 d9       	rcall	.-3286   	; 0x160 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     e36:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     e3a:	80 ff       	sbrs	r24, 0
     e3c:	18 c0       	rjmp	.+48     	; 0xe6e <__vector_10+0xbe>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     e3e:	80 91 e2 00 	lds	r24, 0x00E2
     e42:	80 ff       	sbrs	r24, 0
     e44:	14 c0       	rjmp	.+40     	; 0xe6e <__vector_10+0xbe>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     e46:	80 91 e2 00 	lds	r24, 0x00E2
     e4a:	8e 7f       	andi	r24, 0xFE	; 254
     e4c:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     e50:	80 91 e2 00 	lds	r24, 0x00E2
     e54:	80 61       	ori	r24, 0x10	; 16
     e56:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
     e5a:	80 91 d8 00 	lds	r24, 0x00D8
     e5e:	80 62       	ori	r24, 0x20	; 32
     e60:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     e64:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     e66:	85 e0       	ldi	r24, 0x05	; 5
     e68:	80 93 72 01 	sts	0x0172, r24
		EVENT_USB_Device_Suspend();
     e6c:	f5 d1       	rcall	.+1002   	; 0x1258 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     e6e:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     e72:	84 ff       	sbrs	r24, 4
     e74:	2e c0       	rjmp	.+92     	; 0xed2 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     e76:	80 91 e2 00 	lds	r24, 0x00E2
     e7a:	84 ff       	sbrs	r24, 4
     e7c:	2a c0       	rjmp	.+84     	; 0xed2 <__vector_10+0x122>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     e7e:	8c e0       	ldi	r24, 0x0C	; 12
     e80:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     e82:	89 b5       	in	r24, 0x29	; 41
     e84:	82 60       	ori	r24, 0x02	; 2
     e86:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     e88:	09 b4       	in	r0, 0x29	; 41
     e8a:	00 fe       	sbrs	r0, 0
     e8c:	fd cf       	rjmp	.-6      	; 0xe88 <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     e8e:	80 91 d8 00 	lds	r24, 0x00D8
     e92:	8f 7d       	andi	r24, 0xDF	; 223
     e94:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     e98:	80 91 e1 00 	lds	r24, 0x00E1
     e9c:	8f 7e       	andi	r24, 0xEF	; 239
     e9e:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     ea2:	80 91 e2 00 	lds	r24, 0x00E2
     ea6:	8f 7e       	andi	r24, 0xEF	; 239
     ea8:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     eac:	80 91 e2 00 	lds	r24, 0x00E2
     eb0:	81 60       	ori	r24, 0x01	; 1
     eb2:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_ConfigurationNumber)
     eb6:	80 91 70 01 	lds	r24, 0x0170
     eba:	88 23       	and	r24, r24
     ebc:	31 f4       	brne	.+12     	; 0xeca <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     ebe:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     ec2:	87 fd       	sbrc	r24, 7
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <__vector_10+0x11a>
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	01 c0       	rjmp	.+2      	; 0xecc <__vector_10+0x11c>
     eca:	84 e0       	ldi	r24, 0x04	; 4
     ecc:	80 93 72 01 	sts	0x0172, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     ed0:	c3 d1       	rcall	.+902    	; 0x1258 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     ed2:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     ed6:	83 ff       	sbrs	r24, 3
     ed8:	27 c0       	rjmp	.+78     	; 0xf28 <__vector_10+0x178>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     eda:	80 91 e2 00 	lds	r24, 0x00E2
     ede:	83 ff       	sbrs	r24, 3
     ee0:	23 c0       	rjmp	.+70     	; 0xf28 <__vector_10+0x178>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     ee2:	80 91 e1 00 	lds	r24, 0x00E1
     ee6:	87 7f       	andi	r24, 0xF7	; 247
     ee8:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState         = DEVICE_STATE_Default;
     eec:	82 e0       	ldi	r24, 0x02	; 2
     eee:	80 93 72 01 	sts	0x0172, r24
		USB_ConfigurationNumber = 0;
     ef2:	10 92 70 01 	sts	0x0170, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     ef6:	80 91 e1 00 	lds	r24, 0x00E1
     efa:	8e 7f       	andi	r24, 0xFE	; 254
     efc:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     f00:	80 91 e2 00 	lds	r24, 0x00E2
     f04:	8e 7f       	andi	r24, 0xFE	; 254
     f06:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     f0a:	80 91 e2 00 	lds	r24, 0x00E2
     f0e:	80 61       	ori	r24, 0x10	; 16
     f10:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	60 e0       	ldi	r22, 0x00	; 0
     f18:	42 e0       	ldi	r20, 0x02	; 2
     f1a:	26 de       	rcall	.-948    	; 0xb68 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     f1c:	80 91 f0 00 	lds	r24, 0x00F0
     f20:	88 60       	ori	r24, 0x08	; 8
     f22:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     f26:	98 d1       	rcall	.+816    	; 0x1258 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     f28:	ff 91       	pop	r31
     f2a:	ef 91       	pop	r30
     f2c:	bf 91       	pop	r27
     f2e:	af 91       	pop	r26
     f30:	9f 91       	pop	r25
     f32:	8f 91       	pop	r24
     f34:	7f 91       	pop	r23
     f36:	6f 91       	pop	r22
     f38:	5f 91       	pop	r21
     f3a:	4f 91       	pop	r20
     f3c:	3f 91       	pop	r19
     f3e:	2f 91       	pop	r18
     f40:	0f 90       	pop	r0
     f42:	0b be       	out	0x3b, r0	; 59
     f44:	0f 90       	pop	r0
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	0f 90       	pop	r0
     f4a:	1f 90       	pop	r1
     f4c:	18 95       	reti

00000f4e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	ac 97       	sbiw	r28, 0x2c	; 44
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	de bf       	out	0x3e, r29	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     f66:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
     f6a:	80 93 73 01 	sts	0x0173, r24
     f6e:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
     f72:	80 93 74 01 	sts	0x0174, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
     f76:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
     f7a:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
     f7e:	e5 e7       	ldi	r30, 0x75	; 117
     f80:	f1 e0       	ldi	r31, 0x01	; 1
     f82:	80 93 75 01 	sts	0x0175, r24
     f86:	90 93 76 01 	sts	0x0176, r25
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
     f8a:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
     f8e:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
     f92:	80 93 77 01 	sts	0x0177, r24
     f96:	93 83       	std	Z+3, r25	; 0x03
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
     f98:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
     f9c:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
     fa0:	80 93 79 01 	sts	0x0179, r24
     fa4:	95 83       	std	Z+5, r25	; 0x05

	EVENT_USB_Device_ControlRequest();
     fa6:	eb d8       	rcall	.-3626   	; 0x17e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     fa8:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     fac:	83 ff       	sbrs	r24, 3
     fae:	3b c1       	rjmp	.+630    	; 0x1226 <USB_Device_ProcessControlRequest+0x2d8>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     fb0:	80 91 73 01 	lds	r24, 0x0173

		switch (USB_ControlRequest.bRequest)
     fb4:	30 91 74 01 	lds	r19, 0x0174
     fb8:	35 30       	cpi	r19, 0x05	; 5
     fba:	09 f4       	brne	.+2      	; 0xfbe <USB_Device_ProcessControlRequest+0x70>
     fbc:	87 c0       	rjmp	.+270    	; 0x10cc <USB_Device_ProcessControlRequest+0x17e>
     fbe:	36 30       	cpi	r19, 0x06	; 6
     fc0:	40 f4       	brcc	.+16     	; 0xfd2 <USB_Device_ProcessControlRequest+0x84>
     fc2:	31 30       	cpi	r19, 0x01	; 1
     fc4:	c9 f1       	breq	.+114    	; 0x1038 <USB_Device_ProcessControlRequest+0xea>
     fc6:	31 30       	cpi	r19, 0x01	; 1
     fc8:	70 f0       	brcs	.+28     	; 0xfe6 <USB_Device_ProcessControlRequest+0x98>
     fca:	33 30       	cpi	r19, 0x03	; 3
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <USB_Device_ProcessControlRequest+0x82>
     fce:	2b c1       	rjmp	.+598    	; 0x1226 <USB_Device_ProcessControlRequest+0x2d8>
     fd0:	33 c0       	rjmp	.+102    	; 0x1038 <USB_Device_ProcessControlRequest+0xea>
     fd2:	38 30       	cpi	r19, 0x08	; 8
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <USB_Device_ProcessControlRequest+0x8a>
     fd6:	f8 c0       	rjmp	.+496    	; 0x11c8 <USB_Device_ProcessControlRequest+0x27a>
     fd8:	39 30       	cpi	r19, 0x09	; 9
     fda:	09 f4       	brne	.+2      	; 0xfde <USB_Device_ProcessControlRequest+0x90>
     fdc:	07 c1       	rjmp	.+526    	; 0x11ec <USB_Device_ProcessControlRequest+0x29e>
     fde:	36 30       	cpi	r19, 0x06	; 6
     fe0:	09 f0       	breq	.+2      	; 0xfe4 <USB_Device_ProcessControlRequest+0x96>
     fe2:	21 c1       	rjmp	.+578    	; 0x1226 <USB_Device_ProcessControlRequest+0x2d8>
     fe4:	99 c0       	rjmp	.+306    	; 0x1118 <USB_Device_ProcessControlRequest+0x1ca>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     fe6:	80 38       	cpi	r24, 0x80	; 128
     fe8:	21 f0       	breq	.+8      	; 0xff2 <USB_Device_ProcessControlRequest+0xa4>
     fea:	82 38       	cpi	r24, 0x82	; 130
     fec:	09 f0       	breq	.+2      	; 0xff0 <USB_Device_ProcessControlRequest+0xa2>
     fee:	1b c1       	rjmp	.+566    	; 0x1226 <USB_Device_ProcessControlRequest+0x2d8>
     ff0:	08 c0       	rjmp	.+16     	; 0x1002 <USB_Device_ProcessControlRequest+0xb4>
     ff2:	90 91 6e 01 	lds	r25, 0x016E
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_RemoteWakeupEnabled)
     ff6:	80 91 6f 01 	lds	r24, 0x016F
     ffa:	88 23       	and	r24, r24
     ffc:	99 f0       	breq	.+38     	; 0x1024 <USB_Device_ProcessControlRequest+0xd6>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     ffe:	92 60       	ori	r25, 0x02	; 2
    1000:	11 c0       	rjmp	.+34     	; 0x1024 <USB_Device_ProcessControlRequest+0xd6>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1002:	80 91 77 01 	lds	r24, 0x0177
    1006:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1008:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    100c:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	25 e0       	ldi	r18, 0x05	; 5
    1014:	96 95       	lsr	r25
    1016:	87 95       	ror	r24
    1018:	2a 95       	dec	r18
    101a:	e1 f7       	brne	.-8      	; 0x1014 <USB_Device_ProcessControlRequest+0xc6>
    101c:	98 2f       	mov	r25, r24
    101e:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1020:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1024:	80 91 e8 00 	lds	r24, 0x00E8
    1028:	87 7f       	andi	r24, 0xF7	; 247
    102a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    102e:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
    1032:	10 92 f1 00 	sts	0x00F1, r1
    1036:	d3 c0       	rjmp	.+422    	; 0x11de <USB_Device_ProcessControlRequest+0x290>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1038:	88 23       	and	r24, r24
    103a:	19 f0       	breq	.+6      	; 0x1042 <USB_Device_ProcessControlRequest+0xf4>
    103c:	82 30       	cpi	r24, 0x02	; 2
    103e:	09 f0       	breq	.+2      	; 0x1042 <USB_Device_ProcessControlRequest+0xf4>
    1040:	f2 c0       	rjmp	.+484    	; 0x1226 <USB_Device_ProcessControlRequest+0x2d8>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	8f 71       	andi	r24, 0x1F	; 31
    1046:	90 70       	andi	r25, 0x00	; 0
    1048:	00 97       	sbiw	r24, 0x00	; 0
    104a:	21 f0       	breq	.+8      	; 0x1054 <USB_Device_ProcessControlRequest+0x106>
    104c:	02 97       	sbiw	r24, 0x02	; 2
    104e:	09 f0       	breq	.+2      	; 0x1052 <USB_Device_ProcessControlRequest+0x104>
    1050:	ea c0       	rjmp	.+468    	; 0x1226 <USB_Device_ProcessControlRequest+0x2d8>
    1052:	0c c0       	rjmp	.+24     	; 0x106c <USB_Device_ProcessControlRequest+0x11e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1054:	80 91 75 01 	lds	r24, 0x0175
    1058:	81 30       	cpi	r24, 0x01	; 1
    105a:	09 f0       	breq	.+2      	; 0x105e <USB_Device_ProcessControlRequest+0x110>
    105c:	e4 c0       	rjmp	.+456    	; 0x1226 <USB_Device_ProcessControlRequest+0x2d8>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    105e:	10 92 6f 01 	sts	0x016F, r1
    1062:	33 30       	cpi	r19, 0x03	; 3
    1064:	69 f5       	brne	.+90     	; 0x10c0 <USB_Device_ProcessControlRequest+0x172>
    1066:	80 93 6f 01 	sts	0x016F, r24
    106a:	2a c0       	rjmp	.+84     	; 0x10c0 <USB_Device_ProcessControlRequest+0x172>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    106c:	80 91 75 01 	lds	r24, 0x0175
    1070:	88 23       	and	r24, r24
    1072:	31 f5       	brne	.+76     	; 0x10c0 <USB_Device_ProcessControlRequest+0x172>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1074:	20 91 77 01 	lds	r18, 0x0177
    1078:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    107a:	09 f4       	brne	.+2      	; 0x107e <USB_Device_ProcessControlRequest+0x130>
    107c:	d4 c0       	rjmp	.+424    	; 0x1226 <USB_Device_ProcessControlRequest+0x2d8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    107e:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1082:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1086:	80 ff       	sbrs	r24, 0
    1088:	1b c0       	rjmp	.+54     	; 0x10c0 <USB_Device_ProcessControlRequest+0x172>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    108a:	33 30       	cpi	r19, 0x03	; 3
    108c:	21 f4       	brne	.+8      	; 0x1096 <USB_Device_ProcessControlRequest+0x148>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    108e:	80 91 eb 00 	lds	r24, 0x00EB
    1092:	80 62       	ori	r24, 0x20	; 32
    1094:	13 c0       	rjmp	.+38     	; 0x10bc <USB_Device_ProcessControlRequest+0x16e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1096:	80 91 eb 00 	lds	r24, 0x00EB
    109a:	80 61       	ori	r24, 0x10	; 16
    109c:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <USB_Device_ProcessControlRequest+0x15c>
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	2a 95       	dec	r18
    10ac:	e2 f7       	brpl	.-8      	; 0x10a6 <USB_Device_ProcessControlRequest+0x158>
    10ae:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    10b2:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    10b6:	80 91 eb 00 	lds	r24, 0x00EB
    10ba:	88 60       	ori	r24, 0x08	; 8
    10bc:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    10c0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10c4:	80 91 e8 00 	lds	r24, 0x00E8
    10c8:	87 7f       	andi	r24, 0xF7	; 247
    10ca:	8c c0       	rjmp	.+280    	; 0x11e4 <USB_Device_ProcessControlRequest+0x296>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    10cc:	88 23       	and	r24, r24
    10ce:	09 f0       	breq	.+2      	; 0x10d2 <USB_Device_ProcessControlRequest+0x184>
    10d0:	aa c0       	rjmp	.+340    	; 0x1226 <USB_Device_ProcessControlRequest+0x2d8>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    10d2:	10 91 75 01 	lds	r17, 0x0175
    10d6:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    10d8:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    10da:	f8 94       	cli
    10dc:	80 91 e8 00 	lds	r24, 0x00E8
    10e0:	87 7f       	andi	r24, 0xF7	; 247
    10e2:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    10e6:	75 dd       	rcall	.-1302   	; 0xbd2 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    10e8:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    10ec:	80 ff       	sbrs	r24, 0
    10ee:	fc cf       	rjmp	.-8      	; 0x10e8 <USB_Device_ProcessControlRequest+0x19a>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
    10f0:	80 91 e3 00 	lds	r24, 0x00E3
    10f4:	80 78       	andi	r24, 0x80	; 128
    10f6:	81 2b       	or	r24, r17
    10f8:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR |= (1 << ADDEN);
    10fc:	80 91 e3 00 	lds	r24, 0x00E3
    1100:	80 68       	ori	r24, 0x80	; 128
    1102:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1106:	11 23       	and	r17, r17
    1108:	11 f4       	brne	.+4      	; 0x110e <USB_Device_ProcessControlRequest+0x1c0>
    110a:	82 e0       	ldi	r24, 0x02	; 2
    110c:	01 c0       	rjmp	.+2      	; 0x1110 <USB_Device_ProcessControlRequest+0x1c2>
    110e:	83 e0       	ldi	r24, 0x03	; 3
    1110:	80 93 72 01 	sts	0x0172, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1114:	0f bf       	out	0x3f, r16	; 63
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#endif
				
				GCC_MEMORY_BARRIER();
    1116:	87 c0       	rjmp	.+270    	; 0x1226 <USB_Device_ProcessControlRequest+0x2d8>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1118:	80 58       	subi	r24, 0x80	; 128
    111a:	82 30       	cpi	r24, 0x02	; 2
    111c:	08 f0       	brcs	.+2      	; 0x1120 <USB_Device_ProcessControlRequest+0x1d2>
    111e:	83 c0       	rjmp	.+262    	; 0x1226 <USB_Device_ProcessControlRequest+0x2d8>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1120:	80 91 75 01 	lds	r24, 0x0175
    1124:	90 91 76 01 	lds	r25, 0x0176
    1128:	23 e0       	ldi	r18, 0x03	; 3
    112a:	8c 3d       	cpi	r24, 0xDC	; 220
    112c:	92 07       	cpc	r25, r18
    112e:	09 f0       	breq	.+2      	; 0x1132 <USB_Device_ProcessControlRequest+0x1e4>
    1130:	33 c0       	rjmp	.+102    	; 0x1198 <USB_Device_ProcessControlRequest+0x24a>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1132:	83 e0       	ldi	r24, 0x03	; 3
    1134:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1136:	8a e2       	ldi	r24, 0x2A	; 42
    1138:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    113a:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    113c:	f8 94       	cli
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#endif

				GCC_MEMORY_BARRIER();
    113e:	de 01       	movw	r26, r28
    1140:	15 96       	adiw	r26, 0x05	; 5
    1142:	6e e0       	ldi	r22, 0x0E	; 14
    1144:	40 e0       	ldi	r20, 0x00	; 0
    1146:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1148:	11 e2       	ldi	r17, 0x21	; 33
    114a:	e6 2f       	mov	r30, r22
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	10 93 57 00 	sts	0x0057, r17
    1152:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
    1154:	40 ff       	sbrs	r20, 0
    1156:	03 c0       	rjmp	.+6      	; 0x115e <USB_Device_ProcessControlRequest+0x210>
					{
						SerialByte >>= 4;
    1158:	82 95       	swap	r24
    115a:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    115c:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    115e:	8f 70       	andi	r24, 0x0F	; 15
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1164:	8a 30       	cpi	r24, 0x0A	; 10
    1166:	18 f0       	brcs	.+6      	; 0x116e <USB_Device_ProcessControlRequest+0x220>
    1168:	c9 01       	movw	r24, r18
    116a:	c7 96       	adiw	r24, 0x37	; 55
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <USB_Device_ProcessControlRequest+0x224>
    116e:	c9 01       	movw	r24, r18
    1170:	c0 96       	adiw	r24, 0x30	; 48
    1172:	8d 93       	st	X+, r24
    1174:	9d 93       	st	X+, r25
    1176:	4f 5f       	subi	r20, 0xFF	; 255
    1178:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    117a:	44 31       	cpi	r20, 0x14	; 20
    117c:	51 05       	cpc	r21, r1
    117e:	29 f7       	brne	.-54     	; 0x114a <USB_Device_ProcessControlRequest+0x1fc>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1180:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1182:	80 91 e8 00 	lds	r24, 0x00E8
    1186:	87 7f       	andi	r24, 0xF7	; 247
    1188:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    118c:	ce 01       	movw	r24, r28
    118e:	03 96       	adiw	r24, 0x03	; 3
    1190:	6a e2       	ldi	r22, 0x2A	; 42
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	62 d0       	rcall	.+196    	; 0x125a <Endpoint_Write_Control_Stream_LE>
    1196:	12 c0       	rjmp	.+36     	; 0x11bc <USB_Device_ProcessControlRequest+0x26e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1198:	60 91 77 01 	lds	r22, 0x0177
    119c:	ae 01       	movw	r20, r28
    119e:	4f 5f       	subi	r20, 0xFF	; 255
    11a0:	5f 4f       	sbci	r21, 0xFF	; 255
    11a2:	3d d8       	rcall	.-3974   	; 0x21e <CALLBACK_USB_GetDescriptor>
    11a4:	bc 01       	movw	r22, r24
    11a6:	00 97       	sbiw	r24, 0x00	; 0
    11a8:	09 f4       	brne	.+2      	; 0x11ac <USB_Device_ProcessControlRequest+0x25e>
    11aa:	3d c0       	rjmp	.+122    	; 0x1226 <USB_Device_ProcessControlRequest+0x2d8>
    11ac:	80 91 e8 00 	lds	r24, 0x00E8
    11b0:	87 7f       	andi	r24, 0xF7	; 247
    11b2:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ba:	ad d0       	rcall	.+346    	; 0x1316 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    11bc:	80 91 e8 00 	lds	r24, 0x00E8
    11c0:	8b 77       	andi	r24, 0x7B	; 123
    11c2:	80 93 e8 00 	sts	0x00E8, r24
    11c6:	2f c0       	rjmp	.+94     	; 0x1226 <USB_Device_ProcessControlRequest+0x2d8>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    11c8:	80 38       	cpi	r24, 0x80	; 128
    11ca:	69 f5       	brne	.+90     	; 0x1226 <USB_Device_ProcessControlRequest+0x2d8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    11cc:	80 91 e8 00 	lds	r24, 0x00E8
    11d0:	87 7f       	andi	r24, 0xF7	; 247
    11d2:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_ConfigurationNumber);
    11d6:	80 91 70 01 	lds	r24, 0x0170
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    11da:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    11de:	80 91 e8 00 	lds	r24, 0x00E8
    11e2:	8e 77       	andi	r24, 0x7E	; 126
    11e4:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    11e8:	f4 dc       	rcall	.-1560   	; 0xbd2 <Endpoint_ClearStatusStage>
    11ea:	1d c0       	rjmp	.+58     	; 0x1226 <USB_Device_ProcessControlRequest+0x2d8>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    11ec:	88 23       	and	r24, r24
    11ee:	d9 f4       	brne	.+54     	; 0x1226 <USB_Device_ProcessControlRequest+0x2d8>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    11f0:	90 91 75 01 	lds	r25, 0x0175
    11f4:	92 30       	cpi	r25, 0x02	; 2
    11f6:	b8 f4       	brcc	.+46     	; 0x1226 <USB_Device_ProcessControlRequest+0x2d8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    11f8:	80 91 e8 00 	lds	r24, 0x00E8
    11fc:	87 7f       	andi	r24, 0xF7	; 247
    11fe:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1202:	90 93 70 01 	sts	0x0170, r25

	Endpoint_ClearStatusStage();
    1206:	e5 dc       	rcall	.-1590   	; 0xbd2 <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
    1208:	80 91 70 01 	lds	r24, 0x0170
    120c:	88 23       	and	r24, r24
    120e:	31 f4       	brne	.+12     	; 0x121c <USB_Device_ProcessControlRequest+0x2ce>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1210:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1214:	87 fd       	sbrc	r24, 7
    1216:	02 c0       	rjmp	.+4      	; 0x121c <USB_Device_ProcessControlRequest+0x2ce>
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	01 c0       	rjmp	.+2      	; 0x121e <USB_Device_ProcessControlRequest+0x2d0>
    121c:	84 e0       	ldi	r24, 0x04	; 4
    121e:	80 93 72 01 	sts	0x0172, r24

	EVENT_USB_Device_ConfigurationChanged();
    1222:	0e 94 c3 00 	call	0x186	; 0x186 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1226:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    122a:	83 ff       	sbrs	r24, 3
    122c:	0a c0       	rjmp	.+20     	; 0x1242 <USB_Device_ProcessControlRequest+0x2f4>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    122e:	80 91 eb 00 	lds	r24, 0x00EB
    1232:	80 62       	ori	r24, 0x20	; 32
    1234:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1238:	80 91 e8 00 	lds	r24, 0x00E8
    123c:	87 7f       	andi	r24, 0xF7	; 247
    123e:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    1242:	ac 96       	adiw	r28, 0x2c	; 44
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	f8 94       	cli
    1248:	de bf       	out	0x3e, r29	; 62
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	cd bf       	out	0x3d, r28	; 61
    124e:	cf 91       	pop	r28
    1250:	df 91       	pop	r29
    1252:	1f 91       	pop	r17
    1254:	0f 91       	pop	r16
    1256:	08 95       	ret

00001258 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1258:	08 95       	ret

0000125a <Endpoint_Write_Control_Stream_LE>:
    125a:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    125c:	40 91 79 01 	lds	r20, 0x0179
    1260:	50 91 7a 01 	lds	r21, 0x017A
    1264:	46 17       	cp	r20, r22
    1266:	57 07       	cpc	r21, r23
    1268:	18 f4       	brcc	.+6      	; 0x1270 <Endpoint_Write_Control_Stream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    126a:	f9 01       	movw	r30, r18
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	3d c0       	rjmp	.+122    	; 0x12ea <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1270:	61 15       	cp	r22, r1
    1272:	71 05       	cpc	r23, r1
    1274:	11 f0       	breq	.+4      	; 0x127a <Endpoint_Write_Control_Stream_LE+0x20>
    1276:	ab 01       	movw	r20, r22
    1278:	f8 cf       	rjmp	.-16     	; 0x126a <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    127a:	80 91 e8 00 	lds	r24, 0x00E8
    127e:	8e 77       	andi	r24, 0x7E	; 126
    1280:	80 93 e8 00 	sts	0x00E8, r24
    1284:	40 e0       	ldi	r20, 0x00	; 0
    1286:	50 e0       	ldi	r21, 0x00	; 0
    1288:	f0 cf       	rjmp	.-32     	; 0x126a <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    128a:	80 91 72 01 	lds	r24, 0x0172

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    128e:	88 23       	and	r24, r24
    1290:	f1 f1       	breq	.+124    	; 0x130e <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1292:	85 30       	cpi	r24, 0x05	; 5
    1294:	f1 f1       	breq	.+124    	; 0x1312 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1296:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    129a:	83 ff       	sbrs	r24, 3
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <Endpoint_Write_Control_Stream_LE+0x48>
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    12a2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    12a6:	82 fd       	sbrc	r24, 2
    12a8:	2c c0       	rjmp	.+88     	; 0x1302 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    12aa:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    12ae:	80 ff       	sbrs	r24, 0
    12b0:	1c c0       	rjmp	.+56     	; 0x12ea <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    12b2:	20 91 f2 00 	lds	r18, 0x00F2
    12b6:	30 91 f3 00 	lds	r19, 0x00F3
    12ba:	07 c0       	rjmp	.+14     	; 0x12ca <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    12bc:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    12be:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    12c2:	41 50       	subi	r20, 0x01	; 1
    12c4:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    12c6:	2f 5f       	subi	r18, 0xFF	; 255
    12c8:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    12ca:	41 15       	cp	r20, r1
    12cc:	51 05       	cpc	r21, r1
    12ce:	19 f0       	breq	.+6      	; 0x12d6 <Endpoint_Write_Control_Stream_LE+0x7c>
    12d0:	28 30       	cpi	r18, 0x08	; 8
    12d2:	31 05       	cpc	r19, r1
    12d4:	98 f3       	brcs	.-26     	; 0x12bc <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	28 30       	cpi	r18, 0x08	; 8
    12da:	31 05       	cpc	r19, r1
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <Endpoint_Write_Control_Stream_LE+0x86>
    12de:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12e0:	80 91 e8 00 	lds	r24, 0x00E8
    12e4:	8e 77       	andi	r24, 0x7E	; 126
    12e6:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    12ea:	41 15       	cp	r20, r1
    12ec:	51 05       	cpc	r21, r1
    12ee:	69 f6       	brne	.-102    	; 0x128a <Endpoint_Write_Control_Stream_LE+0x30>
    12f0:	99 23       	and	r25, r25
    12f2:	59 f6       	brne	.-106    	; 0x128a <Endpoint_Write_Control_Stream_LE+0x30>
    12f4:	06 c0       	rjmp	.+12     	; 0x1302 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    12f6:	80 91 72 01 	lds	r24, 0x0172

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    12fa:	88 23       	and	r24, r24
    12fc:	41 f0       	breq	.+16     	; 0x130e <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    12fe:	85 30       	cpi	r24, 0x05	; 5
    1300:	41 f0       	breq	.+16     	; 0x1312 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1302:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1306:	82 ff       	sbrs	r24, 2
    1308:	f6 cf       	rjmp	.-20     	; 0x12f6 <Endpoint_Write_Control_Stream_LE+0x9c>
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	08 95       	ret
    130e:	82 e0       	ldi	r24, 0x02	; 2
    1310:	08 95       	ret
    1312:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1314:	08 95       	ret

00001316 <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    1316:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1318:	40 91 79 01 	lds	r20, 0x0179
    131c:	50 91 7a 01 	lds	r21, 0x017A
    1320:	46 17       	cp	r20, r22
    1322:	57 07       	cpc	r21, r23
    1324:	18 f4       	brcc	.+6      	; 0x132c <Endpoint_Write_Control_PStream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1326:	f9 01       	movw	r30, r18
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	40 c0       	rjmp	.+128    	; 0x13ac <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    132c:	61 15       	cp	r22, r1
    132e:	71 05       	cpc	r23, r1
    1330:	11 f0       	breq	.+4      	; 0x1336 <Endpoint_Write_Control_PStream_LE+0x20>
    1332:	ab 01       	movw	r20, r22
    1334:	f8 cf       	rjmp	.-16     	; 0x1326 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1336:	80 91 e8 00 	lds	r24, 0x00E8
    133a:	8e 77       	andi	r24, 0x7E	; 126
    133c:	80 93 e8 00 	sts	0x00E8, r24
    1340:	40 e0       	ldi	r20, 0x00	; 0
    1342:	50 e0       	ldi	r21, 0x00	; 0
    1344:	f0 cf       	rjmp	.-32     	; 0x1326 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1346:	80 91 72 01 	lds	r24, 0x0172

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    134a:	88 23       	and	r24, r24
    134c:	09 f4       	brne	.+2      	; 0x1350 <Endpoint_Write_Control_PStream_LE+0x3a>
    134e:	40 c0       	rjmp	.+128    	; 0x13d0 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1350:	85 30       	cpi	r24, 0x05	; 5
    1352:	09 f4       	brne	.+2      	; 0x1356 <Endpoint_Write_Control_PStream_LE+0x40>
    1354:	3f c0       	rjmp	.+126    	; 0x13d4 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1356:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    135a:	83 ff       	sbrs	r24, 3
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <Endpoint_Write_Control_PStream_LE+0x4c>
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1362:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1366:	82 fd       	sbrc	r24, 2
    1368:	2d c0       	rjmp	.+90     	; 0x13c4 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    136a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    136e:	80 ff       	sbrs	r24, 0
    1370:	1d c0       	rjmp	.+58     	; 0x13ac <Endpoint_Write_Control_PStream_LE+0x96>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    1372:	20 91 f2 00 	lds	r18, 0x00F2
    1376:	30 91 f3 00 	lds	r19, 0x00F3
    137a:	08 c0       	rjmp	.+16     	; 0x138c <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    137c:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    137e:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1382:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1384:	41 50       	subi	r20, 0x01	; 1
    1386:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    1388:	2f 5f       	subi	r18, 0xFF	; 255
    138a:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    138c:	41 15       	cp	r20, r1
    138e:	51 05       	cpc	r21, r1
    1390:	19 f0       	breq	.+6      	; 0x1398 <Endpoint_Write_Control_PStream_LE+0x82>
    1392:	28 30       	cpi	r18, 0x08	; 8
    1394:	31 05       	cpc	r19, r1
    1396:	90 f3       	brcs	.-28     	; 0x137c <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	28 30       	cpi	r18, 0x08	; 8
    139c:	31 05       	cpc	r19, r1
    139e:	09 f4       	brne	.+2      	; 0x13a2 <Endpoint_Write_Control_PStream_LE+0x8c>
    13a0:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13a2:	80 91 e8 00 	lds	r24, 0x00E8
    13a6:	8e 77       	andi	r24, 0x7E	; 126
    13a8:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    13ac:	41 15       	cp	r20, r1
    13ae:	51 05       	cpc	r21, r1
    13b0:	51 f6       	brne	.-108    	; 0x1346 <Endpoint_Write_Control_PStream_LE+0x30>
    13b2:	99 23       	and	r25, r25
    13b4:	41 f6       	brne	.-112    	; 0x1346 <Endpoint_Write_Control_PStream_LE+0x30>
    13b6:	06 c0       	rjmp	.+12     	; 0x13c4 <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    13b8:	80 91 72 01 	lds	r24, 0x0172

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    13bc:	88 23       	and	r24, r24
    13be:	41 f0       	breq	.+16     	; 0x13d0 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    13c0:	85 30       	cpi	r24, 0x05	; 5
    13c2:	41 f0       	breq	.+16     	; 0x13d4 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    13c4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    13c8:	82 ff       	sbrs	r24, 2
    13ca:	f6 cf       	rjmp	.-20     	; 0x13b8 <Endpoint_Write_Control_PStream_LE+0xa2>
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	08 95       	ret
    13d0:	82 e0       	ldi	r24, 0x02	; 2
    13d2:	08 95       	ret
    13d4:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    13d6:	08 95       	ret

000013d8 <Endpoint_Read_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    13d8:	bf 92       	push	r11
    13da:	cf 92       	push	r12
    13dc:	df 92       	push	r13
    13de:	ef 92       	push	r14
    13e0:	ff 92       	push	r15
    13e2:	0f 93       	push	r16
    13e4:	1f 93       	push	r17
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	18 2f       	mov	r17, r24
    13ec:	09 2f       	mov	r16, r25
    13ee:	7b 01       	movw	r14, r22
    13f0:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    13f2:	10 dc       	rcall	.-2016   	; 0xc14 <Endpoint_WaitUntilReady>
    13f4:	b8 2e       	mov	r11, r24
    13f6:	88 23       	and	r24, r24
    13f8:	a9 f5       	brne	.+106    	; 0x1464 <Endpoint_Read_Stream_LE+0x8c>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    13fa:	81 2f       	mov	r24, r17
    13fc:	90 2f       	mov	r25, r16
    13fe:	9c 01       	movw	r18, r24
    1400:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1402:	c1 14       	cp	r12, r1
    1404:	d1 04       	cpc	r13, r1
    1406:	39 f0       	breq	.+14     	; 0x1416 <Endpoint_Read_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    1408:	f6 01       	movw	r30, r12
    140a:	80 81       	ld	r24, Z
    140c:	91 81       	ldd	r25, Z+1	; 0x01
    140e:	e8 1a       	sub	r14, r24
    1410:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1412:	c8 0f       	add	r28, r24
    1414:	d9 1f       	adc	r29, r25
    1416:	00 e0       	ldi	r16, 0x00	; 0
    1418:	10 e0       	ldi	r17, 0x00	; 0
    141a:	21 c0       	rjmp	.+66     	; 0x145e <Endpoint_Read_Stream_LE+0x86>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    141c:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1420:	85 fd       	sbrc	r24, 5
    1422:	15 c0       	rjmp	.+42     	; 0x144e <Endpoint_Read_Stream_LE+0x76>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1424:	80 91 e8 00 	lds	r24, 0x00E8
    1428:	8b 77       	andi	r24, 0x7B	; 123
    142a:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    142e:	c1 14       	cp	r12, r1
    1430:	d1 04       	cpc	r13, r1
    1432:	49 f0       	breq	.+18     	; 0x1446 <Endpoint_Read_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
    1434:	f6 01       	movw	r30, r12
    1436:	80 81       	ld	r24, Z
    1438:	91 81       	ldd	r25, Z+1	; 0x01
    143a:	80 0f       	add	r24, r16
    143c:	91 1f       	adc	r25, r17
    143e:	91 83       	std	Z+1, r25	; 0x01
    1440:	80 83       	st	Z, r24
    1442:	85 e0       	ldi	r24, 0x05	; 5
    1444:	10 c0       	rjmp	.+32     	; 0x1466 <Endpoint_Read_Stream_LE+0x8e>

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1446:	e6 db       	rcall	.-2100   	; 0xc14 <Endpoint_WaitUntilReady>
    1448:	88 23       	and	r24, r24
    144a:	49 f0       	breq	.+18     	; 0x145e <Endpoint_Read_Stream_LE+0x86>
    144c:	0c c0       	rjmp	.+24     	; 0x1466 <Endpoint_Read_Stream_LE+0x8e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    144e:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1452:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1454:	08 94       	sec
    1456:	e1 08       	sbc	r14, r1
    1458:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    145a:	0f 5f       	subi	r16, 0xFF	; 255
    145c:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    145e:	e1 14       	cp	r14, r1
    1460:	f1 04       	cpc	r15, r1
    1462:	e1 f6       	brne	.-72     	; 0x141c <Endpoint_Read_Stream_LE+0x44>
    1464:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1466:	df 91       	pop	r29
    1468:	cf 91       	pop	r28
    146a:	1f 91       	pop	r17
    146c:	0f 91       	pop	r16
    146e:	ff 90       	pop	r15
    1470:	ef 90       	pop	r14
    1472:	df 90       	pop	r13
    1474:	cf 90       	pop	r12
    1476:	bf 90       	pop	r11
    1478:	08 95       	ret

0000147a <Endpoint_Write_Stream_BE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    147a:	bf 92       	push	r11
    147c:	cf 92       	push	r12
    147e:	df 92       	push	r13
    1480:	ef 92       	push	r14
    1482:	ff 92       	push	r15
    1484:	0f 93       	push	r16
    1486:	1f 93       	push	r17
    1488:	cf 93       	push	r28
    148a:	df 93       	push	r29
    148c:	8c 01       	movw	r16, r24
    148e:	eb 01       	movw	r28, r22
    1490:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1492:	c0 db       	rcall	.-2176   	; 0xc14 <Endpoint_WaitUntilReady>
    1494:	b8 2e       	mov	r11, r24
    1496:	88 23       	and	r24, r24
    1498:	b1 f5       	brne	.+108    	; 0x1506 <Endpoint_Write_Stream_BE+0x8c>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    149a:	21 97       	sbiw	r28, 0x01	; 1
    149c:	0c 0f       	add	r16, r28
    149e:	1d 1f       	adc	r17, r29
    14a0:	21 96       	adiw	r28, 0x01	; 1
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    14a2:	c1 14       	cp	r12, r1
    14a4:	d1 04       	cpc	r13, r1
    14a6:	39 f0       	breq	.+14     	; 0x14b6 <Endpoint_Write_Stream_BE+0x3c>
	{
		Length -= *BytesProcessed;
    14a8:	f6 01       	movw	r30, r12
    14aa:	80 81       	ld	r24, Z
    14ac:	91 81       	ldd	r25, Z+1	; 0x01
    14ae:	c8 1b       	sub	r28, r24
    14b0:	d9 0b       	sbc	r29, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    14b2:	08 1b       	sub	r16, r24
    14b4:	19 0b       	sbc	r17, r25
    14b6:	ee 24       	eor	r14, r14
    14b8:	ff 24       	eor	r15, r15
    14ba:	23 c0       	rjmp	.+70     	; 0x1502 <Endpoint_Write_Stream_BE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    14bc:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    14c0:	85 fd       	sbrc	r24, 5
    14c2:	15 c0       	rjmp	.+42     	; 0x14ee <Endpoint_Write_Stream_BE+0x74>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14c4:	80 91 e8 00 	lds	r24, 0x00E8
    14c8:	8e 77       	andi	r24, 0x7E	; 126
    14ca:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    14ce:	c1 14       	cp	r12, r1
    14d0:	d1 04       	cpc	r13, r1
    14d2:	49 f0       	breq	.+18     	; 0x14e6 <Endpoint_Write_Stream_BE+0x6c>
			{
				*BytesProcessed += BytesInTransfer;
    14d4:	f6 01       	movw	r30, r12
    14d6:	80 81       	ld	r24, Z
    14d8:	91 81       	ldd	r25, Z+1	; 0x01
    14da:	8e 0d       	add	r24, r14
    14dc:	9f 1d       	adc	r25, r15
    14de:	91 83       	std	Z+1, r25	; 0x01
    14e0:	80 83       	st	Z, r24
    14e2:	85 e0       	ldi	r24, 0x05	; 5
    14e4:	11 c0       	rjmp	.+34     	; 0x1508 <Endpoint_Write_Stream_BE+0x8e>

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    14e6:	96 db       	rcall	.-2260   	; 0xc14 <Endpoint_WaitUntilReady>
    14e8:	88 23       	and	r24, r24
    14ea:	59 f0       	breq	.+22     	; 0x1502 <Endpoint_Write_Stream_BE+0x88>
    14ec:	0d c0       	rjmp	.+26     	; 0x1508 <Endpoint_Write_Stream_BE+0x8e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    14ee:	f8 01       	movw	r30, r16
    14f0:	80 81       	ld	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    14f2:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
    14f6:	01 50       	subi	r16, 0x01	; 1
    14f8:	10 40       	sbci	r17, 0x00	; 0
			Length--;
    14fa:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    14fc:	08 94       	sec
    14fe:	e1 1c       	adc	r14, r1
    1500:	f1 1c       	adc	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1502:	20 97       	sbiw	r28, 0x00	; 0
    1504:	d9 f6       	brne	.-74     	; 0x14bc <Endpoint_Write_Stream_BE+0x42>
    1506:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
    150c:	1f 91       	pop	r17
    150e:	0f 91       	pop	r16
    1510:	ff 90       	pop	r15
    1512:	ef 90       	pop	r14
    1514:	df 90       	pop	r13
    1516:	cf 90       	pop	r12
    1518:	bf 90       	pop	r11
    151a:	08 95       	ret

0000151c <Endpoint_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    151c:	bf 92       	push	r11
    151e:	cf 92       	push	r12
    1520:	df 92       	push	r13
    1522:	ef 92       	push	r14
    1524:	ff 92       	push	r15
    1526:	0f 93       	push	r16
    1528:	1f 93       	push	r17
    152a:	cf 93       	push	r28
    152c:	df 93       	push	r29
    152e:	18 2f       	mov	r17, r24
    1530:	09 2f       	mov	r16, r25
    1532:	7b 01       	movw	r14, r22
    1534:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1536:	6e db       	rcall	.-2340   	; 0xc14 <Endpoint_WaitUntilReady>
    1538:	b8 2e       	mov	r11, r24
    153a:	88 23       	and	r24, r24
    153c:	a9 f5       	brne	.+106    	; 0x15a8 <Endpoint_Write_Stream_LE+0x8c>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    153e:	81 2f       	mov	r24, r17
    1540:	90 2f       	mov	r25, r16
    1542:	9c 01       	movw	r18, r24
    1544:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1546:	c1 14       	cp	r12, r1
    1548:	d1 04       	cpc	r13, r1
    154a:	39 f0       	breq	.+14     	; 0x155a <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    154c:	f6 01       	movw	r30, r12
    154e:	80 81       	ld	r24, Z
    1550:	91 81       	ldd	r25, Z+1	; 0x01
    1552:	e8 1a       	sub	r14, r24
    1554:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1556:	c8 0f       	add	r28, r24
    1558:	d9 1f       	adc	r29, r25
    155a:	00 e0       	ldi	r16, 0x00	; 0
    155c:	10 e0       	ldi	r17, 0x00	; 0
    155e:	21 c0       	rjmp	.+66     	; 0x15a2 <Endpoint_Write_Stream_LE+0x86>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1560:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1564:	85 fd       	sbrc	r24, 5
    1566:	15 c0       	rjmp	.+42     	; 0x1592 <Endpoint_Write_Stream_LE+0x76>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1568:	80 91 e8 00 	lds	r24, 0x00E8
    156c:	8e 77       	andi	r24, 0x7E	; 126
    156e:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    1572:	c1 14       	cp	r12, r1
    1574:	d1 04       	cpc	r13, r1
    1576:	49 f0       	breq	.+18     	; 0x158a <Endpoint_Write_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
    1578:	f6 01       	movw	r30, r12
    157a:	80 81       	ld	r24, Z
    157c:	91 81       	ldd	r25, Z+1	; 0x01
    157e:	80 0f       	add	r24, r16
    1580:	91 1f       	adc	r25, r17
    1582:	91 83       	std	Z+1, r25	; 0x01
    1584:	80 83       	st	Z, r24
    1586:	85 e0       	ldi	r24, 0x05	; 5
    1588:	10 c0       	rjmp	.+32     	; 0x15aa <Endpoint_Write_Stream_LE+0x8e>

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    158a:	44 db       	rcall	.-2424   	; 0xc14 <Endpoint_WaitUntilReady>
    158c:	88 23       	and	r24, r24
    158e:	49 f0       	breq	.+18     	; 0x15a2 <Endpoint_Write_Stream_LE+0x86>
    1590:	0c c0       	rjmp	.+24     	; 0x15aa <Endpoint_Write_Stream_LE+0x8e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1592:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1594:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1598:	08 94       	sec
    159a:	e1 08       	sbc	r14, r1
    159c:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    159e:	0f 5f       	subi	r16, 0xFF	; 255
    15a0:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    15a2:	e1 14       	cp	r14, r1
    15a4:	f1 04       	cpc	r15, r1
    15a6:	e1 f6       	brne	.-72     	; 0x1560 <Endpoint_Write_Stream_LE+0x44>
    15a8:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    15aa:	df 91       	pop	r29
    15ac:	cf 91       	pop	r28
    15ae:	1f 91       	pop	r17
    15b0:	0f 91       	pop	r16
    15b2:	ff 90       	pop	r15
    15b4:	ef 90       	pop	r14
    15b6:	df 90       	pop	r13
    15b8:	cf 90       	pop	r12
    15ba:	bf 90       	pop	r11
    15bc:	08 95       	ret

000015be <Endpoint_Null_Stream>:
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
    15be:	df 92       	push	r13
    15c0:	ef 92       	push	r14
    15c2:	ff 92       	push	r15
    15c4:	0f 93       	push	r16
    15c6:	1f 93       	push	r17
    15c8:	cf 93       	push	r28
    15ca:	df 93       	push	r29
    15cc:	ec 01       	movw	r28, r24
    15ce:	8b 01       	movw	r16, r22
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;
	
	if ((ErrorCode = Endpoint_WaitUntilReady()))
    15d0:	21 db       	rcall	.-2494   	; 0xc14 <Endpoint_WaitUntilReady>
    15d2:	d8 2e       	mov	r13, r24
    15d4:	88 23       	and	r24, r24
    15d6:	61 f5       	brne	.+88     	; 0x1630 <Endpoint_Null_Stream+0x72>
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
    15d8:	01 15       	cp	r16, r1
    15da:	11 05       	cpc	r17, r1
    15dc:	29 f0       	breq	.+10     	; 0x15e8 <Endpoint_Null_Stream+0x2a>
	  Length -= *BytesProcessed;
    15de:	f8 01       	movw	r30, r16
    15e0:	80 81       	ld	r24, Z
    15e2:	91 81       	ldd	r25, Z+1	; 0x01
    15e4:	c8 1b       	sub	r28, r24
    15e6:	d9 0b       	sbc	r29, r25
    15e8:	ee 24       	eor	r14, r14
    15ea:	ff 24       	eor	r15, r15
    15ec:	1f c0       	rjmp	.+62     	; 0x162c <Endpoint_Null_Stream+0x6e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    15ee:	80 91 e8 00 	lds	r24, 0x00E8

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    15f2:	85 fd       	sbrc	r24, 5
    15f4:	15 c0       	rjmp	.+42     	; 0x1620 <Endpoint_Null_Stream+0x62>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    15f6:	80 91 e8 00 	lds	r24, 0x00E8
    15fa:	8e 77       	andi	r24, 0x7E	; 126
    15fc:	80 93 e8 00 	sts	0x00E8, r24
		{
			Endpoint_ClearIN();

			if (BytesProcessed != NULL)
    1600:	01 15       	cp	r16, r1
    1602:	11 05       	cpc	r17, r1
    1604:	49 f0       	breq	.+18     	; 0x1618 <Endpoint_Null_Stream+0x5a>
			{
				*BytesProcessed += BytesInTransfer;
    1606:	f8 01       	movw	r30, r16
    1608:	80 81       	ld	r24, Z
    160a:	91 81       	ldd	r25, Z+1	; 0x01
    160c:	8e 0d       	add	r24, r14
    160e:	9f 1d       	adc	r25, r15
    1610:	91 83       	std	Z+1, r25	; 0x01
    1612:	80 83       	st	Z, r24
    1614:	85 e0       	ldi	r24, 0x05	; 5
    1616:	0d c0       	rjmp	.+26     	; 0x1632 <Endpoint_Null_Stream+0x74>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1618:	fd da       	rcall	.-2566   	; 0xc14 <Endpoint_WaitUntilReady>
    161a:	88 23       	and	r24, r24
    161c:	39 f0       	breq	.+14     	; 0x162c <Endpoint_Null_Stream+0x6e>
    161e:	09 c0       	rjmp	.+18     	; 0x1632 <Endpoint_Null_Stream+0x74>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1620:	10 92 f1 00 	sts	0x00F1, r1
		}
		else
		{
			Endpoint_Write_8(0);

			Length--;
    1624:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    1626:	08 94       	sec
    1628:	e1 1c       	adc	r14, r1
    162a:	f1 1c       	adc	r15, r1
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
    162c:	20 97       	sbiw	r28, 0x00	; 0
    162e:	f9 f6       	brne	.-66     	; 0x15ee <Endpoint_Null_Stream+0x30>
    1630:	8d 2d       	mov	r24, r13
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
    1632:	df 91       	pop	r29
    1634:	cf 91       	pop	r28
    1636:	1f 91       	pop	r17
    1638:	0f 91       	pop	r16
    163a:	ff 90       	pop	r15
    163c:	ef 90       	pop	r14
    163e:	df 90       	pop	r13
    1640:	08 95       	ret

00001642 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1642:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    1644:	80 91 72 01 	lds	r24, 0x0172
    1648:	88 23       	and	r24, r24
    164a:	61 f0       	breq	.+24     	; 0x1664 <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    164c:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1650:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1654:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    1658:	83 ff       	sbrs	r24, 3
    165a:	01 c0       	rjmp	.+2      	; 0x165e <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
    165c:	78 dc       	rcall	.-1808   	; 0xf4e <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    165e:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1660:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1664:	1f 91       	pop	r17
    1666:	08 95       	ret

00001668 <MS_Device_USBTask>:

	return true;
}

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1668:	cf 92       	push	r12
    166a:	df 92       	push	r13
    166c:	ef 92       	push	r14
    166e:	ff 92       	push	r15
    1670:	0f 93       	push	r16
    1672:	1f 93       	push	r17
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	00 d0       	rcall	.+0      	; 0x167a <MS_Device_USBTask+0x12>
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
    167e:	8c 01       	movw	r16, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1680:	80 91 72 01 	lds	r24, 0x0172
    1684:	84 30       	cpi	r24, 0x04	; 4
    1686:	09 f0       	breq	.+2      	; 0x168a <MS_Device_USBTask+0x22>
    1688:	07 c1       	rjmp	.+526    	; 0x1898 <MS_Device_USBTask+0x230>
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    168a:	f8 01       	movw	r30, r16
    168c:	95 81       	ldd	r25, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    168e:	90 93 e9 00 	sts	0x00E9, r25
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1692:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsReadWriteAllowed())
    1696:	85 ff       	sbrs	r24, 5
    1698:	c9 c0       	rjmp	.+402    	; 0x182c <MS_Device_USBTask+0x1c4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    169a:	90 93 e9 00 	sts	0x00E9, r25
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
	
	BytesProcessed = 0;
    169e:	1a 82       	std	Y+2, r1	; 0x02
    16a0:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    16a2:	2a e0       	ldi	r18, 0x0A	; 10
    16a4:	e2 2e       	mov	r14, r18
    16a6:	f1 2c       	mov	r15, r1
    16a8:	e0 0e       	add	r14, r16
    16aa:	f1 1e       	adc	r15, r17
    16ac:	6e 01       	movw	r12, r28
    16ae:	08 94       	sec
    16b0:	c1 1c       	adc	r12, r1
    16b2:	d1 1c       	adc	r13, r1
    16b4:	05 c0       	rjmp	.+10     	; 0x16c0 <MS_Device_USBTask+0x58>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    16b6:	f8 01       	movw	r30, r16
    16b8:	86 a9       	ldd	r24, Z+54	; 0x36
    16ba:	88 23       	and	r24, r24
    16bc:	09 f0       	breq	.+2      	; 0x16c0 <MS_Device_USBTask+0x58>
    16be:	b6 c0       	rjmp	.+364    	; 0x182c <MS_Device_USBTask+0x1c4>
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
	
	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    16c0:	c7 01       	movw	r24, r14
    16c2:	6f e0       	ldi	r22, 0x0F	; 15
    16c4:	70 e0       	ldi	r23, 0x00	; 0
    16c6:	a6 01       	movw	r20, r12
    16c8:	87 de       	rcall	.-754    	; 0x13d8 <Endpoint_Read_Stream_LE>
    16ca:	85 30       	cpi	r24, 0x05	; 5
    16cc:	a1 f3       	breq	.-24     	; 0x16b6 <MS_Device_USBTask+0x4e>
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != MS_CBW_SIGNATURE)                  ||
    16ce:	f8 01       	movw	r30, r16
    16d0:	82 85       	ldd	r24, Z+10	; 0x0a
    16d2:	93 85       	ldd	r25, Z+11	; 0x0b
    16d4:	a4 85       	ldd	r26, Z+12	; 0x0c
    16d6:	b5 85       	ldd	r27, Z+13	; 0x0d
    16d8:	85 55       	subi	r24, 0x55	; 85
    16da:	93 45       	sbci	r25, 0x53	; 83
    16dc:	a2 44       	sbci	r26, 0x42	; 66
    16de:	b3 44       	sbci	r27, 0x43	; 67
    16e0:	81 f4       	brne	.+32     	; 0x1702 <MS_Device_USBTask+0x9a>
    16e2:	f8 01       	movw	r30, r16
    16e4:	97 89       	ldd	r25, Z+23	; 0x17
    16e6:	81 85       	ldd	r24, Z+9	; 0x09
    16e8:	98 17       	cp	r25, r24
    16ea:	58 f4       	brcc	.+22     	; 0x1702 <MS_Device_USBTask+0x9a>
    16ec:	86 89       	ldd	r24, Z+22	; 0x16
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	8f 71       	andi	r24, 0x1F	; 31
    16f2:	90 70       	andi	r25, 0x00	; 0
    16f4:	89 2b       	or	r24, r25
    16f6:	29 f4       	brne	.+10     	; 0x1702 <MS_Device_USBTask+0x9a>
    16f8:	80 8d       	ldd	r24, Z+24	; 0x18
    16fa:	88 23       	and	r24, r24
    16fc:	11 f0       	breq	.+4      	; 0x1702 <MS_Device_USBTask+0x9a>
    16fe:	81 31       	cpi	r24, 0x11	; 17
    1700:	78 f0       	brcs	.+30     	; 0x1720 <MS_Device_USBTask+0xb8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1702:	80 91 eb 00 	lds	r24, 0x00EB
    1706:	80 62       	ori	r24, 0x20	; 32
    1708:	80 93 eb 00 	sts	0x00EB, r24
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength >  16))
	{
		Endpoint_StallTransaction();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    170c:	f8 01       	movw	r30, r16
    170e:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1710:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1714:	80 91 eb 00 	lds	r24, 0x00EB
    1718:	80 62       	ori	r24, 0x20	; 32
    171a:	80 93 eb 00 	sts	0x00EB, r24
    171e:	86 c0       	rjmp	.+268    	; 0x182c <MS_Device_USBTask+0x1c4>
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
    1720:	1a 82       	std	Y+2, r1	; 0x02
    1722:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    1724:	99 e1       	ldi	r25, 0x19	; 25
    1726:	e9 2e       	mov	r14, r25
    1728:	f1 2c       	mov	r15, r1
    172a:	e0 0e       	add	r14, r16
    172c:	f1 1e       	adc	r15, r17
    172e:	6e 01       	movw	r12, r28
    1730:	08 94       	sec
    1732:	c1 1c       	adc	r12, r1
    1734:	d1 1c       	adc	r13, r1
    1736:	05 c0       	rjmp	.+10     	; 0x1742 <MS_Device_USBTask+0xda>
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1738:	f8 01       	movw	r30, r16
    173a:	86 a9       	ldd	r24, Z+54	; 0x36
    173c:	88 23       	and	r24, r24
    173e:	09 f0       	breq	.+2      	; 0x1742 <MS_Device_USBTask+0xda>
    1740:	75 c0       	rjmp	.+234    	; 0x182c <MS_Device_USBTask+0x1c4>

		return false;
	}

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    1742:	f8 01       	movw	r30, r16
    1744:	60 8d       	ldd	r22, Z+24	; 0x18
    1746:	c7 01       	movw	r24, r14
    1748:	70 e0       	ldi	r23, 0x00	; 0
    174a:	a6 01       	movw	r20, r12
    174c:	45 de       	rcall	.-886    	; 0x13d8 <Endpoint_Read_Stream_LE>
    174e:	85 30       	cpi	r24, 0x05	; 5
    1750:	99 f3       	breq	.-26     	; 0x1738 <MS_Device_USBTask+0xd0>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1752:	80 91 e8 00 	lds	r24, 0x00E8
    1756:	8b 77       	andi	r24, 0x7B	; 123
    1758:	80 93 e8 00 	sts	0x00E8, r24

	if (Endpoint_IsReadWriteAllowed())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    175c:	f8 01       	movw	r30, r16
    175e:	86 89       	ldd	r24, Z+22	; 0x16
    1760:	87 ff       	sbrs	r24, 7
    1762:	03 c0       	rjmp	.+6      	; 0x176a <MS_Device_USBTask+0x102>
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1764:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1766:	80 93 e9 00 	sts	0x00E9, r24

			MSInterfaceInfo->State.CommandStatus.Status = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo) ?
    176a:	c8 01       	movw	r24, r16
    176c:	0e 94 b5 00 	call	0x16a	; 0x16a <CALLBACK_MS_Device_SCSICommandReceived>
    1770:	91 e0       	ldi	r25, 0x01	; 1
    1772:	98 27       	eor	r25, r24
    1774:	f8 01       	movw	r30, r16
    1776:	95 ab       	std	Z+53, r25	; 0x35
			                                               MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
			MSInterfaceInfo->State.CommandStatus.Signature           = MS_CSW_SIGNATURE;
    1778:	25 e5       	ldi	r18, 0x55	; 85
    177a:	33 e5       	ldi	r19, 0x53	; 83
    177c:	42 e4       	ldi	r20, 0x42	; 66
    177e:	53 e5       	ldi	r21, 0x53	; 83
    1780:	21 a7       	std	Z+41, r18	; 0x29
    1782:	32 a7       	std	Z+42, r19	; 0x2a
    1784:	43 a7       	std	Z+43, r20	; 0x2b
    1786:	54 a7       	std	Z+44, r21	; 0x2c
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    1788:	26 85       	ldd	r18, Z+14	; 0x0e
    178a:	37 85       	ldd	r19, Z+15	; 0x0f
    178c:	40 89       	ldd	r20, Z+16	; 0x10
    178e:	51 89       	ldd	r21, Z+17	; 0x11
    1790:	25 a7       	std	Z+45, r18	; 0x2d
    1792:	36 a7       	std	Z+46, r19	; 0x2e
    1794:	47 a7       	std	Z+47, r20	; 0x2f
    1796:	50 ab       	std	Z+48, r21	; 0x30
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    1798:	22 89       	ldd	r18, Z+18	; 0x12
    179a:	33 89       	ldd	r19, Z+19	; 0x13
    179c:	44 89       	ldd	r20, Z+20	; 0x14
    179e:	55 89       	ldd	r21, Z+21	; 0x15
    17a0:	21 ab       	std	Z+49, r18	; 0x31
    17a2:	32 ab       	std	Z+50, r19	; 0x32
    17a4:	43 ab       	std	Z+51, r20	; 0x33
    17a6:	54 ab       	std	Z+52, r21	; 0x34

			if ((MSInterfaceInfo->State.CommandStatus.Status == MS_SCSI_COMMAND_Fail) &&
    17a8:	91 30       	cpi	r25, 0x01	; 1
    17aa:	51 f4       	brne	.+20     	; 0x17c0 <MS_Device_USBTask+0x158>
    17ac:	21 15       	cp	r18, r1
    17ae:	31 05       	cpc	r19, r1
    17b0:	41 05       	cpc	r20, r1
    17b2:	51 05       	cpc	r21, r1
    17b4:	29 f0       	breq	.+10     	; 0x17c0 <MS_Device_USBTask+0x158>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    17b6:	80 91 eb 00 	lds	r24, 0x00EB
    17ba:	80 62       	ori	r24, 0x20	; 32
    17bc:	80 93 eb 00 	sts	0x00EB, r24
	return true;
}

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    17c0:	f8 01       	movw	r30, r16
    17c2:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    17c4:	80 93 e9 00 	sts	0x00E9, r24
    17c8:	04 c0       	rjmp	.+8      	; 0x17d2 <MS_Device_USBTask+0x16a>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    17ca:	f8 01       	movw	r30, r16
    17cc:	86 a9       	ldd	r24, Z+54	; 0x36
    17ce:	88 23       	and	r24, r24
    17d0:	69 f5       	brne	.+90     	; 0x182c <MS_Device_USBTask+0x1c4>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    17d2:	80 91 eb 00 	lds	r24, 0x00EB

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);

	while (Endpoint_IsStalled())
    17d6:	85 fd       	sbrc	r24, 5
    17d8:	f8 cf       	rjmp	.-16     	; 0x17ca <MS_Device_USBTask+0x162>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    17da:	f8 01       	movw	r30, r16
    17dc:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    17de:	80 93 e9 00 	sts	0x00E9, r24
    17e2:	04 c0       	rjmp	.+8      	; 0x17ec <MS_Device_USBTask+0x184>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    17e4:	f8 01       	movw	r30, r16
    17e6:	86 a9       	ldd	r24, Z+54	; 0x36
    17e8:	88 23       	and	r24, r24
    17ea:	01 f5       	brne	.+64     	; 0x182c <MS_Device_USBTask+0x1c4>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    17ec:	80 91 eb 00 	lds	r24, 0x00EB
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);

	while (Endpoint_IsStalled())
    17f0:	85 fd       	sbrc	r24, 5
    17f2:	f8 cf       	rjmp	.-16     	; 0x17e4 <MS_Device_USBTask+0x17c>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
    17f4:	1a 82       	std	Y+2, r1	; 0x02
    17f6:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    17f8:	89 e2       	ldi	r24, 0x29	; 41
    17fa:	e8 2e       	mov	r14, r24
    17fc:	f1 2c       	mov	r15, r1
    17fe:	e0 0e       	add	r14, r16
    1800:	f1 1e       	adc	r15, r17
    1802:	6e 01       	movw	r12, r28
    1804:	08 94       	sec
    1806:	c1 1c       	adc	r12, r1
    1808:	d1 1c       	adc	r13, r1
    180a:	04 c0       	rjmp	.+8      	; 0x1814 <MS_Device_USBTask+0x1ac>
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    180c:	f8 01       	movw	r30, r16
    180e:	86 a9       	ldd	r24, Z+54	; 0x36
    1810:	88 23       	and	r24, r24
    1812:	61 f4       	brne	.+24     	; 0x182c <MS_Device_USBTask+0x1c4>
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    1814:	c7 01       	movw	r24, r14
    1816:	6d e0       	ldi	r22, 0x0D	; 13
    1818:	70 e0       	ldi	r23, 0x00	; 0
    181a:	a6 01       	movw	r20, r12
    181c:	7f de       	rcall	.-770    	; 0x151c <Endpoint_Write_Stream_LE>
    181e:	85 30       	cpi	r24, 0x05	; 5
    1820:	a9 f3       	breq	.-22     	; 0x180c <MS_Device_USBTask+0x1a4>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1822:	80 91 e8 00 	lds	r24, 0x00E8
    1826:	8e 77       	andi	r24, 0x7E	; 126
    1828:	80 93 e8 00 	sts	0x00E8, r24

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    182c:	f8 01       	movw	r30, r16
    182e:	86 a9       	ldd	r24, Z+54	; 0x36
    1830:	88 23       	and	r24, r24
    1832:	91 f1       	breq	.+100    	; 0x1898 <MS_Device_USBTask+0x230>
	{
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    1834:	45 81       	ldd	r20, Z+5	; 0x05
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    1836:	21 e0       	ldi	r18, 0x01	; 1
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	c9 01       	movw	r24, r18
    183c:	04 2e       	mov	r0, r20
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <MS_Device_USBTask+0x1dc>
    1840:	88 0f       	add	r24, r24
    1842:	99 1f       	adc	r25, r25
    1844:	0a 94       	dec	r0
    1846:	e2 f7       	brpl	.-8      	; 0x1840 <MS_Device_USBTask+0x1d8>
    1848:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    184c:	10 92 ea 00 	sts	0x00EA, r1
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1850:	91 81       	ldd	r25, Z+1	; 0x01
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    1852:	09 2e       	mov	r0, r25
    1854:	02 c0       	rjmp	.+4      	; 0x185a <MS_Device_USBTask+0x1f2>
    1856:	22 0f       	add	r18, r18
    1858:	33 1f       	adc	r19, r19
    185a:	0a 94       	dec	r0
    185c:	e2 f7       	brpl	.-8      	; 0x1856 <MS_Device_USBTask+0x1ee>
    185e:	20 93 ea 00 	sts	0x00EA, r18
				UERST = 0;
    1862:	10 92 ea 00 	sts	0x00EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1866:	40 93 e9 00 	sts	0x00E9, r20
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    186a:	80 91 eb 00 	lds	r24, 0x00EB
    186e:	80 61       	ori	r24, 0x10	; 16
    1870:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1874:	80 91 eb 00 	lds	r24, 0x00EB
    1878:	88 60       	ori	r24, 0x08	; 8
    187a:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    187e:	90 93 e9 00 	sts	0x00E9, r25
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1882:	80 91 eb 00 	lds	r24, 0x00EB
    1886:	80 61       	ori	r24, 0x10	; 16
    1888:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    188c:	80 91 eb 00 	lds	r24, 0x00EB
    1890:	88 60       	ori	r24, 0x08	; 8
    1892:	80 93 eb 00 	sts	0x00EB, r24
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    1896:	16 aa       	std	Z+54, r1	; 0x36
	}
}
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	cf 91       	pop	r28
    189e:	df 91       	pop	r29
    18a0:	1f 91       	pop	r17
    18a2:	0f 91       	pop	r16
    18a4:	ff 90       	pop	r15
    18a6:	ef 90       	pop	r14
    18a8:	df 90       	pop	r13
    18aa:	cf 90       	pop	r12
    18ac:	08 95       	ret

000018ae <MS_Device_ConfigureEndpoints>:
			break;
	}
}

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    18ae:	1f 93       	push	r17
    18b0:	cf 93       	push	r28
    18b2:	df 93       	push	r29
    18b4:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    18b6:	0a 96       	adiw	r24, 0x0a	; 10
    18b8:	fc 01       	movw	r30, r24
    18ba:	8d e2       	ldi	r24, 0x2D	; 45
    18bc:	df 01       	movw	r26, r30
    18be:	1d 92       	st	X+, r1
    18c0:	8a 95       	dec	r24
    18c2:	e9 f7       	brne	.-6      	; 0x18be <MS_Device_ConfigureEndpoints+0x10>
    18c4:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == MSInterfaceInfo->Config.DataINEndpointNumber)
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
    18c8:	18 17       	cp	r17, r24
    18ca:	29 f4       	brne	.+10     	; 0x18d6 <MS_Device_ConfigureEndpoints+0x28>
		{
			Size         = MSInterfaceInfo->Config.DataINEndpointSize;
    18cc:	ea 81       	ldd	r30, Y+2	; 0x02
    18ce:	fb 81       	ldd	r31, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataINEndpointDoubleBank;
    18d0:	8c 81       	ldd	r24, Y+4	; 0x04
    18d2:	61 e0       	ldi	r22, 0x01	; 1
    18d4:	07 c0       	rjmp	.+14     	; 0x18e4 <MS_Device_ConfigureEndpoints+0x36>
		}
		else if (EndpointNum == MSInterfaceInfo->Config.DataOUTEndpointNumber)
    18d6:	8d 81       	ldd	r24, Y+5	; 0x05
    18d8:	18 17       	cp	r17, r24
    18da:	e1 f4       	brne	.+56     	; 0x1914 <MS_Device_ConfigureEndpoints+0x66>
		{
			Size         = MSInterfaceInfo->Config.DataOUTEndpointSize;
    18dc:	ee 81       	ldd	r30, Y+6	; 0x06
    18de:	ff 81       	ldd	r31, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataOUTEndpointDoubleBank;
    18e0:	88 85       	ldd	r24, Y+8	; 0x08
    18e2:	60 e0       	ldi	r22, 0x00	; 0
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
    18e4:	88 23       	and	r24, r24
    18e6:	11 f4       	brne	.+4      	; 0x18ec <MS_Device_ConfigureEndpoints+0x3e>
    18e8:	40 e0       	ldi	r20, 0x00	; 0
    18ea:	01 c0       	rjmp	.+2      	; 0x18ee <MS_Device_ConfigureEndpoints+0x40>
    18ec:	44 e0       	ldi	r20, 0x04	; 4
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	88 e0       	ldi	r24, 0x08	; 8
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	03 c0       	rjmp	.+6      	; 0x18fc <MS_Device_ConfigureEndpoints+0x4e>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    18f6:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    18f8:	88 0f       	add	r24, r24
    18fa:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    18fc:	8e 17       	cp	r24, r30
    18fe:	9f 07       	cpc	r25, r31
    1900:	d0 f3       	brcs	.-12     	; 0x18f6 <MS_Device_ConfigureEndpoints+0x48>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
    1902:	60 68       	ori	r22, 0x80	; 128
    1904:	42 60       	ori	r20, 0x02	; 2
    1906:	22 95       	swap	r18
    1908:	20 7f       	andi	r18, 0xF0	; 240
    190a:	42 2b       	or	r20, r18
    190c:	81 2f       	mov	r24, r17
    190e:	2c d9       	rcall	.-3496   	; 0xb68 <Endpoint_ConfigureEndpoint_Prv>
    1910:	88 23       	and	r24, r24
    1912:	21 f0       	breq	.+8      	; 0x191c <MS_Device_ConfigureEndpoints+0x6e>

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
    1914:	1f 5f       	subi	r17, 0xFF	; 255
    1916:	17 30       	cpi	r17, 0x07	; 7
    1918:	b1 f6       	brne	.-84     	; 0x18c6 <MS_Device_ConfigureEndpoints+0x18>
    191a:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
    191c:	df 91       	pop	r29
    191e:	cf 91       	pop	r28
    1920:	1f 91       	pop	r17
    1922:	08 95       	ret

00001924 <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorage.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1924:	cf 93       	push	r28
    1926:	df 93       	push	r29
    1928:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    192a:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    192e:	83 ff       	sbrs	r24, 3
    1930:	2f c0       	rjmp	.+94     	; 0x1990 <MS_Device_ProcessControlRequest+0x6c>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    1932:	88 81       	ld	r24, Y
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	20 91 77 01 	lds	r18, 0x0177
    193a:	30 91 78 01 	lds	r19, 0x0178
    193e:	28 17       	cp	r18, r24
    1940:	39 07       	cpc	r19, r25
    1942:	31 f5       	brne	.+76     	; 0x1990 <MS_Device_ProcessControlRequest+0x6c>
	  return;

	switch (USB_ControlRequest.bRequest)
    1944:	80 91 74 01 	lds	r24, 0x0174
    1948:	8e 3f       	cpi	r24, 0xFE	; 254
    194a:	79 f0       	breq	.+30     	; 0x196a <MS_Device_ProcessControlRequest+0x46>
    194c:	8f 3f       	cpi	r24, 0xFF	; 255
    194e:	01 f5       	brne	.+64     	; 0x1990 <MS_Device_ProcessControlRequest+0x6c>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1950:	80 91 73 01 	lds	r24, 0x0173
    1954:	81 32       	cpi	r24, 0x21	; 33
    1956:	e1 f4       	brne	.+56     	; 0x1990 <MS_Device_ProcessControlRequest+0x6c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1958:	80 91 e8 00 	lds	r24, 0x00E8
    195c:	87 7f       	andi	r24, 0xF7	; 247
    195e:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1962:	37 d9       	rcall	.-3474   	; 0xbd2 <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	8e ab       	std	Y+54, r24	; 0x36
    1968:	13 c0       	rjmp	.+38     	; 0x1990 <MS_Device_ProcessControlRequest+0x6c>
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    196a:	80 91 73 01 	lds	r24, 0x0173
    196e:	81 3a       	cpi	r24, 0xA1	; 161
    1970:	79 f4       	brne	.+30     	; 0x1990 <MS_Device_ProcessControlRequest+0x6c>
    1972:	80 91 e8 00 	lds	r24, 0x00E8
    1976:	87 7f       	andi	r24, 0xF7	; 247
    1978:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    197c:	89 85       	ldd	r24, Y+9	; 0x09
    197e:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1980:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1984:	80 91 e8 00 	lds	r24, 0x00E8
    1988:	8e 77       	andi	r24, 0x7E	; 126
    198a:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    198e:	21 d9       	rcall	.-3518   	; 0xbd2 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    1990:	df 91       	pop	r29
    1992:	cf 91       	pop	r28
    1994:	08 95       	ret

00001996 <_exit>:
    1996:	f8 94       	cli

00001998 <__stop_program>:
    1998:	ff cf       	rjmp	.-2      	; 0x1998 <__stop_program>
