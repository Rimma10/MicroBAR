
AudioOutput.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b68  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000e  00800100  00800100  00000bdc  2**0
                  ALLOC
  2 .debug_aranges 000002c0  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000007d7  00000000  00000000  00000e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00004b18  00000000  00000000  00001673  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000011dc  00000000  00000000  0000618b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00003dc7  00000000  00000000  00007367  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000400  00000000  00000000  0000b130  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000220b  00000000  00000000  0000b530  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00002400  00000000  00000000  0000d73b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000360  00000000  00000000  0000fb3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
   0:	aa c0       	rjmp	.+340    	; 0x156 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   2:	00 00       	nop
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
   4:	c5 c0       	rjmp	.+394    	; 0x190 <__bad_interrupt>
   6:	00 00       	nop
   8:	c3 c0       	rjmp	.+390    	; 0x190 <__bad_interrupt>
   a:	00 00       	nop
   c:	c1 c0       	rjmp	.+386    	; 0x190 <__bad_interrupt>
   e:	00 00       	nop
  10:	bf c0       	rjmp	.+382    	; 0x190 <__bad_interrupt>
  12:	00 00       	nop
  14:	bd c0       	rjmp	.+378    	; 0x190 <__bad_interrupt>
  16:	00 00       	nop
  18:	bb c0       	rjmp	.+374    	; 0x190 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b9 c0       	rjmp	.+370    	; 0x190 <__bad_interrupt>
  1e:	00 00       	nop
  20:	b7 c0       	rjmp	.+366    	; 0x190 <__bad_interrupt>
  22:	00 00       	nop
  24:	b5 c0       	rjmp	.+362    	; 0x190 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c2       	rjmp	.+1272   	; 0x522 <__vector_10>
  2a:	00 00       	nop
  2c:	b1 c0       	rjmp	.+354    	; 0x190 <__bad_interrupt>
  2e:	00 00       	nop
  30:	af c0       	rjmp	.+350    	; 0x190 <__bad_interrupt>
  32:	00 00       	nop
  34:	ad c0       	rjmp	.+346    	; 0x190 <__bad_interrupt>
  36:	00 00       	nop
  38:	ab c0       	rjmp	.+342    	; 0x190 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	a9 c0       	rjmp	.+338    	; 0x190 <__bad_interrupt>
  3e:	00 00       	nop
  40:	a7 c0       	rjmp	.+334    	; 0x190 <__bad_interrupt>
  42:	00 00       	nop
  44:	a5 c0       	rjmp	.+330    	; 0x190 <__bad_interrupt>
  46:	00 00       	nop
  48:	a3 c0       	rjmp	.+326    	; 0x190 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	a1 c0       	rjmp	.+322    	; 0x190 <__bad_interrupt>
  4e:	00 00       	nop
  50:	9f c0       	rjmp	.+318    	; 0x190 <__bad_interrupt>
  52:	00 00       	nop
  54:	c0 c0       	rjmp	.+384    	; 0x1d6 <__vector_21>
  56:	00 00       	nop
  58:	9b c0       	rjmp	.+310    	; 0x190 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	99 c0       	rjmp	.+306    	; 0x190 <__bad_interrupt>
  5e:	00 00       	nop
  60:	97 c0       	rjmp	.+302    	; 0x190 <__bad_interrupt>
  62:	00 00       	nop
  64:	95 c0       	rjmp	.+298    	; 0x190 <__bad_interrupt>
  66:	00 00       	nop
  68:	93 c0       	rjmp	.+294    	; 0x190 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	91 c0       	rjmp	.+290    	; 0x190 <__bad_interrupt>
  6e:	00 00       	nop
  70:	8f c0       	rjmp	.+286    	; 0x190 <__bad_interrupt>
  72:	00 00       	nop
  74:	8d c0       	rjmp	.+282    	; 0x190 <__bad_interrupt>
  76:	00 00       	nop
  78:	8b c0       	rjmp	.+278    	; 0x190 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	89 c0       	rjmp	.+274    	; 0x190 <__bad_interrupt>
  7e:	00 00       	nop
  80:	87 c0       	rjmp	.+270    	; 0x190 <__bad_interrupt>
  82:	00 00       	nop
  84:	85 c0       	rjmp	.+266    	; 0x190 <__bad_interrupt>
  86:	00 00       	nop
  88:	83 c0       	rjmp	.+262    	; 0x190 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	81 c0       	rjmp	.+258    	; 0x190 <__bad_interrupt>
  8e:	00 00       	nop
  90:	7f c0       	rjmp	.+254    	; 0x190 <__bad_interrupt>
  92:	00 00       	nop
  94:	7d c0       	rjmp	.+250    	; 0x190 <__bad_interrupt>
  96:	00 00       	nop

00000098 <DeviceDescriptor>:
  98:	12 01 10 01 00 00 00 08 eb 03 46 20 01 00 01 02     ..........F ....
  a8:	00 01                                               ..

000000aa <ConfigurationDescriptor>:
  aa:	09 02 64 00 02 01 00 c0 32 09 04 00 00 00 01 01     ..d.....2.......
  ba:	00 00 09 24 01 00 01 1e 00 01 01 0c 24 02 01 01     ...$........$...
  ca:	01 00 02 03 00 00 00 09 24 03 02 01 03 00 01 00     ........$.......
  da:	09 04 01 00 00 01 02 00 00 09 04 01 01 01 01 02     ................
  ea:	00 00 07 24 01 01 01 01 00 0b 24 02 01 02 02 10     ...$......$.....
  fa:	01 80 bb 00 09 05 01 0d 00 01 01 00 00 07 25 01     ..............%.
 10a:	00 00 00 00                                         ....

0000010e <LanguageString>:
 10e:	04 03 09 04                                         ....

00000112 <ManufacturerString>:
 112:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
 122:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

0000012c <ProductString>:
 12c:	28 03 4c 00 55 00 46 00 41 00 20 00 41 00 75 00     (.L.U.F.A. .A.u.
 13c:	64 00 69 00 6f 00 20 00 4f 00 75 00 74 00 20 00     d.i.o. .O.u.t. .
 14c:	44 00 65 00 6d 00 6f 00 00 00                       D.e.m.o...

00000156 <__ctors_end>:
 156:	11 24       	eor	r1, r1
 158:	1f be       	out	0x3f, r1	; 63
 15a:	cf ef       	ldi	r28, 0xFF	; 255
 15c:	d0 e2       	ldi	r29, 0x20	; 32
 15e:	de bf       	out	0x3e, r29	; 62
 160:	cd bf       	out	0x3d, r28	; 61

00000162 <__do_copy_data>:
 162:	11 e0       	ldi	r17, 0x01	; 1
 164:	a0 e0       	ldi	r26, 0x00	; 0
 166:	b1 e0       	ldi	r27, 0x01	; 1
 168:	e8 e6       	ldi	r30, 0x68	; 104
 16a:	fb e0       	ldi	r31, 0x0B	; 11
 16c:	00 e0       	ldi	r16, 0x00	; 0
 16e:	0b bf       	out	0x3b, r16	; 59
 170:	02 c0       	rjmp	.+4      	; 0x176 <__do_copy_data+0x14>
 172:	07 90       	elpm	r0, Z+
 174:	0d 92       	st	X+, r0
 176:	a0 30       	cpi	r26, 0x00	; 0
 178:	b1 07       	cpc	r27, r17
 17a:	d9 f7       	brne	.-10     	; 0x172 <__do_copy_data+0x10>

0000017c <__do_clear_bss>:
 17c:	11 e0       	ldi	r17, 0x01	; 1
 17e:	a0 e0       	ldi	r26, 0x00	; 0
 180:	b1 e0       	ldi	r27, 0x01	; 1
 182:	01 c0       	rjmp	.+2      	; 0x186 <.do_clear_bss_start>

00000184 <.do_clear_bss_loop>:
 184:	1d 92       	st	X+, r1

00000186 <.do_clear_bss_start>:
 186:	ae 30       	cpi	r26, 0x0E	; 14
 188:	b1 07       	cpc	r27, r17
 18a:	e1 f7       	brne	.-8      	; 0x184 <.do_clear_bss_loop>
 18c:	df d0       	rcall	.+446    	; 0x34c <main>
 18e:	ea c4       	rjmp	.+2516   	; 0xb64 <_exit>

00000190 <__bad_interrupt>:
 190:	37 cf       	rjmp	.-402    	; 0x0 <__vectors>

00000192 <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 192:	8b b1       	in	r24, 0x0b	; 11
 194:	8f 70       	andi	r24, 0x0F	; 15
 196:	80 6a       	ori	r24, 0xA0	; 160
 198:	8b b9       	out	0x0b, r24	; 11
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	/* Sample reload timer initialization */
	TIMSK0 = (1 << OCIE0A);
 19a:	92 e0       	ldi	r25, 0x02	; 2
 19c:	90 93 6e 00 	sts	0x006E, r25
	OCR0A  = ((F_CPU / 8 / AUDIO_SAMPLE_FREQUENCY) - 1);
 1a0:	83 e1       	ldi	r24, 0x13	; 19
 1a2:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1 << WGM01);  // CTC mode
 1a4:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS01);   // Fcpu/8 speed
 1a6:	95 bd       	out	0x25, r25	; 37
	#if defined(AUDIO_OUT_MONO)
	/* Set speaker as output */
	DDRC  |= (1 << 6);
	#elif defined(AUDIO_OUT_STEREO)
	/* Set speakers as outputs */
	DDRC  |= ((1 << 6) | (1 << 5));
 1a8:	87 b1       	in	r24, 0x07	; 7
 1aa:	80 66       	ori	r24, 0x60	; 96
 1ac:	87 b9       	out	0x07, r24	; 7
	DDRC  |= 0xFF;
	#endif

	#if (defined(AUDIO_OUT_MONO) || defined(AUDIO_OUT_STEREO))
	/* PWM speaker timer initialization */
	TCCR3A = ((1 << WGM30) | (1 << COM3A1) | (1 << COM3A0)
 1ae:	81 ef       	ldi	r24, 0xF1	; 241
 1b0:	80 93 90 00 	sts	0x0090, r24
	                       | (1 << COM3B1) | (1 << COM3B0)); // Set on match, clear on TOP
	TCCR3B = ((1 << WGM32) | (1 << CS30));  // Fast 8-Bit PWM, F_CPU speed
 1b4:	89 e0       	ldi	r24, 0x09	; 9
 1b6:	80 93 91 00 	sts	0x0091, r24
	#endif
}
 1ba:	08 95       	ret

000001bc <EVENT_USB_Device_Disconnect>:
 *  the status LEDs, disables the sample update and PWM output timers and stops the USB and Audio management tasks.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Stop the timers */
	TCCR0B = 0;
 1bc:	15 bc       	out	0x25, r1	; 37
	#if (defined(AUDIO_OUT_MONO) || defined(AUDIO_OUT_STEREO))
	TCCR3B = 0;
 1be:	10 92 91 00 	sts	0x0091, r1
	#if defined(AUDIO_OUT_MONO)
	/* Set speaker as input to reduce current draw */
	DDRC  &= ~(1 << 6);
	#elif defined(AUDIO_OUT_STEREO)
	/* Set speakers as inputs to reduce current draw */
	DDRC  &= ~((1 << 6) | (1 << 5));
 1c2:	87 b1       	in	r24, 0x07	; 7
 1c4:	8f 79       	andi	r24, 0x9F	; 159
 1c6:	87 b9       	out	0x07, r24	; 7
	/* Set PORTC low */
	PORTC = 0x00;
	#endif

	/* Indicate streaming audio interface not selected */
	StreamingAudioInterfaceSelected = false;
 1c8:	10 92 00 01 	sts	0x0100, r1
 1cc:	8b b1       	in	r24, 0x0b	; 11
 1ce:	8f 70       	andi	r24, 0x0F	; 15
 1d0:	80 61       	ori	r24, 0x10	; 16
 1d2:	8b b9       	out	0x0b, r24	; 11

	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
 1d4:	08 95       	ret

000001d6 <__vector_21>:
	}
}

/** ISR to handle the reloading of the PWM timer with the next sample. */
ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
 1d6:	1f 92       	push	r1
 1d8:	0f 92       	push	r0
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	0f 92       	push	r0
 1de:	11 24       	eor	r1, r1
 1e0:	2f 93       	push	r18
 1e2:	3f 93       	push	r19
 1e4:	4f 93       	push	r20
 1e6:	5f 93       	push	r21
 1e8:	6f 93       	push	r22
 1ea:	7f 93       	push	r23
 1ec:	8f 93       	push	r24
 1ee:	9f 93       	push	r25
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 1f0:	70 91 e9 00 	lds	r23, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 1fa:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the audio stream endpoint */
	Endpoint_SelectEndpoint(AUDIO_STREAM_EPNUM);

	/* Check if the current endpoint can be read from (contains a packet) and the host is sending data */
	if (Endpoint_IsOUTReceived() && StreamingAudioInterfaceSelected)
 1fe:	82 ff       	sbrs	r24, 2
 200:	50 c0       	rjmp	.+160    	; 0x2a2 <__vector_21+0xcc>
 202:	80 91 00 01 	lds	r24, 0x0100
 206:	88 23       	and	r24, r24
 208:	09 f4       	brne	.+2      	; 0x20c <__vector_21+0x36>
 20a:	4b c0       	rjmp	.+150    	; 0x2a2 <__vector_21+0xcc>
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 20c:	80 91 f1 00 	lds	r24, 0x00F1
 210:	28 2f       	mov	r18, r24
				Data.Bytes[1] = UEDATX;
 212:	80 91 f1 00 	lds	r24, 0x00F1
 216:	38 2f       	mov	r19, r24
	{
		/* Retrieve the signed 16-bit left and right audio samples, convert to 8-bit */
		int8_t LeftSample_8Bit   = ((int16_t)Endpoint_Read_16_LE() >> 8);
 218:	23 2f       	mov	r18, r19
 21a:	33 0f       	add	r19, r19
 21c:	33 0b       	sbc	r19, r19
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 21e:	40 91 f1 00 	lds	r20, 0x00F1
 222:	84 2f       	mov	r24, r20
				Data.Bytes[1] = UEDATX;
 224:	40 91 f1 00 	lds	r20, 0x00F1
 228:	94 2f       	mov	r25, r20
		int8_t RightSample_8Bit  = ((int16_t)Endpoint_Read_16_LE() >> 8);

		/* Mix the two channels together to produce a mono, 8-bit sample */
		int8_t MixedSample_8Bit  = (((int16_t)LeftSample_8Bit + (int16_t)RightSample_8Bit) >> 1);
 22a:	33 27       	eor	r19, r19
 22c:	27 fd       	sbrc	r18, 7
 22e:	30 95       	com	r19
 230:	89 2f       	mov	r24, r25
 232:	99 0f       	add	r25, r25
 234:	99 0b       	sbc	r25, r25
 236:	48 2f       	mov	r20, r24
 238:	55 27       	eor	r21, r21
 23a:	47 fd       	sbrc	r20, 7
 23c:	50 95       	com	r21
 23e:	ca 01       	movw	r24, r20
 240:	82 0f       	add	r24, r18
 242:	93 1f       	adc	r25, r19
 244:	95 95       	asr	r25
 246:	87 95       	ror	r24
 248:	68 2f       	mov	r22, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 24a:	80 91 e8 00 	lds	r24, 0x00E8

		/* Check to see if the bank is now empty */
		if (!(Endpoint_IsReadWriteAllowed()))
 24e:	85 fd       	sbrc	r24, 5
 250:	05 c0       	rjmp	.+10     	; 0x25c <__vector_21+0x86>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 252:	80 91 e8 00 	lds	r24, 0x00E8
 256:	8b 77       	andi	r24, 0x7B	; 123
 258:	80 93 e8 00 	sts	0x00E8, r24
		#if defined(AUDIO_OUT_MONO)
		/* Load the sample into the PWM timer channel */
		OCR3A = (MixedSample_8Bit ^ (1 << 7));
		#elif defined(AUDIO_OUT_STEREO)
		/* Load the dual 8-bit samples into the PWM timer channels */
		OCR3A = (LeftSample_8Bit  ^ (1 << 7));
 25c:	80 e8       	ldi	r24, 0x80	; 128
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	28 27       	eor	r18, r24
 262:	39 27       	eor	r19, r25
 264:	30 93 99 00 	sts	0x0099, r19
 268:	20 93 98 00 	sts	0x0098, r18
		OCR3B = (RightSample_8Bit ^ (1 << 7));
 26c:	48 27       	eor	r20, r24
 26e:	59 27       	eor	r21, r25
 270:	50 93 9b 00 	sts	0x009B, r21
 274:	40 93 9a 00 	sts	0x009A, r20
		#endif

		uint8_t LEDMask = LEDS_NO_LEDS;

		/* Turn on LEDs as the sample amplitude increases */
		if (MixedSample_8Bit > 16)
 278:	61 31       	cpi	r22, 0x11	; 17
 27a:	14 f0       	brlt	.+4      	; 0x280 <__vector_21+0xaa>
 27c:	90 ef       	ldi	r25, 0xF0	; 240
 27e:	0d c0       	rjmp	.+26     	; 0x29a <__vector_21+0xc4>
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3 | LEDS_LED4);
		else if (MixedSample_8Bit > 8)
 280:	69 30       	cpi	r22, 0x09	; 9
 282:	14 f0       	brlt	.+4      	; 0x288 <__vector_21+0xb2>
 284:	90 eb       	ldi	r25, 0xB0	; 176
 286:	09 c0       	rjmp	.+18     	; 0x29a <__vector_21+0xc4>
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3);
		else if (MixedSample_8Bit > 4)
 288:	65 30       	cpi	r22, 0x05	; 5
 28a:	14 f0       	brlt	.+4      	; 0x290 <__vector_21+0xba>
 28c:	90 e3       	ldi	r25, 0x30	; 48
 28e:	05 c0       	rjmp	.+10     	; 0x29a <__vector_21+0xc4>
		  LEDMask = (LEDS_LED1 | LEDS_LED2);
		else if (MixedSample_8Bit > 2)
 290:	63 30       	cpi	r22, 0x03	; 3
 292:	14 f0       	brlt	.+4      	; 0x298 <__vector_21+0xc2>
 294:	90 e1       	ldi	r25, 0x10	; 16
 296:	01 c0       	rjmp	.+2      	; 0x29a <__vector_21+0xc4>
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	8b b1       	in	r24, 0x0b	; 11
 29c:	8f 70       	andi	r24, 0x0F	; 15
 29e:	98 2b       	or	r25, r24
 2a0:	9b b9       	out	0x0b, r25	; 11
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 2a2:	77 70       	andi	r23, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 2a4:	70 93 e9 00 	sts	0x00E9, r23

		LEDs_SetAllLEDs(LEDMask);
	}
	
	Endpoint_SelectEndpoint(PrevEndpoint);
}
 2a8:	9f 91       	pop	r25
 2aa:	8f 91       	pop	r24
 2ac:	7f 91       	pop	r23
 2ae:	6f 91       	pop	r22
 2b0:	5f 91       	pop	r21
 2b2:	4f 91       	pop	r20
 2b4:	3f 91       	pop	r19
 2b6:	2f 91       	pop	r18
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
 2c2:	1f 93       	push	r17
	/* Process General and Audio specific control requests */
	switch (USB_ControlRequest.bRequest)
 2c4:	80 91 07 01 	lds	r24, 0x0107
 2c8:	8b 30       	cpi	r24, 0x0B	; 11
 2ca:	a1 f4       	brne	.+40     	; 0x2f4 <EVENT_USB_Device_ControlRequest+0x32>
	{
		case REQ_SetInterface:
			/* Set Interface is not handled by the library, as its function is application-specific */
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_INTERFACE))
 2cc:	10 91 06 01 	lds	r17, 0x0106
 2d0:	11 30       	cpi	r17, 0x01	; 1
 2d2:	81 f4       	brne	.+32     	; 0x2f4 <EVENT_USB_Device_ControlRequest+0x32>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 2d4:	80 91 e8 00 	lds	r24, 0x00E8
 2d8:	87 7f       	andi	r24, 0xF7	; 247
 2da:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 2de:	a1 d0       	rcall	.+322    	; 0x422 <Endpoint_ClearStatusStage>

				/* Check if the host is enabling the audio interface (setting AlternateSetting to 1) */
				StreamingAudioInterfaceSelected = ((USB_ControlRequest.wValue) != 0);
 2e0:	10 92 00 01 	sts	0x0100, r1
 2e4:	80 91 08 01 	lds	r24, 0x0108
 2e8:	90 91 09 01 	lds	r25, 0x0109
 2ec:	89 2b       	or	r24, r25
 2ee:	11 f0       	breq	.+4      	; 0x2f4 <EVENT_USB_Device_ControlRequest+0x32>
 2f0:	10 93 00 01 	sts	0x0100, r17
			}

			break;
	}
}
 2f4:	1f 91       	pop	r17
 2f6:	08 95       	ret

000002f8 <EVENT_USB_Device_ConfigurationChanged>:
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	60 e4       	ldi	r22, 0x40	; 64
 2fc:	46 e5       	ldi	r20, 0x56	; 86
 2fe:	5c d0       	rcall	.+184    	; 0x3b8 <Endpoint_ConfigureEndpoint_Prv>
	/* Setup Audio Stream Endpoint */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(AUDIO_STREAM_EPNUM, EP_TYPE_ISOCHRONOUS, ENDPOINT_DIR_OUT,
	                                            AUDIO_STREAM_EPSIZE, ENDPOINT_BANK_DOUBLE);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 300:	80 fd       	sbrc	r24, 0
 302:	02 c0       	rjmp	.+4      	; 0x308 <EVENT_USB_Device_ConfigurationChanged+0x10>
 304:	90 e9       	ldi	r25, 0x90	; 144
 306:	01 c0       	rjmp	.+2      	; 0x30a <EVENT_USB_Device_ConfigurationChanged+0x12>
 308:	90 e6       	ldi	r25, 0x60	; 96
 30a:	8b b1       	in	r24, 0x0b	; 11
 30c:	8f 70       	andi	r24, 0x0F	; 15
 30e:	98 2b       	or	r25, r24
 310:	9b b9       	out	0x0b, r25	; 11
}
 312:	08 95       	ret

00000314 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 314:	84 b7       	in	r24, 0x34	; 52
 316:	87 7f       	andi	r24, 0xF7	; 247
 318:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 31a:	88 e1       	ldi	r24, 0x18	; 24
 31c:	0f b6       	in	r0, 0x3f	; 63
 31e:	f8 94       	cli
 320:	80 93 60 00 	sts	0x0060, r24
 324:	10 92 60 00 	sts	0x0060, r1
 328:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	20 e8       	ldi	r18, 0x80	; 128
 330:	0f b6       	in	r0, 0x3f	; 63
 332:	f8 94       	cli
 334:	20 93 61 00 	sts	0x0061, r18
 338:	80 93 61 00 	sts	0x0061, r24
 33c:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 33e:	8a b1       	in	r24, 0x0a	; 10
 340:	80 6f       	ori	r24, 0xF0	; 240
 342:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 344:	8b b1       	in	r24, 0x0b	; 11
 346:	8f 70       	andi	r24, 0x0F	; 15
 348:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
}
 34a:	d5 c0       	rjmp	.+426    	; 0x4f6 <USB_Init>

0000034c <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
 34c:	e3 df       	rcall	.-58     	; 0x314 <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 34e:	8b b1       	in	r24, 0x0b	; 11
 350:	8f 70       	andi	r24, 0x0F	; 15
 352:	80 61       	ori	r24, 0x10	; 16
 354:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
 356:	78 94       	sei

	for (;;)
	{
		USB_USBTask();
 358:	f2 d3       	rcall	.+2020   	; 0xb3e <USB_USBTask>
 35a:	fe cf       	rjmp	.-4      	; 0x358 <main+0xc>

0000035c <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
 35c:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 35e:	92 30       	cpi	r25, 0x02	; 2
 360:	49 f0       	breq	.+18     	; 0x374 <CALLBACK_USB_GetDescriptor+0x18>
 362:	93 30       	cpi	r25, 0x03	; 3
 364:	61 f0       	breq	.+24     	; 0x37e <CALLBACK_USB_GetDescriptor+0x22>
 366:	91 30       	cpi	r25, 0x01	; 1
 368:	f9 f4       	brne	.+62     	; 0x3a8 <CALLBACK_USB_GetDescriptor+0x4c>
 36a:	e8 e9       	ldi	r30, 0x98	; 152
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	22 e1       	ldi	r18, 0x12	; 18
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	1e c0       	rjmp	.+60     	; 0x3b0 <CALLBACK_USB_GetDescriptor+0x54>
 374:	ea ea       	ldi	r30, 0xAA	; 170
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	24 e6       	ldi	r18, 0x64	; 100
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	19 c0       	rjmp	.+50     	; 0x3b0 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 37e:	81 30       	cpi	r24, 0x01	; 1
 380:	49 f0       	breq	.+18     	; 0x394 <CALLBACK_USB_GetDescriptor+0x38>
 382:	81 30       	cpi	r24, 0x01	; 1
 384:	18 f0       	brcs	.+6      	; 0x38c <CALLBACK_USB_GetDescriptor+0x30>
 386:	82 30       	cpi	r24, 0x02	; 2
 388:	79 f4       	brne	.+30     	; 0x3a8 <CALLBACK_USB_GetDescriptor+0x4c>
 38a:	08 c0       	rjmp	.+16     	; 0x39c <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 38c:	ee e0       	ldi	r30, 0x0E	; 14
 38e:	f1 e0       	ldi	r31, 0x01	; 1
 390:	84 91       	lpm	r24, Z+
 392:	07 c0       	rjmp	.+14     	; 0x3a2 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 394:	e2 e1       	ldi	r30, 0x12	; 18
 396:	f1 e0       	ldi	r31, 0x01	; 1
 398:	84 91       	lpm	r24, Z+
 39a:	03 c0       	rjmp	.+6      	; 0x3a2 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 39c:	ec e2       	ldi	r30, 0x2C	; 44
 39e:	f1 e0       	ldi	r31, 0x01	; 1
 3a0:	84 91       	lpm	r24, Z+
 3a2:	28 2f       	mov	r18, r24
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	04 c0       	rjmp	.+8      	; 0x3b0 <CALLBACK_USB_GetDescriptor+0x54>
 3a8:	e0 e0       	ldi	r30, 0x00	; 0
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	20 e0       	ldi	r18, 0x00	; 0
 3ae:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 3b0:	ed 93       	st	X+, r30
 3b2:	fc 93       	st	X, r31
	return Size;
}
 3b4:	c9 01       	movw	r24, r18
 3b6:	08 95       	ret

000003b8 <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
 3b8:	38 2f       	mov	r19, r24
 3ba:	28 2f       	mov	r18, r24
 3bc:	2c c0       	rjmp	.+88     	; 0x416 <Endpoint_ConfigureEndpoint_Prv+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 3be:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);
		
		if (EPNum == Number)
 3c2:	23 17       	cp	r18, r19
 3c4:	21 f4       	brne	.+8      	; 0x3ce <Endpoint_ConfigureEndpoint_Prv+0x16>
 3c6:	76 2f       	mov	r23, r22
 3c8:	94 2f       	mov	r25, r20
 3ca:	50 e0       	ldi	r21, 0x00	; 0
 3cc:	06 c0       	rjmp	.+12     	; 0x3da <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 3ce:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 3d2:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
 3d6:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 3da:	91 ff       	sbrs	r25, 1
 3dc:	1b c0       	rjmp	.+54     	; 0x414 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 3de:	80 91 eb 00 	lds	r24, 0x00EB
 3e2:	8e 7f       	andi	r24, 0xFE	; 254
 3e4:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= (1 << ALLOC);
 3e8:	80 91 ed 00 	lds	r24, 0x00ED
 3ec:	82 70       	andi	r24, 0x02	; 2
 3ee:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 3f2:	80 91 eb 00 	lds	r24, 0x00EB
 3f6:	81 60       	ori	r24, 0x01	; 1
 3f8:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 3fc:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 400:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
 404:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 408:	80 91 ee 00 	lds	r24, 0x00EE
			
		if (!(Endpoint_IsConfigured()))
 40c:	87 fd       	sbrc	r24, 7
 40e:	02 c0       	rjmp	.+4      	; 0x414 <Endpoint_ConfigureEndpoint_Prv+0x5c>
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else	
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 414:	2f 5f       	subi	r18, 0xFF	; 255
 416:	27 30       	cpi	r18, 0x07	; 7
 418:	90 f2       	brcs	.-92     	; 0x3be <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 41a:	30 93 e9 00 	sts	0x00E9, r19
 41e:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 420:	08 95       	ret

00000422 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 422:	80 91 06 01 	lds	r24, 0x0106
 426:	88 23       	and	r24, r24
 428:	9c f4       	brge	.+38     	; 0x450 <Endpoint_ClearStatusStage+0x2e>
 42a:	04 c0       	rjmp	.+8      	; 0x434 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 42c:	80 91 05 01 	lds	r24, 0x0105
 430:	88 23       	and	r24, r24
 432:	b9 f0       	breq	.+46     	; 0x462 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 434:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 438:	82 ff       	sbrs	r24, 2
 43a:	f8 cf       	rjmp	.-16     	; 0x42c <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 43c:	80 91 e8 00 	lds	r24, 0x00E8
 440:	8b 77       	andi	r24, 0x7B	; 123
 442:	80 93 e8 00 	sts	0x00E8, r24
 446:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 448:	80 91 05 01 	lds	r24, 0x0105
 44c:	88 23       	and	r24, r24
 44e:	49 f0       	breq	.+18     	; 0x462 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 450:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 454:	80 ff       	sbrs	r24, 0
 456:	f8 cf       	rjmp	.-16     	; 0x448 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 458:	80 91 e8 00 	lds	r24, 0x00E8
 45c:	8e 77       	andi	r24, 0x7E	; 126
 45e:	80 93 e8 00 	sts	0x00E8, r24
 462:	08 95       	ret

00000464 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
 464:	ef 92       	push	r14
 466:	ff 92       	push	r15
 468:	0f 93       	push	r16
 46a:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 46c:	4d d0       	rcall	.+154    	; 0x508 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 46e:	54 d0       	rcall	.+168    	; 0x518 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
 470:	08 ed       	ldi	r16, 0xD8	; 216
 472:	10 e0       	ldi	r17, 0x00	; 0
 474:	f8 01       	movw	r30, r16
 476:	80 81       	ld	r24, Z

				USBCON = (Temp & ~(1 << USBE));
 478:	98 2f       	mov	r25, r24
 47a:	9f 77       	andi	r25, 0x7F	; 127
 47c:	90 83       	st	Z, r25
				USBCON = (Temp |  (1 << USBE));
 47e:	80 68       	ori	r24, 0x80	; 128
 480:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 482:	80 81       	ld	r24, Z
 484:	8f 7d       	andi	r24, 0xDF	; 223
 486:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 488:	e7 ed       	ldi	r30, 0xD7	; 215
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	80 81       	ld	r24, Z
 48e:	80 68       	ori	r24, 0x80	; 128
 490:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
 492:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
 494:	10 92 05 01 	sts	0x0105, r1
	USB_ConfigurationNumber  = 0;
 498:	10 92 03 01 	sts	0x0103, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
 49c:	10 92 02 01 	sts	0x0102, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
 4a0:	10 92 01 01 	sts	0x0101, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 4a4:	80 ee       	ldi	r24, 0xE0	; 224
 4a6:	e8 2e       	mov	r14, r24
 4a8:	f1 2c       	mov	r15, r1
 4aa:	f7 01       	movw	r30, r14
 4ac:	80 81       	ld	r24, Z
 4ae:	8b 7f       	andi	r24, 0xFB	; 251
 4b0:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 4b2:	f8 01       	movw	r30, r16
 4b4:	80 81       	ld	r24, Z
 4b6:	81 60       	ori	r24, 0x01	; 1
 4b8:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	60 e0       	ldi	r22, 0x00	; 0
 4be:	42 e0       	ldi	r20, 0x02	; 2
 4c0:	7b df       	rcall	.-266    	; 0x3b8 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 4c2:	e1 ee       	ldi	r30, 0xE1	; 225
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	80 81       	ld	r24, Z
 4c8:	8e 7f       	andi	r24, 0xFE	; 254
 4ca:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 4cc:	e2 ee       	ldi	r30, 0xE2	; 226
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	80 81       	ld	r24, Z
 4d2:	81 60       	ori	r24, 0x01	; 1
 4d4:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 4d6:	80 81       	ld	r24, Z
 4d8:	88 60       	ori	r24, 0x08	; 8
 4da:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 4dc:	f7 01       	movw	r30, r14
 4de:	80 81       	ld	r24, Z
 4e0:	8e 7f       	andi	r24, 0xFE	; 254
 4e2:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 4e4:	f8 01       	movw	r30, r16
 4e6:	80 81       	ld	r24, Z
 4e8:	80 61       	ori	r24, 0x10	; 16
 4ea:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 4ec:	1f 91       	pop	r17
 4ee:	0f 91       	pop	r16
 4f0:	ff 90       	pop	r15
 4f2:	ef 90       	pop	r14
 4f4:	08 95       	ret

000004f6 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 4f6:	e7 ed       	ldi	r30, 0xD7	; 215
 4f8:	f0 e0       	ldi	r31, 0x00	; 0
 4fa:	80 81       	ld	r24, Z
 4fc:	81 60       	ori	r24, 0x01	; 1
 4fe:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	80 93 04 01 	sts	0x0104, r24

	USB_ResetInterface();
}
 506:	ae cf       	rjmp	.-164    	; 0x464 <USB_ResetInterface>

00000508 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 508:	e8 ed       	ldi	r30, 0xD8	; 216
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	80 81       	ld	r24, Z
 50e:	8c 7f       	andi	r24, 0xFC	; 252
 510:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 512:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 516:	08 95       	ret

00000518 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 518:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 51c:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 520:	08 95       	ret

00000522 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 522:	1f 92       	push	r1
 524:	0f 92       	push	r0
 526:	0f b6       	in	r0, 0x3f	; 63
 528:	0f 92       	push	r0
 52a:	0b b6       	in	r0, 0x3b	; 59
 52c:	0f 92       	push	r0
 52e:	11 24       	eor	r1, r1
 530:	2f 93       	push	r18
 532:	3f 93       	push	r19
 534:	4f 93       	push	r20
 536:	5f 93       	push	r21
 538:	6f 93       	push	r22
 53a:	7f 93       	push	r23
 53c:	8f 93       	push	r24
 53e:	9f 93       	push	r25
 540:	af 93       	push	r26
 542:	bf 93       	push	r27
 544:	ef 93       	push	r30
 546:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 548:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 54c:	82 ff       	sbrs	r24, 2
 54e:	0a c0       	rjmp	.+20     	; 0x564 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 550:	80 91 e2 00 	lds	r24, 0x00E2
 554:	82 ff       	sbrs	r24, 2
 556:	06 c0       	rjmp	.+12     	; 0x564 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 558:	80 91 e1 00 	lds	r24, 0x00E1
 55c:	8b 7f       	andi	r24, 0xFB	; 251
 55e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 562:	2d d2       	rcall	.+1114   	; 0x9be <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 564:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 568:	80 ff       	sbrs	r24, 0
 56a:	1e c0       	rjmp	.+60     	; 0x5a8 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 56c:	80 91 d8 00 	lds	r24, 0x00D8
 570:	80 ff       	sbrs	r24, 0
 572:	1a c0       	rjmp	.+52     	; 0x5a8 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 574:	80 91 da 00 	lds	r24, 0x00DA
 578:	8e 7f       	andi	r24, 0xFE	; 254
 57a:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 57e:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 582:	80 ff       	sbrs	r24, 0
 584:	0d c0       	rjmp	.+26     	; 0x5a0 <__vector_10+0x7e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 586:	8c e0       	ldi	r24, 0x0C	; 12
 588:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 58a:	89 b5       	in	r24, 0x29	; 41
 58c:	82 60       	ori	r24, 0x02	; 2
 58e:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 590:	09 b4       	in	r0, 0x29	; 41
 592:	00 fe       	sbrs	r0, 0
 594:	fd cf       	rjmp	.-6      	; 0x590 <__vector_10+0x6e>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	80 93 05 01 	sts	0x0105, r24
			EVENT_USB_Device_Connect();
 59c:	fa dd       	rcall	.-1036   	; 0x192 <EVENT_USB_Device_Connect>
 59e:	04 c0       	rjmp	.+8      	; 0x5a8 <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
 5a0:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 5a2:	10 92 05 01 	sts	0x0105, r1
			EVENT_USB_Device_Disconnect();
 5a6:	0a de       	rcall	.-1004   	; 0x1bc <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 5a8:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 5ac:	80 ff       	sbrs	r24, 0
 5ae:	18 c0       	rjmp	.+48     	; 0x5e0 <__vector_10+0xbe>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 5b0:	80 91 e2 00 	lds	r24, 0x00E2
 5b4:	80 ff       	sbrs	r24, 0
 5b6:	14 c0       	rjmp	.+40     	; 0x5e0 <__vector_10+0xbe>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 5b8:	80 91 e2 00 	lds	r24, 0x00E2
 5bc:	8e 7f       	andi	r24, 0xFE	; 254
 5be:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 5c2:	80 91 e2 00 	lds	r24, 0x00E2
 5c6:	80 61       	ori	r24, 0x10	; 16
 5c8:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 5cc:	80 91 d8 00 	lds	r24, 0x00D8
 5d0:	80 62       	ori	r24, 0x20	; 32
 5d2:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
 5d6:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 5d8:	85 e0       	ldi	r24, 0x05	; 5
 5da:	80 93 05 01 	sts	0x0105, r24
		EVENT_USB_Device_Suspend();
 5de:	ef d1       	rcall	.+990    	; 0x9be <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 5e0:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 5e4:	84 ff       	sbrs	r24, 4
 5e6:	2e c0       	rjmp	.+92     	; 0x644 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 5e8:	80 91 e2 00 	lds	r24, 0x00E2
 5ec:	84 ff       	sbrs	r24, 4
 5ee:	2a c0       	rjmp	.+84     	; 0x644 <__vector_10+0x122>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 5f0:	8c e0       	ldi	r24, 0x0C	; 12
 5f2:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 5f4:	89 b5       	in	r24, 0x29	; 41
 5f6:	82 60       	ori	r24, 0x02	; 2
 5f8:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 5fa:	09 b4       	in	r0, 0x29	; 41
 5fc:	00 fe       	sbrs	r0, 0
 5fe:	fd cf       	rjmp	.-6      	; 0x5fa <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 600:	80 91 d8 00 	lds	r24, 0x00D8
 604:	8f 7d       	andi	r24, 0xDF	; 223
 606:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 60a:	80 91 e1 00 	lds	r24, 0x00E1
 60e:	8f 7e       	andi	r24, 0xEF	; 239
 610:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 614:	80 91 e2 00 	lds	r24, 0x00E2
 618:	8f 7e       	andi	r24, 0xEF	; 239
 61a:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 61e:	80 91 e2 00 	lds	r24, 0x00E2
 622:	81 60       	ori	r24, 0x01	; 1
 624:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_ConfigurationNumber)
 628:	80 91 03 01 	lds	r24, 0x0103
 62c:	88 23       	and	r24, r24
 62e:	31 f4       	brne	.+12     	; 0x63c <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 630:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 634:	87 fd       	sbrc	r24, 7
 636:	02 c0       	rjmp	.+4      	; 0x63c <__vector_10+0x11a>
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	01 c0       	rjmp	.+2      	; 0x63e <__vector_10+0x11c>
 63c:	84 e0       	ldi	r24, 0x04	; 4
 63e:	80 93 05 01 	sts	0x0105, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 642:	bd d1       	rcall	.+890    	; 0x9be <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 644:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 648:	83 ff       	sbrs	r24, 3
 64a:	22 c0       	rjmp	.+68     	; 0x690 <__vector_10+0x16e>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 64c:	80 91 e2 00 	lds	r24, 0x00E2
 650:	83 ff       	sbrs	r24, 3
 652:	1e c0       	rjmp	.+60     	; 0x690 <__vector_10+0x16e>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 654:	80 91 e1 00 	lds	r24, 0x00E1
 658:	87 7f       	andi	r24, 0xF7	; 247
 65a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState         = DEVICE_STATE_Default;
 65e:	82 e0       	ldi	r24, 0x02	; 2
 660:	80 93 05 01 	sts	0x0105, r24
		USB_ConfigurationNumber = 0;
 664:	10 92 03 01 	sts	0x0103, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 668:	80 91 e1 00 	lds	r24, 0x00E1
 66c:	8e 7f       	andi	r24, 0xFE	; 254
 66e:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 672:	80 91 e2 00 	lds	r24, 0x00E2
 676:	8e 7f       	andi	r24, 0xFE	; 254
 678:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 67c:	80 91 e2 00 	lds	r24, 0x00E2
 680:	80 61       	ori	r24, 0x10	; 16
 682:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	60 e0       	ldi	r22, 0x00	; 0
 68a:	42 e0       	ldi	r20, 0x02	; 2
 68c:	95 de       	rcall	.-726    	; 0x3b8 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 68e:	97 d1       	rcall	.+814    	; 0x9be <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 690:	ff 91       	pop	r31
 692:	ef 91       	pop	r30
 694:	bf 91       	pop	r27
 696:	af 91       	pop	r26
 698:	9f 91       	pop	r25
 69a:	8f 91       	pop	r24
 69c:	7f 91       	pop	r23
 69e:	6f 91       	pop	r22
 6a0:	5f 91       	pop	r21
 6a2:	4f 91       	pop	r20
 6a4:	3f 91       	pop	r19
 6a6:	2f 91       	pop	r18
 6a8:	0f 90       	pop	r0
 6aa:	0b be       	out	0x3b, r0	; 59
 6ac:	0f 90       	pop	r0
 6ae:	0f be       	out	0x3f, r0	; 63
 6b0:	0f 90       	pop	r0
 6b2:	1f 90       	pop	r1
 6b4:	18 95       	reti

000006b6 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 6b6:	0f 93       	push	r16
 6b8:	1f 93       	push	r17
 6ba:	df 93       	push	r29
 6bc:	cf 93       	push	r28
 6be:	cd b7       	in	r28, 0x3d	; 61
 6c0:	de b7       	in	r29, 0x3e	; 62
 6c2:	ac 97       	sbiw	r28, 0x2c	; 44
 6c4:	0f b6       	in	r0, 0x3f	; 63
 6c6:	f8 94       	cli
 6c8:	de bf       	out	0x3e, r29	; 62
 6ca:	0f be       	out	0x3f, r0	; 63
 6cc:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 6ce:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
 6d2:	80 93 06 01 	sts	0x0106, r24
 6d6:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
 6da:	80 93 07 01 	sts	0x0107, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 6de:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 6e2:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
 6e6:	e8 e0       	ldi	r30, 0x08	; 8
 6e8:	f1 e0       	ldi	r31, 0x01	; 1
 6ea:	80 93 08 01 	sts	0x0108, r24
 6ee:	90 93 09 01 	sts	0x0109, r25
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 6f2:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 6f6:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
 6fa:	80 93 0a 01 	sts	0x010A, r24
 6fe:	93 83       	std	Z+3, r25	; 0x03
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 700:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 704:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
 708:	80 93 0c 01 	sts	0x010C, r24
 70c:	95 83       	std	Z+5, r25	; 0x05

	EVENT_USB_Device_ControlRequest();
 70e:	d9 dd       	rcall	.-1102   	; 0x2c2 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 710:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 714:	83 ff       	sbrs	r24, 3
 716:	3a c1       	rjmp	.+628    	; 0x98c <USB_Device_ProcessControlRequest+0x2d6>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 718:	80 91 06 01 	lds	r24, 0x0106

		switch (USB_ControlRequest.bRequest)
 71c:	30 91 07 01 	lds	r19, 0x0107
 720:	35 30       	cpi	r19, 0x05	; 5
 722:	09 f4       	brne	.+2      	; 0x726 <USB_Device_ProcessControlRequest+0x70>
 724:	87 c0       	rjmp	.+270    	; 0x834 <USB_Device_ProcessControlRequest+0x17e>
 726:	36 30       	cpi	r19, 0x06	; 6
 728:	40 f4       	brcc	.+16     	; 0x73a <USB_Device_ProcessControlRequest+0x84>
 72a:	31 30       	cpi	r19, 0x01	; 1
 72c:	c9 f1       	breq	.+114    	; 0x7a0 <USB_Device_ProcessControlRequest+0xea>
 72e:	31 30       	cpi	r19, 0x01	; 1
 730:	70 f0       	brcs	.+28     	; 0x74e <USB_Device_ProcessControlRequest+0x98>
 732:	33 30       	cpi	r19, 0x03	; 3
 734:	09 f0       	breq	.+2      	; 0x738 <USB_Device_ProcessControlRequest+0x82>
 736:	2a c1       	rjmp	.+596    	; 0x98c <USB_Device_ProcessControlRequest+0x2d6>
 738:	33 c0       	rjmp	.+102    	; 0x7a0 <USB_Device_ProcessControlRequest+0xea>
 73a:	38 30       	cpi	r19, 0x08	; 8
 73c:	09 f4       	brne	.+2      	; 0x740 <USB_Device_ProcessControlRequest+0x8a>
 73e:	f8 c0       	rjmp	.+496    	; 0x930 <USB_Device_ProcessControlRequest+0x27a>
 740:	39 30       	cpi	r19, 0x09	; 9
 742:	09 f4       	brne	.+2      	; 0x746 <USB_Device_ProcessControlRequest+0x90>
 744:	07 c1       	rjmp	.+526    	; 0x954 <USB_Device_ProcessControlRequest+0x29e>
 746:	36 30       	cpi	r19, 0x06	; 6
 748:	09 f0       	breq	.+2      	; 0x74c <USB_Device_ProcessControlRequest+0x96>
 74a:	20 c1       	rjmp	.+576    	; 0x98c <USB_Device_ProcessControlRequest+0x2d6>
 74c:	99 c0       	rjmp	.+306    	; 0x880 <USB_Device_ProcessControlRequest+0x1ca>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 74e:	80 38       	cpi	r24, 0x80	; 128
 750:	21 f0       	breq	.+8      	; 0x75a <USB_Device_ProcessControlRequest+0xa4>
 752:	82 38       	cpi	r24, 0x82	; 130
 754:	09 f0       	breq	.+2      	; 0x758 <USB_Device_ProcessControlRequest+0xa2>
 756:	1a c1       	rjmp	.+564    	; 0x98c <USB_Device_ProcessControlRequest+0x2d6>
 758:	08 c0       	rjmp	.+16     	; 0x76a <USB_Device_ProcessControlRequest+0xb4>
 75a:	90 91 01 01 	lds	r25, 0x0101
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_RemoteWakeupEnabled)
 75e:	80 91 02 01 	lds	r24, 0x0102
 762:	88 23       	and	r24, r24
 764:	99 f0       	breq	.+38     	; 0x78c <USB_Device_ProcessControlRequest+0xd6>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 766:	92 60       	ori	r25, 0x02	; 2
 768:	11 c0       	rjmp	.+34     	; 0x78c <USB_Device_ProcessControlRequest+0xd6>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 76a:	80 91 0a 01 	lds	r24, 0x010A
 76e:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 770:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 774:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	25 e0       	ldi	r18, 0x05	; 5
 77c:	96 95       	lsr	r25
 77e:	87 95       	ror	r24
 780:	2a 95       	dec	r18
 782:	e1 f7       	brne	.-8      	; 0x77c <USB_Device_ProcessControlRequest+0xc6>
 784:	98 2f       	mov	r25, r24
 786:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 788:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 78c:	80 91 e8 00 	lds	r24, 0x00E8
 790:	87 7f       	andi	r24, 0xF7	; 247
 792:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 796:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
 79a:	10 92 f1 00 	sts	0x00F1, r1
 79e:	d3 c0       	rjmp	.+422    	; 0x946 <USB_Device_ProcessControlRequest+0x290>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 7a0:	88 23       	and	r24, r24
 7a2:	19 f0       	breq	.+6      	; 0x7aa <USB_Device_ProcessControlRequest+0xf4>
 7a4:	82 30       	cpi	r24, 0x02	; 2
 7a6:	09 f0       	breq	.+2      	; 0x7aa <USB_Device_ProcessControlRequest+0xf4>
 7a8:	f1 c0       	rjmp	.+482    	; 0x98c <USB_Device_ProcessControlRequest+0x2d6>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	8f 71       	andi	r24, 0x1F	; 31
 7ae:	90 70       	andi	r25, 0x00	; 0
 7b0:	00 97       	sbiw	r24, 0x00	; 0
 7b2:	21 f0       	breq	.+8      	; 0x7bc <USB_Device_ProcessControlRequest+0x106>
 7b4:	02 97       	sbiw	r24, 0x02	; 2
 7b6:	09 f0       	breq	.+2      	; 0x7ba <USB_Device_ProcessControlRequest+0x104>
 7b8:	e9 c0       	rjmp	.+466    	; 0x98c <USB_Device_ProcessControlRequest+0x2d6>
 7ba:	0c c0       	rjmp	.+24     	; 0x7d4 <USB_Device_ProcessControlRequest+0x11e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 7bc:	80 91 08 01 	lds	r24, 0x0108
 7c0:	81 30       	cpi	r24, 0x01	; 1
 7c2:	09 f0       	breq	.+2      	; 0x7c6 <USB_Device_ProcessControlRequest+0x110>
 7c4:	e3 c0       	rjmp	.+454    	; 0x98c <USB_Device_ProcessControlRequest+0x2d6>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 7c6:	10 92 02 01 	sts	0x0102, r1
 7ca:	33 30       	cpi	r19, 0x03	; 3
 7cc:	69 f5       	brne	.+90     	; 0x828 <USB_Device_ProcessControlRequest+0x172>
 7ce:	80 93 02 01 	sts	0x0102, r24
 7d2:	2a c0       	rjmp	.+84     	; 0x828 <USB_Device_ProcessControlRequest+0x172>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 7d4:	80 91 08 01 	lds	r24, 0x0108
 7d8:	88 23       	and	r24, r24
 7da:	31 f5       	brne	.+76     	; 0x828 <USB_Device_ProcessControlRequest+0x172>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 7dc:	20 91 0a 01 	lds	r18, 0x010A
 7e0:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 7e2:	09 f4       	brne	.+2      	; 0x7e6 <USB_Device_ProcessControlRequest+0x130>
 7e4:	d3 c0       	rjmp	.+422    	; 0x98c <USB_Device_ProcessControlRequest+0x2d6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 7e6:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 7ea:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 7ee:	80 ff       	sbrs	r24, 0
 7f0:	1b c0       	rjmp	.+54     	; 0x828 <USB_Device_ProcessControlRequest+0x172>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 7f2:	33 30       	cpi	r19, 0x03	; 3
 7f4:	21 f4       	brne	.+8      	; 0x7fe <USB_Device_ProcessControlRequest+0x148>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 7f6:	80 91 eb 00 	lds	r24, 0x00EB
 7fa:	80 62       	ori	r24, 0x20	; 32
 7fc:	13 c0       	rjmp	.+38     	; 0x824 <USB_Device_ProcessControlRequest+0x16e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 7fe:	80 91 eb 00 	lds	r24, 0x00EB
 802:	80 61       	ori	r24, 0x10	; 16
 804:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 808:	81 e0       	ldi	r24, 0x01	; 1
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	02 c0       	rjmp	.+4      	; 0x812 <USB_Device_ProcessControlRequest+0x15c>
 80e:	88 0f       	add	r24, r24
 810:	99 1f       	adc	r25, r25
 812:	2a 95       	dec	r18
 814:	e2 f7       	brpl	.-8      	; 0x80e <USB_Device_ProcessControlRequest+0x158>
 816:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 81a:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 81e:	80 91 eb 00 	lds	r24, 0x00EB
 822:	88 60       	ori	r24, 0x08	; 8
 824:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 828:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 82c:	80 91 e8 00 	lds	r24, 0x00E8
 830:	87 7f       	andi	r24, 0xF7	; 247
 832:	8c c0       	rjmp	.+280    	; 0x94c <USB_Device_ProcessControlRequest+0x296>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 834:	88 23       	and	r24, r24
 836:	09 f0       	breq	.+2      	; 0x83a <USB_Device_ProcessControlRequest+0x184>
 838:	a9 c0       	rjmp	.+338    	; 0x98c <USB_Device_ProcessControlRequest+0x2d6>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 83a:	10 91 08 01 	lds	r17, 0x0108
 83e:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 840:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 842:	f8 94       	cli
 844:	80 91 e8 00 	lds	r24, 0x00E8
 848:	87 7f       	andi	r24, 0xF7	; 247
 84a:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 84e:	e9 dd       	rcall	.-1070   	; 0x422 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 850:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
 854:	80 ff       	sbrs	r24, 0
 856:	fc cf       	rjmp	.-8      	; 0x850 <USB_Device_ProcessControlRequest+0x19a>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
 858:	80 91 e3 00 	lds	r24, 0x00E3
 85c:	80 78       	andi	r24, 0x80	; 128
 85e:	81 2b       	or	r24, r17
 860:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR |= (1 << ADDEN);
 864:	80 91 e3 00 	lds	r24, 0x00E3
 868:	80 68       	ori	r24, 0x80	; 128
 86a:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 86e:	11 23       	and	r17, r17
 870:	11 f4       	brne	.+4      	; 0x876 <USB_Device_ProcessControlRequest+0x1c0>
 872:	82 e0       	ldi	r24, 0x02	; 2
 874:	01 c0       	rjmp	.+2      	; 0x878 <USB_Device_ProcessControlRequest+0x1c2>
 876:	83 e0       	ldi	r24, 0x03	; 3
 878:	80 93 05 01 	sts	0x0105, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 87c:	0f bf       	out	0x3f, r16	; 63
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#endif
				
				GCC_MEMORY_BARRIER();
 87e:	86 c0       	rjmp	.+268    	; 0x98c <USB_Device_ProcessControlRequest+0x2d6>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 880:	80 58       	subi	r24, 0x80	; 128
 882:	82 30       	cpi	r24, 0x02	; 2
 884:	08 f0       	brcs	.+2      	; 0x888 <USB_Device_ProcessControlRequest+0x1d2>
 886:	82 c0       	rjmp	.+260    	; 0x98c <USB_Device_ProcessControlRequest+0x2d6>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 888:	80 91 08 01 	lds	r24, 0x0108
 88c:	90 91 09 01 	lds	r25, 0x0109
 890:	23 e0       	ldi	r18, 0x03	; 3
 892:	8c 3d       	cpi	r24, 0xDC	; 220
 894:	92 07       	cpc	r25, r18
 896:	09 f0       	breq	.+2      	; 0x89a <USB_Device_ProcessControlRequest+0x1e4>
 898:	33 c0       	rjmp	.+102    	; 0x900 <USB_Device_ProcessControlRequest+0x24a>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 89a:	83 e0       	ldi	r24, 0x03	; 3
 89c:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 89e:	8a e2       	ldi	r24, 0x2A	; 42
 8a0:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 8a2:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 8a4:	f8 94       	cli
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#endif

				GCC_MEMORY_BARRIER();
 8a6:	de 01       	movw	r26, r28
 8a8:	15 96       	adiw	r26, 0x05	; 5
 8aa:	6e e0       	ldi	r22, 0x0E	; 14
 8ac:	40 e0       	ldi	r20, 0x00	; 0
 8ae:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 8b0:	11 e2       	ldi	r17, 0x21	; 33
 8b2:	e6 2f       	mov	r30, r22
 8b4:	f0 e0       	ldi	r31, 0x00	; 0
 8b6:	10 93 57 00 	sts	0x0057, r17
 8ba:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
 8bc:	40 ff       	sbrs	r20, 0
 8be:	03 c0       	rjmp	.+6      	; 0x8c6 <USB_Device_ProcessControlRequest+0x210>
					{
						SerialByte >>= 4;
 8c0:	82 95       	swap	r24
 8c2:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
 8c4:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 8c6:	8f 70       	andi	r24, 0x0F	; 15
 8c8:	28 2f       	mov	r18, r24
 8ca:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 8cc:	8a 30       	cpi	r24, 0x0A	; 10
 8ce:	18 f0       	brcs	.+6      	; 0x8d6 <USB_Device_ProcessControlRequest+0x220>
 8d0:	c9 01       	movw	r24, r18
 8d2:	c7 96       	adiw	r24, 0x37	; 55
 8d4:	02 c0       	rjmp	.+4      	; 0x8da <USB_Device_ProcessControlRequest+0x224>
 8d6:	c9 01       	movw	r24, r18
 8d8:	c0 96       	adiw	r24, 0x30	; 48
 8da:	8d 93       	st	X+, r24
 8dc:	9d 93       	st	X+, r25
 8de:	4f 5f       	subi	r20, 0xFF	; 255
 8e0:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 8e2:	44 31       	cpi	r20, 0x14	; 20
 8e4:	51 05       	cpc	r21, r1
 8e6:	29 f7       	brne	.-54     	; 0x8b2 <USB_Device_ProcessControlRequest+0x1fc>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 8e8:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 8ea:	80 91 e8 00 	lds	r24, 0x00E8
 8ee:	87 7f       	andi	r24, 0xF7	; 247
 8f0:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 8f4:	ce 01       	movw	r24, r28
 8f6:	03 96       	adiw	r24, 0x03	; 3
 8f8:	6a e2       	ldi	r22, 0x2A	; 42
 8fa:	70 e0       	ldi	r23, 0x00	; 0
 8fc:	61 d0       	rcall	.+194    	; 0x9c0 <Endpoint_Write_Control_Stream_LE>
 8fe:	12 c0       	rjmp	.+36     	; 0x924 <USB_Device_ProcessControlRequest+0x26e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 900:	60 91 0a 01 	lds	r22, 0x010A
 904:	ae 01       	movw	r20, r28
 906:	4f 5f       	subi	r20, 0xFF	; 255
 908:	5f 4f       	sbci	r21, 0xFF	; 255
 90a:	28 dd       	rcall	.-1456   	; 0x35c <CALLBACK_USB_GetDescriptor>
 90c:	bc 01       	movw	r22, r24
 90e:	00 97       	sbiw	r24, 0x00	; 0
 910:	09 f4       	brne	.+2      	; 0x914 <USB_Device_ProcessControlRequest+0x25e>
 912:	3c c0       	rjmp	.+120    	; 0x98c <USB_Device_ProcessControlRequest+0x2d6>
 914:	80 91 e8 00 	lds	r24, 0x00E8
 918:	87 7f       	andi	r24, 0xF7	; 247
 91a:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 91e:	89 81       	ldd	r24, Y+1	; 0x01
 920:	9a 81       	ldd	r25, Y+2	; 0x02
 922:	ac d0       	rcall	.+344    	; 0xa7c <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 924:	80 91 e8 00 	lds	r24, 0x00E8
 928:	8b 77       	andi	r24, 0x7B	; 123
 92a:	80 93 e8 00 	sts	0x00E8, r24
 92e:	2e c0       	rjmp	.+92     	; 0x98c <USB_Device_ProcessControlRequest+0x2d6>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 930:	80 38       	cpi	r24, 0x80	; 128
 932:	61 f5       	brne	.+88     	; 0x98c <USB_Device_ProcessControlRequest+0x2d6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 934:	80 91 e8 00 	lds	r24, 0x00E8
 938:	87 7f       	andi	r24, 0xF7	; 247
 93a:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_ConfigurationNumber);
 93e:	80 91 03 01 	lds	r24, 0x0103
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 942:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 946:	80 91 e8 00 	lds	r24, 0x00E8
 94a:	8e 77       	andi	r24, 0x7E	; 126
 94c:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 950:	68 dd       	rcall	.-1328   	; 0x422 <Endpoint_ClearStatusStage>
 952:	1c c0       	rjmp	.+56     	; 0x98c <USB_Device_ProcessControlRequest+0x2d6>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 954:	88 23       	and	r24, r24
 956:	d1 f4       	brne	.+52     	; 0x98c <USB_Device_ProcessControlRequest+0x2d6>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 958:	90 91 08 01 	lds	r25, 0x0108
 95c:	92 30       	cpi	r25, 0x02	; 2
 95e:	b0 f4       	brcc	.+44     	; 0x98c <USB_Device_ProcessControlRequest+0x2d6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 960:	80 91 e8 00 	lds	r24, 0x00E8
 964:	87 7f       	andi	r24, 0xF7	; 247
 966:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 96a:	90 93 03 01 	sts	0x0103, r25

	Endpoint_ClearStatusStage();
 96e:	59 dd       	rcall	.-1358   	; 0x422 <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
 970:	80 91 03 01 	lds	r24, 0x0103
 974:	88 23       	and	r24, r24
 976:	31 f4       	brne	.+12     	; 0x984 <USB_Device_ProcessControlRequest+0x2ce>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 978:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 97c:	87 fd       	sbrc	r24, 7
 97e:	02 c0       	rjmp	.+4      	; 0x984 <USB_Device_ProcessControlRequest+0x2ce>
 980:	81 e0       	ldi	r24, 0x01	; 1
 982:	01 c0       	rjmp	.+2      	; 0x986 <USB_Device_ProcessControlRequest+0x2d0>
 984:	84 e0       	ldi	r24, 0x04	; 4
 986:	80 93 05 01 	sts	0x0105, r24

	EVENT_USB_Device_ConfigurationChanged();
 98a:	b6 dc       	rcall	.-1684   	; 0x2f8 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 98c:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 990:	83 ff       	sbrs	r24, 3
 992:	0a c0       	rjmp	.+20     	; 0x9a8 <USB_Device_ProcessControlRequest+0x2f2>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 994:	80 91 eb 00 	lds	r24, 0x00EB
 998:	80 62       	ori	r24, 0x20	; 32
 99a:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 99e:	80 91 e8 00 	lds	r24, 0x00E8
 9a2:	87 7f       	andi	r24, 0xF7	; 247
 9a4:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 9a8:	ac 96       	adiw	r28, 0x2c	; 44
 9aa:	0f b6       	in	r0, 0x3f	; 63
 9ac:	f8 94       	cli
 9ae:	de bf       	out	0x3e, r29	; 62
 9b0:	0f be       	out	0x3f, r0	; 63
 9b2:	cd bf       	out	0x3d, r28	; 61
 9b4:	cf 91       	pop	r28
 9b6:	df 91       	pop	r29
 9b8:	1f 91       	pop	r17
 9ba:	0f 91       	pop	r16
 9bc:	08 95       	ret

000009be <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 9be:	08 95       	ret

000009c0 <Endpoint_Write_Control_Stream_LE>:
 9c0:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 9c2:	40 91 0c 01 	lds	r20, 0x010C
 9c6:	50 91 0d 01 	lds	r21, 0x010D
 9ca:	46 17       	cp	r20, r22
 9cc:	57 07       	cpc	r21, r23
 9ce:	18 f4       	brcc	.+6      	; 0x9d6 <Endpoint_Write_Control_Stream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 9d0:	f9 01       	movw	r30, r18
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	3d c0       	rjmp	.+122    	; 0xa50 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 9d6:	61 15       	cp	r22, r1
 9d8:	71 05       	cpc	r23, r1
 9da:	11 f0       	breq	.+4      	; 0x9e0 <Endpoint_Write_Control_Stream_LE+0x20>
 9dc:	ab 01       	movw	r20, r22
 9de:	f8 cf       	rjmp	.-16     	; 0x9d0 <Endpoint_Write_Control_Stream_LE+0x10>
 9e0:	80 91 e8 00 	lds	r24, 0x00E8
 9e4:	8e 77       	andi	r24, 0x7E	; 126
 9e6:	80 93 e8 00 	sts	0x00E8, r24
 9ea:	40 e0       	ldi	r20, 0x00	; 0
 9ec:	50 e0       	ldi	r21, 0x00	; 0
 9ee:	f0 cf       	rjmp	.-32     	; 0x9d0 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 9f0:	80 91 05 01 	lds	r24, 0x0105

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 9f4:	88 23       	and	r24, r24
 9f6:	f1 f1       	breq	.+124    	; 0xa74 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 9f8:	85 30       	cpi	r24, 0x05	; 5
 9fa:	f1 f1       	breq	.+124    	; 0xa78 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9fc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 a00:	83 ff       	sbrs	r24, 3
 a02:	02 c0       	rjmp	.+4      	; 0xa08 <Endpoint_Write_Control_Stream_LE+0x48>
 a04:	81 e0       	ldi	r24, 0x01	; 1
 a06:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 a08:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 a0c:	82 fd       	sbrc	r24, 2
 a0e:	2c c0       	rjmp	.+88     	; 0xa68 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 a10:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 a14:	80 ff       	sbrs	r24, 0
 a16:	1c c0       	rjmp	.+56     	; 0xa50 <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 a18:	20 91 f2 00 	lds	r18, 0x00F2
 a1c:	30 91 f3 00 	lds	r19, 0x00F3
 a20:	07 c0       	rjmp	.+14     	; 0xa30 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 a22:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 a24:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 a28:	41 50       	subi	r20, 0x01	; 1
 a2a:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 a2c:	2f 5f       	subi	r18, 0xFF	; 255
 a2e:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 a30:	41 15       	cp	r20, r1
 a32:	51 05       	cpc	r21, r1
 a34:	19 f0       	breq	.+6      	; 0xa3c <Endpoint_Write_Control_Stream_LE+0x7c>
 a36:	28 30       	cpi	r18, 0x08	; 8
 a38:	31 05       	cpc	r19, r1
 a3a:	98 f3       	brcs	.-26     	; 0xa22 <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	28 30       	cpi	r18, 0x08	; 8
 a40:	31 05       	cpc	r19, r1
 a42:	09 f4       	brne	.+2      	; 0xa46 <Endpoint_Write_Control_Stream_LE+0x86>
 a44:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 a46:	80 91 e8 00 	lds	r24, 0x00E8
 a4a:	8e 77       	andi	r24, 0x7E	; 126
 a4c:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 a50:	41 15       	cp	r20, r1
 a52:	51 05       	cpc	r21, r1
 a54:	69 f6       	brne	.-102    	; 0x9f0 <Endpoint_Write_Control_Stream_LE+0x30>
 a56:	99 23       	and	r25, r25
 a58:	59 f6       	brne	.-106    	; 0x9f0 <Endpoint_Write_Control_Stream_LE+0x30>
 a5a:	06 c0       	rjmp	.+12     	; 0xa68 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 a5c:	80 91 05 01 	lds	r24, 0x0105

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 a60:	88 23       	and	r24, r24
 a62:	41 f0       	breq	.+16     	; 0xa74 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 a64:	85 30       	cpi	r24, 0x05	; 5
 a66:	41 f0       	breq	.+16     	; 0xa78 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 a68:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 a6c:	82 ff       	sbrs	r24, 2
 a6e:	f6 cf       	rjmp	.-20     	; 0xa5c <Endpoint_Write_Control_Stream_LE+0x9c>
 a70:	80 e0       	ldi	r24, 0x00	; 0
 a72:	08 95       	ret
 a74:	82 e0       	ldi	r24, 0x02	; 2
 a76:	08 95       	ret
 a78:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 a7a:	08 95       	ret

00000a7c <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
 a7c:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 a7e:	40 91 0c 01 	lds	r20, 0x010C
 a82:	50 91 0d 01 	lds	r21, 0x010D
 a86:	46 17       	cp	r20, r22
 a88:	57 07       	cpc	r21, r23
 a8a:	18 f4       	brcc	.+6      	; 0xa92 <Endpoint_Write_Control_PStream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 a8c:	f9 01       	movw	r30, r18
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	40 c0       	rjmp	.+128    	; 0xb12 <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 a92:	61 15       	cp	r22, r1
 a94:	71 05       	cpc	r23, r1
 a96:	11 f0       	breq	.+4      	; 0xa9c <Endpoint_Write_Control_PStream_LE+0x20>
 a98:	ab 01       	movw	r20, r22
 a9a:	f8 cf       	rjmp	.-16     	; 0xa8c <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 a9c:	80 91 e8 00 	lds	r24, 0x00E8
 aa0:	8e 77       	andi	r24, 0x7E	; 126
 aa2:	80 93 e8 00 	sts	0x00E8, r24
 aa6:	40 e0       	ldi	r20, 0x00	; 0
 aa8:	50 e0       	ldi	r21, 0x00	; 0
 aaa:	f0 cf       	rjmp	.-32     	; 0xa8c <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 aac:	80 91 05 01 	lds	r24, 0x0105

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 ab0:	88 23       	and	r24, r24
 ab2:	09 f4       	brne	.+2      	; 0xab6 <Endpoint_Write_Control_PStream_LE+0x3a>
 ab4:	40 c0       	rjmp	.+128    	; 0xb36 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 ab6:	85 30       	cpi	r24, 0x05	; 5
 ab8:	09 f4       	brne	.+2      	; 0xabc <Endpoint_Write_Control_PStream_LE+0x40>
 aba:	3f c0       	rjmp	.+126    	; 0xb3a <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 abc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 ac0:	83 ff       	sbrs	r24, 3
 ac2:	02 c0       	rjmp	.+4      	; 0xac8 <Endpoint_Write_Control_PStream_LE+0x4c>
 ac4:	81 e0       	ldi	r24, 0x01	; 1
 ac6:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 ac8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 acc:	82 fd       	sbrc	r24, 2
 ace:	2d c0       	rjmp	.+90     	; 0xb2a <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 ad0:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 ad4:	80 ff       	sbrs	r24, 0
 ad6:	1d c0       	rjmp	.+58     	; 0xb12 <Endpoint_Write_Control_PStream_LE+0x96>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 ad8:	20 91 f2 00 	lds	r18, 0x00F2
 adc:	30 91 f3 00 	lds	r19, 0x00F3
 ae0:	08 c0       	rjmp	.+16     	; 0xaf2 <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 ae2:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 ae4:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 ae8:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 aea:	41 50       	subi	r20, 0x01	; 1
 aec:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 aee:	2f 5f       	subi	r18, 0xFF	; 255
 af0:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 af2:	41 15       	cp	r20, r1
 af4:	51 05       	cpc	r21, r1
 af6:	19 f0       	breq	.+6      	; 0xafe <Endpoint_Write_Control_PStream_LE+0x82>
 af8:	28 30       	cpi	r18, 0x08	; 8
 afa:	31 05       	cpc	r19, r1
 afc:	90 f3       	brcs	.-28     	; 0xae2 <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 afe:	90 e0       	ldi	r25, 0x00	; 0
 b00:	28 30       	cpi	r18, 0x08	; 8
 b02:	31 05       	cpc	r19, r1
 b04:	09 f4       	brne	.+2      	; 0xb08 <Endpoint_Write_Control_PStream_LE+0x8c>
 b06:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 b08:	80 91 e8 00 	lds	r24, 0x00E8
 b0c:	8e 77       	andi	r24, 0x7E	; 126
 b0e:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 b12:	41 15       	cp	r20, r1
 b14:	51 05       	cpc	r21, r1
 b16:	51 f6       	brne	.-108    	; 0xaac <Endpoint_Write_Control_PStream_LE+0x30>
 b18:	99 23       	and	r25, r25
 b1a:	41 f6       	brne	.-112    	; 0xaac <Endpoint_Write_Control_PStream_LE+0x30>
 b1c:	06 c0       	rjmp	.+12     	; 0xb2a <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 b1e:	80 91 05 01 	lds	r24, 0x0105

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 b22:	88 23       	and	r24, r24
 b24:	41 f0       	breq	.+16     	; 0xb36 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 b26:	85 30       	cpi	r24, 0x05	; 5
 b28:	41 f0       	breq	.+16     	; 0xb3a <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 b2a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 b2e:	82 ff       	sbrs	r24, 2
 b30:	f6 cf       	rjmp	.-20     	; 0xb1e <Endpoint_Write_Control_PStream_LE+0xa2>
 b32:	80 e0       	ldi	r24, 0x00	; 0
 b34:	08 95       	ret
 b36:	82 e0       	ldi	r24, 0x02	; 2
 b38:	08 95       	ret
 b3a:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 b3c:	08 95       	ret

00000b3e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 b3e:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 b40:	80 91 05 01 	lds	r24, 0x0105
 b44:	88 23       	and	r24, r24
 b46:	61 f0       	breq	.+24     	; 0xb60 <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 b48:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 b4c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b50:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 b54:	83 ff       	sbrs	r24, 3
 b56:	01 c0       	rjmp	.+2      	; 0xb5a <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
 b58:	ae dd       	rcall	.-1188   	; 0x6b6 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 b5a:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 b5c:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 b60:	1f 91       	pop	r17
 b62:	08 95       	ret

00000b64 <_exit>:
 b64:	f8 94       	cli

00000b66 <__stop_program>:
 b66:	ff cf       	rjmp	.-2      	; 0xb66 <__stop_program>
