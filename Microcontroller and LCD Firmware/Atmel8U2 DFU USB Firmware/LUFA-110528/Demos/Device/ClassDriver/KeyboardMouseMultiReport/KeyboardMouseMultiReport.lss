
KeyboardMouseMultiReport.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000011a8  0000123c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  0080010e  0080010e  0000124a  2**0
                  ALLOC
  3 .debug_aranges 00000478  00000000  00000000  0000124a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000cc2  00000000  00000000  000016c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00007d46  00000000  00000000  00002384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001ff1  00000000  00000000  0000a0ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000619f  00000000  00000000  0000c0bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006b0  00000000  00000000  0001225c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003225  00000000  00000000  0001290c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000034e1  00000000  00000000  00015b31  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000568  00000000  00000000  00019012  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       0:	cd c0       	rjmp	.+410    	; 0x19c <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       4:	e8 c0       	rjmp	.+464    	; 0x1d6 <__bad_interrupt>
       6:	00 00       	nop
       8:	e6 c0       	rjmp	.+460    	; 0x1d6 <__bad_interrupt>
       a:	00 00       	nop
       c:	e4 c0       	rjmp	.+456    	; 0x1d6 <__bad_interrupt>
       e:	00 00       	nop
      10:	e2 c0       	rjmp	.+452    	; 0x1d6 <__bad_interrupt>
      12:	00 00       	nop
      14:	e0 c0       	rjmp	.+448    	; 0x1d6 <__bad_interrupt>
      16:	00 00       	nop
      18:	de c0       	rjmp	.+444    	; 0x1d6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	dc c0       	rjmp	.+440    	; 0x1d6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	da c0       	rjmp	.+436    	; 0x1d6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d8 c0       	rjmp	.+432    	; 0x1d6 <__bad_interrupt>
      26:	00 00       	nop
      28:	c0 c2       	rjmp	.+1408   	; 0x5aa <__vector_10>
      2a:	00 00       	nop
      2c:	d4 c0       	rjmp	.+424    	; 0x1d6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	d2 c0       	rjmp	.+420    	; 0x1d6 <__bad_interrupt>
      32:	00 00       	nop
      34:	d0 c0       	rjmp	.+416    	; 0x1d6 <__bad_interrupt>
      36:	00 00       	nop
      38:	ce c0       	rjmp	.+412    	; 0x1d6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	cc c0       	rjmp	.+408    	; 0x1d6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	ca c0       	rjmp	.+404    	; 0x1d6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c8 c0       	rjmp	.+400    	; 0x1d6 <__bad_interrupt>
      46:	00 00       	nop
      48:	c6 c0       	rjmp	.+396    	; 0x1d6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c4 c0       	rjmp	.+392    	; 0x1d6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	c2 c0       	rjmp	.+388    	; 0x1d6 <__bad_interrupt>
      52:	00 00       	nop
      54:	c0 c0       	rjmp	.+384    	; 0x1d6 <__bad_interrupt>
      56:	00 00       	nop
      58:	be c0       	rjmp	.+380    	; 0x1d6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	bc c0       	rjmp	.+376    	; 0x1d6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	ba c0       	rjmp	.+372    	; 0x1d6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b8 c0       	rjmp	.+368    	; 0x1d6 <__bad_interrupt>
      66:	00 00       	nop
      68:	b6 c0       	rjmp	.+364    	; 0x1d6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b4 c0       	rjmp	.+360    	; 0x1d6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	b2 c0       	rjmp	.+356    	; 0x1d6 <__bad_interrupt>
      72:	00 00       	nop
      74:	b0 c0       	rjmp	.+352    	; 0x1d6 <__bad_interrupt>
      76:	00 00       	nop
      78:	ae c0       	rjmp	.+348    	; 0x1d6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ac c0       	rjmp	.+344    	; 0x1d6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	aa c0       	rjmp	.+340    	; 0x1d6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a8 c0       	rjmp	.+336    	; 0x1d6 <__bad_interrupt>
      86:	00 00       	nop
      88:	a6 c0       	rjmp	.+332    	; 0x1d6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	a4 c0       	rjmp	.+328    	; 0x1d6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	a2 c0       	rjmp	.+324    	; 0x1d6 <__bad_interrupt>
      92:	00 00       	nop
      94:	a0 c0       	rjmp	.+320    	; 0x1d6 <__bad_interrupt>
      96:	00 00       	nop

00000098 <HIDReport>:
      98:	05 01 09 02 a1 01 85 01 09 01 a1 00 05 09 19 01     ................
      a8:	29 03 15 00 25 01 95 03 75 01 81 02 95 01 75 05     )...%...u.....u.
      b8:	81 01 05 01 09 30 09 31 15 ff 25 01 35 ff 45 01     .....0.1..%.5.E.
      c8:	95 02 75 08 81 06 c0 c0 05 01 09 06 a1 01 85 02     ..u.............
      d8:	05 07 19 e0 29 e7 15 00 25 01 75 01 95 08 81 02     ....)...%.u.....
      e8:	95 01 75 08 81 01 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
      f8:	91 02 95 01 75 03 91 01 15 00 25 65 05 07 19 00     ....u.....%e....
     108:	29 65 95 06 75 08 81 00 c0                          )e..u....

00000111 <DeviceDescriptor>:
     111:	12 01 10 01 00 00 00 08 eb 03 66 20 01 00 01 02     ..........f ....
     121:	00 01                                               ..

00000123 <ConfigurationDescriptor>:
     123:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
     133:	00 00 09 21 11 01 00 01 22 79 00 07 05 81 03 10     ...!...."y......
     143:	00 01                                               ..

00000145 <LanguageString>:
     145:	04 03 09 04                                         ....

00000149 <ManufacturerString>:
     149:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     159:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000163 <ProductString>:
     163:	36 03 4c 00 55 00 46 00 41 00 20 00 4d 00 75 00     6.L.U.F.A. .M.u.
     173:	6c 00 74 00 69 00 20 00 48 00 49 00 44 00 20 00     l.t.i. .H.I.D. .
     183:	52 00 65 00 70 00 6f 00 72 00 74 00 20 00 44 00     R.e.p.o.r.t. .D.
     193:	65 00 6d 00 6f 00 00 00 00                          e.m.o....

0000019c <__ctors_end>:
     19c:	11 24       	eor	r1, r1
     19e:	1f be       	out	0x3f, r1	; 63
     1a0:	cf ef       	ldi	r28, 0xFF	; 255
     1a2:	d0 e2       	ldi	r29, 0x20	; 32
     1a4:	de bf       	out	0x3e, r29	; 62
     1a6:	cd bf       	out	0x3d, r28	; 61

000001a8 <__do_copy_data>:
     1a8:	11 e0       	ldi	r17, 0x01	; 1
     1aa:	a0 e0       	ldi	r26, 0x00	; 0
     1ac:	b1 e0       	ldi	r27, 0x01	; 1
     1ae:	e8 ea       	ldi	r30, 0xA8	; 168
     1b0:	f1 e1       	ldi	r31, 0x11	; 17
     1b2:	00 e0       	ldi	r16, 0x00	; 0
     1b4:	0b bf       	out	0x3b, r16	; 59
     1b6:	02 c0       	rjmp	.+4      	; 0x1bc <__do_copy_data+0x14>
     1b8:	07 90       	elpm	r0, Z+
     1ba:	0d 92       	st	X+, r0
     1bc:	ae 30       	cpi	r26, 0x0E	; 14
     1be:	b1 07       	cpc	r27, r17
     1c0:	d9 f7       	brne	.-10     	; 0x1b8 <__do_copy_data+0x10>

000001c2 <__do_clear_bss>:
     1c2:	11 e0       	ldi	r17, 0x01	; 1
     1c4:	ae e0       	ldi	r26, 0x0E	; 14
     1c6:	b1 e0       	ldi	r27, 0x01	; 1
     1c8:	01 c0       	rjmp	.+2      	; 0x1cc <.do_clear_bss_start>

000001ca <.do_clear_bss_loop>:
     1ca:	1d 92       	st	X+, r1

000001cc <.do_clear_bss_start>:
     1cc:	a3 32       	cpi	r26, 0x23	; 35
     1ce:	b1 07       	cpc	r27, r17
     1d0:	e1 f7       	brne	.-8      	; 0x1ca <.do_clear_bss_loop>
     1d2:	b9 d0       	rcall	.+370    	; 0x346 <main>
     1d4:	e7 c7       	rjmp	.+4046   	; 0x11a4 <_exit>

000001d6 <__bad_interrupt>:
     1d6:	14 cf       	rjmp	.-472    	; 0x0 <__vectors>

000001d8 <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     1d8:	8b b1       	in	r24, 0x0b	; 11
     1da:	8f 70       	andi	r24, 0x0F	; 15
     1dc:	80 6a       	ori	r24, 0xA0	; 160
     1de:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
    LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     1e0:	08 95       	ret

000001e2 <EVENT_USB_Device_Disconnect>:
     1e2:	8b b1       	in	r24, 0x0b	; 11
     1e4:	8f 70       	andi	r24, 0x0F	; 15
     1e6:	80 61       	ori	r24, 0x10	; 16
     1e8:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
    LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     1ea:	08 95       	ret

000001ec <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     1ec:	80 91 0b 01 	lds	r24, 0x010B
     1f0:	90 91 0c 01 	lds	r25, 0x010C
     1f4:	00 97       	sbiw	r24, 0x00	; 0
     1f6:	29 f0       	breq	.+10     	; 0x202 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     1f8:	01 97       	sbiw	r24, 0x01	; 1
     1fa:	90 93 0c 01 	sts	0x010C, r25
     1fe:	80 93 0b 01 	sts	0x010B, r24
     202:	08 95       	ret

00000204 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     204:	0f 93       	push	r16
     206:	1f 93       	push	r17
     208:	cf 93       	push	r28
     20a:	df 93       	push	r29
     20c:	db 01       	movw	r26, r22
     20e:	e8 01       	movw	r28, r16
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     210:	43 b1       	in	r20, 0x03	; 3
     212:	8c b1       	in	r24, 0x0c	; 12
     214:	80 95       	com	r24
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	80 73       	andi	r24, 0x30	; 48
     21a:	90 70       	andi	r25, 0x00	; 0
     21c:	95 95       	asr	r25
     21e:	87 95       	ror	r24
     220:	40 95       	com	r20
     222:	40 7e       	andi	r20, 0xE0	; 224
     224:	48 2b       	or	r20, r24
	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	if (!(ButtonStatus_LCL & BUTTONS_BUTTON1))
     226:	62 9b       	sbis	0x0c, 2	; 12
     228:	20 c0       	rjmp	.+64     	; 0x26a <CALLBACK_HID_Device_CreateHIDReport+0x66>
	{		
		USB_KeyboardReport_Data_t* KeyboardReport = (USB_KeyboardReport_Data_t*)ReportData;
     22a:	f9 01       	movw	r30, r18

		KeyboardReport->Modifier = HID_KEYBOARD_MODIFER_LEFTSHIFT;
     22c:	82 e0       	ldi	r24, 0x02	; 2
     22e:	80 83       	st	Z, r24

		if (JoyStatus_LCL & JOY_UP)
     230:	47 ff       	sbrs	r20, 7
     232:	02 c0       	rjmp	.+4      	; 0x238 <CALLBACK_HID_Device_CreateHIDReport+0x34>
		  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_A;
     234:	84 e0       	ldi	r24, 0x04	; 4
     236:	03 c0       	rjmp	.+6      	; 0x23e <CALLBACK_HID_Device_CreateHIDReport+0x3a>
		else if (JoyStatus_LCL & JOY_DOWN)
     238:	44 ff       	sbrs	r20, 4
     23a:	02 c0       	rjmp	.+4      	; 0x240 <CALLBACK_HID_Device_CreateHIDReport+0x3c>
		  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_B;
     23c:	85 e0       	ldi	r24, 0x05	; 5
     23e:	82 83       	std	Z+2, r24	; 0x02

		if (JoyStatus_LCL & JOY_LEFT)
     240:	94 2f       	mov	r25, r20
     242:	46 ff       	sbrs	r20, 6
     244:	02 c0       	rjmp	.+4      	; 0x24a <CALLBACK_HID_Device_CreateHIDReport+0x46>
		  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_C;
     246:	86 e0       	ldi	r24, 0x06	; 6
     248:	03 c0       	rjmp	.+6      	; 0x250 <CALLBACK_HID_Device_CreateHIDReport+0x4c>
		else if (JoyStatus_LCL & JOY_RIGHT)
     24a:	43 ff       	sbrs	r20, 3
     24c:	02 c0       	rjmp	.+4      	; 0x252 <CALLBACK_HID_Device_CreateHIDReport+0x4e>
		  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_D;
     24e:	87 e0       	ldi	r24, 0x07	; 7
     250:	82 83       	std	Z+2, r24	; 0x02

		if (JoyStatus_LCL & JOY_PRESS)
     252:	95 ff       	sbrs	r25, 5
     254:	02 c0       	rjmp	.+4      	; 0x25a <CALLBACK_HID_Device_CreateHIDReport+0x56>
		  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_E;
     256:	88 e0       	ldi	r24, 0x08	; 8
     258:	82 83       	std	Z+2, r24	; 0x02

		*ReportID   = HID_REPORTID_KeyboardReport;
     25a:	82 e0       	ldi	r24, 0x02	; 2
     25c:	8c 93       	st	X, r24
		*ReportSize = sizeof(USB_KeyboardReport_Data_t);
     25e:	88 e0       	ldi	r24, 0x08	; 8
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	99 83       	std	Y+1, r25	; 0x01
     264:	88 83       	st	Y, r24
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	1e c0       	rjmp	.+60     	; 0x2a6 <CALLBACK_HID_Device_CreateHIDReport+0xa2>
		return false;
	}
	else
	{
		USB_MouseReport_Data_t* MouseReport = (USB_MouseReport_Data_t*)ReportData;
     26a:	f9 01       	movw	r30, r18

		if (JoyStatus_LCL & JOY_UP)
     26c:	47 ff       	sbrs	r20, 7
     26e:	02 c0       	rjmp	.+4      	; 0x274 <CALLBACK_HID_Device_CreateHIDReport+0x70>
		  MouseReport->Y = -1;
     270:	8f ef       	ldi	r24, 0xFF	; 255
     272:	03 c0       	rjmp	.+6      	; 0x27a <CALLBACK_HID_Device_CreateHIDReport+0x76>
		else if (JoyStatus_LCL & JOY_DOWN)
     274:	44 ff       	sbrs	r20, 4
     276:	02 c0       	rjmp	.+4      	; 0x27c <CALLBACK_HID_Device_CreateHIDReport+0x78>
		  MouseReport->Y =  1;
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	82 83       	std	Z+2, r24	; 0x02

		if (JoyStatus_LCL & JOY_LEFT)
     27c:	94 2f       	mov	r25, r20
     27e:	46 ff       	sbrs	r20, 6
     280:	02 c0       	rjmp	.+4      	; 0x286 <CALLBACK_HID_Device_CreateHIDReport+0x82>
		  MouseReport->X = -1;
     282:	8f ef       	ldi	r24, 0xFF	; 255
     284:	03 c0       	rjmp	.+6      	; 0x28c <CALLBACK_HID_Device_CreateHIDReport+0x88>
		else if (JoyStatus_LCL & JOY_RIGHT)
     286:	43 ff       	sbrs	r20, 3
     288:	02 c0       	rjmp	.+4      	; 0x28e <CALLBACK_HID_Device_CreateHIDReport+0x8a>
		  MouseReport->X =  1;
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	81 83       	std	Z+1, r24	; 0x01

		if (JoyStatus_LCL & JOY_PRESS)
     28e:	95 ff       	sbrs	r25, 5
     290:	03 c0       	rjmp	.+6      	; 0x298 <CALLBACK_HID_Device_CreateHIDReport+0x94>
		  MouseReport->Button |= (1 << 0);
     292:	80 81       	ld	r24, Z
     294:	81 60       	ori	r24, 0x01	; 1
     296:	80 83       	st	Z, r24

		*ReportID   = HID_REPORTID_MouseReport;
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	8c 93       	st	X, r24
		*ReportSize = sizeof(USB_MouseReport_Data_t);
     29c:	83 e0       	ldi	r24, 0x03	; 3
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	99 83       	std	Y+1, r25	; 0x01
     2a2:	88 83       	st	Y, r24
     2a4:	81 e0       	ldi	r24, 0x01	; 1
		return true;
	}
}
     2a6:	df 91       	pop	r29
     2a8:	cf 91       	pop	r28
     2aa:	1f 91       	pop	r17
     2ac:	0f 91       	pop	r16
     2ae:	08 95       	ret

000002b0 <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
     2b0:	f9 01       	movw	r30, r18
	uint8_t  LEDMask   = LEDS_NO_LEDS;
	uint8_t* LEDReport = (uint8_t*)ReportData;

	if (*LEDReport & HID_KEYBOARD_LED_NUMLOCK)
     2b2:	80 81       	ld	r24, Z
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	80 fd       	sbrc	r24, 0
     2b8:	90 e1       	ldi	r25, 0x10	; 16
	  LEDMask |= LEDS_LED1;

	if (*LEDReport & HID_KEYBOARD_LED_CAPSLOCK)
     2ba:	81 fd       	sbrc	r24, 1
	  LEDMask |= LEDS_LED3;
     2bc:	90 68       	ori	r25, 0x80	; 128

	if (*LEDReport & HID_KEYBOARD_LED_SCROLLLOCK)
     2be:	82 fd       	sbrc	r24, 2
	  LEDMask |= LEDS_LED4;
     2c0:	90 64       	ori	r25, 0x40	; 64
     2c2:	8b b1       	in	r24, 0x0b	; 11
     2c4:	8f 70       	andi	r24, 0x0F	; 15
     2c6:	98 2b       	or	r25, r24
     2c8:	9b b9       	out	0x0b, r25	; 11

	LEDs_SetAllLEDs(LEDMask);
}
     2ca:	08 95       	ret

000002cc <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Device_HID_Interface);
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	91 e0       	ldi	r25, 0x01	; 1
}
     2d0:	12 c6       	rjmp	.+3108   	; 0xef6 <HID_Device_ProcessControlRequest>

000002d2 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Device_HID_Interface);
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	d7 d5       	rcall	.+2990   	; 0xe86 <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     2d8:	90 91 e2 00 	lds	r25, 0x00E2
     2dc:	94 60       	ori	r25, 0x04	; 4
     2de:	90 93 e2 00 	sts	0x00E2, r25

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     2e2:	80 fd       	sbrc	r24, 0
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <EVENT_USB_Device_ConfigurationChanged+0x18>
     2e6:	90 e9       	ldi	r25, 0x90	; 144
     2e8:	01 c0       	rjmp	.+2      	; 0x2ec <EVENT_USB_Device_ConfigurationChanged+0x1a>
     2ea:	90 e6       	ldi	r25, 0x60	; 96
     2ec:	8b b1       	in	r24, 0x0b	; 11
     2ee:	8f 70       	andi	r24, 0x0F	; 15
     2f0:	98 2b       	or	r25, r24
     2f2:	9b b9       	out	0x0b, r25	; 11
}
     2f4:	08 95       	ret

000002f6 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware()
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     2f6:	84 b7       	in	r24, 0x34	; 52
     2f8:	87 7f       	andi	r24, 0xF7	; 247
     2fa:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     2fc:	88 e1       	ldi	r24, 0x18	; 24
     2fe:	0f b6       	in	r0, 0x3f	; 63
     300:	f8 94       	cli
     302:	80 93 60 00 	sts	0x0060, r24
     306:	10 92 60 00 	sts	0x0060, r1
     30a:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	20 e8       	ldi	r18, 0x80	; 128
     312:	0f b6       	in	r0, 0x3f	; 63
     314:	f8 94       	cli
     316:	20 93 61 00 	sts	0x0061, r18
     31a:	80 93 61 00 	sts	0x0061, r24
     31e:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
     320:	84 b1       	in	r24, 0x04	; 4
     322:	8f 71       	andi	r24, 0x1F	; 31
     324:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
     326:	8d b1       	in	r24, 0x0d	; 13
     328:	8f 7c       	andi	r24, 0xCF	; 207
     32a:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
     32c:	85 b1       	in	r24, 0x05	; 5
     32e:	80 6e       	ori	r24, 0xE0	; 224
     330:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
     332:	8e b1       	in	r24, 0x0e	; 14
     334:	80 63       	ori	r24, 0x30	; 48
     336:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     338:	8a b1       	in	r24, 0x0a	; 10
     33a:	80 6f       	ori	r24, 0xF0	; 240
     33c:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     33e:	8b b1       	in	r24, 0x0b	; 11
     340:	8f 70       	andi	r24, 0x0F	; 15
     342:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	USB_Init();
}
     344:	1c c1       	rjmp	.+568    	; 0x57e <USB_Init>

00000346 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     346:	d7 df       	rcall	.-82     	; 0x2f6 <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     348:	8b b1       	in	r24, 0x0b	; 11
     34a:	8f 70       	andi	r24, 0x0F	; 15
     34c:	80 61       	ori	r24, 0x10	; 16
     34e:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     350:	78 94       	sei

	for (;;)
	{
		HID_Device_USBTask(&Device_HID_Interface);
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	91 e0       	ldi	r25, 0x01	; 1
     356:	dd d4       	rcall	.+2490   	; 0xd12 <HID_Device_USBTask>
		USB_USBTask();
     358:	c9 d4       	rcall	.+2450   	; 0xcec <USB_USBTask>
     35a:	fb cf       	rjmp	.-10     	; 0x352 <main+0xc>

0000035c <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     35c:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     35e:	93 30       	cpi	r25, 0x03	; 3
     360:	b1 f0       	breq	.+44     	; 0x38e <CALLBACK_USB_GetDescriptor+0x32>
     362:	94 30       	cpi	r25, 0x04	; 4
     364:	28 f4       	brcc	.+10     	; 0x370 <CALLBACK_USB_GetDescriptor+0x14>
     366:	91 30       	cpi	r25, 0x01	; 1
     368:	41 f0       	breq	.+16     	; 0x37a <CALLBACK_USB_GetDescriptor+0x1e>
     36a:	92 30       	cpi	r25, 0x02	; 2
     36c:	79 f5       	brne	.+94     	; 0x3cc <CALLBACK_USB_GetDescriptor+0x70>
     36e:	0a c0       	rjmp	.+20     	; 0x384 <CALLBACK_USB_GetDescriptor+0x28>
     370:	91 32       	cpi	r25, 0x21	; 33
     372:	11 f1       	breq	.+68     	; 0x3b8 <CALLBACK_USB_GetDescriptor+0x5c>
     374:	92 32       	cpi	r25, 0x22	; 34
     376:	51 f5       	brne	.+84     	; 0x3cc <CALLBACK_USB_GetDescriptor+0x70>
     378:	24 c0       	rjmp	.+72     	; 0x3c2 <CALLBACK_USB_GetDescriptor+0x66>
     37a:	e1 e1       	ldi	r30, 0x11	; 17
     37c:	f1 e0       	ldi	r31, 0x01	; 1
     37e:	22 e1       	ldi	r18, 0x12	; 18
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	28 c0       	rjmp	.+80     	; 0x3d4 <CALLBACK_USB_GetDescriptor+0x78>
     384:	e3 e2       	ldi	r30, 0x23	; 35
     386:	f1 e0       	ldi	r31, 0x01	; 1
     388:	22 e2       	ldi	r18, 0x22	; 34
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	23 c0       	rjmp	.+70     	; 0x3d4 <CALLBACK_USB_GetDescriptor+0x78>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     38e:	81 30       	cpi	r24, 0x01	; 1
     390:	49 f0       	breq	.+18     	; 0x3a4 <CALLBACK_USB_GetDescriptor+0x48>
     392:	81 30       	cpi	r24, 0x01	; 1
     394:	18 f0       	brcs	.+6      	; 0x39c <CALLBACK_USB_GetDescriptor+0x40>
     396:	82 30       	cpi	r24, 0x02	; 2
     398:	c9 f4       	brne	.+50     	; 0x3cc <CALLBACK_USB_GetDescriptor+0x70>
     39a:	0a c0       	rjmp	.+20     	; 0x3b0 <CALLBACK_USB_GetDescriptor+0x54>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     39c:	e5 e4       	ldi	r30, 0x45	; 69
     39e:	f1 e0       	ldi	r31, 0x01	; 1
     3a0:	84 91       	lpm	r24, Z+
     3a2:	03 c0       	rjmp	.+6      	; 0x3aa <CALLBACK_USB_GetDescriptor+0x4e>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     3a4:	e9 e4       	ldi	r30, 0x49	; 73
     3a6:	f1 e0       	ldi	r31, 0x01	; 1
     3a8:	84 91       	lpm	r24, Z+
     3aa:	28 2f       	mov	r18, r24
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	12 c0       	rjmp	.+36     	; 0x3d4 <CALLBACK_USB_GetDescriptor+0x78>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     3b0:	e3 e6       	ldi	r30, 0x63	; 99
     3b2:	f1 e0       	ldi	r31, 0x01	; 1
     3b4:	84 91       	lpm	r24, Z+
     3b6:	f9 cf       	rjmp	.-14     	; 0x3aa <CALLBACK_USB_GetDescriptor+0x4e>
     3b8:	e5 e3       	ldi	r30, 0x35	; 53
     3ba:	f1 e0       	ldi	r31, 0x01	; 1
     3bc:	29 e0       	ldi	r18, 0x09	; 9
     3be:	30 e0       	ldi	r19, 0x00	; 0
     3c0:	09 c0       	rjmp	.+18     	; 0x3d4 <CALLBACK_USB_GetDescriptor+0x78>

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_HIDData;
			Size    = sizeof(USB_HID_Descriptor_HID_t);			
			break;
     3c2:	e8 e9       	ldi	r30, 0x98	; 152
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	29 e7       	ldi	r18, 0x79	; 121
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <CALLBACK_USB_GetDescriptor+0x78>
     3cc:	e0 e0       	ldi	r30, 0x00	; 0
     3ce:	f0 e0       	ldi	r31, 0x00	; 0
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	30 e0       	ldi	r19, 0x00	; 0
			Address = &HIDReport;
			Size    = sizeof(HIDReport);
			break;
	}

	*DescriptorAddress = Address;
     3d4:	ed 93       	st	X+, r30
     3d6:	fc 93       	st	X, r31
	return Size;
}
     3d8:	c9 01       	movw	r24, r18
     3da:	08 95       	ret

000003dc <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
     3dc:	38 2f       	mov	r19, r24
     3de:	28 2f       	mov	r18, r24
     3e0:	2c c0       	rjmp	.+88     	; 0x43a <Endpoint_ConfigureEndpoint_Prv+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     3e2:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);
		
		if (EPNum == Number)
     3e6:	23 17       	cp	r18, r19
     3e8:	21 f4       	brne	.+8      	; 0x3f2 <Endpoint_ConfigureEndpoint_Prv+0x16>
     3ea:	76 2f       	mov	r23, r22
     3ec:	94 2f       	mov	r25, r20
     3ee:	50 e0       	ldi	r21, 0x00	; 0
     3f0:	06 c0       	rjmp	.+12     	; 0x3fe <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     3f2:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     3f6:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
     3fa:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     3fe:	91 ff       	sbrs	r25, 1
     400:	1b c0       	rjmp	.+54     	; 0x438 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     402:	80 91 eb 00 	lds	r24, 0x00EB
     406:	8e 7f       	andi	r24, 0xFE	; 254
     408:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= (1 << ALLOC);
     40c:	80 91 ed 00 	lds	r24, 0x00ED
     410:	82 70       	andi	r24, 0x02	; 2
     412:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     416:	80 91 eb 00 	lds	r24, 0x00EB
     41a:	81 60       	ori	r24, 0x01	; 1
     41c:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     420:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     424:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
     428:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     42c:	80 91 ee 00 	lds	r24, 0x00EE
			
		if (!(Endpoint_IsConfigured()))
     430:	87 fd       	sbrc	r24, 7
     432:	02 c0       	rjmp	.+4      	; 0x438 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else	
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     438:	2f 5f       	subi	r18, 0xFF	; 255
     43a:	27 30       	cpi	r18, 0x07	; 7
     43c:	90 f2       	brcs	.-92     	; 0x3e2 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     43e:	30 93 e9 00 	sts	0x00E9, r19
     442:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     444:	08 95       	ret

00000446 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     446:	80 91 1b 01 	lds	r24, 0x011B
     44a:	88 23       	and	r24, r24
     44c:	9c f4       	brge	.+38     	; 0x474 <Endpoint_ClearStatusStage+0x2e>
     44e:	04 c0       	rjmp	.+8      	; 0x458 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     450:	80 91 1a 01 	lds	r24, 0x011A
     454:	88 23       	and	r24, r24
     456:	b9 f0       	breq	.+46     	; 0x486 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     458:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     45c:	82 ff       	sbrs	r24, 2
     45e:	f8 cf       	rjmp	.-16     	; 0x450 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     460:	80 91 e8 00 	lds	r24, 0x00E8
     464:	8b 77       	andi	r24, 0x7B	; 123
     466:	80 93 e8 00 	sts	0x00E8, r24
     46a:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     46c:	80 91 1a 01 	lds	r24, 0x011A
     470:	88 23       	and	r24, r24
     472:	49 f0       	breq	.+18     	; 0x486 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     474:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     478:	80 ff       	sbrs	r24, 0
     47a:	f8 cf       	rjmp	.-16     	; 0x46c <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     47c:	80 91 e8 00 	lds	r24, 0x00E8
     480:	8e 77       	andi	r24, 0x7E	; 126
     482:	80 93 e8 00 	sts	0x00E8, r24
     486:	08 95       	ret

00000488 <Endpoint_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     488:	40 91 e4 00 	lds	r20, 0x00E4
     48c:	50 91 e5 00 	lds	r21, 0x00E5
     490:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
     492:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
     496:	80 ff       	sbrs	r24, 0
     498:	05 c0       	rjmp	.+10     	; 0x4a4 <Endpoint_WaitUntilReady+0x1c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     49a:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
     49e:	80 ff       	sbrs	r24, 0
     4a0:	05 c0       	rjmp	.+10     	; 0x4ac <Endpoint_WaitUntilReady+0x24>
     4a2:	22 c0       	rjmp	.+68     	; 0x4e8 <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     4a4:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     4a8:	82 fd       	sbrc	r24, 2
     4aa:	1e c0       	rjmp	.+60     	; 0x4e8 <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     4ac:	80 91 1a 01 	lds	r24, 0x011A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     4b0:	88 23       	and	r24, r24
     4b2:	11 f4       	brne	.+4      	; 0x4b8 <Endpoint_WaitUntilReady+0x30>
     4b4:	82 e0       	ldi	r24, 0x02	; 2
     4b6:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     4b8:	85 30       	cpi	r24, 0x05	; 5
     4ba:	11 f4       	brne	.+4      	; 0x4c0 <Endpoint_WaitUntilReady+0x38>
     4bc:	83 e0       	ldi	r24, 0x03	; 3
     4be:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     4c0:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     4c4:	85 ff       	sbrs	r24, 5
     4c6:	02 c0       	rjmp	.+4      	; 0x4cc <Endpoint_WaitUntilReady+0x44>
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	08 95       	ret
     4cc:	80 91 e4 00 	lds	r24, 0x00E4
     4d0:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     4d4:	84 17       	cp	r24, r20
     4d6:	95 07       	cpc	r25, r21
     4d8:	e1 f2       	breq	.-72     	; 0x492 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     4da:	22 23       	and	r18, r18
     4dc:	11 f4       	brne	.+4      	; 0x4e2 <Endpoint_WaitUntilReady+0x5a>
     4de:	84 e0       	ldi	r24, 0x04	; 4
     4e0:	08 95       	ret
     4e2:	21 50       	subi	r18, 0x01	; 1
     4e4:	ac 01       	movw	r20, r24
     4e6:	d5 cf       	rjmp	.-86     	; 0x492 <Endpoint_WaitUntilReady+0xa>
     4e8:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     4ea:	08 95       	ret

000004ec <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     4ec:	ef 92       	push	r14
     4ee:	ff 92       	push	r15
     4f0:	0f 93       	push	r16
     4f2:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     4f4:	4d d0       	rcall	.+154    	; 0x590 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     4f6:	54 d0       	rcall	.+168    	; 0x5a0 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
     4f8:	08 ed       	ldi	r16, 0xD8	; 216
     4fa:	10 e0       	ldi	r17, 0x00	; 0
     4fc:	f8 01       	movw	r30, r16
     4fe:	80 81       	ld	r24, Z

				USBCON = (Temp & ~(1 << USBE));
     500:	98 2f       	mov	r25, r24
     502:	9f 77       	andi	r25, 0x7F	; 127
     504:	90 83       	st	Z, r25
				USBCON = (Temp |  (1 << USBE));
     506:	80 68       	ori	r24, 0x80	; 128
     508:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     50a:	80 81       	ld	r24, Z
     50c:	8f 7d       	andi	r24, 0xDF	; 223
     50e:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     510:	e7 ed       	ldi	r30, 0xD7	; 215
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	80 81       	ld	r24, Z
     516:	80 68       	ori	r24, 0x80	; 128
     518:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     51a:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
     51c:	10 92 1a 01 	sts	0x011A, r1
	USB_ConfigurationNumber  = 0;
     520:	10 92 18 01 	sts	0x0118, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
     524:	10 92 17 01 	sts	0x0117, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
     528:	10 92 16 01 	sts	0x0116, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     52c:	80 ee       	ldi	r24, 0xE0	; 224
     52e:	e8 2e       	mov	r14, r24
     530:	f1 2c       	mov	r15, r1
     532:	f7 01       	movw	r30, r14
     534:	80 81       	ld	r24, Z
     536:	8b 7f       	andi	r24, 0xFB	; 251
     538:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     53a:	f8 01       	movw	r30, r16
     53c:	80 81       	ld	r24, Z
     53e:	81 60       	ori	r24, 0x01	; 1
     540:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	60 e0       	ldi	r22, 0x00	; 0
     546:	42 e0       	ldi	r20, 0x02	; 2
     548:	49 df       	rcall	.-366    	; 0x3dc <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     54a:	e1 ee       	ldi	r30, 0xE1	; 225
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	80 81       	ld	r24, Z
     550:	8e 7f       	andi	r24, 0xFE	; 254
     552:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     554:	e2 ee       	ldi	r30, 0xE2	; 226
     556:	f0 e0       	ldi	r31, 0x00	; 0
     558:	80 81       	ld	r24, Z
     55a:	81 60       	ori	r24, 0x01	; 1
     55c:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     55e:	80 81       	ld	r24, Z
     560:	88 60       	ori	r24, 0x08	; 8
     562:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     564:	f7 01       	movw	r30, r14
     566:	80 81       	ld	r24, Z
     568:	8e 7f       	andi	r24, 0xFE	; 254
     56a:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     56c:	f8 01       	movw	r30, r16
     56e:	80 81       	ld	r24, Z
     570:	80 61       	ori	r24, 0x10	; 16
     572:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     574:	1f 91       	pop	r17
     576:	0f 91       	pop	r16
     578:	ff 90       	pop	r15
     57a:	ef 90       	pop	r14
     57c:	08 95       	ret

0000057e <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     57e:	e7 ed       	ldi	r30, 0xD7	; 215
     580:	f0 e0       	ldi	r31, 0x00	; 0
     582:	80 81       	ld	r24, Z
     584:	81 60       	ori	r24, 0x01	; 1
     586:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	80 93 19 01 	sts	0x0119, r24

	USB_ResetInterface();
}
     58e:	ae cf       	rjmp	.-164    	; 0x4ec <USB_ResetInterface>

00000590 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     590:	e8 ed       	ldi	r30, 0xD8	; 216
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	80 81       	ld	r24, Z
     596:	8c 7f       	andi	r24, 0xFC	; 252
     598:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     59a:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     59e:	08 95       	ret

000005a0 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     5a0:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     5a4:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     5a8:	08 95       	ret

000005aa <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     5aa:	1f 92       	push	r1
     5ac:	0f 92       	push	r0
     5ae:	0f b6       	in	r0, 0x3f	; 63
     5b0:	0f 92       	push	r0
     5b2:	0b b6       	in	r0, 0x3b	; 59
     5b4:	0f 92       	push	r0
     5b6:	11 24       	eor	r1, r1
     5b8:	2f 93       	push	r18
     5ba:	3f 93       	push	r19
     5bc:	4f 93       	push	r20
     5be:	5f 93       	push	r21
     5c0:	6f 93       	push	r22
     5c2:	7f 93       	push	r23
     5c4:	8f 93       	push	r24
     5c6:	9f 93       	push	r25
     5c8:	af 93       	push	r26
     5ca:	bf 93       	push	r27
     5cc:	ef 93       	push	r30
     5ce:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     5d0:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     5d4:	82 ff       	sbrs	r24, 2
     5d6:	0a c0       	rjmp	.+20     	; 0x5ec <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     5d8:	80 91 e2 00 	lds	r24, 0x00E2
     5dc:	82 ff       	sbrs	r24, 2
     5de:	06 c0       	rjmp	.+12     	; 0x5ec <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     5e0:	80 91 e1 00 	lds	r24, 0x00E1
     5e4:	8b 7f       	andi	r24, 0xFB	; 251
     5e6:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     5ea:	00 de       	rcall	.-1024   	; 0x1ec <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     5ec:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     5f0:	80 ff       	sbrs	r24, 0
     5f2:	1e c0       	rjmp	.+60     	; 0x630 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     5f4:	80 91 d8 00 	lds	r24, 0x00D8
     5f8:	80 ff       	sbrs	r24, 0
     5fa:	1a c0       	rjmp	.+52     	; 0x630 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     5fc:	80 91 da 00 	lds	r24, 0x00DA
     600:	8e 7f       	andi	r24, 0xFE	; 254
     602:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     606:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     60a:	80 ff       	sbrs	r24, 0
     60c:	0d c0       	rjmp	.+26     	; 0x628 <__vector_10+0x7e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     60e:	8c e0       	ldi	r24, 0x0C	; 12
     610:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     612:	89 b5       	in	r24, 0x29	; 41
     614:	82 60       	ori	r24, 0x02	; 2
     616:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     618:	09 b4       	in	r0, 0x29	; 41
     61a:	00 fe       	sbrs	r0, 0
     61c:	fd cf       	rjmp	.-6      	; 0x618 <__vector_10+0x6e>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	80 93 1a 01 	sts	0x011A, r24
			EVENT_USB_Device_Connect();
     624:	d9 dd       	rcall	.-1102   	; 0x1d8 <EVENT_USB_Device_Connect>
     626:	04 c0       	rjmp	.+8      	; 0x630 <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     628:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     62a:	10 92 1a 01 	sts	0x011A, r1
			EVENT_USB_Device_Disconnect();
     62e:	d9 dd       	rcall	.-1102   	; 0x1e2 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     630:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     634:	80 ff       	sbrs	r24, 0
     636:	18 c0       	rjmp	.+48     	; 0x668 <__vector_10+0xbe>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     638:	80 91 e2 00 	lds	r24, 0x00E2
     63c:	80 ff       	sbrs	r24, 0
     63e:	14 c0       	rjmp	.+40     	; 0x668 <__vector_10+0xbe>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     640:	80 91 e2 00 	lds	r24, 0x00E2
     644:	8e 7f       	andi	r24, 0xFE	; 254
     646:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     64a:	80 91 e2 00 	lds	r24, 0x00E2
     64e:	80 61       	ori	r24, 0x10	; 16
     650:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
     654:	80 91 d8 00 	lds	r24, 0x00D8
     658:	80 62       	ori	r24, 0x20	; 32
     65a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     65e:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     660:	85 e0       	ldi	r24, 0x05	; 5
     662:	80 93 1a 01 	sts	0x011A, r24
		EVENT_USB_Device_Suspend();
     666:	ef d1       	rcall	.+990    	; 0xa46 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     668:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     66c:	84 ff       	sbrs	r24, 4
     66e:	2e c0       	rjmp	.+92     	; 0x6cc <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     670:	80 91 e2 00 	lds	r24, 0x00E2
     674:	84 ff       	sbrs	r24, 4
     676:	2a c0       	rjmp	.+84     	; 0x6cc <__vector_10+0x122>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     678:	8c e0       	ldi	r24, 0x0C	; 12
     67a:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     67c:	89 b5       	in	r24, 0x29	; 41
     67e:	82 60       	ori	r24, 0x02	; 2
     680:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     682:	09 b4       	in	r0, 0x29	; 41
     684:	00 fe       	sbrs	r0, 0
     686:	fd cf       	rjmp	.-6      	; 0x682 <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     688:	80 91 d8 00 	lds	r24, 0x00D8
     68c:	8f 7d       	andi	r24, 0xDF	; 223
     68e:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     692:	80 91 e1 00 	lds	r24, 0x00E1
     696:	8f 7e       	andi	r24, 0xEF	; 239
     698:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     69c:	80 91 e2 00 	lds	r24, 0x00E2
     6a0:	8f 7e       	andi	r24, 0xEF	; 239
     6a2:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     6a6:	80 91 e2 00 	lds	r24, 0x00E2
     6aa:	81 60       	ori	r24, 0x01	; 1
     6ac:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_ConfigurationNumber)
     6b0:	80 91 18 01 	lds	r24, 0x0118
     6b4:	88 23       	and	r24, r24
     6b6:	31 f4       	brne	.+12     	; 0x6c4 <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     6b8:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     6bc:	87 fd       	sbrc	r24, 7
     6be:	02 c0       	rjmp	.+4      	; 0x6c4 <__vector_10+0x11a>
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	01 c0       	rjmp	.+2      	; 0x6c6 <__vector_10+0x11c>
     6c4:	84 e0       	ldi	r24, 0x04	; 4
     6c6:	80 93 1a 01 	sts	0x011A, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     6ca:	bd d1       	rcall	.+890    	; 0xa46 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     6cc:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     6d0:	83 ff       	sbrs	r24, 3
     6d2:	22 c0       	rjmp	.+68     	; 0x718 <__vector_10+0x16e>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     6d4:	80 91 e2 00 	lds	r24, 0x00E2
     6d8:	83 ff       	sbrs	r24, 3
     6da:	1e c0       	rjmp	.+60     	; 0x718 <__vector_10+0x16e>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     6dc:	80 91 e1 00 	lds	r24, 0x00E1
     6e0:	87 7f       	andi	r24, 0xF7	; 247
     6e2:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState         = DEVICE_STATE_Default;
     6e6:	82 e0       	ldi	r24, 0x02	; 2
     6e8:	80 93 1a 01 	sts	0x011A, r24
		USB_ConfigurationNumber = 0;
     6ec:	10 92 18 01 	sts	0x0118, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     6f0:	80 91 e1 00 	lds	r24, 0x00E1
     6f4:	8e 7f       	andi	r24, 0xFE	; 254
     6f6:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     6fa:	80 91 e2 00 	lds	r24, 0x00E2
     6fe:	8e 7f       	andi	r24, 0xFE	; 254
     700:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     704:	80 91 e2 00 	lds	r24, 0x00E2
     708:	80 61       	ori	r24, 0x10	; 16
     70a:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	60 e0       	ldi	r22, 0x00	; 0
     712:	42 e0       	ldi	r20, 0x02	; 2
     714:	63 de       	rcall	.-826    	; 0x3dc <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     716:	97 d1       	rcall	.+814    	; 0xa46 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     718:	ff 91       	pop	r31
     71a:	ef 91       	pop	r30
     71c:	bf 91       	pop	r27
     71e:	af 91       	pop	r26
     720:	9f 91       	pop	r25
     722:	8f 91       	pop	r24
     724:	7f 91       	pop	r23
     726:	6f 91       	pop	r22
     728:	5f 91       	pop	r21
     72a:	4f 91       	pop	r20
     72c:	3f 91       	pop	r19
     72e:	2f 91       	pop	r18
     730:	0f 90       	pop	r0
     732:	0b be       	out	0x3b, r0	; 59
     734:	0f 90       	pop	r0
     736:	0f be       	out	0x3f, r0	; 63
     738:	0f 90       	pop	r0
     73a:	1f 90       	pop	r1
     73c:	18 95       	reti

0000073e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     73e:	0f 93       	push	r16
     740:	1f 93       	push	r17
     742:	df 93       	push	r29
     744:	cf 93       	push	r28
     746:	cd b7       	in	r28, 0x3d	; 61
     748:	de b7       	in	r29, 0x3e	; 62
     74a:	ac 97       	sbiw	r28, 0x2c	; 44
     74c:	0f b6       	in	r0, 0x3f	; 63
     74e:	f8 94       	cli
     750:	de bf       	out	0x3e, r29	; 62
     752:	0f be       	out	0x3f, r0	; 63
     754:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     756:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
     75a:	80 93 1b 01 	sts	0x011B, r24
     75e:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
     762:	80 93 1c 01 	sts	0x011C, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
     766:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
     76a:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
     76e:	ed e1       	ldi	r30, 0x1D	; 29
     770:	f1 e0       	ldi	r31, 0x01	; 1
     772:	80 93 1d 01 	sts	0x011D, r24
     776:	90 93 1e 01 	sts	0x011E, r25
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
     77a:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
     77e:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
     782:	80 93 1f 01 	sts	0x011F, r24
     786:	93 83       	std	Z+3, r25	; 0x03
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
     788:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
     78c:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
     790:	80 93 21 01 	sts	0x0121, r24
     794:	95 83       	std	Z+5, r25	; 0x05

	EVENT_USB_Device_ControlRequest();
     796:	9a dd       	rcall	.-1228   	; 0x2cc <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     798:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     79c:	83 ff       	sbrs	r24, 3
     79e:	3a c1       	rjmp	.+628    	; 0xa14 <USB_Device_ProcessControlRequest+0x2d6>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     7a0:	80 91 1b 01 	lds	r24, 0x011B

		switch (USB_ControlRequest.bRequest)
     7a4:	30 91 1c 01 	lds	r19, 0x011C
     7a8:	35 30       	cpi	r19, 0x05	; 5
     7aa:	09 f4       	brne	.+2      	; 0x7ae <USB_Device_ProcessControlRequest+0x70>
     7ac:	87 c0       	rjmp	.+270    	; 0x8bc <USB_Device_ProcessControlRequest+0x17e>
     7ae:	36 30       	cpi	r19, 0x06	; 6
     7b0:	40 f4       	brcc	.+16     	; 0x7c2 <USB_Device_ProcessControlRequest+0x84>
     7b2:	31 30       	cpi	r19, 0x01	; 1
     7b4:	c9 f1       	breq	.+114    	; 0x828 <USB_Device_ProcessControlRequest+0xea>
     7b6:	31 30       	cpi	r19, 0x01	; 1
     7b8:	70 f0       	brcs	.+28     	; 0x7d6 <USB_Device_ProcessControlRequest+0x98>
     7ba:	33 30       	cpi	r19, 0x03	; 3
     7bc:	09 f0       	breq	.+2      	; 0x7c0 <USB_Device_ProcessControlRequest+0x82>
     7be:	2a c1       	rjmp	.+596    	; 0xa14 <USB_Device_ProcessControlRequest+0x2d6>
     7c0:	33 c0       	rjmp	.+102    	; 0x828 <USB_Device_ProcessControlRequest+0xea>
     7c2:	38 30       	cpi	r19, 0x08	; 8
     7c4:	09 f4       	brne	.+2      	; 0x7c8 <USB_Device_ProcessControlRequest+0x8a>
     7c6:	f8 c0       	rjmp	.+496    	; 0x9b8 <USB_Device_ProcessControlRequest+0x27a>
     7c8:	39 30       	cpi	r19, 0x09	; 9
     7ca:	09 f4       	brne	.+2      	; 0x7ce <USB_Device_ProcessControlRequest+0x90>
     7cc:	07 c1       	rjmp	.+526    	; 0x9dc <USB_Device_ProcessControlRequest+0x29e>
     7ce:	36 30       	cpi	r19, 0x06	; 6
     7d0:	09 f0       	breq	.+2      	; 0x7d4 <USB_Device_ProcessControlRequest+0x96>
     7d2:	20 c1       	rjmp	.+576    	; 0xa14 <USB_Device_ProcessControlRequest+0x2d6>
     7d4:	99 c0       	rjmp	.+306    	; 0x908 <USB_Device_ProcessControlRequest+0x1ca>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     7d6:	80 38       	cpi	r24, 0x80	; 128
     7d8:	21 f0       	breq	.+8      	; 0x7e2 <USB_Device_ProcessControlRequest+0xa4>
     7da:	82 38       	cpi	r24, 0x82	; 130
     7dc:	09 f0       	breq	.+2      	; 0x7e0 <USB_Device_ProcessControlRequest+0xa2>
     7de:	1a c1       	rjmp	.+564    	; 0xa14 <USB_Device_ProcessControlRequest+0x2d6>
     7e0:	08 c0       	rjmp	.+16     	; 0x7f2 <USB_Device_ProcessControlRequest+0xb4>
     7e2:	90 91 16 01 	lds	r25, 0x0116
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_RemoteWakeupEnabled)
     7e6:	80 91 17 01 	lds	r24, 0x0117
     7ea:	88 23       	and	r24, r24
     7ec:	99 f0       	breq	.+38     	; 0x814 <USB_Device_ProcessControlRequest+0xd6>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     7ee:	92 60       	ori	r25, 0x02	; 2
     7f0:	11 c0       	rjmp	.+34     	; 0x814 <USB_Device_ProcessControlRequest+0xd6>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     7f2:	80 91 1f 01 	lds	r24, 0x011F
     7f6:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     7f8:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     7fc:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	25 e0       	ldi	r18, 0x05	; 5
     804:	96 95       	lsr	r25
     806:	87 95       	ror	r24
     808:	2a 95       	dec	r18
     80a:	e1 f7       	brne	.-8      	; 0x804 <USB_Device_ProcessControlRequest+0xc6>
     80c:	98 2f       	mov	r25, r24
     80e:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     810:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     814:	80 91 e8 00 	lds	r24, 0x00E8
     818:	87 7f       	andi	r24, 0xF7	; 247
     81a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     81e:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
     822:	10 92 f1 00 	sts	0x00F1, r1
     826:	d3 c0       	rjmp	.+422    	; 0x9ce <USB_Device_ProcessControlRequest+0x290>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     828:	88 23       	and	r24, r24
     82a:	19 f0       	breq	.+6      	; 0x832 <USB_Device_ProcessControlRequest+0xf4>
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	09 f0       	breq	.+2      	; 0x832 <USB_Device_ProcessControlRequest+0xf4>
     830:	f1 c0       	rjmp	.+482    	; 0xa14 <USB_Device_ProcessControlRequest+0x2d6>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	8f 71       	andi	r24, 0x1F	; 31
     836:	90 70       	andi	r25, 0x00	; 0
     838:	00 97       	sbiw	r24, 0x00	; 0
     83a:	21 f0       	breq	.+8      	; 0x844 <USB_Device_ProcessControlRequest+0x106>
     83c:	02 97       	sbiw	r24, 0x02	; 2
     83e:	09 f0       	breq	.+2      	; 0x842 <USB_Device_ProcessControlRequest+0x104>
     840:	e9 c0       	rjmp	.+466    	; 0xa14 <USB_Device_ProcessControlRequest+0x2d6>
     842:	0c c0       	rjmp	.+24     	; 0x85c <USB_Device_ProcessControlRequest+0x11e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     844:	80 91 1d 01 	lds	r24, 0x011D
     848:	81 30       	cpi	r24, 0x01	; 1
     84a:	09 f0       	breq	.+2      	; 0x84e <USB_Device_ProcessControlRequest+0x110>
     84c:	e3 c0       	rjmp	.+454    	; 0xa14 <USB_Device_ProcessControlRequest+0x2d6>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     84e:	10 92 17 01 	sts	0x0117, r1
     852:	33 30       	cpi	r19, 0x03	; 3
     854:	69 f5       	brne	.+90     	; 0x8b0 <USB_Device_ProcessControlRequest+0x172>
     856:	80 93 17 01 	sts	0x0117, r24
     85a:	2a c0       	rjmp	.+84     	; 0x8b0 <USB_Device_ProcessControlRequest+0x172>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     85c:	80 91 1d 01 	lds	r24, 0x011D
     860:	88 23       	and	r24, r24
     862:	31 f5       	brne	.+76     	; 0x8b0 <USB_Device_ProcessControlRequest+0x172>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     864:	20 91 1f 01 	lds	r18, 0x011F
     868:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     86a:	09 f4       	brne	.+2      	; 0x86e <USB_Device_ProcessControlRequest+0x130>
     86c:	d3 c0       	rjmp	.+422    	; 0xa14 <USB_Device_ProcessControlRequest+0x2d6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     86e:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     872:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     876:	80 ff       	sbrs	r24, 0
     878:	1b c0       	rjmp	.+54     	; 0x8b0 <USB_Device_ProcessControlRequest+0x172>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     87a:	33 30       	cpi	r19, 0x03	; 3
     87c:	21 f4       	brne	.+8      	; 0x886 <USB_Device_ProcessControlRequest+0x148>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     87e:	80 91 eb 00 	lds	r24, 0x00EB
     882:	80 62       	ori	r24, 0x20	; 32
     884:	13 c0       	rjmp	.+38     	; 0x8ac <USB_Device_ProcessControlRequest+0x16e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     886:	80 91 eb 00 	lds	r24, 0x00EB
     88a:	80 61       	ori	r24, 0x10	; 16
     88c:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	02 c0       	rjmp	.+4      	; 0x89a <USB_Device_ProcessControlRequest+0x15c>
     896:	88 0f       	add	r24, r24
     898:	99 1f       	adc	r25, r25
     89a:	2a 95       	dec	r18
     89c:	e2 f7       	brpl	.-8      	; 0x896 <USB_Device_ProcessControlRequest+0x158>
     89e:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     8a2:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     8a6:	80 91 eb 00 	lds	r24, 0x00EB
     8aa:	88 60       	ori	r24, 0x08	; 8
     8ac:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     8b0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     8b4:	80 91 e8 00 	lds	r24, 0x00E8
     8b8:	87 7f       	andi	r24, 0xF7	; 247
     8ba:	8c c0       	rjmp	.+280    	; 0x9d4 <USB_Device_ProcessControlRequest+0x296>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     8bc:	88 23       	and	r24, r24
     8be:	09 f0       	breq	.+2      	; 0x8c2 <USB_Device_ProcessControlRequest+0x184>
     8c0:	a9 c0       	rjmp	.+338    	; 0xa14 <USB_Device_ProcessControlRequest+0x2d6>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
     8c2:	10 91 1d 01 	lds	r17, 0x011D
     8c6:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     8c8:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     8ca:	f8 94       	cli
     8cc:	80 91 e8 00 	lds	r24, 0x00E8
     8d0:	87 7f       	andi	r24, 0xF7	; 247
     8d2:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     8d6:	b7 dd       	rcall	.-1170   	; 0x446 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     8d8:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     8dc:	80 ff       	sbrs	r24, 0
     8de:	fc cf       	rjmp	.-8      	; 0x8d8 <USB_Device_ProcessControlRequest+0x19a>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
     8e0:	80 91 e3 00 	lds	r24, 0x00E3
     8e4:	80 78       	andi	r24, 0x80	; 128
     8e6:	81 2b       	or	r24, r17
     8e8:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR |= (1 << ADDEN);
     8ec:	80 91 e3 00 	lds	r24, 0x00E3
     8f0:	80 68       	ori	r24, 0x80	; 128
     8f2:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     8f6:	11 23       	and	r17, r17
     8f8:	11 f4       	brne	.+4      	; 0x8fe <USB_Device_ProcessControlRequest+0x1c0>
     8fa:	82 e0       	ldi	r24, 0x02	; 2
     8fc:	01 c0       	rjmp	.+2      	; 0x900 <USB_Device_ProcessControlRequest+0x1c2>
     8fe:	83 e0       	ldi	r24, 0x03	; 3
     900:	80 93 1a 01 	sts	0x011A, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     904:	0f bf       	out	0x3f, r16	; 63
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#endif
				
				GCC_MEMORY_BARRIER();
     906:	86 c0       	rjmp	.+268    	; 0xa14 <USB_Device_ProcessControlRequest+0x2d6>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     908:	80 58       	subi	r24, 0x80	; 128
     90a:	82 30       	cpi	r24, 0x02	; 2
     90c:	08 f0       	brcs	.+2      	; 0x910 <USB_Device_ProcessControlRequest+0x1d2>
     90e:	82 c0       	rjmp	.+260    	; 0xa14 <USB_Device_ProcessControlRequest+0x2d6>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     910:	80 91 1d 01 	lds	r24, 0x011D
     914:	90 91 1e 01 	lds	r25, 0x011E
     918:	23 e0       	ldi	r18, 0x03	; 3
     91a:	8c 3d       	cpi	r24, 0xDC	; 220
     91c:	92 07       	cpc	r25, r18
     91e:	09 f0       	breq	.+2      	; 0x922 <USB_Device_ProcessControlRequest+0x1e4>
     920:	33 c0       	rjmp	.+102    	; 0x988 <USB_Device_ProcessControlRequest+0x24a>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     922:	83 e0       	ldi	r24, 0x03	; 3
     924:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     926:	8a e2       	ldi	r24, 0x2A	; 42
     928:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     92a:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     92c:	f8 94       	cli
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#endif

				GCC_MEMORY_BARRIER();
     92e:	de 01       	movw	r26, r28
     930:	15 96       	adiw	r26, 0x05	; 5
     932:	6e e0       	ldi	r22, 0x0E	; 14
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     938:	11 e2       	ldi	r17, 0x21	; 33
     93a:	e6 2f       	mov	r30, r22
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	10 93 57 00 	sts	0x0057, r17
     942:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
     944:	40 ff       	sbrs	r20, 0
     946:	03 c0       	rjmp	.+6      	; 0x94e <USB_Device_ProcessControlRequest+0x210>
					{
						SerialByte >>= 4;
     948:	82 95       	swap	r24
     94a:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
     94c:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     94e:	8f 70       	andi	r24, 0x0F	; 15
     950:	28 2f       	mov	r18, r24
     952:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     954:	8a 30       	cpi	r24, 0x0A	; 10
     956:	18 f0       	brcs	.+6      	; 0x95e <USB_Device_ProcessControlRequest+0x220>
     958:	c9 01       	movw	r24, r18
     95a:	c7 96       	adiw	r24, 0x37	; 55
     95c:	02 c0       	rjmp	.+4      	; 0x962 <USB_Device_ProcessControlRequest+0x224>
     95e:	c9 01       	movw	r24, r18
     960:	c0 96       	adiw	r24, 0x30	; 48
     962:	8d 93       	st	X+, r24
     964:	9d 93       	st	X+, r25
     966:	4f 5f       	subi	r20, 0xFF	; 255
     968:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     96a:	44 31       	cpi	r20, 0x14	; 20
     96c:	51 05       	cpc	r21, r1
     96e:	29 f7       	brne	.-54     	; 0x93a <USB_Device_ProcessControlRequest+0x1fc>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     970:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     972:	80 91 e8 00 	lds	r24, 0x00E8
     976:	87 7f       	andi	r24, 0xF7	; 247
     978:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     97c:	ce 01       	movw	r24, r28
     97e:	03 96       	adiw	r24, 0x03	; 3
     980:	6a e2       	ldi	r22, 0x2A	; 42
     982:	70 e0       	ldi	r23, 0x00	; 0
     984:	61 d0       	rcall	.+194    	; 0xa48 <Endpoint_Write_Control_Stream_LE>
     986:	12 c0       	rjmp	.+36     	; 0x9ac <USB_Device_ProcessControlRequest+0x26e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     988:	60 91 1f 01 	lds	r22, 0x011F
     98c:	ae 01       	movw	r20, r28
     98e:	4f 5f       	subi	r20, 0xFF	; 255
     990:	5f 4f       	sbci	r21, 0xFF	; 255
     992:	e4 dc       	rcall	.-1592   	; 0x35c <CALLBACK_USB_GetDescriptor>
     994:	bc 01       	movw	r22, r24
     996:	00 97       	sbiw	r24, 0x00	; 0
     998:	09 f4       	brne	.+2      	; 0x99c <USB_Device_ProcessControlRequest+0x25e>
     99a:	3c c0       	rjmp	.+120    	; 0xa14 <USB_Device_ProcessControlRequest+0x2d6>
     99c:	80 91 e8 00 	lds	r24, 0x00E8
     9a0:	87 7f       	andi	r24, 0xF7	; 247
     9a2:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     9a6:	89 81       	ldd	r24, Y+1	; 0x01
     9a8:	9a 81       	ldd	r25, Y+2	; 0x02
     9aa:	ed d0       	rcall	.+474    	; 0xb86 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     9ac:	80 91 e8 00 	lds	r24, 0x00E8
     9b0:	8b 77       	andi	r24, 0x7B	; 123
     9b2:	80 93 e8 00 	sts	0x00E8, r24
     9b6:	2e c0       	rjmp	.+92     	; 0xa14 <USB_Device_ProcessControlRequest+0x2d6>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     9b8:	80 38       	cpi	r24, 0x80	; 128
     9ba:	61 f5       	brne	.+88     	; 0xa14 <USB_Device_ProcessControlRequest+0x2d6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     9bc:	80 91 e8 00 	lds	r24, 0x00E8
     9c0:	87 7f       	andi	r24, 0xF7	; 247
     9c2:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_ConfigurationNumber);
     9c6:	80 91 18 01 	lds	r24, 0x0118
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     9ca:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9ce:	80 91 e8 00 	lds	r24, 0x00E8
     9d2:	8e 77       	andi	r24, 0x7E	; 126
     9d4:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     9d8:	36 dd       	rcall	.-1428   	; 0x446 <Endpoint_ClearStatusStage>
     9da:	1c c0       	rjmp	.+56     	; 0xa14 <USB_Device_ProcessControlRequest+0x2d6>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     9dc:	88 23       	and	r24, r24
     9de:	d1 f4       	brne	.+52     	; 0xa14 <USB_Device_ProcessControlRequest+0x2d6>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     9e0:	90 91 1d 01 	lds	r25, 0x011D
     9e4:	92 30       	cpi	r25, 0x02	; 2
     9e6:	b0 f4       	brcc	.+44     	; 0xa14 <USB_Device_ProcessControlRequest+0x2d6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     9e8:	80 91 e8 00 	lds	r24, 0x00E8
     9ec:	87 7f       	andi	r24, 0xF7	; 247
     9ee:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     9f2:	90 93 18 01 	sts	0x0118, r25

	Endpoint_ClearStatusStage();
     9f6:	27 dd       	rcall	.-1458   	; 0x446 <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
     9f8:	80 91 18 01 	lds	r24, 0x0118
     9fc:	88 23       	and	r24, r24
     9fe:	31 f4       	brne	.+12     	; 0xa0c <USB_Device_ProcessControlRequest+0x2ce>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     a00:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     a04:	87 fd       	sbrc	r24, 7
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <USB_Device_ProcessControlRequest+0x2ce>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	01 c0       	rjmp	.+2      	; 0xa0e <USB_Device_ProcessControlRequest+0x2d0>
     a0c:	84 e0       	ldi	r24, 0x04	; 4
     a0e:	80 93 1a 01 	sts	0x011A, r24

	EVENT_USB_Device_ConfigurationChanged();
     a12:	5f dc       	rcall	.-1858   	; 0x2d2 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a14:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     a18:	83 ff       	sbrs	r24, 3
     a1a:	0a c0       	rjmp	.+20     	; 0xa30 <USB_Device_ProcessControlRequest+0x2f2>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     a1c:	80 91 eb 00 	lds	r24, 0x00EB
     a20:	80 62       	ori	r24, 0x20	; 32
     a22:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a26:	80 91 e8 00 	lds	r24, 0x00E8
     a2a:	87 7f       	andi	r24, 0xF7	; 247
     a2c:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
     a30:	ac 96       	adiw	r28, 0x2c	; 44
     a32:	0f b6       	in	r0, 0x3f	; 63
     a34:	f8 94       	cli
     a36:	de bf       	out	0x3e, r29	; 62
     a38:	0f be       	out	0x3f, r0	; 63
     a3a:	cd bf       	out	0x3d, r28	; 61
     a3c:	cf 91       	pop	r28
     a3e:	df 91       	pop	r29
     a40:	1f 91       	pop	r17
     a42:	0f 91       	pop	r16
     a44:	08 95       	ret

00000a46 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     a46:	08 95       	ret

00000a48 <Endpoint_Write_Control_Stream_LE>:
     a48:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     a4a:	40 91 21 01 	lds	r20, 0x0121
     a4e:	50 91 22 01 	lds	r21, 0x0122
     a52:	46 17       	cp	r20, r22
     a54:	57 07       	cpc	r21, r23
     a56:	18 f4       	brcc	.+6      	; 0xa5e <Endpoint_Write_Control_Stream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     a58:	f9 01       	movw	r30, r18
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	3d c0       	rjmp	.+122    	; 0xad8 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     a5e:	61 15       	cp	r22, r1
     a60:	71 05       	cpc	r23, r1
     a62:	11 f0       	breq	.+4      	; 0xa68 <Endpoint_Write_Control_Stream_LE+0x20>
     a64:	ab 01       	movw	r20, r22
     a66:	f8 cf       	rjmp	.-16     	; 0xa58 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a68:	80 91 e8 00 	lds	r24, 0x00E8
     a6c:	8e 77       	andi	r24, 0x7E	; 126
     a6e:	80 93 e8 00 	sts	0x00E8, r24
     a72:	40 e0       	ldi	r20, 0x00	; 0
     a74:	50 e0       	ldi	r21, 0x00	; 0
     a76:	f0 cf       	rjmp	.-32     	; 0xa58 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     a78:	80 91 1a 01 	lds	r24, 0x011A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     a7c:	88 23       	and	r24, r24
     a7e:	f1 f1       	breq	.+124    	; 0xafc <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     a80:	85 30       	cpi	r24, 0x05	; 5
     a82:	f1 f1       	breq	.+124    	; 0xb00 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a84:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     a88:	83 ff       	sbrs	r24, 3
     a8a:	02 c0       	rjmp	.+4      	; 0xa90 <Endpoint_Write_Control_Stream_LE+0x48>
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a90:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     a94:	82 fd       	sbrc	r24, 2
     a96:	2c c0       	rjmp	.+88     	; 0xaf0 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     a98:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     a9c:	80 ff       	sbrs	r24, 0
     a9e:	1c c0       	rjmp	.+56     	; 0xad8 <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     aa0:	20 91 f2 00 	lds	r18, 0x00F2
     aa4:	30 91 f3 00 	lds	r19, 0x00F3
     aa8:	07 c0       	rjmp	.+14     	; 0xab8 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     aaa:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     aac:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     ab0:	41 50       	subi	r20, 0x01	; 1
     ab2:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     ab4:	2f 5f       	subi	r18, 0xFF	; 255
     ab6:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     ab8:	41 15       	cp	r20, r1
     aba:	51 05       	cpc	r21, r1
     abc:	19 f0       	breq	.+6      	; 0xac4 <Endpoint_Write_Control_Stream_LE+0x7c>
     abe:	28 30       	cpi	r18, 0x08	; 8
     ac0:	31 05       	cpc	r19, r1
     ac2:	98 f3       	brcs	.-26     	; 0xaaa <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	28 30       	cpi	r18, 0x08	; 8
     ac8:	31 05       	cpc	r19, r1
     aca:	09 f4       	brne	.+2      	; 0xace <Endpoint_Write_Control_Stream_LE+0x86>
     acc:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ace:	80 91 e8 00 	lds	r24, 0x00E8
     ad2:	8e 77       	andi	r24, 0x7E	; 126
     ad4:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     ad8:	41 15       	cp	r20, r1
     ada:	51 05       	cpc	r21, r1
     adc:	69 f6       	brne	.-102    	; 0xa78 <Endpoint_Write_Control_Stream_LE+0x30>
     ade:	99 23       	and	r25, r25
     ae0:	59 f6       	brne	.-106    	; 0xa78 <Endpoint_Write_Control_Stream_LE+0x30>
     ae2:	06 c0       	rjmp	.+12     	; 0xaf0 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     ae4:	80 91 1a 01 	lds	r24, 0x011A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     ae8:	88 23       	and	r24, r24
     aea:	41 f0       	breq	.+16     	; 0xafc <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     aec:	85 30       	cpi	r24, 0x05	; 5
     aee:	41 f0       	breq	.+16     	; 0xb00 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     af0:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     af4:	82 ff       	sbrs	r24, 2
     af6:	f6 cf       	rjmp	.-20     	; 0xae4 <Endpoint_Write_Control_Stream_LE+0x9c>
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	08 95       	ret
     afc:	82 e0       	ldi	r24, 0x02	; 2
     afe:	08 95       	ret
     b00:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     b02:	08 95       	ret

00000b04 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
     b04:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     b06:	61 15       	cp	r22, r1
     b08:	71 05       	cpc	r23, r1
     b0a:	29 f4       	brne	.+10     	; 0xb16 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     b0c:	80 91 e8 00 	lds	r24, 0x00E8
     b10:	8b 77       	andi	r24, 0x7B	; 123
     b12:	80 93 e8 00 	sts	0x00E8, r24
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     b16:	f9 01       	movw	r30, r18
     b18:	22 c0       	rjmp	.+68     	; 0xb5e <Endpoint_Read_Control_Stream_LE+0x5a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     b1a:	80 91 1a 01 	lds	r24, 0x011A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b1e:	88 23       	and	r24, r24
     b20:	71 f1       	breq	.+92     	; 0xb7e <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b22:	85 30       	cpi	r24, 0x05	; 5
     b24:	71 f1       	breq	.+92     	; 0xb82 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     b26:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     b2a:	83 ff       	sbrs	r24, 3
     b2c:	02 c0       	rjmp	.+4      	; 0xb32 <Endpoint_Read_Control_Stream_LE+0x2e>
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b32:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     b36:	82 ff       	sbrs	r24, 2
     b38:	f0 cf       	rjmp	.-32     	; 0xb1a <Endpoint_Read_Control_Stream_LE+0x16>
     b3a:	06 c0       	rjmp	.+12     	; 0xb48 <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     b3c:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     b40:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     b42:	61 50       	subi	r22, 0x01	; 1
     b44:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     b46:	31 f0       	breq	.+12     	; 0xb54 <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     b48:	80 91 f2 00 	lds	r24, 0x00F2
     b4c:	90 91 f3 00 	lds	r25, 0x00F3
     b50:	89 2b       	or	r24, r25
     b52:	a1 f7       	brne	.-24     	; 0xb3c <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     b54:	80 91 e8 00 	lds	r24, 0x00E8
     b58:	8b 77       	andi	r24, 0x7B	; 123
     b5a:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
     b5e:	61 15       	cp	r22, r1
     b60:	71 05       	cpc	r23, r1
     b62:	d9 f6       	brne	.-74     	; 0xb1a <Endpoint_Read_Control_Stream_LE+0x16>
     b64:	06 c0       	rjmp	.+12     	; 0xb72 <Endpoint_Read_Control_Stream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     b66:	80 91 1a 01 	lds	r24, 0x011A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b6a:	88 23       	and	r24, r24
     b6c:	41 f0       	breq	.+16     	; 0xb7e <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b6e:	85 30       	cpi	r24, 0x05	; 5
     b70:	41 f0       	breq	.+16     	; 0xb82 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b72:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     b76:	80 ff       	sbrs	r24, 0
     b78:	f6 cf       	rjmp	.-20     	; 0xb66 <Endpoint_Read_Control_Stream_LE+0x62>
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	08 95       	ret
     b7e:	82 e0       	ldi	r24, 0x02	; 2
     b80:	08 95       	ret
     b82:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     b84:	08 95       	ret

00000b86 <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     b86:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     b88:	40 91 21 01 	lds	r20, 0x0121
     b8c:	50 91 22 01 	lds	r21, 0x0122
     b90:	46 17       	cp	r20, r22
     b92:	57 07       	cpc	r21, r23
     b94:	18 f4       	brcc	.+6      	; 0xb9c <Endpoint_Write_Control_PStream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     b96:	f9 01       	movw	r30, r18
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	40 c0       	rjmp	.+128    	; 0xc1c <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     b9c:	61 15       	cp	r22, r1
     b9e:	71 05       	cpc	r23, r1
     ba0:	11 f0       	breq	.+4      	; 0xba6 <Endpoint_Write_Control_PStream_LE+0x20>
     ba2:	ab 01       	movw	r20, r22
     ba4:	f8 cf       	rjmp	.-16     	; 0xb96 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ba6:	80 91 e8 00 	lds	r24, 0x00E8
     baa:	8e 77       	andi	r24, 0x7E	; 126
     bac:	80 93 e8 00 	sts	0x00E8, r24
     bb0:	40 e0       	ldi	r20, 0x00	; 0
     bb2:	50 e0       	ldi	r21, 0x00	; 0
     bb4:	f0 cf       	rjmp	.-32     	; 0xb96 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     bb6:	80 91 1a 01 	lds	r24, 0x011A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     bba:	88 23       	and	r24, r24
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <Endpoint_Write_Control_PStream_LE+0x3a>
     bbe:	40 c0       	rjmp	.+128    	; 0xc40 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     bc0:	85 30       	cpi	r24, 0x05	; 5
     bc2:	09 f4       	brne	.+2      	; 0xbc6 <Endpoint_Write_Control_PStream_LE+0x40>
     bc4:	3f c0       	rjmp	.+126    	; 0xc44 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     bc6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     bca:	83 ff       	sbrs	r24, 3
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <Endpoint_Write_Control_PStream_LE+0x4c>
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     bd2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     bd6:	82 fd       	sbrc	r24, 2
     bd8:	2d c0       	rjmp	.+90     	; 0xc34 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     bda:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     bde:	80 ff       	sbrs	r24, 0
     be0:	1d c0       	rjmp	.+58     	; 0xc1c <Endpoint_Write_Control_PStream_LE+0x96>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     be2:	20 91 f2 00 	lds	r18, 0x00F2
     be6:	30 91 f3 00 	lds	r19, 0x00F3
     bea:	08 c0       	rjmp	.+16     	; 0xbfc <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     bec:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     bee:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     bf2:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     bf4:	41 50       	subi	r20, 0x01	; 1
     bf6:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     bf8:	2f 5f       	subi	r18, 0xFF	; 255
     bfa:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     bfc:	41 15       	cp	r20, r1
     bfe:	51 05       	cpc	r21, r1
     c00:	19 f0       	breq	.+6      	; 0xc08 <Endpoint_Write_Control_PStream_LE+0x82>
     c02:	28 30       	cpi	r18, 0x08	; 8
     c04:	31 05       	cpc	r19, r1
     c06:	90 f3       	brcs	.-28     	; 0xbec <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	28 30       	cpi	r18, 0x08	; 8
     c0c:	31 05       	cpc	r19, r1
     c0e:	09 f4       	brne	.+2      	; 0xc12 <Endpoint_Write_Control_PStream_LE+0x8c>
     c10:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c12:	80 91 e8 00 	lds	r24, 0x00E8
     c16:	8e 77       	andi	r24, 0x7E	; 126
     c18:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     c1c:	41 15       	cp	r20, r1
     c1e:	51 05       	cpc	r21, r1
     c20:	51 f6       	brne	.-108    	; 0xbb6 <Endpoint_Write_Control_PStream_LE+0x30>
     c22:	99 23       	and	r25, r25
     c24:	41 f6       	brne	.-112    	; 0xbb6 <Endpoint_Write_Control_PStream_LE+0x30>
     c26:	06 c0       	rjmp	.+12     	; 0xc34 <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     c28:	80 91 1a 01 	lds	r24, 0x011A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     c2c:	88 23       	and	r24, r24
     c2e:	41 f0       	breq	.+16     	; 0xc40 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     c30:	85 30       	cpi	r24, 0x05	; 5
     c32:	41 f0       	breq	.+16     	; 0xc44 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c34:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     c38:	82 ff       	sbrs	r24, 2
     c3a:	f6 cf       	rjmp	.-20     	; 0xc28 <Endpoint_Write_Control_PStream_LE+0xa2>
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	08 95       	ret
     c40:	82 e0       	ldi	r24, 0x02	; 2
     c42:	08 95       	ret
     c44:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     c46:	08 95       	ret

00000c48 <Endpoint_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     c48:	bf 92       	push	r11
     c4a:	cf 92       	push	r12
     c4c:	df 92       	push	r13
     c4e:	ef 92       	push	r14
     c50:	ff 92       	push	r15
     c52:	0f 93       	push	r16
     c54:	1f 93       	push	r17
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	18 2f       	mov	r17, r24
     c5c:	09 2f       	mov	r16, r25
     c5e:	7b 01       	movw	r14, r22
     c60:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     c62:	12 dc       	rcall	.-2012   	; 0x488 <Endpoint_WaitUntilReady>
     c64:	b8 2e       	mov	r11, r24
     c66:	88 23       	and	r24, r24
     c68:	b1 f5       	brne	.+108    	; 0xcd6 <Endpoint_Write_Stream_LE+0x8e>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     c6a:	81 2f       	mov	r24, r17
     c6c:	90 2f       	mov	r25, r16
     c6e:	9c 01       	movw	r18, r24
     c70:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     c72:	c1 14       	cp	r12, r1
     c74:	d1 04       	cpc	r13, r1
     c76:	39 f0       	breq	.+14     	; 0xc86 <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
     c78:	f6 01       	movw	r30, r12
     c7a:	80 81       	ld	r24, Z
     c7c:	91 81       	ldd	r25, Z+1	; 0x01
     c7e:	e8 1a       	sub	r14, r24
     c80:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     c82:	c8 0f       	add	r28, r24
     c84:	d9 1f       	adc	r29, r25
     c86:	00 e0       	ldi	r16, 0x00	; 0
     c88:	10 e0       	ldi	r17, 0x00	; 0
     c8a:	22 c0       	rjmp	.+68     	; 0xcd0 <Endpoint_Write_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     c8c:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     c90:	85 fd       	sbrc	r24, 5
     c92:	16 c0       	rjmp	.+44     	; 0xcc0 <Endpoint_Write_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c94:	80 91 e8 00 	lds	r24, 0x00E8
     c98:	8e 77       	andi	r24, 0x7E	; 126
     c9a:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
     c9e:	c1 14       	cp	r12, r1
     ca0:	d1 04       	cpc	r13, r1
     ca2:	49 f0       	breq	.+18     	; 0xcb6 <Endpoint_Write_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
     ca4:	f6 01       	movw	r30, r12
     ca6:	80 81       	ld	r24, Z
     ca8:	91 81       	ldd	r25, Z+1	; 0x01
     caa:	80 0f       	add	r24, r16
     cac:	91 1f       	adc	r25, r17
     cae:	91 83       	std	Z+1, r25	; 0x01
     cb0:	80 83       	st	Z, r24
     cb2:	85 e0       	ldi	r24, 0x05	; 5
     cb4:	11 c0       	rjmp	.+34     	; 0xcd8 <Endpoint_Write_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
     cb6:	1a d0       	rcall	.+52     	; 0xcec <USB_USBTask>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     cb8:	e7 db       	rcall	.-2098   	; 0x488 <Endpoint_WaitUntilReady>
     cba:	88 23       	and	r24, r24
     cbc:	49 f0       	breq	.+18     	; 0xcd0 <Endpoint_Write_Stream_LE+0x88>
     cbe:	0c c0       	rjmp	.+24     	; 0xcd8 <Endpoint_Write_Stream_LE+0x90>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     cc0:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     cc2:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     cc6:	08 94       	sec
     cc8:	e1 08       	sbc	r14, r1
     cca:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
     ccc:	0f 5f       	subi	r16, 0xFF	; 255
     cce:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     cd0:	e1 14       	cp	r14, r1
     cd2:	f1 04       	cpc	r15, r1
     cd4:	d9 f6       	brne	.-74     	; 0xc8c <Endpoint_Write_Stream_LE+0x44>
     cd6:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	1f 91       	pop	r17
     cde:	0f 91       	pop	r16
     ce0:	ff 90       	pop	r15
     ce2:	ef 90       	pop	r14
     ce4:	df 90       	pop	r13
     ce6:	cf 90       	pop	r12
     ce8:	bf 90       	pop	r11
     cea:	08 95       	ret

00000cec <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     cec:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
     cee:	80 91 1a 01 	lds	r24, 0x011A
     cf2:	88 23       	and	r24, r24
     cf4:	61 f0       	breq	.+24     	; 0xd0e <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     cf6:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     cfa:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cfe:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
     d02:	83 ff       	sbrs	r24, 3
     d04:	01 c0       	rjmp	.+2      	; 0xd08 <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
     d06:	1b dd       	rcall	.-1482   	; 0x73e <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     d08:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     d0a:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
     d0e:	1f 91       	pop	r17
     d10:	08 95       	ret

00000d12 <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     d12:	4f 92       	push	r4
     d14:	5f 92       	push	r5
     d16:	6f 92       	push	r6
     d18:	7f 92       	push	r7
     d1a:	8f 92       	push	r8
     d1c:	9f 92       	push	r9
     d1e:	af 92       	push	r10
     d20:	bf 92       	push	r11
     d22:	cf 92       	push	r12
     d24:	df 92       	push	r13
     d26:	ef 92       	push	r14
     d28:	ff 92       	push	r15
     d2a:	0f 93       	push	r16
     d2c:	1f 93       	push	r17
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	00 d0       	rcall	.+0      	; 0xd34 <HID_Device_USBTask+0x22>
     d34:	0f 92       	push	r0
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
     d3a:	7c 01       	movw	r14, r24
			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);

			Endpoint_ClearIN();
		}
	}
}
     d3c:	6d b6       	in	r6, 0x3d	; 61
     d3e:	7e b6       	in	r7, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
     d40:	80 91 1a 01 	lds	r24, 0x011A
     d44:	84 30       	cpi	r24, 0x04	; 4
     d46:	09 f0       	breq	.+2      	; 0xd4a <HID_Device_USBTask+0x38>
     d48:	85 c0       	rjmp	.+266    	; 0xe54 <HID_Device_USBTask+0x142>
	  return;

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
     d4a:	f7 01       	movw	r30, r14
     d4c:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     d4e:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     d52:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsReadWriteAllowed())
     d56:	85 ff       	sbrs	r24, 5
     d58:	7d c0       	rjmp	.+250    	; 0xe54 <HID_Device_USBTask+0x142>
     d5a:	5d b6       	in	r5, 0x3d	; 61
     d5c:	4e b6       	in	r4, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     d5e:	47 81       	ldd	r20, Z+7	; 0x07
     d60:	8d b7       	in	r24, 0x3d	; 61
     d62:	9e b7       	in	r25, 0x3e	; 62
     d64:	84 1b       	sub	r24, r20
     d66:	91 09       	sbc	r25, r1
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	9e bf       	out	0x3e, r25	; 62
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	8d bf       	out	0x3d, r24	; 61
     d72:	0d b7       	in	r16, 0x3d	; 61
     d74:	1e b7       	in	r17, 0x3e	; 62
     d76:	0f 5f       	subi	r16, 0xFF	; 255
     d78:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t  ReportID     = 0;
     d7a:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
     d7c:	1b 82       	std	Y+3, r1	; 0x03
     d7e:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
     d80:	c0 2e       	mov	r12, r16
     d82:	91 2e       	mov	r9, r17
     d84:	c8 01       	movw	r24, r16
     d86:	60 e0       	ldi	r22, 0x00	; 0
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	50 e0       	ldi	r21, 0x00	; 0
     d8c:	04 d2       	rcall	.+1032   	; 0x1196 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
     d8e:	c7 01       	movw	r24, r14
     d90:	be 01       	movw	r22, r28
     d92:	6f 5f       	subi	r22, 0xFF	; 255
     d94:	7f 4f       	sbci	r23, 0xFF	; 255
     d96:	40 e0       	ldi	r20, 0x00	; 0
     d98:	98 01       	movw	r18, r16
     d9a:	8e 01       	movw	r16, r28
     d9c:	0e 5f       	subi	r16, 0xFE	; 254
     d9e:	1f 4f       	sbci	r17, 0xFF	; 255
     da0:	31 da       	rcall	.-2974   	; 0x204 <CALLBACK_HID_Device_CreateHIDReport>
     da2:	88 2e       	mov	r8, r24
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
     da4:	f7 01       	movw	r30, r14
     da6:	81 85       	ldd	r24, Z+9	; 0x09
     da8:	92 85       	ldd	r25, Z+10	; 0x0a
     daa:	89 2b       	or	r24, r25
     dac:	19 f4       	brne	.+6      	; 0xdb4 <HID_Device_USBTask+0xa2>
     dae:	aa 24       	eor	r10, r10
     db0:	bb 24       	eor	r11, r11
     db2:	0b c0       	rjmp	.+22     	; 0xdca <HID_Device_USBTask+0xb8>
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	f7 01       	movw	r30, r14
     db8:	83 85       	ldd	r24, Z+11	; 0x0b
     dba:	94 85       	ldd	r25, Z+12	; 0x0c
     dbc:	89 2b       	or	r24, r25
     dbe:	09 f0       	breq	.+2      	; 0xdc2 <HID_Device_USBTask+0xb0>
     dc0:	21 e0       	ldi	r18, 0x01	; 1
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	28 27       	eor	r18, r24
     dc6:	a2 2e       	mov	r10, r18
     dc8:	bb 24       	eor	r11, r11

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     dca:	f7 01       	movw	r30, r14
     dcc:	05 81       	ldd	r16, Z+5	; 0x05
     dce:	16 81       	ldd	r17, Z+6	; 0x06
     dd0:	01 15       	cp	r16, r1
     dd2:	11 05       	cpc	r17, r1
     dd4:	11 f4       	brne	.+4      	; 0xdda <HID_Device_USBTask+0xc8>
     dd6:	dd 24       	eor	r13, r13
     dd8:	12 c0       	rjmp	.+36     	; 0xdfe <HID_Device_USBTask+0xec>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
     dda:	4a 81       	ldd	r20, Y+2	; 0x02
     ddc:	5b 81       	ldd	r21, Y+3	; 0x03
     dde:	8c 2d       	mov	r24, r12
     de0:	99 2d       	mov	r25, r9
     de2:	b8 01       	movw	r22, r16
     de4:	c2 d1       	rcall	.+900    	; 0x116a <memcmp>
     de6:	dd 24       	eor	r13, r13
     de8:	00 97       	sbiw	r24, 0x00	; 0
     dea:	11 f0       	breq	.+4      	; 0xdf0 <HID_Device_USBTask+0xde>
     dec:	dd 24       	eor	r13, r13
     dee:	d3 94       	inc	r13
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
     df0:	f7 01       	movw	r30, r14
     df2:	47 81       	ldd	r20, Z+7	; 0x07
     df4:	c8 01       	movw	r24, r16
     df6:	6c 2d       	mov	r22, r12
     df8:	79 2d       	mov	r23, r9
     dfa:	50 e0       	ldi	r21, 0x00	; 0
     dfc:	c3 d1       	rcall	.+902    	; 0x1184 <memcpy>
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
     dfe:	8a 81       	ldd	r24, Y+2	; 0x02
     e00:	9b 81       	ldd	r25, Y+3	; 0x03
     e02:	89 2b       	or	r24, r25
     e04:	f9 f0       	breq	.+62     	; 0xe44 <HID_Device_USBTask+0x132>
     e06:	88 20       	and	r8, r8
     e08:	21 f4       	brne	.+8      	; 0xe12 <HID_Device_USBTask+0x100>
     e0a:	dd 20       	and	r13, r13
     e0c:	11 f4       	brne	.+4      	; 0xe12 <HID_Device_USBTask+0x100>
     e0e:	ab 28       	or	r10, r11
     e10:	c9 f0       	breq	.+50     	; 0xe44 <HID_Device_USBTask+0x132>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
     e12:	f7 01       	movw	r30, r14
     e14:	81 85       	ldd	r24, Z+9	; 0x09
     e16:	92 85       	ldd	r25, Z+10	; 0x0a
     e18:	94 87       	std	Z+12, r25	; 0x0c
     e1a:	83 87       	std	Z+11, r24	; 0x0b

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
     e1c:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     e1e:	80 93 e9 00 	sts	0x00E9, r24

			if (ReportID)
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	88 23       	and	r24, r24
     e26:	11 f0       	breq	.+4      	; 0xe2c <HID_Device_USBTask+0x11a>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e28:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
     e2c:	6a 81       	ldd	r22, Y+2	; 0x02
     e2e:	7b 81       	ldd	r23, Y+3	; 0x03
     e30:	8c 2d       	mov	r24, r12
     e32:	99 2d       	mov	r25, r9
     e34:	40 e0       	ldi	r20, 0x00	; 0
     e36:	50 e0       	ldi	r21, 0x00	; 0
     e38:	07 df       	rcall	.-498    	; 0xc48 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e3a:	80 91 e8 00 	lds	r24, 0x00E8
     e3e:	8e 77       	andi	r24, 0x7E	; 126
     e40:	80 93 e8 00 	sts	0x00E8, r24
     e44:	85 2d       	mov	r24, r5
     e46:	94 2d       	mov	r25, r4
     e48:	9c 01       	movw	r18, r24
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	f8 94       	cli
     e4e:	3e bf       	out	0x3e, r19	; 62
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	2d bf       	out	0x3d, r18	; 61

			Endpoint_ClearIN();
		}
	}
}
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	7e be       	out	0x3e, r7	; 62
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	6d be       	out	0x3d, r6	; 61
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
     e62:	0f 90       	pop	r0
     e64:	cf 91       	pop	r28
     e66:	df 91       	pop	r29
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	ff 90       	pop	r15
     e6e:	ef 90       	pop	r14
     e70:	df 90       	pop	r13
     e72:	cf 90       	pop	r12
     e74:	bf 90       	pop	r11
     e76:	af 90       	pop	r10
     e78:	9f 90       	pop	r9
     e7a:	8f 90       	pop	r8
     e7c:	7f 90       	pop	r7
     e7e:	6f 90       	pop	r6
     e80:	5f 90       	pop	r5
     e82:	4f 90       	pop	r4
     e84:	08 95       	ret

00000e86 <HID_Device_ConfigureEndpoints>:
			break;
	}
}

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     e86:	cf 93       	push	r28
     e88:	df 93       	push	r29
     e8a:	dc 01       	movw	r26, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
     e8c:	08 96       	adiw	r24, 0x08	; 8
     e8e:	fc 01       	movw	r30, r24
     e90:	85 e0       	ldi	r24, 0x05	; 5
     e92:	ef 01       	movw	r28, r30
     e94:	19 92       	st	Y+, r1
     e96:	8a 95       	dec	r24
     e98:	e9 f7       	brne	.-6      	; 0xe94 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	18 96       	adiw	r26, 0x08	; 8
     e9e:	8c 93       	st	X, r24
     ea0:	18 97       	sbiw	r26, 0x08	; 8
	HIDInterfaceInfo->State.IdleCount = 500;
     ea2:	84 ef       	ldi	r24, 0xF4	; 244
     ea4:	91 e0       	ldi	r25, 0x01	; 1
     ea6:	1a 96       	adiw	r26, 0x0a	; 10
     ea8:	9c 93       	st	X, r25
     eaa:	8e 93       	st	-X, r24
     eac:	19 97       	sbiw	r26, 0x09	; 9

	if (!(Endpoint_ConfigureEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber, EP_TYPE_INTERRUPT,
     eae:	11 96       	adiw	r26, 0x01	; 1
     eb0:	3c 91       	ld	r19, X
     eb2:	11 97       	sbiw	r26, 0x01	; 1
     eb4:	12 96       	adiw	r26, 0x02	; 2
     eb6:	6d 91       	ld	r22, X+
     eb8:	7c 91       	ld	r23, X
     eba:	13 97       	sbiw	r26, 0x03	; 3
     ebc:	14 96       	adiw	r26, 0x04	; 4
     ebe:	8c 91       	ld	r24, X
     ec0:	88 23       	and	r24, r24
     ec2:	11 f4       	brne	.+4      	; 0xec8 <HID_Device_ConfigureEndpoints+0x42>
     ec4:	40 e0       	ldi	r20, 0x00	; 0
     ec6:	01 c0       	rjmp	.+2      	; 0xeca <HID_Device_ConfigureEndpoints+0x44>
     ec8:	44 e0       	ldi	r20, 0x04	; 4
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	88 e0       	ldi	r24, 0x08	; 8
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	03 c0       	rjmp	.+6      	; 0xed8 <HID_Device_ConfigureEndpoints+0x52>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     ed2:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     ed8:	86 17       	cp	r24, r22
     eda:	97 07       	cpc	r25, r23
     edc:	d0 f3       	brcs	.-12     	; 0xed2 <HID_Device_ConfigureEndpoints+0x4c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
     ede:	42 60       	ori	r20, 0x02	; 2
     ee0:	22 95       	swap	r18
     ee2:	20 7f       	andi	r18, 0xF0	; 240
     ee4:	42 2b       	or	r20, r18
     ee6:	83 2f       	mov	r24, r19
     ee8:	61 ec       	ldi	r22, 0xC1	; 193
     eea:	78 da       	rcall	.-2832   	; 0x3dc <Endpoint_ConfigureEndpoint_Prv>
     eec:	81 11       	cpse	r24, r1
     eee:	81 e0       	ldi	r24, 0x01	; 1
	{
		return false;
	}

	return true;
}
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28
     ef4:	08 95       	ret

00000ef6 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     ef6:	6f 92       	push	r6
     ef8:	7f 92       	push	r7
     efa:	8f 92       	push	r8
     efc:	9f 92       	push	r9
     efe:	af 92       	push	r10
     f00:	bf 92       	push	r11
     f02:	cf 92       	push	r12
     f04:	df 92       	push	r13
     f06:	ef 92       	push	r14
     f08:	ff 92       	push	r15
     f0a:	0f 93       	push	r16
     f0c:	1f 93       	push	r17
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	00 d0       	rcall	.+0      	; 0xf14 <HID_Device_ProcessControlRequest+0x1e>
     f14:	0f 92       	push	r0
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
     f1a:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     f1c:	6d b6       	in	r6, 0x3d	; 61
     f1e:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f20:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     f24:	83 ff       	sbrs	r24, 3
     f26:	0a c1       	rjmp	.+532    	; 0x113c <HID_Device_ProcessControlRequest+0x246>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     f28:	f6 01       	movw	r30, r12
     f2a:	80 81       	ld	r24, Z
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	20 91 1f 01 	lds	r18, 0x011F
     f32:	30 91 20 01 	lds	r19, 0x0120
     f36:	28 17       	cp	r18, r24
     f38:	39 07       	cpc	r19, r25
     f3a:	09 f0       	breq	.+2      	; 0xf3e <HID_Device_ProcessControlRequest+0x48>
     f3c:	ff c0       	rjmp	.+510    	; 0x113c <HID_Device_ProcessControlRequest+0x246>
	  return;

	switch (USB_ControlRequest.bRequest)
     f3e:	80 91 1c 01 	lds	r24, 0x011C
     f42:	83 30       	cpi	r24, 0x03	; 3
     f44:	09 f4       	brne	.+2      	; 0xf48 <HID_Device_ProcessControlRequest+0x52>
     f46:	aa c0       	rjmp	.+340    	; 0x109c <HID_Device_ProcessControlRequest+0x1a6>
     f48:	84 30       	cpi	r24, 0x04	; 4
     f4a:	30 f4       	brcc	.+12     	; 0xf58 <HID_Device_ProcessControlRequest+0x62>
     f4c:	81 30       	cpi	r24, 0x01	; 1
     f4e:	71 f0       	breq	.+28     	; 0xf6c <HID_Device_ProcessControlRequest+0x76>
     f50:	82 30       	cpi	r24, 0x02	; 2
     f52:	09 f0       	breq	.+2      	; 0xf56 <HID_Device_ProcessControlRequest+0x60>
     f54:	f3 c0       	rjmp	.+486    	; 0x113c <HID_Device_ProcessControlRequest+0x246>
     f56:	da c0       	rjmp	.+436    	; 0x110c <HID_Device_ProcessControlRequest+0x216>
     f58:	8a 30       	cpi	r24, 0x0A	; 10
     f5a:	09 f4       	brne	.+2      	; 0xf5e <HID_Device_ProcessControlRequest+0x68>
     f5c:	bf c0       	rjmp	.+382    	; 0x10dc <HID_Device_ProcessControlRequest+0x1e6>
     f5e:	8b 30       	cpi	r24, 0x0B	; 11
     f60:	09 f4       	brne	.+2      	; 0xf64 <HID_Device_ProcessControlRequest+0x6e>
     f62:	a9 c0       	rjmp	.+338    	; 0x10b6 <HID_Device_ProcessControlRequest+0x1c0>
     f64:	89 30       	cpi	r24, 0x09	; 9
     f66:	09 f0       	breq	.+2      	; 0xf6a <HID_Device_ProcessControlRequest+0x74>
     f68:	e9 c0       	rjmp	.+466    	; 0x113c <HID_Device_ProcessControlRequest+0x246>
     f6a:	55 c0       	rjmp	.+170    	; 0x1016 <HID_Device_ProcessControlRequest+0x120>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     f6c:	80 91 1b 01 	lds	r24, 0x011B
     f70:	81 3a       	cpi	r24, 0xA1	; 161
     f72:	09 f0       	breq	.+2      	; 0xf76 <HID_Device_ProcessControlRequest+0x80>
     f74:	e3 c0       	rjmp	.+454    	; 0x113c <HID_Device_ProcessControlRequest+0x246>
     f76:	9d b6       	in	r9, 0x3d	; 61
     f78:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
     f7a:	1b 82       	std	Y+3, r1	; 0x03
     f7c:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     f7e:	80 91 1d 01 	lds	r24, 0x011D
     f82:	10 91 1e 01 	lds	r17, 0x011E
     f86:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     f88:	f6 01       	movw	r30, r12
     f8a:	47 81       	ldd	r20, Z+7	; 0x07
     f8c:	8d b7       	in	r24, 0x3d	; 61
     f8e:	9e b7       	in	r25, 0x3e	; 62
     f90:	84 1b       	sub	r24, r20
     f92:	91 09       	sbc	r25, r1
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	f8 94       	cli
     f98:	9e bf       	out	0x3e, r25	; 62
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	8d bf       	out	0x3d, r24	; 61
     f9e:	ed b6       	in	r14, 0x3d	; 61
     fa0:	fe b6       	in	r15, 0x3e	; 62
     fa2:	08 94       	sec
     fa4:	e1 1c       	adc	r14, r1
     fa6:	f1 1c       	adc	r15, r1

				memset(ReportData, 0, sizeof(ReportData));
     fa8:	be 2c       	mov	r11, r14
     faa:	af 2c       	mov	r10, r15
     fac:	c7 01       	movw	r24, r14
     fae:	60 e0       	ldi	r22, 0x00	; 0
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	50 e0       	ldi	r21, 0x00	; 0
     fb4:	f0 d0       	rcall	.+480    	; 0x1196 <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     fb6:	11 50       	subi	r17, 0x01	; 1
     fb8:	c6 01       	movw	r24, r12
     fba:	be 01       	movw	r22, r28
     fbc:	6f 5f       	subi	r22, 0xFF	; 255
     fbe:	7f 4f       	sbci	r23, 0xFF	; 255
     fc0:	41 2f       	mov	r20, r17
     fc2:	97 01       	movw	r18, r14
     fc4:	8e 01       	movw	r16, r28
     fc6:	0e 5f       	subi	r16, 0xFE	; 254
     fc8:	1f 4f       	sbci	r17, 0xFF	; 255
     fca:	1c d9       	rcall	.-3528   	; 0x204 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     fcc:	f6 01       	movw	r30, r12
     fce:	25 81       	ldd	r18, Z+5	; 0x05
     fd0:	36 81       	ldd	r19, Z+6	; 0x06
     fd2:	21 15       	cp	r18, r1
     fd4:	31 05       	cpc	r19, r1
     fd6:	29 f0       	breq	.+10     	; 0xfe2 <HID_Device_ProcessControlRequest+0xec>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     fd8:	47 81       	ldd	r20, Z+7	; 0x07
     fda:	c9 01       	movw	r24, r18
     fdc:	b7 01       	movw	r22, r14
     fde:	50 e0       	ldi	r21, 0x00	; 0
     fe0:	d1 d0       	rcall	.+418    	; 0x1184 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     fe2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fe6:	80 91 e8 00 	lds	r24, 0x00E8
     fea:	87 7f       	andi	r24, 0xF7	; 247
     fec:	80 93 e8 00 	sts	0x00E8, r24
				}
				
				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     ff0:	6a 81       	ldd	r22, Y+2	; 0x02
     ff2:	7b 81       	ldd	r23, Y+3	; 0x03
     ff4:	8b 2d       	mov	r24, r11
     ff6:	9a 2d       	mov	r25, r10
     ff8:	27 dd       	rcall	.-1458   	; 0xa48 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ffa:	80 91 e8 00 	lds	r24, 0x00E8
     ffe:	8b 77       	andi	r24, 0x7B	; 123
    1000:	80 93 e8 00 	sts	0x00E8, r24
    1004:	29 2d       	mov	r18, r9
    1006:	38 2d       	mov	r19, r8
    1008:	c9 01       	movw	r24, r18
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	f8 94       	cli
    100e:	9e bf       	out	0x3e, r25	; 62
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	8d bf       	out	0x3d, r24	; 61
    1014:	93 c0       	rjmp	.+294    	; 0x113c <HID_Device_ProcessControlRequest+0x246>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1016:	80 91 1b 01 	lds	r24, 0x011B
    101a:	81 32       	cpi	r24, 0x21	; 33
    101c:	09 f0       	breq	.+2      	; 0x1020 <HID_Device_ProcessControlRequest+0x12a>
    101e:	8e c0       	rjmp	.+284    	; 0x113c <HID_Device_ProcessControlRequest+0x246>
    1020:	9d b6       	in	r9, 0x3d	; 61
    1022:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    1024:	00 91 21 01 	lds	r16, 0x0121
    1028:	10 91 22 01 	lds	r17, 0x0122
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    102c:	a0 90 1d 01 	lds	r10, 0x011D
    1030:	b0 90 1e 01 	lds	r11, 0x011E
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    1034:	8d b7       	in	r24, 0x3d	; 61
    1036:	9e b7       	in	r25, 0x3e	; 62
    1038:	80 1b       	sub	r24, r16
    103a:	91 0b       	sbc	r25, r17
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	9e bf       	out	0x3e, r25	; 62
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	8d bf       	out	0x3d, r24	; 61
    1046:	ed b6       	in	r14, 0x3d	; 61
    1048:	fe b6       	in	r15, 0x3e	; 62
    104a:	08 94       	sec
    104c:	e1 1c       	adc	r14, r1
    104e:	f1 1c       	adc	r15, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1050:	80 91 e8 00 	lds	r24, 0x00E8
    1054:	87 7f       	andi	r24, 0xF7	; 247
    1056:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    105a:	c7 01       	movw	r24, r14
    105c:	b8 01       	movw	r22, r16
    105e:	52 dd       	rcall	.-1372   	; 0xb04 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1060:	80 91 e8 00 	lds	r24, 0x00E8
    1064:	8e 77       	andi	r24, 0x7E	; 126
    1066:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	aa 20       	and	r10, r10
    1070:	11 f0       	breq	.+4      	; 0x1076 <HID_Device_ProcessControlRequest+0x180>
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	ba 94       	dec	r11
    1078:	e8 0e       	add	r14, r24
    107a:	f9 1e       	adc	r15, r25
    107c:	08 1b       	sub	r16, r24
    107e:	19 0b       	sbc	r17, r25
    1080:	c6 01       	movw	r24, r12
    1082:	6a 2d       	mov	r22, r10
    1084:	4b 2d       	mov	r20, r11
    1086:	97 01       	movw	r18, r14
    1088:	13 d9       	rcall	.-3546   	; 0x2b0 <CALLBACK_HID_Device_ProcessHIDReport>
    108a:	89 2d       	mov	r24, r9
    108c:	98 2d       	mov	r25, r8
    108e:	9c 01       	movw	r18, r24
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	3e bf       	out	0x3e, r19	; 62
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	2d bf       	out	0x3d, r18	; 61
    109a:	50 c0       	rjmp	.+160    	; 0x113c <HID_Device_ProcessControlRequest+0x246>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    109c:	80 91 1b 01 	lds	r24, 0x011B
    10a0:	81 3a       	cpi	r24, 0xA1	; 161
    10a2:	09 f0       	breq	.+2      	; 0x10a6 <HID_Device_ProcessControlRequest+0x1b0>
    10a4:	4b c0       	rjmp	.+150    	; 0x113c <HID_Device_ProcessControlRequest+0x246>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10a6:	80 91 e8 00 	lds	r24, 0x00E8
    10aa:	87 7f       	andi	r24, 0xF7	; 247
    10ac:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    10b0:	f6 01       	movw	r30, r12
    10b2:	80 85       	ldd	r24, Z+8	; 0x08
    10b4:	3b c0       	rjmp	.+118    	; 0x112c <HID_Device_ProcessControlRequest+0x236>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    10b6:	80 91 1b 01 	lds	r24, 0x011B
    10ba:	81 32       	cpi	r24, 0x21	; 33
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <HID_Device_ProcessControlRequest+0x1ca>
    10be:	3e c0       	rjmp	.+124    	; 0x113c <HID_Device_ProcessControlRequest+0x246>
    10c0:	80 91 e8 00 	lds	r24, 0x00E8
    10c4:	87 7f       	andi	r24, 0xF7	; 247
    10c6:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    10ca:	bd d9       	rcall	.-3206   	; 0x446 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	80 91 1d 01 	lds	r24, 0x011D
    10d2:	81 11       	cpse	r24, r1
    10d4:	91 e0       	ldi	r25, 0x01	; 1
    10d6:	f6 01       	movw	r30, r12
    10d8:	90 87       	std	Z+8, r25	; 0x08
    10da:	30 c0       	rjmp	.+96     	; 0x113c <HID_Device_ProcessControlRequest+0x246>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    10dc:	80 91 1b 01 	lds	r24, 0x011B
    10e0:	81 32       	cpi	r24, 0x21	; 33
    10e2:	61 f5       	brne	.+88     	; 0x113c <HID_Device_ProcessControlRequest+0x246>
    10e4:	80 91 e8 00 	lds	r24, 0x00E8
    10e8:	87 7f       	andi	r24, 0xF7	; 247
    10ea:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    10ee:	ab d9       	rcall	.-3242   	; 0x446 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    10f0:	80 91 1d 01 	lds	r24, 0x011D
    10f4:	90 91 1e 01 	lds	r25, 0x011E
    10f8:	80 70       	andi	r24, 0x00	; 0
    10fa:	76 e0       	ldi	r23, 0x06	; 6
    10fc:	96 95       	lsr	r25
    10fe:	87 95       	ror	r24
    1100:	7a 95       	dec	r23
    1102:	e1 f7       	brne	.-8      	; 0x10fc <HID_Device_ProcessControlRequest+0x206>
    1104:	f6 01       	movw	r30, r12
    1106:	92 87       	std	Z+10, r25	; 0x0a
    1108:	81 87       	std	Z+9, r24	; 0x09
    110a:	18 c0       	rjmp	.+48     	; 0x113c <HID_Device_ProcessControlRequest+0x246>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    110c:	80 91 1b 01 	lds	r24, 0x011B
    1110:	81 3a       	cpi	r24, 0xA1	; 161
    1112:	a1 f4       	brne	.+40     	; 0x113c <HID_Device_ProcessControlRequest+0x246>
    1114:	80 91 e8 00 	lds	r24, 0x00E8
    1118:	87 7f       	andi	r24, 0xF7	; 247
    111a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    111e:	f6 01       	movw	r30, r12
    1120:	81 85       	ldd	r24, Z+9	; 0x09
    1122:	92 85       	ldd	r25, Z+10	; 0x0a
    1124:	96 95       	lsr	r25
    1126:	87 95       	ror	r24
    1128:	96 95       	lsr	r25
    112a:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    112c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1130:	80 91 e8 00 	lds	r24, 0x00E8
    1134:	8e 77       	andi	r24, 0x7E	; 126
    1136:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    113a:	85 d9       	rcall	.-3318   	; 0x446 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	7e be       	out	0x3e, r7	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	6d be       	out	0x3d, r6	; 61
    1146:	0f 90       	pop	r0
    1148:	0f 90       	pop	r0
    114a:	0f 90       	pop	r0
    114c:	cf 91       	pop	r28
    114e:	df 91       	pop	r29
    1150:	1f 91       	pop	r17
    1152:	0f 91       	pop	r16
    1154:	ff 90       	pop	r15
    1156:	ef 90       	pop	r14
    1158:	df 90       	pop	r13
    115a:	cf 90       	pop	r12
    115c:	bf 90       	pop	r11
    115e:	af 90       	pop	r10
    1160:	9f 90       	pop	r9
    1162:	8f 90       	pop	r8
    1164:	7f 90       	pop	r7
    1166:	6f 90       	pop	r6
    1168:	08 95       	ret

0000116a <memcmp>:
    116a:	fb 01       	movw	r30, r22
    116c:	dc 01       	movw	r26, r24
    116e:	04 c0       	rjmp	.+8      	; 0x1178 <memcmp+0xe>
    1170:	8d 91       	ld	r24, X+
    1172:	01 90       	ld	r0, Z+
    1174:	80 19       	sub	r24, r0
    1176:	21 f4       	brne	.+8      	; 0x1180 <memcmp+0x16>
    1178:	41 50       	subi	r20, 0x01	; 1
    117a:	50 40       	sbci	r21, 0x00	; 0
    117c:	c8 f7       	brcc	.-14     	; 0x1170 <memcmp+0x6>
    117e:	88 1b       	sub	r24, r24
    1180:	99 0b       	sbc	r25, r25
    1182:	08 95       	ret

00001184 <memcpy>:
    1184:	fb 01       	movw	r30, r22
    1186:	dc 01       	movw	r26, r24
    1188:	02 c0       	rjmp	.+4      	; 0x118e <memcpy+0xa>
    118a:	01 90       	ld	r0, Z+
    118c:	0d 92       	st	X+, r0
    118e:	41 50       	subi	r20, 0x01	; 1
    1190:	50 40       	sbci	r21, 0x00	; 0
    1192:	d8 f7       	brcc	.-10     	; 0x118a <memcpy+0x6>
    1194:	08 95       	ret

00001196 <memset>:
    1196:	dc 01       	movw	r26, r24
    1198:	01 c0       	rjmp	.+2      	; 0x119c <memset+0x6>
    119a:	6d 93       	st	X+, r22
    119c:	41 50       	subi	r20, 0x01	; 1
    119e:	50 40       	sbci	r21, 0x00	; 0
    11a0:	e0 f7       	brcc	.-8      	; 0x119a <memset+0x4>
    11a2:	08 95       	ret

000011a4 <_exit>:
    11a4:	f8 94       	cli

000011a6 <__stop_program>:
    11a6:	ff cf       	rjmp	.-2      	; 0x11a6 <__stop_program>
