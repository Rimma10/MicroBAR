
DualVirtualSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  00000f58  00000fec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800160  00800160  0000104c  2**0
                  ALLOC
  3 .debug_aranges 000002c8  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000007e3  00000000  00000000  00001314  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004b54  00000000  00000000  00001af7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001227  00000000  00000000  0000664b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003f3d  00000000  00000000  00007872  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000410  00000000  00000000  0000b7b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002232  00000000  00000000  0000bbc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002456  00000000  00000000  0000ddf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000368  00000000  00000000  00010248  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
   0:	b9 c0       	rjmp	.+370    	; 0x174 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   2:	00 00       	nop
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
   4:	d4 c0       	rjmp	.+424    	; 0x1ae <__bad_interrupt>
   6:	00 00       	nop
   8:	d2 c0       	rjmp	.+420    	; 0x1ae <__bad_interrupt>
   a:	00 00       	nop
   c:	d0 c0       	rjmp	.+416    	; 0x1ae <__bad_interrupt>
   e:	00 00       	nop
  10:	ce c0       	rjmp	.+412    	; 0x1ae <__bad_interrupt>
  12:	00 00       	nop
  14:	cc c0       	rjmp	.+408    	; 0x1ae <__bad_interrupt>
  16:	00 00       	nop
  18:	ca c0       	rjmp	.+404    	; 0x1ae <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c8 c0       	rjmp	.+400    	; 0x1ae <__bad_interrupt>
  1e:	00 00       	nop
  20:	c6 c0       	rjmp	.+396    	; 0x1ae <__bad_interrupt>
  22:	00 00       	nop
  24:	c4 c0       	rjmp	.+392    	; 0x1ae <__bad_interrupt>
  26:	00 00       	nop
  28:	8f c3       	rjmp	.+1822   	; 0x748 <__vector_10>
  2a:	00 00       	nop
  2c:	c0 c0       	rjmp	.+384    	; 0x1ae <__bad_interrupt>
  2e:	00 00       	nop
  30:	be c0       	rjmp	.+380    	; 0x1ae <__bad_interrupt>
  32:	00 00       	nop
  34:	bc c0       	rjmp	.+376    	; 0x1ae <__bad_interrupt>
  36:	00 00       	nop
  38:	ba c0       	rjmp	.+372    	; 0x1ae <__bad_interrupt>
  3a:	00 00       	nop
  3c:	b8 c0       	rjmp	.+368    	; 0x1ae <__bad_interrupt>
  3e:	00 00       	nop
  40:	b6 c0       	rjmp	.+364    	; 0x1ae <__bad_interrupt>
  42:	00 00       	nop
  44:	b4 c0       	rjmp	.+360    	; 0x1ae <__bad_interrupt>
  46:	00 00       	nop
  48:	b2 c0       	rjmp	.+356    	; 0x1ae <__bad_interrupt>
  4a:	00 00       	nop
  4c:	b0 c0       	rjmp	.+352    	; 0x1ae <__bad_interrupt>
  4e:	00 00       	nop
  50:	ae c0       	rjmp	.+348    	; 0x1ae <__bad_interrupt>
  52:	00 00       	nop
  54:	ac c0       	rjmp	.+344    	; 0x1ae <__bad_interrupt>
  56:	00 00       	nop
  58:	aa c0       	rjmp	.+340    	; 0x1ae <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a8 c0       	rjmp	.+336    	; 0x1ae <__bad_interrupt>
  5e:	00 00       	nop
  60:	a6 c0       	rjmp	.+332    	; 0x1ae <__bad_interrupt>
  62:	00 00       	nop
  64:	a4 c0       	rjmp	.+328    	; 0x1ae <__bad_interrupt>
  66:	00 00       	nop
  68:	a2 c0       	rjmp	.+324    	; 0x1ae <__bad_interrupt>
  6a:	00 00       	nop
  6c:	a0 c0       	rjmp	.+320    	; 0x1ae <__bad_interrupt>
  6e:	00 00       	nop
  70:	9e c0       	rjmp	.+316    	; 0x1ae <__bad_interrupt>
  72:	00 00       	nop
  74:	9c c0       	rjmp	.+312    	; 0x1ae <__bad_interrupt>
  76:	00 00       	nop
  78:	9a c0       	rjmp	.+308    	; 0x1ae <__bad_interrupt>
  7a:	00 00       	nop
  7c:	98 c0       	rjmp	.+304    	; 0x1ae <__bad_interrupt>
  7e:	00 00       	nop
  80:	96 c0       	rjmp	.+300    	; 0x1ae <__bad_interrupt>
  82:	00 00       	nop
  84:	94 c0       	rjmp	.+296    	; 0x1ae <__bad_interrupt>
  86:	00 00       	nop
  88:	92 c0       	rjmp	.+292    	; 0x1ae <__bad_interrupt>
  8a:	00 00       	nop
  8c:	90 c0       	rjmp	.+288    	; 0x1ae <__bad_interrupt>
  8e:	00 00       	nop
  90:	8e c0       	rjmp	.+284    	; 0x1ae <__bad_interrupt>
  92:	00 00       	nop
  94:	8c c0       	rjmp	.+280    	; 0x1ae <__bad_interrupt>
  96:	00 00       	nop

00000098 <DeviceDescriptor>:
  98:	12 01 10 01 ef 02 01 08 eb 03 4e 20 01 00 01 02     ..........N ....
  a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
  aa:	09 02 83 00 04 01 00 c0 32 08 0b 00 02 02 02 01     ........2.......
  ba:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
  ca:	24 02 06 05 24 06 00 01 07 05 83 03 08 00 ff 09     $...$...........
  da:	04 01 00 02 0a 00 00 00 07 05 02 02 10 00 01 07     ................
  ea:	05 81 02 10 00 01 08 0b 02 02 02 02 01 00 09 04     ................
  fa:	02 00 01 02 02 01 00 05 24 00 10 01 04 24 02 06     ........$....$..
 10a:	05 24 06 02 03 07 05 86 03 08 00 ff 09 04 03 00     .$..............
 11a:	02 0a 00 00 00 07 05 05 02 10 00 01 07 05 84 02     ................
 12a:	10 00 01                                            ...

0000012d <LanguageString>:
 12d:	04 03 09 04                                         ....

00000131 <ManufacturerString>:
 131:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
 141:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

0000014b <ProductString>:
 14b:	1c 03 4c 00 55 00 46 00 41 00 20 00 44 00 75 00     ..L.U.F.A. .D.u.
 15b:	61 00 6c 00 20 00 43 00 44 00 43 00 20 00 44 00     a.l. .C.D.C. .D.
 16b:	65 00 6d 00 6f 00 00 00 00                          e.m.o....

00000174 <__ctors_end>:
 174:	11 24       	eor	r1, r1
 176:	1f be       	out	0x3f, r1	; 63
 178:	cf ef       	ldi	r28, 0xFF	; 255
 17a:	d0 e2       	ldi	r29, 0x20	; 32
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	cd bf       	out	0x3d, r28	; 61

00000180 <__do_copy_data>:
 180:	11 e0       	ldi	r17, 0x01	; 1
 182:	a0 e0       	ldi	r26, 0x00	; 0
 184:	b1 e0       	ldi	r27, 0x01	; 1
 186:	e8 e5       	ldi	r30, 0x58	; 88
 188:	ff e0       	ldi	r31, 0x0F	; 15
 18a:	00 e0       	ldi	r16, 0x00	; 0
 18c:	0b bf       	out	0x3b, r16	; 59
 18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x14>
 190:	07 90       	elpm	r0, Z+
 192:	0d 92       	st	X+, r0
 194:	a0 36       	cpi	r26, 0x60	; 96
 196:	b1 07       	cpc	r27, r17
 198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0x10>

0000019a <__do_clear_bss>:
 19a:	11 e0       	ldi	r17, 0x01	; 1
 19c:	a0 e6       	ldi	r26, 0x60	; 96
 19e:	b1 e0       	ldi	r27, 0x01	; 1
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
 1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
 1a4:	ae 36       	cpi	r26, 0x6E	; 110
 1a6:	b1 07       	cpc	r27, r17
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
 1aa:	af d1       	rcall	.+862    	; 0x50a <main>
 1ac:	d3 c6       	rjmp	.+3494   	; 0xf54 <_exit>

000001ae <__bad_interrupt>:
 1ae:	28 cf       	rjmp	.-432    	; 0x0 <__vectors>

000001b0 <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 1b0:	8b b1       	in	r24, 0x0b	; 11
 1b2:	8f 70       	andi	r24, 0x0F	; 15
 1b4:	80 6a       	ori	r24, 0xA0	; 160
 1b6:	8b b9       	out	0x0b, r24	; 11
 */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
 1b8:	08 95       	ret

000001ba <EVENT_USB_Device_Disconnect>:
 1ba:	8b b1       	in	r24, 0x0b	; 11
 1bc:	8f 70       	andi	r24, 0x0F	; 15
 1be:	80 61       	ori	r24, 0x10	; 16
 1c0:	8b b9       	out	0x0b, r24	; 11
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
 1c2:	08 95       	ret

000001c4 <CDC2_Task>:

/** Function to manage CDC data transmission and reception to and from the host for the second CDC interface, which echoes back
 *  all data sent to it from the host.
 */
void CDC2_Task(void)
{
 1c4:	8f 92       	push	r8
 1c6:	9f 92       	push	r9
 1c8:	bf 92       	push	r11
 1ca:	cf 92       	push	r12
 1cc:	df 92       	push	r13
 1ce:	ef 92       	push	r14
 1d0:	ff 92       	push	r15
 1d2:	0f 93       	push	r16
 1d4:	1f 93       	push	r17
 1d6:	df 93       	push	r29
 1d8:	cf 93       	push	r28
 1da:	cd b7       	in	r28, 0x3d	; 61
 1dc:	de b7       	in	r29, 0x3e	; 62
		Endpoint_WaitUntilReady();

		/* Send an empty packet to prevent host buffering */
		Endpoint_ClearIN();
	}
}
 1de:	8d b6       	in	r8, 0x3d	; 61
 1e0:	9e b6       	in	r9, 0x3e	; 62
 *  all data sent to it from the host.
 */
void CDC2_Task(void)
{
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 1e2:	b0 90 65 01 	lds	r11, 0x0165
 1e6:	24 e0       	ldi	r18, 0x04	; 4
 1e8:	b2 16       	cp	r11, r18
 1ea:	09 f0       	breq	.+2      	; 0x1ee <CDC2_Task+0x2a>
 1ec:	41 c0       	rjmp	.+130    	; 0x270 <CDC2_Task+0xac>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 1ee:	85 e0       	ldi	r24, 0x05	; 5
 1f0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 1f4:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the Serial Rx Endpoint */
	Endpoint_SelectEndpoint(CDC2_RX_EPNUM);

	/* Check to see if any data has been received */
	if (Endpoint_IsOUTReceived())
 1f8:	82 ff       	sbrs	r24, 2
 1fa:	3a c0       	rjmp	.+116    	; 0x270 <CDC2_Task+0xac>
 1fc:	ce b6       	in	r12, 0x3e	; 62
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 1fe:	80 91 f2 00 	lds	r24, 0x00F2
 202:	90 91 f3 00 	lds	r25, 0x00F3
	{
		/* Create a temp buffer big enough to hold the incoming endpoint packet */
		uint8_t  Buffer[Endpoint_BytesInEndpoint()];
 206:	2d b7       	in	r18, 0x3d	; 61
 208:	3e b7       	in	r19, 0x3e	; 62
 20a:	28 1b       	sub	r18, r24
 20c:	39 0b       	sbc	r19, r25
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	f8 94       	cli
 212:	3e bf       	out	0x3e, r19	; 62
 214:	0f be       	out	0x3f, r0	; 63
 216:	2d bf       	out	0x3d, r18	; 61
 218:	0d b7       	in	r16, 0x3d	; 61
 21a:	1e b7       	in	r17, 0x3e	; 62
 21c:	0f 5f       	subi	r16, 0xFF	; 255
 21e:	1f 4f       	sbci	r17, 0xFF	; 255
 220:	e0 90 f2 00 	lds	r14, 0x00F2
 224:	f0 90 f3 00 	lds	r15, 0x00F3

		/* Remember how large the incoming packet is */
		uint16_t DataLength = Endpoint_BytesInEndpoint();

		/* Read in the incoming packet into the buffer */
		Endpoint_Read_Stream_LE(&Buffer, DataLength, NULL);
 228:	c8 01       	movw	r24, r16
 22a:	b7 01       	movw	r22, r14
 22c:	40 e0       	ldi	r20, 0x00	; 0
 22e:	50 e0       	ldi	r21, 0x00	; 0
 230:	da d5       	rcall	.+2996   	; 0xde6 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 232:	80 91 e8 00 	lds	r24, 0x00E8
 236:	8b 77       	andi	r24, 0x7B	; 123
 238:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 23c:	b0 92 e9 00 	sts	0x00E9, r11

		/* Select the Serial Tx Endpoint */
		Endpoint_SelectEndpoint(CDC2_TX_EPNUM);

		/* Write the received data to the endpoint */
		Endpoint_Write_Stream_LE(&Buffer, DataLength, NULL);
 240:	c8 01       	movw	r24, r16
 242:	b7 01       	movw	r22, r14
 244:	40 e0       	ldi	r20, 0x00	; 0
 246:	50 e0       	ldi	r21, 0x00	; 0
 248:	20 d6       	rcall	.+3136   	; 0xe8a <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 24a:	80 91 e8 00 	lds	r24, 0x00E8
 24e:	8e 77       	andi	r24, 0x7E	; 126
 250:	80 93 e8 00 	sts	0x00E8, r24

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();

		/* Wait until the endpoint is ready for the next packet */
		Endpoint_WaitUntilReady();
 254:	e8 d1       	rcall	.+976    	; 0x626 <Endpoint_WaitUntilReady>
 256:	80 91 e8 00 	lds	r24, 0x00E8
 25a:	8e 77       	andi	r24, 0x7E	; 126
 25c:	80 93 e8 00 	sts	0x00E8, r24
 260:	28 2d       	mov	r18, r8
 262:	3c 2d       	mov	r19, r12
 264:	c9 01       	movw	r24, r18
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	f8 94       	cli
 26a:	9e bf       	out	0x3e, r25	; 62
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	8d bf       	out	0x3d, r24	; 61

		/* Send an empty packet to prevent host buffering */
		Endpoint_ClearIN();
	}
}
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	f8 94       	cli
 274:	9e be       	out	0x3e, r9	; 62
 276:	0f be       	out	0x3f, r0	; 63
 278:	8d be       	out	0x3d, r8	; 61
 27a:	cf 91       	pop	r28
 27c:	df 91       	pop	r29
 27e:	1f 91       	pop	r17
 280:	0f 91       	pop	r16
 282:	ff 90       	pop	r15
 284:	ef 90       	pop	r14
 286:	df 90       	pop	r13
 288:	cf 90       	pop	r12
 28a:	bf 90       	pop	r11
 28c:	9f 90       	pop	r9
 28e:	8f 90       	pop	r8
 290:	08 95       	ret

00000292 <CDC1_Task>:
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
 292:	23 b1       	in	r18, 0x03	; 3
 294:	9c b1       	in	r25, 0x0c	; 12
	char*       ReportString    = NULL;
	uint8_t     JoyStatus_LCL   = Joystick_GetStatus();
	static bool ActionSent      = false;

	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 296:	80 91 65 01 	lds	r24, 0x0165
 29a:	84 30       	cpi	r24, 0x04	; 4
 29c:	09 f0       	breq	.+2      	; 0x2a0 <CDC1_Task+0xe>
 29e:	5e c0       	rjmp	.+188    	; 0x35c <CDC1_Task+0xca>
 2a0:	90 95       	com	r25
 2a2:	89 2f       	mov	r24, r25
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	80 73       	andi	r24, 0x30	; 48
 2a8:	90 70       	andi	r25, 0x00	; 0
 2aa:	95 95       	asr	r25
 2ac:	87 95       	ror	r24
 2ae:	92 2f       	mov	r25, r18
 2b0:	90 95       	com	r25
 2b2:	90 7e       	andi	r25, 0xE0	; 224
 2b4:	98 2b       	or	r25, r24
	  return;

	/* Determine if a joystick action has occurred */
	if (JoyStatus_LCL & JOY_UP)
 2b6:	97 fd       	sbrc	r25, 7
 2b8:	17 c0       	rjmp	.+46     	; 0x2e8 <CDC1_Task+0x56>
	  ReportString = "Joystick Up\r\n";
	else if (JoyStatus_LCL & JOY_DOWN)
 2ba:	94 ff       	sbrs	r25, 4
 2bc:	03 c0       	rjmp	.+6      	; 0x2c4 <CDC1_Task+0x32>
 2be:	20 e0       	ldi	r18, 0x00	; 0
 2c0:	31 e0       	ldi	r19, 0x01	; 1
 2c2:	14 c0       	rjmp	.+40     	; 0x2ec <CDC1_Task+0x5a>
	  ReportString = "Joystick Down\r\n";
	else if (JoyStatus_LCL & JOY_LEFT)
 2c4:	96 ff       	sbrs	r25, 6
 2c6:	03 c0       	rjmp	.+6      	; 0x2ce <CDC1_Task+0x3c>
 2c8:	20 e1       	ldi	r18, 0x10	; 16
 2ca:	31 e0       	ldi	r19, 0x01	; 1
 2cc:	0f c0       	rjmp	.+30     	; 0x2ec <CDC1_Task+0x5a>
	  ReportString = "Joystick Left\r\n";
	else if (JoyStatus_LCL & JOY_RIGHT)
 2ce:	93 ff       	sbrs	r25, 3
 2d0:	03 c0       	rjmp	.+6      	; 0x2d8 <CDC1_Task+0x46>
 2d2:	20 e2       	ldi	r18, 0x20	; 32
 2d4:	31 e0       	ldi	r19, 0x01	; 1
 2d6:	0a c0       	rjmp	.+20     	; 0x2ec <CDC1_Task+0x5a>
	  ReportString = "Joystick Right\r\n";
	else if (JoyStatus_LCL & JOY_PRESS)
 2d8:	95 ff       	sbrs	r25, 5
 2da:	03 c0       	rjmp	.+6      	; 0x2e2 <CDC1_Task+0x50>
 2dc:	21 e3       	ldi	r18, 0x31	; 49
 2de:	31 e0       	ldi	r19, 0x01	; 1
 2e0:	05 c0       	rjmp	.+10     	; 0x2ec <CDC1_Task+0x5a>
	  ReportString = "Joystick Pressed\r\n";
	else
	  ActionSent = false;
 2e2:	10 92 60 01 	sts	0x0160, r1
 2e6:	2e c0       	rjmp	.+92     	; 0x344 <CDC1_Task+0xb2>
 2e8:	24 e4       	ldi	r18, 0x44	; 68
 2ea:	31 e0       	ldi	r19, 0x01	; 1

	/* Flag management - Only allow one string to be sent per action */
	if ((ReportString != NULL) && (ActionSent == false) && LineEncoding1.BaudRateBPS)
 2ec:	80 91 60 01 	lds	r24, 0x0160
 2f0:	88 23       	and	r24, r24
 2f2:	41 f5       	brne	.+80     	; 0x344 <CDC1_Task+0xb2>
 2f4:	80 91 52 01 	lds	r24, 0x0152
 2f8:	90 91 53 01 	lds	r25, 0x0153
 2fc:	a0 91 54 01 	lds	r26, 0x0154
 300:	b0 91 55 01 	lds	r27, 0x0155
 304:	00 97       	sbiw	r24, 0x00	; 0
 306:	a1 05       	cpc	r26, r1
 308:	b1 05       	cpc	r27, r1
 30a:	e1 f0       	breq	.+56     	; 0x344 <CDC1_Task+0xb2>
	{
		ActionSent = true;
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	80 93 60 01 	sts	0x0160, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 312:	80 93 e9 00 	sts	0x00E9, r24

		/* Select the Serial Tx Endpoint */
		Endpoint_SelectEndpoint(CDC1_TX_EPNUM);

		/* Write the String to the Endpoint */
		Endpoint_Write_Stream_LE(ReportString, strlen(ReportString), NULL);
 316:	f9 01       	movw	r30, r18
 318:	01 90       	ld	r0, Z+
 31a:	00 20       	and	r0, r0
 31c:	e9 f7       	brne	.-6      	; 0x318 <CDC1_Task+0x86>
 31e:	31 97       	sbiw	r30, 0x01	; 1
 320:	e2 1b       	sub	r30, r18
 322:	f3 0b       	sbc	r31, r19
 324:	c9 01       	movw	r24, r18
 326:	bf 01       	movw	r22, r30
 328:	40 e0       	ldi	r20, 0x00	; 0
 32a:	50 e0       	ldi	r21, 0x00	; 0
 32c:	ae d5       	rcall	.+2908   	; 0xe8a <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 32e:	80 91 e8 00 	lds	r24, 0x00E8
 332:	8e 77       	andi	r24, 0x7E	; 126
 334:	80 93 e8 00 	sts	0x00E8, r24

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();

		/* Wait until the endpoint is ready for another packet */
		Endpoint_WaitUntilReady();
 338:	76 d1       	rcall	.+748    	; 0x626 <Endpoint_WaitUntilReady>
 33a:	80 91 e8 00 	lds	r24, 0x00E8
 33e:	8e 77       	andi	r24, 0x7E	; 126
 340:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 344:	82 e0       	ldi	r24, 0x02	; 2
 346:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 34a:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the Serial Rx Endpoint */
	Endpoint_SelectEndpoint(CDC1_RX_EPNUM);

	/* Throw away any received data from the host */
	if (Endpoint_IsOUTReceived())
 34e:	82 ff       	sbrs	r24, 2
 350:	05 c0       	rjmp	.+10     	; 0x35c <CDC1_Task+0xca>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 352:	80 91 e8 00 	lds	r24, 0x00E8
 356:	8b 77       	andi	r24, 0x7B	; 123
 358:	80 93 e8 00 	sts	0x00E8, r24
 35c:	08 95       	ret

0000035e <EVENT_USB_Device_ControlRequest>:
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	/* Determine which interface's Line Coding data is being set from the wIndex parameter */
	void* LineEncodingData = (USB_ControlRequest.wIndex == 0) ? &LineEncoding1 : &LineEncoding2;
 35e:	80 91 6a 01 	lds	r24, 0x016A
 362:	90 91 6b 01 	lds	r25, 0x016B
 366:	89 2b       	or	r24, r25
 368:	19 f0       	breq	.+6      	; 0x370 <EVENT_USB_Device_ControlRequest+0x12>
 36a:	29 e5       	ldi	r18, 0x59	; 89
 36c:	31 e0       	ldi	r19, 0x01	; 1
 36e:	02 c0       	rjmp	.+4      	; 0x374 <EVENT_USB_Device_ControlRequest+0x16>
 370:	22 e5       	ldi	r18, 0x52	; 82
 372:	31 e0       	ldi	r19, 0x01	; 1

	/* Process CDC specific control requests */
	switch (USB_ControlRequest.bRequest)
 374:	80 91 67 01 	lds	r24, 0x0167
 378:	81 32       	cpi	r24, 0x21	; 33
 37a:	29 f0       	breq	.+10     	; 0x386 <EVENT_USB_Device_ControlRequest+0x28>
 37c:	82 32       	cpi	r24, 0x22	; 34
 37e:	39 f1       	breq	.+78     	; 0x3ce <EVENT_USB_Device_ControlRequest+0x70>
 380:	80 32       	cpi	r24, 0x20	; 32
 382:	79 f5       	brne	.+94     	; 0x3e2 <EVENT_USB_Device_ControlRequest+0x84>
 384:	11 c0       	rjmp	.+34     	; 0x3a8 <EVENT_USB_Device_ControlRequest+0x4a>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 386:	80 91 66 01 	lds	r24, 0x0166
 38a:	81 3a       	cpi	r24, 0xA1	; 161
 38c:	51 f5       	brne	.+84     	; 0x3e2 <EVENT_USB_Device_ControlRequest+0x84>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 38e:	80 91 e8 00 	lds	r24, 0x00E8
 392:	87 7f       	andi	r24, 0xF7	; 247
 394:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Write the line coding data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(LineEncodingData, sizeof(CDC_LineEncoding_t));
 398:	c9 01       	movw	r24, r18
 39a:	67 e0       	ldi	r22, 0x07	; 7
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	23 d4       	rcall	.+2118   	; 0xbe6 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 3a0:	80 91 e8 00 	lds	r24, 0x00E8
 3a4:	8b 77       	andi	r24, 0x7B	; 123
 3a6:	10 c0       	rjmp	.+32     	; 0x3c8 <EVENT_USB_Device_ControlRequest+0x6a>
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 3a8:	80 91 66 01 	lds	r24, 0x0166
 3ac:	81 32       	cpi	r24, 0x21	; 33
 3ae:	c9 f4       	brne	.+50     	; 0x3e2 <EVENT_USB_Device_ControlRequest+0x84>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 3b0:	80 91 e8 00 	lds	r24, 0x00E8
 3b4:	87 7f       	andi	r24, 0xF7	; 247
 3b6:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Read the line coding data in from the host into the global struct */
				Endpoint_Read_Control_Stream_LE(LineEncodingData, sizeof(CDC_LineEncoding_t));
 3ba:	c9 01       	movw	r24, r18
 3bc:	67 e0       	ldi	r22, 0x07	; 7
 3be:	70 e0       	ldi	r23, 0x00	; 0
 3c0:	70 d4       	rcall	.+2272   	; 0xca2 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 3c2:	80 91 e8 00 	lds	r24, 0x00E8
 3c6:	8e 77       	andi	r24, 0x7E	; 126
 3c8:	80 93 e8 00 	sts	0x00E8, r24
 3cc:	08 95       	ret
				Endpoint_ClearIN();
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 3ce:	80 91 66 01 	lds	r24, 0x0166
 3d2:	81 32       	cpi	r24, 0x21	; 33
 3d4:	31 f4       	brne	.+12     	; 0x3e2 <EVENT_USB_Device_ControlRequest+0x84>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 3d6:	80 91 e8 00 	lds	r24, 0x00E8
 3da:	87 7f       	andi	r24, 0xF7	; 247
 3dc:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 3e0:	01 c1       	rjmp	.+514    	; 0x5e4 <Endpoint_ClearStatusStage>
 3e2:	08 95       	ret

000003e4 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the USB_ConfigurationChanged event. This is fired when the host set the current configuration
 *  of the USB device after enumeration - the device endpoints are configured and the CDC management tasks are started.
 */
void EVENT_USB_Device_ConfigurationChanged(void)
{
 3e4:	bf 92       	push	r11
 3e6:	cf 92       	push	r12
 3e8:	df 92       	push	r13
 3ea:	ef 92       	push	r14
 3ec:	ff 92       	push	r15
 3ee:	0f 93       	push	r16
 3f0:	1f 93       	push	r17
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	61 e8       	ldi	r22, 0x81	; 129
 3f6:	42 e1       	ldi	r20, 0x12	; 18
 3f8:	c0 d0       	rcall	.+384    	; 0x57a <Endpoint_ConfigureEndpoint_Prv>
 3fa:	08 2f       	mov	r16, r24
	/* Setup first CDC Interface's Endpoints */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC1_TX_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_IN,
	                                            CDC_TXRX_EPSIZE, ENDPOINT_BANK_SINGLE);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC1_RX_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_OUT,
	                                            CDC_TXRX_EPSIZE, ENDPOINT_BANK_SINGLE);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC1_NOTIFICATION_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 3fc:	82 e0       	ldi	r24, 0x02	; 2
 3fe:	60 e8       	ldi	r22, 0x80	; 128
 400:	42 e1       	ldi	r20, 0x12	; 18
 402:	bb d0       	rcall	.+374    	; 0x57a <Endpoint_ConfigureEndpoint_Prv>
 404:	c8 2e       	mov	r12, r24
 406:	83 e0       	ldi	r24, 0x03	; 3
 408:	61 ec       	ldi	r22, 0xC1	; 193
 40a:	42 e0       	ldi	r20, 0x02	; 2
 40c:	b6 d0       	rcall	.+364    	; 0x57a <Endpoint_ConfigureEndpoint_Prv>
 40e:	e8 2e       	mov	r14, r24
 410:	84 e0       	ldi	r24, 0x04	; 4
 412:	61 e8       	ldi	r22, 0x81	; 129
 414:	42 e1       	ldi	r20, 0x12	; 18
 416:	b1 d0       	rcall	.+354    	; 0x57a <Endpoint_ConfigureEndpoint_Prv>
 418:	b8 2e       	mov	r11, r24
 41a:	85 e0       	ldi	r24, 0x05	; 5
 41c:	60 e8       	ldi	r22, 0x80	; 128
 41e:	42 e1       	ldi	r20, 0x12	; 18
 420:	ac d0       	rcall	.+344    	; 0x57a <Endpoint_ConfigureEndpoint_Prv>
 422:	48 2f       	mov	r20, r24
 424:	10 e0       	ldi	r17, 0x00	; 0
 426:	dd 24       	eor	r13, r13
 428:	0c 21       	and	r16, r12
 42a:	1d 21       	and	r17, r13
 42c:	01 70       	andi	r16, 0x01	; 1
 42e:	10 70       	andi	r17, 0x00	; 0
 430:	ff 24       	eor	r15, r15
 432:	0e 21       	and	r16, r14
 434:	1f 21       	and	r17, r15
	                                            CDC_NOTIFICATION_EPSIZE, ENDPOINT_BANK_SINGLE);

	/* Setup second CDC Interface's Endpoints */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC2_TX_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_IN,
 436:	20 e0       	ldi	r18, 0x00	; 0
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	01 2b       	or	r16, r17
 43c:	11 f0       	breq	.+4      	; 0x442 <EVENT_USB_Device_ConfigurationChanged+0x5e>
 43e:	21 e0       	ldi	r18, 0x01	; 1
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	8b 2d       	mov	r24, r11
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	28 23       	and	r18, r24
 448:	39 23       	and	r19, r25
	                                            CDC_TXRX_EPSIZE, ENDPOINT_BANK_SINGLE);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC2_RX_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_OUT,
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	23 2b       	or	r18, r19
 450:	11 f0       	breq	.+4      	; 0x456 <EVENT_USB_Device_ConfigurationChanged+0x72>
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	04 2f       	mov	r16, r20
 458:	10 e0       	ldi	r17, 0x00	; 0
 45a:	08 23       	and	r16, r24
 45c:	19 23       	and	r17, r25
 45e:	86 e0       	ldi	r24, 0x06	; 6
 460:	61 ec       	ldi	r22, 0xC1	; 193
 462:	42 e0       	ldi	r20, 0x02	; 2
 464:	8a d0       	rcall	.+276    	; 0x57a <Endpoint_ConfigureEndpoint_Prv>
	                                            CDC_TXRX_EPSIZE, ENDPOINT_BANK_SINGLE);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC2_NOTIFICATION_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
	                                            CDC_NOTIFICATION_EPSIZE, ENDPOINT_BANK_SINGLE);

	/* Reset line encoding baud rates so that the host knows to send new values */
	LineEncoding1.BaudRateBPS = 0;
 466:	10 92 52 01 	sts	0x0152, r1
 46a:	10 92 53 01 	sts	0x0153, r1
 46e:	10 92 54 01 	sts	0x0154, r1
 472:	10 92 55 01 	sts	0x0155, r1
	LineEncoding2.BaudRateBPS = 0;
 476:	10 92 59 01 	sts	0x0159, r1
 47a:	10 92 5a 01 	sts	0x015A, r1
 47e:	10 92 5b 01 	sts	0x015B, r1
 482:	10 92 5c 01 	sts	0x015C, r1

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 486:	20 e0       	ldi	r18, 0x00	; 0
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	01 2b       	or	r16, r17
 48c:	11 f0       	breq	.+4      	; 0x492 <EVENT_USB_Device_ConfigurationChanged+0xae>
 48e:	21 e0       	ldi	r18, 0x01	; 1
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	28 23       	and	r18, r24
 496:	39 23       	and	r19, r25
 498:	23 2b       	or	r18, r19
 49a:	11 f4       	brne	.+4      	; 0x4a0 <EVENT_USB_Device_ConfigurationChanged+0xbc>
 49c:	90 e9       	ldi	r25, 0x90	; 144
 49e:	01 c0       	rjmp	.+2      	; 0x4a2 <EVENT_USB_Device_ConfigurationChanged+0xbe>
 4a0:	90 e6       	ldi	r25, 0x60	; 96
 4a2:	8b b1       	in	r24, 0x0b	; 11
 4a4:	8f 70       	andi	r24, 0x0F	; 15
 4a6:	98 2b       	or	r25, r24
 4a8:	9b b9       	out	0x0b, r25	; 11
}
 4aa:	1f 91       	pop	r17
 4ac:	0f 91       	pop	r16
 4ae:	ff 90       	pop	r15
 4b0:	ef 90       	pop	r14
 4b2:	df 90       	pop	r13
 4b4:	cf 90       	pop	r12
 4b6:	bf 90       	pop	r11
 4b8:	08 95       	ret

000004ba <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 4ba:	84 b7       	in	r24, 0x34	; 52
 4bc:	87 7f       	andi	r24, 0xF7	; 247
 4be:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 4c0:	88 e1       	ldi	r24, 0x18	; 24
 4c2:	0f b6       	in	r0, 0x3f	; 63
 4c4:	f8 94       	cli
 4c6:	80 93 60 00 	sts	0x0060, r24
 4ca:	10 92 60 00 	sts	0x0060, r1
 4ce:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	20 e8       	ldi	r18, 0x80	; 128
 4d6:	0f b6       	in	r0, 0x3f	; 63
 4d8:	f8 94       	cli
 4da:	20 93 61 00 	sts	0x0061, r18
 4de:	80 93 61 00 	sts	0x0061, r24
 4e2:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
 4e4:	84 b1       	in	r24, 0x04	; 4
 4e6:	8f 71       	andi	r24, 0x1F	; 31
 4e8:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
 4ea:	8d b1       	in	r24, 0x0d	; 13
 4ec:	8f 7c       	andi	r24, 0xCF	; 207
 4ee:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
 4f0:	85 b1       	in	r24, 0x05	; 5
 4f2:	80 6e       	ori	r24, 0xE0	; 224
 4f4:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
 4f6:	8e b1       	in	r24, 0x0e	; 14
 4f8:	80 63       	ori	r24, 0x30	; 48
 4fa:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 4fc:	8a b1       	in	r24, 0x0a	; 10
 4fe:	80 6f       	ori	r24, 0xF0	; 240
 500:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 502:	8b b1       	in	r24, 0x0b	; 11
 504:	8f 70       	andi	r24, 0x0F	; 15
 506:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	USB_Init();
}
 508:	09 c1       	rjmp	.+530    	; 0x71c <USB_Init>

0000050a <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
 50a:	d7 df       	rcall	.-82     	; 0x4ba <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 50c:	8b b1       	in	r24, 0x0b	; 11
 50e:	8f 70       	andi	r24, 0x0F	; 15
 510:	80 61       	ori	r24, 0x10	; 16
 512:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
 514:	78 94       	sei

	for (;;)
	{
		CDC1_Task();
 516:	bd de       	rcall	.-646    	; 0x292 <CDC1_Task>
		CDC2_Task();
 518:	55 de       	rcall	.-854    	; 0x1c4 <CDC2_Task>
		USB_USBTask();
 51a:	09 d5       	rcall	.+2578   	; 0xf2e <USB_USBTask>
 51c:	fc cf       	rjmp	.-8      	; 0x516 <main+0xc>

0000051e <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
 51e:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 520:	92 30       	cpi	r25, 0x02	; 2
 522:	49 f0       	breq	.+18     	; 0x536 <CALLBACK_USB_GetDescriptor+0x18>
 524:	93 30       	cpi	r25, 0x03	; 3
 526:	61 f0       	breq	.+24     	; 0x540 <CALLBACK_USB_GetDescriptor+0x22>
 528:	91 30       	cpi	r25, 0x01	; 1
 52a:	f9 f4       	brne	.+62     	; 0x56a <CALLBACK_USB_GetDescriptor+0x4c>
 52c:	e8 e9       	ldi	r30, 0x98	; 152
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	22 e1       	ldi	r18, 0x12	; 18
 532:	30 e0       	ldi	r19, 0x00	; 0
 534:	1e c0       	rjmp	.+60     	; 0x572 <CALLBACK_USB_GetDescriptor+0x54>
 536:	ea ea       	ldi	r30, 0xAA	; 170
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	23 e8       	ldi	r18, 0x83	; 131
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	19 c0       	rjmp	.+50     	; 0x572 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 540:	81 30       	cpi	r24, 0x01	; 1
 542:	49 f0       	breq	.+18     	; 0x556 <CALLBACK_USB_GetDescriptor+0x38>
 544:	81 30       	cpi	r24, 0x01	; 1
 546:	18 f0       	brcs	.+6      	; 0x54e <CALLBACK_USB_GetDescriptor+0x30>
 548:	82 30       	cpi	r24, 0x02	; 2
 54a:	79 f4       	brne	.+30     	; 0x56a <CALLBACK_USB_GetDescriptor+0x4c>
 54c:	08 c0       	rjmp	.+16     	; 0x55e <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 54e:	ed e2       	ldi	r30, 0x2D	; 45
 550:	f1 e0       	ldi	r31, 0x01	; 1
 552:	84 91       	lpm	r24, Z+
 554:	07 c0       	rjmp	.+14     	; 0x564 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 556:	e1 e3       	ldi	r30, 0x31	; 49
 558:	f1 e0       	ldi	r31, 0x01	; 1
 55a:	84 91       	lpm	r24, Z+
 55c:	03 c0       	rjmp	.+6      	; 0x564 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 55e:	eb e4       	ldi	r30, 0x4B	; 75
 560:	f1 e0       	ldi	r31, 0x01	; 1
 562:	84 91       	lpm	r24, Z+
 564:	28 2f       	mov	r18, r24
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	04 c0       	rjmp	.+8      	; 0x572 <CALLBACK_USB_GetDescriptor+0x54>
 56a:	e0 e0       	ldi	r30, 0x00	; 0
 56c:	f0 e0       	ldi	r31, 0x00	; 0
 56e:	20 e0       	ldi	r18, 0x00	; 0
 570:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 572:	ed 93       	st	X+, r30
 574:	fc 93       	st	X, r31
	return Size;
}
 576:	c9 01       	movw	r24, r18
 578:	08 95       	ret

0000057a <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
 57a:	38 2f       	mov	r19, r24
 57c:	28 2f       	mov	r18, r24
 57e:	2c c0       	rjmp	.+88     	; 0x5d8 <Endpoint_ConfigureEndpoint_Prv+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 580:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);
		
		if (EPNum == Number)
 584:	23 17       	cp	r18, r19
 586:	21 f4       	brne	.+8      	; 0x590 <Endpoint_ConfigureEndpoint_Prv+0x16>
 588:	76 2f       	mov	r23, r22
 58a:	94 2f       	mov	r25, r20
 58c:	50 e0       	ldi	r21, 0x00	; 0
 58e:	06 c0       	rjmp	.+12     	; 0x59c <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 590:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 594:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
 598:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 59c:	91 ff       	sbrs	r25, 1
 59e:	1b c0       	rjmp	.+54     	; 0x5d6 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 5a0:	80 91 eb 00 	lds	r24, 0x00EB
 5a4:	8e 7f       	andi	r24, 0xFE	; 254
 5a6:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= (1 << ALLOC);
 5aa:	80 91 ed 00 	lds	r24, 0x00ED
 5ae:	82 70       	andi	r24, 0x02	; 2
 5b0:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 5b4:	80 91 eb 00 	lds	r24, 0x00EB
 5b8:	81 60       	ori	r24, 0x01	; 1
 5ba:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 5be:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 5c2:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
 5c6:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 5ca:	80 91 ee 00 	lds	r24, 0x00EE
			
		if (!(Endpoint_IsConfigured()))
 5ce:	87 fd       	sbrc	r24, 7
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <Endpoint_ConfigureEndpoint_Prv+0x5c>
 5d2:	80 e0       	ldi	r24, 0x00	; 0
 5d4:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else	
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 5d6:	2f 5f       	subi	r18, 0xFF	; 255
 5d8:	27 30       	cpi	r18, 0x07	; 7
 5da:	90 f2       	brcs	.-92     	; 0x580 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 5dc:	30 93 e9 00 	sts	0x00E9, r19
 5e0:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 5e2:	08 95       	ret

000005e4 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 5e4:	80 91 66 01 	lds	r24, 0x0166
 5e8:	88 23       	and	r24, r24
 5ea:	9c f4       	brge	.+38     	; 0x612 <Endpoint_ClearStatusStage+0x2e>
 5ec:	04 c0       	rjmp	.+8      	; 0x5f6 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 5ee:	80 91 65 01 	lds	r24, 0x0165
 5f2:	88 23       	and	r24, r24
 5f4:	b9 f0       	breq	.+46     	; 0x624 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 5f6:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 5fa:	82 ff       	sbrs	r24, 2
 5fc:	f8 cf       	rjmp	.-16     	; 0x5ee <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 5fe:	80 91 e8 00 	lds	r24, 0x00E8
 602:	8b 77       	andi	r24, 0x7B	; 123
 604:	80 93 e8 00 	sts	0x00E8, r24
 608:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 60a:	80 91 65 01 	lds	r24, 0x0165
 60e:	88 23       	and	r24, r24
 610:	49 f0       	breq	.+18     	; 0x624 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 612:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 616:	80 ff       	sbrs	r24, 0
 618:	f8 cf       	rjmp	.-16     	; 0x60a <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 61a:	80 91 e8 00 	lds	r24, 0x00E8
 61e:	8e 77       	andi	r24, 0x7E	; 126
 620:	80 93 e8 00 	sts	0x00E8, r24
 624:	08 95       	ret

00000626 <Endpoint_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 626:	40 91 e4 00 	lds	r20, 0x00E4
 62a:	50 91 e5 00 	lds	r21, 0x00E5
 62e:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
 630:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 634:	80 ff       	sbrs	r24, 0
 636:	05 c0       	rjmp	.+10     	; 0x642 <Endpoint_WaitUntilReady+0x1c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 638:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
 63c:	80 ff       	sbrs	r24, 0
 63e:	05 c0       	rjmp	.+10     	; 0x64a <Endpoint_WaitUntilReady+0x24>
 640:	22 c0       	rjmp	.+68     	; 0x686 <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 642:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 646:	82 fd       	sbrc	r24, 2
 648:	1e c0       	rjmp	.+60     	; 0x686 <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 64a:	80 91 65 01 	lds	r24, 0x0165

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 64e:	88 23       	and	r24, r24
 650:	11 f4       	brne	.+4      	; 0x656 <Endpoint_WaitUntilReady+0x30>
 652:	82 e0       	ldi	r24, 0x02	; 2
 654:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 656:	85 30       	cpi	r24, 0x05	; 5
 658:	11 f4       	brne	.+4      	; 0x65e <Endpoint_WaitUntilReady+0x38>
 65a:	83 e0       	ldi	r24, 0x03	; 3
 65c:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 65e:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 662:	85 ff       	sbrs	r24, 5
 664:	02 c0       	rjmp	.+4      	; 0x66a <Endpoint_WaitUntilReady+0x44>
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	08 95       	ret
 66a:	80 91 e4 00 	lds	r24, 0x00E4
 66e:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 672:	84 17       	cp	r24, r20
 674:	95 07       	cpc	r25, r21
 676:	e1 f2       	breq	.-72     	; 0x630 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 678:	22 23       	and	r18, r18
 67a:	11 f4       	brne	.+4      	; 0x680 <Endpoint_WaitUntilReady+0x5a>
 67c:	84 e0       	ldi	r24, 0x04	; 4
 67e:	08 95       	ret
 680:	21 50       	subi	r18, 0x01	; 1
 682:	ac 01       	movw	r20, r24
 684:	d5 cf       	rjmp	.-86     	; 0x630 <Endpoint_WaitUntilReady+0xa>
 686:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 688:	08 95       	ret

0000068a <USB_ResetInterface>:

void USB_ResetInterface(void)
{
 68a:	ef 92       	push	r14
 68c:	ff 92       	push	r15
 68e:	0f 93       	push	r16
 690:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 692:	4d d0       	rcall	.+154    	; 0x72e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 694:	54 d0       	rcall	.+168    	; 0x73e <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
 696:	08 ed       	ldi	r16, 0xD8	; 216
 698:	10 e0       	ldi	r17, 0x00	; 0
 69a:	f8 01       	movw	r30, r16
 69c:	80 81       	ld	r24, Z

				USBCON = (Temp & ~(1 << USBE));
 69e:	98 2f       	mov	r25, r24
 6a0:	9f 77       	andi	r25, 0x7F	; 127
 6a2:	90 83       	st	Z, r25
				USBCON = (Temp |  (1 << USBE));
 6a4:	80 68       	ori	r24, 0x80	; 128
 6a6:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 6a8:	80 81       	ld	r24, Z
 6aa:	8f 7d       	andi	r24, 0xDF	; 223
 6ac:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 6ae:	e7 ed       	ldi	r30, 0xD7	; 215
 6b0:	f0 e0       	ldi	r31, 0x00	; 0
 6b2:	80 81       	ld	r24, Z
 6b4:	80 68       	ori	r24, 0x80	; 128
 6b6:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
 6b8:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
 6ba:	10 92 65 01 	sts	0x0165, r1
	USB_ConfigurationNumber  = 0;
 6be:	10 92 63 01 	sts	0x0163, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
 6c2:	10 92 62 01 	sts	0x0162, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
 6c6:	10 92 61 01 	sts	0x0161, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 6ca:	80 ee       	ldi	r24, 0xE0	; 224
 6cc:	e8 2e       	mov	r14, r24
 6ce:	f1 2c       	mov	r15, r1
 6d0:	f7 01       	movw	r30, r14
 6d2:	80 81       	ld	r24, Z
 6d4:	8b 7f       	andi	r24, 0xFB	; 251
 6d6:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 6d8:	f8 01       	movw	r30, r16
 6da:	80 81       	ld	r24, Z
 6dc:	81 60       	ori	r24, 0x01	; 1
 6de:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	60 e0       	ldi	r22, 0x00	; 0
 6e4:	42 e0       	ldi	r20, 0x02	; 2
 6e6:	49 df       	rcall	.-366    	; 0x57a <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 6e8:	e1 ee       	ldi	r30, 0xE1	; 225
 6ea:	f0 e0       	ldi	r31, 0x00	; 0
 6ec:	80 81       	ld	r24, Z
 6ee:	8e 7f       	andi	r24, 0xFE	; 254
 6f0:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 6f2:	e2 ee       	ldi	r30, 0xE2	; 226
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	80 81       	ld	r24, Z
 6f8:	81 60       	ori	r24, 0x01	; 1
 6fa:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 6fc:	80 81       	ld	r24, Z
 6fe:	88 60       	ori	r24, 0x08	; 8
 700:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 702:	f7 01       	movw	r30, r14
 704:	80 81       	ld	r24, Z
 706:	8e 7f       	andi	r24, 0xFE	; 254
 708:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 70a:	f8 01       	movw	r30, r16
 70c:	80 81       	ld	r24, Z
 70e:	80 61       	ori	r24, 0x10	; 16
 710:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 712:	1f 91       	pop	r17
 714:	0f 91       	pop	r16
 716:	ff 90       	pop	r15
 718:	ef 90       	pop	r14
 71a:	08 95       	ret

0000071c <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 71c:	e7 ed       	ldi	r30, 0xD7	; 215
 71e:	f0 e0       	ldi	r31, 0x00	; 0
 720:	80 81       	ld	r24, Z
 722:	81 60       	ori	r24, 0x01	; 1
 724:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	80 93 64 01 	sts	0x0164, r24

	USB_ResetInterface();
}
 72c:	ae cf       	rjmp	.-164    	; 0x68a <USB_ResetInterface>

0000072e <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 72e:	e8 ed       	ldi	r30, 0xD8	; 216
 730:	f0 e0       	ldi	r31, 0x00	; 0
 732:	80 81       	ld	r24, Z
 734:	8c 7f       	andi	r24, 0xFC	; 252
 736:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 738:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 73c:	08 95       	ret

0000073e <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 73e:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 742:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 746:	08 95       	ret

00000748 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 748:	1f 92       	push	r1
 74a:	0f 92       	push	r0
 74c:	0f b6       	in	r0, 0x3f	; 63
 74e:	0f 92       	push	r0
 750:	0b b6       	in	r0, 0x3b	; 59
 752:	0f 92       	push	r0
 754:	11 24       	eor	r1, r1
 756:	2f 93       	push	r18
 758:	3f 93       	push	r19
 75a:	4f 93       	push	r20
 75c:	5f 93       	push	r21
 75e:	6f 93       	push	r22
 760:	7f 93       	push	r23
 762:	8f 93       	push	r24
 764:	9f 93       	push	r25
 766:	af 93       	push	r26
 768:	bf 93       	push	r27
 76a:	ef 93       	push	r30
 76c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 76e:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 772:	82 ff       	sbrs	r24, 2
 774:	0a c0       	rjmp	.+20     	; 0x78a <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 776:	80 91 e2 00 	lds	r24, 0x00E2
 77a:	82 ff       	sbrs	r24, 2
 77c:	06 c0       	rjmp	.+12     	; 0x78a <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 77e:	80 91 e1 00 	lds	r24, 0x00E1
 782:	8b 7f       	andi	r24, 0xFB	; 251
 784:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 788:	2d d2       	rcall	.+1114   	; 0xbe4 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 78a:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 78e:	80 ff       	sbrs	r24, 0
 790:	1e c0       	rjmp	.+60     	; 0x7ce <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 792:	80 91 d8 00 	lds	r24, 0x00D8
 796:	80 ff       	sbrs	r24, 0
 798:	1a c0       	rjmp	.+52     	; 0x7ce <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 79a:	80 91 da 00 	lds	r24, 0x00DA
 79e:	8e 7f       	andi	r24, 0xFE	; 254
 7a0:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 7a4:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 7a8:	80 ff       	sbrs	r24, 0
 7aa:	0d c0       	rjmp	.+26     	; 0x7c6 <__vector_10+0x7e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 7ac:	8c e0       	ldi	r24, 0x0C	; 12
 7ae:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 7b0:	89 b5       	in	r24, 0x29	; 41
 7b2:	82 60       	ori	r24, 0x02	; 2
 7b4:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 7b6:	09 b4       	in	r0, 0x29	; 41
 7b8:	00 fe       	sbrs	r0, 0
 7ba:	fd cf       	rjmp	.-6      	; 0x7b6 <__vector_10+0x6e>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	80 93 65 01 	sts	0x0165, r24
			EVENT_USB_Device_Connect();
 7c2:	f6 dc       	rcall	.-1556   	; 0x1b0 <EVENT_USB_Device_Connect>
 7c4:	04 c0       	rjmp	.+8      	; 0x7ce <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
 7c6:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 7c8:	10 92 65 01 	sts	0x0165, r1
			EVENT_USB_Device_Disconnect();
 7cc:	f6 dc       	rcall	.-1556   	; 0x1ba <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 7ce:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 7d2:	80 ff       	sbrs	r24, 0
 7d4:	18 c0       	rjmp	.+48     	; 0x806 <__vector_10+0xbe>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 7d6:	80 91 e2 00 	lds	r24, 0x00E2
 7da:	80 ff       	sbrs	r24, 0
 7dc:	14 c0       	rjmp	.+40     	; 0x806 <__vector_10+0xbe>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 7de:	80 91 e2 00 	lds	r24, 0x00E2
 7e2:	8e 7f       	andi	r24, 0xFE	; 254
 7e4:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 7e8:	80 91 e2 00 	lds	r24, 0x00E2
 7ec:	80 61       	ori	r24, 0x10	; 16
 7ee:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 7f2:	80 91 d8 00 	lds	r24, 0x00D8
 7f6:	80 62       	ori	r24, 0x20	; 32
 7f8:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
 7fc:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 7fe:	85 e0       	ldi	r24, 0x05	; 5
 800:	80 93 65 01 	sts	0x0165, r24
		EVENT_USB_Device_Suspend();
 804:	ef d1       	rcall	.+990    	; 0xbe4 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 806:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 80a:	84 ff       	sbrs	r24, 4
 80c:	2e c0       	rjmp	.+92     	; 0x86a <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 80e:	80 91 e2 00 	lds	r24, 0x00E2
 812:	84 ff       	sbrs	r24, 4
 814:	2a c0       	rjmp	.+84     	; 0x86a <__vector_10+0x122>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 816:	8c e0       	ldi	r24, 0x0C	; 12
 818:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 81a:	89 b5       	in	r24, 0x29	; 41
 81c:	82 60       	ori	r24, 0x02	; 2
 81e:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 820:	09 b4       	in	r0, 0x29	; 41
 822:	00 fe       	sbrs	r0, 0
 824:	fd cf       	rjmp	.-6      	; 0x820 <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 826:	80 91 d8 00 	lds	r24, 0x00D8
 82a:	8f 7d       	andi	r24, 0xDF	; 223
 82c:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 830:	80 91 e1 00 	lds	r24, 0x00E1
 834:	8f 7e       	andi	r24, 0xEF	; 239
 836:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 83a:	80 91 e2 00 	lds	r24, 0x00E2
 83e:	8f 7e       	andi	r24, 0xEF	; 239
 840:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 844:	80 91 e2 00 	lds	r24, 0x00E2
 848:	81 60       	ori	r24, 0x01	; 1
 84a:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_ConfigurationNumber)
 84e:	80 91 63 01 	lds	r24, 0x0163
 852:	88 23       	and	r24, r24
 854:	31 f4       	brne	.+12     	; 0x862 <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 856:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 85a:	87 fd       	sbrc	r24, 7
 85c:	02 c0       	rjmp	.+4      	; 0x862 <__vector_10+0x11a>
 85e:	81 e0       	ldi	r24, 0x01	; 1
 860:	01 c0       	rjmp	.+2      	; 0x864 <__vector_10+0x11c>
 862:	84 e0       	ldi	r24, 0x04	; 4
 864:	80 93 65 01 	sts	0x0165, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 868:	bd d1       	rcall	.+890    	; 0xbe4 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 86a:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 86e:	83 ff       	sbrs	r24, 3
 870:	22 c0       	rjmp	.+68     	; 0x8b6 <__vector_10+0x16e>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 872:	80 91 e2 00 	lds	r24, 0x00E2
 876:	83 ff       	sbrs	r24, 3
 878:	1e c0       	rjmp	.+60     	; 0x8b6 <__vector_10+0x16e>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 87a:	80 91 e1 00 	lds	r24, 0x00E1
 87e:	87 7f       	andi	r24, 0xF7	; 247
 880:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState         = DEVICE_STATE_Default;
 884:	82 e0       	ldi	r24, 0x02	; 2
 886:	80 93 65 01 	sts	0x0165, r24
		USB_ConfigurationNumber = 0;
 88a:	10 92 63 01 	sts	0x0163, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 88e:	80 91 e1 00 	lds	r24, 0x00E1
 892:	8e 7f       	andi	r24, 0xFE	; 254
 894:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 898:	80 91 e2 00 	lds	r24, 0x00E2
 89c:	8e 7f       	andi	r24, 0xFE	; 254
 89e:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 8a2:	80 91 e2 00 	lds	r24, 0x00E2
 8a6:	80 61       	ori	r24, 0x10	; 16
 8a8:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
 8ac:	80 e0       	ldi	r24, 0x00	; 0
 8ae:	60 e0       	ldi	r22, 0x00	; 0
 8b0:	42 e0       	ldi	r20, 0x02	; 2
 8b2:	63 de       	rcall	.-826    	; 0x57a <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 8b4:	97 d1       	rcall	.+814    	; 0xbe4 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 8b6:	ff 91       	pop	r31
 8b8:	ef 91       	pop	r30
 8ba:	bf 91       	pop	r27
 8bc:	af 91       	pop	r26
 8be:	9f 91       	pop	r25
 8c0:	8f 91       	pop	r24
 8c2:	7f 91       	pop	r23
 8c4:	6f 91       	pop	r22
 8c6:	5f 91       	pop	r21
 8c8:	4f 91       	pop	r20
 8ca:	3f 91       	pop	r19
 8cc:	2f 91       	pop	r18
 8ce:	0f 90       	pop	r0
 8d0:	0b be       	out	0x3b, r0	; 59
 8d2:	0f 90       	pop	r0
 8d4:	0f be       	out	0x3f, r0	; 63
 8d6:	0f 90       	pop	r0
 8d8:	1f 90       	pop	r1
 8da:	18 95       	reti

000008dc <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 8dc:	0f 93       	push	r16
 8de:	1f 93       	push	r17
 8e0:	df 93       	push	r29
 8e2:	cf 93       	push	r28
 8e4:	cd b7       	in	r28, 0x3d	; 61
 8e6:	de b7       	in	r29, 0x3e	; 62
 8e8:	ac 97       	sbiw	r28, 0x2c	; 44
 8ea:	0f b6       	in	r0, 0x3f	; 63
 8ec:	f8 94       	cli
 8ee:	de bf       	out	0x3e, r29	; 62
 8f0:	0f be       	out	0x3f, r0	; 63
 8f2:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 8f4:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
 8f8:	80 93 66 01 	sts	0x0166, r24
 8fc:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
 900:	80 93 67 01 	sts	0x0167, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 904:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 908:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
 90c:	e8 e6       	ldi	r30, 0x68	; 104
 90e:	f1 e0       	ldi	r31, 0x01	; 1
 910:	80 93 68 01 	sts	0x0168, r24
 914:	90 93 69 01 	sts	0x0169, r25
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 918:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 91c:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
 920:	80 93 6a 01 	sts	0x016A, r24
 924:	93 83       	std	Z+3, r25	; 0x03
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 926:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 92a:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
 92e:	80 93 6c 01 	sts	0x016C, r24
 932:	95 83       	std	Z+5, r25	; 0x05

	EVENT_USB_Device_ControlRequest();
 934:	14 dd       	rcall	.-1496   	; 0x35e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 936:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 93a:	83 ff       	sbrs	r24, 3
 93c:	3a c1       	rjmp	.+628    	; 0xbb2 <USB_Device_ProcessControlRequest+0x2d6>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 93e:	80 91 66 01 	lds	r24, 0x0166

		switch (USB_ControlRequest.bRequest)
 942:	30 91 67 01 	lds	r19, 0x0167
 946:	35 30       	cpi	r19, 0x05	; 5
 948:	09 f4       	brne	.+2      	; 0x94c <USB_Device_ProcessControlRequest+0x70>
 94a:	87 c0       	rjmp	.+270    	; 0xa5a <USB_Device_ProcessControlRequest+0x17e>
 94c:	36 30       	cpi	r19, 0x06	; 6
 94e:	40 f4       	brcc	.+16     	; 0x960 <USB_Device_ProcessControlRequest+0x84>
 950:	31 30       	cpi	r19, 0x01	; 1
 952:	c9 f1       	breq	.+114    	; 0x9c6 <USB_Device_ProcessControlRequest+0xea>
 954:	31 30       	cpi	r19, 0x01	; 1
 956:	70 f0       	brcs	.+28     	; 0x974 <USB_Device_ProcessControlRequest+0x98>
 958:	33 30       	cpi	r19, 0x03	; 3
 95a:	09 f0       	breq	.+2      	; 0x95e <USB_Device_ProcessControlRequest+0x82>
 95c:	2a c1       	rjmp	.+596    	; 0xbb2 <USB_Device_ProcessControlRequest+0x2d6>
 95e:	33 c0       	rjmp	.+102    	; 0x9c6 <USB_Device_ProcessControlRequest+0xea>
 960:	38 30       	cpi	r19, 0x08	; 8
 962:	09 f4       	brne	.+2      	; 0x966 <USB_Device_ProcessControlRequest+0x8a>
 964:	f8 c0       	rjmp	.+496    	; 0xb56 <USB_Device_ProcessControlRequest+0x27a>
 966:	39 30       	cpi	r19, 0x09	; 9
 968:	09 f4       	brne	.+2      	; 0x96c <USB_Device_ProcessControlRequest+0x90>
 96a:	07 c1       	rjmp	.+526    	; 0xb7a <USB_Device_ProcessControlRequest+0x29e>
 96c:	36 30       	cpi	r19, 0x06	; 6
 96e:	09 f0       	breq	.+2      	; 0x972 <USB_Device_ProcessControlRequest+0x96>
 970:	20 c1       	rjmp	.+576    	; 0xbb2 <USB_Device_ProcessControlRequest+0x2d6>
 972:	99 c0       	rjmp	.+306    	; 0xaa6 <USB_Device_ProcessControlRequest+0x1ca>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 974:	80 38       	cpi	r24, 0x80	; 128
 976:	21 f0       	breq	.+8      	; 0x980 <USB_Device_ProcessControlRequest+0xa4>
 978:	82 38       	cpi	r24, 0x82	; 130
 97a:	09 f0       	breq	.+2      	; 0x97e <USB_Device_ProcessControlRequest+0xa2>
 97c:	1a c1       	rjmp	.+564    	; 0xbb2 <USB_Device_ProcessControlRequest+0x2d6>
 97e:	08 c0       	rjmp	.+16     	; 0x990 <USB_Device_ProcessControlRequest+0xb4>
 980:	90 91 61 01 	lds	r25, 0x0161
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_RemoteWakeupEnabled)
 984:	80 91 62 01 	lds	r24, 0x0162
 988:	88 23       	and	r24, r24
 98a:	99 f0       	breq	.+38     	; 0x9b2 <USB_Device_ProcessControlRequest+0xd6>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 98c:	92 60       	ori	r25, 0x02	; 2
 98e:	11 c0       	rjmp	.+34     	; 0x9b2 <USB_Device_ProcessControlRequest+0xd6>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 990:	80 91 6a 01 	lds	r24, 0x016A
 994:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 996:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 99a:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	25 e0       	ldi	r18, 0x05	; 5
 9a2:	96 95       	lsr	r25
 9a4:	87 95       	ror	r24
 9a6:	2a 95       	dec	r18
 9a8:	e1 f7       	brne	.-8      	; 0x9a2 <USB_Device_ProcessControlRequest+0xc6>
 9aa:	98 2f       	mov	r25, r24
 9ac:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 9ae:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9b2:	80 91 e8 00 	lds	r24, 0x00E8
 9b6:	87 7f       	andi	r24, 0xF7	; 247
 9b8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 9bc:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
 9c0:	10 92 f1 00 	sts	0x00F1, r1
 9c4:	d3 c0       	rjmp	.+422    	; 0xb6c <USB_Device_ProcessControlRequest+0x290>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 9c6:	88 23       	and	r24, r24
 9c8:	19 f0       	breq	.+6      	; 0x9d0 <USB_Device_ProcessControlRequest+0xf4>
 9ca:	82 30       	cpi	r24, 0x02	; 2
 9cc:	09 f0       	breq	.+2      	; 0x9d0 <USB_Device_ProcessControlRequest+0xf4>
 9ce:	f1 c0       	rjmp	.+482    	; 0xbb2 <USB_Device_ProcessControlRequest+0x2d6>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	8f 71       	andi	r24, 0x1F	; 31
 9d4:	90 70       	andi	r25, 0x00	; 0
 9d6:	00 97       	sbiw	r24, 0x00	; 0
 9d8:	21 f0       	breq	.+8      	; 0x9e2 <USB_Device_ProcessControlRequest+0x106>
 9da:	02 97       	sbiw	r24, 0x02	; 2
 9dc:	09 f0       	breq	.+2      	; 0x9e0 <USB_Device_ProcessControlRequest+0x104>
 9de:	e9 c0       	rjmp	.+466    	; 0xbb2 <USB_Device_ProcessControlRequest+0x2d6>
 9e0:	0c c0       	rjmp	.+24     	; 0x9fa <USB_Device_ProcessControlRequest+0x11e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 9e2:	80 91 68 01 	lds	r24, 0x0168
 9e6:	81 30       	cpi	r24, 0x01	; 1
 9e8:	09 f0       	breq	.+2      	; 0x9ec <USB_Device_ProcessControlRequest+0x110>
 9ea:	e3 c0       	rjmp	.+454    	; 0xbb2 <USB_Device_ProcessControlRequest+0x2d6>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 9ec:	10 92 62 01 	sts	0x0162, r1
 9f0:	33 30       	cpi	r19, 0x03	; 3
 9f2:	69 f5       	brne	.+90     	; 0xa4e <USB_Device_ProcessControlRequest+0x172>
 9f4:	80 93 62 01 	sts	0x0162, r24
 9f8:	2a c0       	rjmp	.+84     	; 0xa4e <USB_Device_ProcessControlRequest+0x172>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 9fa:	80 91 68 01 	lds	r24, 0x0168
 9fe:	88 23       	and	r24, r24
 a00:	31 f5       	brne	.+76     	; 0xa4e <USB_Device_ProcessControlRequest+0x172>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a02:	20 91 6a 01 	lds	r18, 0x016A
 a06:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 a08:	09 f4       	brne	.+2      	; 0xa0c <USB_Device_ProcessControlRequest+0x130>
 a0a:	d3 c0       	rjmp	.+422    	; 0xbb2 <USB_Device_ProcessControlRequest+0x2d6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a0c:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 a10:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 a14:	80 ff       	sbrs	r24, 0
 a16:	1b c0       	rjmp	.+54     	; 0xa4e <USB_Device_ProcessControlRequest+0x172>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 a18:	33 30       	cpi	r19, 0x03	; 3
 a1a:	21 f4       	brne	.+8      	; 0xa24 <USB_Device_ProcessControlRequest+0x148>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 a1c:	80 91 eb 00 	lds	r24, 0x00EB
 a20:	80 62       	ori	r24, 0x20	; 32
 a22:	13 c0       	rjmp	.+38     	; 0xa4a <USB_Device_ProcessControlRequest+0x16e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 a24:	80 91 eb 00 	lds	r24, 0x00EB
 a28:	80 61       	ori	r24, 0x10	; 16
 a2a:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 a2e:	81 e0       	ldi	r24, 0x01	; 1
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	02 c0       	rjmp	.+4      	; 0xa38 <USB_Device_ProcessControlRequest+0x15c>
 a34:	88 0f       	add	r24, r24
 a36:	99 1f       	adc	r25, r25
 a38:	2a 95       	dec	r18
 a3a:	e2 f7       	brpl	.-8      	; 0xa34 <USB_Device_ProcessControlRequest+0x158>
 a3c:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 a40:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 a44:	80 91 eb 00 	lds	r24, 0x00EB
 a48:	88 60       	ori	r24, 0x08	; 8
 a4a:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a4e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a52:	80 91 e8 00 	lds	r24, 0x00E8
 a56:	87 7f       	andi	r24, 0xF7	; 247
 a58:	8c c0       	rjmp	.+280    	; 0xb72 <USB_Device_ProcessControlRequest+0x296>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 a5a:	88 23       	and	r24, r24
 a5c:	09 f0       	breq	.+2      	; 0xa60 <USB_Device_ProcessControlRequest+0x184>
 a5e:	a9 c0       	rjmp	.+338    	; 0xbb2 <USB_Device_ProcessControlRequest+0x2d6>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 a60:	10 91 68 01 	lds	r17, 0x0168
 a64:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 a66:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 a68:	f8 94       	cli
 a6a:	80 91 e8 00 	lds	r24, 0x00E8
 a6e:	87 7f       	andi	r24, 0xF7	; 247
 a70:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 a74:	b7 dd       	rcall	.-1170   	; 0x5e4 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 a76:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
 a7a:	80 ff       	sbrs	r24, 0
 a7c:	fc cf       	rjmp	.-8      	; 0xa76 <USB_Device_ProcessControlRequest+0x19a>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
 a7e:	80 91 e3 00 	lds	r24, 0x00E3
 a82:	80 78       	andi	r24, 0x80	; 128
 a84:	81 2b       	or	r24, r17
 a86:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR |= (1 << ADDEN);
 a8a:	80 91 e3 00 	lds	r24, 0x00E3
 a8e:	80 68       	ori	r24, 0x80	; 128
 a90:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 a94:	11 23       	and	r17, r17
 a96:	11 f4       	brne	.+4      	; 0xa9c <USB_Device_ProcessControlRequest+0x1c0>
 a98:	82 e0       	ldi	r24, 0x02	; 2
 a9a:	01 c0       	rjmp	.+2      	; 0xa9e <USB_Device_ProcessControlRequest+0x1c2>
 a9c:	83 e0       	ldi	r24, 0x03	; 3
 a9e:	80 93 65 01 	sts	0x0165, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 aa2:	0f bf       	out	0x3f, r16	; 63
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#endif
				
				GCC_MEMORY_BARRIER();
 aa4:	86 c0       	rjmp	.+268    	; 0xbb2 <USB_Device_ProcessControlRequest+0x2d6>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 aa6:	80 58       	subi	r24, 0x80	; 128
 aa8:	82 30       	cpi	r24, 0x02	; 2
 aaa:	08 f0       	brcs	.+2      	; 0xaae <USB_Device_ProcessControlRequest+0x1d2>
 aac:	82 c0       	rjmp	.+260    	; 0xbb2 <USB_Device_ProcessControlRequest+0x2d6>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 aae:	80 91 68 01 	lds	r24, 0x0168
 ab2:	90 91 69 01 	lds	r25, 0x0169
 ab6:	23 e0       	ldi	r18, 0x03	; 3
 ab8:	8c 3d       	cpi	r24, 0xDC	; 220
 aba:	92 07       	cpc	r25, r18
 abc:	09 f0       	breq	.+2      	; 0xac0 <USB_Device_ProcessControlRequest+0x1e4>
 abe:	33 c0       	rjmp	.+102    	; 0xb26 <USB_Device_ProcessControlRequest+0x24a>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 ac0:	83 e0       	ldi	r24, 0x03	; 3
 ac2:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 ac4:	8a e2       	ldi	r24, 0x2A	; 42
 ac6:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 ac8:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 aca:	f8 94       	cli
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#endif

				GCC_MEMORY_BARRIER();
 acc:	de 01       	movw	r26, r28
 ace:	15 96       	adiw	r26, 0x05	; 5
 ad0:	6e e0       	ldi	r22, 0x0E	; 14
 ad2:	40 e0       	ldi	r20, 0x00	; 0
 ad4:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 ad6:	11 e2       	ldi	r17, 0x21	; 33
 ad8:	e6 2f       	mov	r30, r22
 ada:	f0 e0       	ldi	r31, 0x00	; 0
 adc:	10 93 57 00 	sts	0x0057, r17
 ae0:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
 ae2:	40 ff       	sbrs	r20, 0
 ae4:	03 c0       	rjmp	.+6      	; 0xaec <USB_Device_ProcessControlRequest+0x210>
					{
						SerialByte >>= 4;
 ae6:	82 95       	swap	r24
 ae8:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
 aea:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 aec:	8f 70       	andi	r24, 0x0F	; 15
 aee:	28 2f       	mov	r18, r24
 af0:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 af2:	8a 30       	cpi	r24, 0x0A	; 10
 af4:	18 f0       	brcs	.+6      	; 0xafc <USB_Device_ProcessControlRequest+0x220>
 af6:	c9 01       	movw	r24, r18
 af8:	c7 96       	adiw	r24, 0x37	; 55
 afa:	02 c0       	rjmp	.+4      	; 0xb00 <USB_Device_ProcessControlRequest+0x224>
 afc:	c9 01       	movw	r24, r18
 afe:	c0 96       	adiw	r24, 0x30	; 48
 b00:	8d 93       	st	X+, r24
 b02:	9d 93       	st	X+, r25
 b04:	4f 5f       	subi	r20, 0xFF	; 255
 b06:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 b08:	44 31       	cpi	r20, 0x14	; 20
 b0a:	51 05       	cpc	r21, r1
 b0c:	29 f7       	brne	.-54     	; 0xad8 <USB_Device_ProcessControlRequest+0x1fc>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 b0e:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b10:	80 91 e8 00 	lds	r24, 0x00E8
 b14:	87 7f       	andi	r24, 0xF7	; 247
 b16:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 b1a:	ce 01       	movw	r24, r28
 b1c:	03 96       	adiw	r24, 0x03	; 3
 b1e:	6a e2       	ldi	r22, 0x2A	; 42
 b20:	70 e0       	ldi	r23, 0x00	; 0
 b22:	61 d0       	rcall	.+194    	; 0xbe6 <Endpoint_Write_Control_Stream_LE>
 b24:	12 c0       	rjmp	.+36     	; 0xb4a <USB_Device_ProcessControlRequest+0x26e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 b26:	60 91 6a 01 	lds	r22, 0x016A
 b2a:	ae 01       	movw	r20, r28
 b2c:	4f 5f       	subi	r20, 0xFF	; 255
 b2e:	5f 4f       	sbci	r21, 0xFF	; 255
 b30:	f6 dc       	rcall	.-1556   	; 0x51e <CALLBACK_USB_GetDescriptor>
 b32:	bc 01       	movw	r22, r24
 b34:	00 97       	sbiw	r24, 0x00	; 0
 b36:	09 f4       	brne	.+2      	; 0xb3a <USB_Device_ProcessControlRequest+0x25e>
 b38:	3c c0       	rjmp	.+120    	; 0xbb2 <USB_Device_ProcessControlRequest+0x2d6>
 b3a:	80 91 e8 00 	lds	r24, 0x00E8
 b3e:	87 7f       	andi	r24, 0xF7	; 247
 b40:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 b44:	89 81       	ldd	r24, Y+1	; 0x01
 b46:	9a 81       	ldd	r25, Y+2	; 0x02
 b48:	ed d0       	rcall	.+474    	; 0xd24 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 b4a:	80 91 e8 00 	lds	r24, 0x00E8
 b4e:	8b 77       	andi	r24, 0x7B	; 123
 b50:	80 93 e8 00 	sts	0x00E8, r24
 b54:	2e c0       	rjmp	.+92     	; 0xbb2 <USB_Device_ProcessControlRequest+0x2d6>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 b56:	80 38       	cpi	r24, 0x80	; 128
 b58:	61 f5       	brne	.+88     	; 0xbb2 <USB_Device_ProcessControlRequest+0x2d6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b5a:	80 91 e8 00 	lds	r24, 0x00E8
 b5e:	87 7f       	andi	r24, 0xF7	; 247
 b60:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_ConfigurationNumber);
 b64:	80 91 63 01 	lds	r24, 0x0163
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 b68:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 b6c:	80 91 e8 00 	lds	r24, 0x00E8
 b70:	8e 77       	andi	r24, 0x7E	; 126
 b72:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 b76:	36 dd       	rcall	.-1428   	; 0x5e4 <Endpoint_ClearStatusStage>
 b78:	1c c0       	rjmp	.+56     	; 0xbb2 <USB_Device_ProcessControlRequest+0x2d6>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b7a:	88 23       	and	r24, r24
 b7c:	d1 f4       	brne	.+52     	; 0xbb2 <USB_Device_ProcessControlRequest+0x2d6>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 b7e:	90 91 68 01 	lds	r25, 0x0168
 b82:	92 30       	cpi	r25, 0x02	; 2
 b84:	b0 f4       	brcc	.+44     	; 0xbb2 <USB_Device_ProcessControlRequest+0x2d6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b86:	80 91 e8 00 	lds	r24, 0x00E8
 b8a:	87 7f       	andi	r24, 0xF7	; 247
 b8c:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 b90:	90 93 63 01 	sts	0x0163, r25

	Endpoint_ClearStatusStage();
 b94:	27 dd       	rcall	.-1458   	; 0x5e4 <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
 b96:	80 91 63 01 	lds	r24, 0x0163
 b9a:	88 23       	and	r24, r24
 b9c:	31 f4       	brne	.+12     	; 0xbaa <USB_Device_ProcessControlRequest+0x2ce>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 b9e:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 ba2:	87 fd       	sbrc	r24, 7
 ba4:	02 c0       	rjmp	.+4      	; 0xbaa <USB_Device_ProcessControlRequest+0x2ce>
 ba6:	81 e0       	ldi	r24, 0x01	; 1
 ba8:	01 c0       	rjmp	.+2      	; 0xbac <USB_Device_ProcessControlRequest+0x2d0>
 baa:	84 e0       	ldi	r24, 0x04	; 4
 bac:	80 93 65 01 	sts	0x0165, r24

	EVENT_USB_Device_ConfigurationChanged();
 bb0:	19 dc       	rcall	.-1998   	; 0x3e4 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 bb2:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 bb6:	83 ff       	sbrs	r24, 3
 bb8:	0a c0       	rjmp	.+20     	; 0xbce <USB_Device_ProcessControlRequest+0x2f2>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 bba:	80 91 eb 00 	lds	r24, 0x00EB
 bbe:	80 62       	ori	r24, 0x20	; 32
 bc0:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bc4:	80 91 e8 00 	lds	r24, 0x00E8
 bc8:	87 7f       	andi	r24, 0xF7	; 247
 bca:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 bce:	ac 96       	adiw	r28, 0x2c	; 44
 bd0:	0f b6       	in	r0, 0x3f	; 63
 bd2:	f8 94       	cli
 bd4:	de bf       	out	0x3e, r29	; 62
 bd6:	0f be       	out	0x3f, r0	; 63
 bd8:	cd bf       	out	0x3d, r28	; 61
 bda:	cf 91       	pop	r28
 bdc:	df 91       	pop	r29
 bde:	1f 91       	pop	r17
 be0:	0f 91       	pop	r16
 be2:	08 95       	ret

00000be4 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 be4:	08 95       	ret

00000be6 <Endpoint_Write_Control_Stream_LE>:
 be6:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 be8:	40 91 6c 01 	lds	r20, 0x016C
 bec:	50 91 6d 01 	lds	r21, 0x016D
 bf0:	46 17       	cp	r20, r22
 bf2:	57 07       	cpc	r21, r23
 bf4:	18 f4       	brcc	.+6      	; 0xbfc <Endpoint_Write_Control_Stream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 bf6:	f9 01       	movw	r30, r18
 bf8:	90 e0       	ldi	r25, 0x00	; 0
 bfa:	3d c0       	rjmp	.+122    	; 0xc76 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 bfc:	61 15       	cp	r22, r1
 bfe:	71 05       	cpc	r23, r1
 c00:	11 f0       	breq	.+4      	; 0xc06 <Endpoint_Write_Control_Stream_LE+0x20>
 c02:	ab 01       	movw	r20, r22
 c04:	f8 cf       	rjmp	.-16     	; 0xbf6 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c06:	80 91 e8 00 	lds	r24, 0x00E8
 c0a:	8e 77       	andi	r24, 0x7E	; 126
 c0c:	80 93 e8 00 	sts	0x00E8, r24
 c10:	40 e0       	ldi	r20, 0x00	; 0
 c12:	50 e0       	ldi	r21, 0x00	; 0
 c14:	f0 cf       	rjmp	.-32     	; 0xbf6 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 c16:	80 91 65 01 	lds	r24, 0x0165

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 c1a:	88 23       	and	r24, r24
 c1c:	f1 f1       	breq	.+124    	; 0xc9a <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 c1e:	85 30       	cpi	r24, 0x05	; 5
 c20:	f1 f1       	breq	.+124    	; 0xc9e <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c22:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 c26:	83 ff       	sbrs	r24, 3
 c28:	02 c0       	rjmp	.+4      	; 0xc2e <Endpoint_Write_Control_Stream_LE+0x48>
 c2a:	81 e0       	ldi	r24, 0x01	; 1
 c2c:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 c2e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 c32:	82 fd       	sbrc	r24, 2
 c34:	2c c0       	rjmp	.+88     	; 0xc8e <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 c36:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 c3a:	80 ff       	sbrs	r24, 0
 c3c:	1c c0       	rjmp	.+56     	; 0xc76 <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 c3e:	20 91 f2 00 	lds	r18, 0x00F2
 c42:	30 91 f3 00 	lds	r19, 0x00F3
 c46:	07 c0       	rjmp	.+14     	; 0xc56 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 c48:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 c4a:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 c4e:	41 50       	subi	r20, 0x01	; 1
 c50:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 c52:	2f 5f       	subi	r18, 0xFF	; 255
 c54:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 c56:	41 15       	cp	r20, r1
 c58:	51 05       	cpc	r21, r1
 c5a:	19 f0       	breq	.+6      	; 0xc62 <Endpoint_Write_Control_Stream_LE+0x7c>
 c5c:	28 30       	cpi	r18, 0x08	; 8
 c5e:	31 05       	cpc	r19, r1
 c60:	98 f3       	brcs	.-26     	; 0xc48 <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 c62:	90 e0       	ldi	r25, 0x00	; 0
 c64:	28 30       	cpi	r18, 0x08	; 8
 c66:	31 05       	cpc	r19, r1
 c68:	09 f4       	brne	.+2      	; 0xc6c <Endpoint_Write_Control_Stream_LE+0x86>
 c6a:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c6c:	80 91 e8 00 	lds	r24, 0x00E8
 c70:	8e 77       	andi	r24, 0x7E	; 126
 c72:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 c76:	41 15       	cp	r20, r1
 c78:	51 05       	cpc	r21, r1
 c7a:	69 f6       	brne	.-102    	; 0xc16 <Endpoint_Write_Control_Stream_LE+0x30>
 c7c:	99 23       	and	r25, r25
 c7e:	59 f6       	brne	.-106    	; 0xc16 <Endpoint_Write_Control_Stream_LE+0x30>
 c80:	06 c0       	rjmp	.+12     	; 0xc8e <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 c82:	80 91 65 01 	lds	r24, 0x0165

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 c86:	88 23       	and	r24, r24
 c88:	41 f0       	breq	.+16     	; 0xc9a <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 c8a:	85 30       	cpi	r24, 0x05	; 5
 c8c:	41 f0       	breq	.+16     	; 0xc9e <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 c8e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 c92:	82 ff       	sbrs	r24, 2
 c94:	f6 cf       	rjmp	.-20     	; 0xc82 <Endpoint_Write_Control_Stream_LE+0x9c>
 c96:	80 e0       	ldi	r24, 0x00	; 0
 c98:	08 95       	ret
 c9a:	82 e0       	ldi	r24, 0x02	; 2
 c9c:	08 95       	ret
 c9e:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 ca0:	08 95       	ret

00000ca2 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
 ca2:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
 ca4:	61 15       	cp	r22, r1
 ca6:	71 05       	cpc	r23, r1
 ca8:	29 f4       	brne	.+10     	; 0xcb4 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 caa:	80 91 e8 00 	lds	r24, 0x00E8
 cae:	8b 77       	andi	r24, 0x7B	; 123
 cb0:	80 93 e8 00 	sts	0x00E8, r24
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 cb4:	f9 01       	movw	r30, r18
 cb6:	22 c0       	rjmp	.+68     	; 0xcfc <Endpoint_Read_Control_Stream_LE+0x5a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 cb8:	80 91 65 01 	lds	r24, 0x0165

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 cbc:	88 23       	and	r24, r24
 cbe:	71 f1       	breq	.+92     	; 0xd1c <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 cc0:	85 30       	cpi	r24, 0x05	; 5
 cc2:	71 f1       	breq	.+92     	; 0xd20 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 cc4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 cc8:	83 ff       	sbrs	r24, 3
 cca:	02 c0       	rjmp	.+4      	; 0xcd0 <Endpoint_Read_Control_Stream_LE+0x2e>
 ccc:	81 e0       	ldi	r24, 0x01	; 1
 cce:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 cd0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
 cd4:	82 ff       	sbrs	r24, 2
 cd6:	f0 cf       	rjmp	.-32     	; 0xcb8 <Endpoint_Read_Control_Stream_LE+0x16>
 cd8:	06 c0       	rjmp	.+12     	; 0xce6 <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 cda:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 cde:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 ce0:	61 50       	subi	r22, 0x01	; 1
 ce2:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
 ce4:	31 f0       	breq	.+12     	; 0xcf2 <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 ce6:	80 91 f2 00 	lds	r24, 0x00F2
 cea:	90 91 f3 00 	lds	r25, 0x00F3
 cee:	89 2b       	or	r24, r25
 cf0:	a1 f7       	brne	.-24     	; 0xcda <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 cf2:	80 91 e8 00 	lds	r24, 0x00E8
 cf6:	8b 77       	andi	r24, 0x7B	; 123
 cf8:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
 cfc:	61 15       	cp	r22, r1
 cfe:	71 05       	cpc	r23, r1
 d00:	d9 f6       	brne	.-74     	; 0xcb8 <Endpoint_Read_Control_Stream_LE+0x16>
 d02:	06 c0       	rjmp	.+12     	; 0xd10 <Endpoint_Read_Control_Stream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 d04:	80 91 65 01 	lds	r24, 0x0165

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 d08:	88 23       	and	r24, r24
 d0a:	41 f0       	breq	.+16     	; 0xd1c <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 d0c:	85 30       	cpi	r24, 0x05	; 5
 d0e:	41 f0       	breq	.+16     	; 0xd20 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 d10:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
 d14:	80 ff       	sbrs	r24, 0
 d16:	f6 cf       	rjmp	.-20     	; 0xd04 <Endpoint_Read_Control_Stream_LE+0x62>
 d18:	80 e0       	ldi	r24, 0x00	; 0
 d1a:	08 95       	ret
 d1c:	82 e0       	ldi	r24, 0x02	; 2
 d1e:	08 95       	ret
 d20:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 d22:	08 95       	ret

00000d24 <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
 d24:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 d26:	40 91 6c 01 	lds	r20, 0x016C
 d2a:	50 91 6d 01 	lds	r21, 0x016D
 d2e:	46 17       	cp	r20, r22
 d30:	57 07       	cpc	r21, r23
 d32:	18 f4       	brcc	.+6      	; 0xd3a <Endpoint_Write_Control_PStream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 d34:	f9 01       	movw	r30, r18
 d36:	90 e0       	ldi	r25, 0x00	; 0
 d38:	40 c0       	rjmp	.+128    	; 0xdba <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 d3a:	61 15       	cp	r22, r1
 d3c:	71 05       	cpc	r23, r1
 d3e:	11 f0       	breq	.+4      	; 0xd44 <Endpoint_Write_Control_PStream_LE+0x20>
 d40:	ab 01       	movw	r20, r22
 d42:	f8 cf       	rjmp	.-16     	; 0xd34 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d44:	80 91 e8 00 	lds	r24, 0x00E8
 d48:	8e 77       	andi	r24, 0x7E	; 126
 d4a:	80 93 e8 00 	sts	0x00E8, r24
 d4e:	40 e0       	ldi	r20, 0x00	; 0
 d50:	50 e0       	ldi	r21, 0x00	; 0
 d52:	f0 cf       	rjmp	.-32     	; 0xd34 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 d54:	80 91 65 01 	lds	r24, 0x0165

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 d58:	88 23       	and	r24, r24
 d5a:	09 f4       	brne	.+2      	; 0xd5e <Endpoint_Write_Control_PStream_LE+0x3a>
 d5c:	40 c0       	rjmp	.+128    	; 0xdde <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 d5e:	85 30       	cpi	r24, 0x05	; 5
 d60:	09 f4       	brne	.+2      	; 0xd64 <Endpoint_Write_Control_PStream_LE+0x40>
 d62:	3f c0       	rjmp	.+126    	; 0xde2 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 d64:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 d68:	83 ff       	sbrs	r24, 3
 d6a:	02 c0       	rjmp	.+4      	; 0xd70 <Endpoint_Write_Control_PStream_LE+0x4c>
 d6c:	81 e0       	ldi	r24, 0x01	; 1
 d6e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 d70:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 d74:	82 fd       	sbrc	r24, 2
 d76:	2d c0       	rjmp	.+90     	; 0xdd2 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 d78:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 d7c:	80 ff       	sbrs	r24, 0
 d7e:	1d c0       	rjmp	.+58     	; 0xdba <Endpoint_Write_Control_PStream_LE+0x96>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 d80:	20 91 f2 00 	lds	r18, 0x00F2
 d84:	30 91 f3 00 	lds	r19, 0x00F3
 d88:	08 c0       	rjmp	.+16     	; 0xd9a <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 d8a:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 d8c:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 d90:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 d92:	41 50       	subi	r20, 0x01	; 1
 d94:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 d96:	2f 5f       	subi	r18, 0xFF	; 255
 d98:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 d9a:	41 15       	cp	r20, r1
 d9c:	51 05       	cpc	r21, r1
 d9e:	19 f0       	breq	.+6      	; 0xda6 <Endpoint_Write_Control_PStream_LE+0x82>
 da0:	28 30       	cpi	r18, 0x08	; 8
 da2:	31 05       	cpc	r19, r1
 da4:	90 f3       	brcs	.-28     	; 0xd8a <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 da6:	90 e0       	ldi	r25, 0x00	; 0
 da8:	28 30       	cpi	r18, 0x08	; 8
 daa:	31 05       	cpc	r19, r1
 dac:	09 f4       	brne	.+2      	; 0xdb0 <Endpoint_Write_Control_PStream_LE+0x8c>
 dae:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 db0:	80 91 e8 00 	lds	r24, 0x00E8
 db4:	8e 77       	andi	r24, 0x7E	; 126
 db6:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 dba:	41 15       	cp	r20, r1
 dbc:	51 05       	cpc	r21, r1
 dbe:	51 f6       	brne	.-108    	; 0xd54 <Endpoint_Write_Control_PStream_LE+0x30>
 dc0:	99 23       	and	r25, r25
 dc2:	41 f6       	brne	.-112    	; 0xd54 <Endpoint_Write_Control_PStream_LE+0x30>
 dc4:	06 c0       	rjmp	.+12     	; 0xdd2 <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 dc6:	80 91 65 01 	lds	r24, 0x0165

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 dca:	88 23       	and	r24, r24
 dcc:	41 f0       	breq	.+16     	; 0xdde <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 dce:	85 30       	cpi	r24, 0x05	; 5
 dd0:	41 f0       	breq	.+16     	; 0xde2 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 dd2:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 dd6:	82 ff       	sbrs	r24, 2
 dd8:	f6 cf       	rjmp	.-20     	; 0xdc6 <Endpoint_Write_Control_PStream_LE+0xa2>
 dda:	80 e0       	ldi	r24, 0x00	; 0
 ddc:	08 95       	ret
 dde:	82 e0       	ldi	r24, 0x02	; 2
 de0:	08 95       	ret
 de2:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 de4:	08 95       	ret

00000de6 <Endpoint_Read_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 de6:	bf 92       	push	r11
 de8:	cf 92       	push	r12
 dea:	df 92       	push	r13
 dec:	ef 92       	push	r14
 dee:	ff 92       	push	r15
 df0:	0f 93       	push	r16
 df2:	1f 93       	push	r17
 df4:	cf 93       	push	r28
 df6:	df 93       	push	r29
 df8:	18 2f       	mov	r17, r24
 dfa:	09 2f       	mov	r16, r25
 dfc:	7b 01       	movw	r14, r22
 dfe:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 e00:	12 dc       	rcall	.-2012   	; 0x626 <Endpoint_WaitUntilReady>
 e02:	b8 2e       	mov	r11, r24
 e04:	88 23       	and	r24, r24
 e06:	b1 f5       	brne	.+108    	; 0xe74 <Endpoint_Read_Stream_LE+0x8e>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 e08:	81 2f       	mov	r24, r17
 e0a:	90 2f       	mov	r25, r16
 e0c:	9c 01       	movw	r18, r24
 e0e:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
 e10:	c1 14       	cp	r12, r1
 e12:	d1 04       	cpc	r13, r1
 e14:	39 f0       	breq	.+14     	; 0xe24 <Endpoint_Read_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
 e16:	f6 01       	movw	r30, r12
 e18:	80 81       	ld	r24, Z
 e1a:	91 81       	ldd	r25, Z+1	; 0x01
 e1c:	e8 1a       	sub	r14, r24
 e1e:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 e20:	c8 0f       	add	r28, r24
 e22:	d9 1f       	adc	r29, r25
 e24:	00 e0       	ldi	r16, 0x00	; 0
 e26:	10 e0       	ldi	r17, 0x00	; 0
 e28:	22 c0       	rjmp	.+68     	; 0xe6e <Endpoint_Read_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 e2a:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 e2e:	85 fd       	sbrc	r24, 5
 e30:	16 c0       	rjmp	.+44     	; 0xe5e <Endpoint_Read_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 e32:	80 91 e8 00 	lds	r24, 0x00E8
 e36:	8b 77       	andi	r24, 0x7B	; 123
 e38:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
 e3c:	c1 14       	cp	r12, r1
 e3e:	d1 04       	cpc	r13, r1
 e40:	49 f0       	breq	.+18     	; 0xe54 <Endpoint_Read_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
 e42:	f6 01       	movw	r30, r12
 e44:	80 81       	ld	r24, Z
 e46:	91 81       	ldd	r25, Z+1	; 0x01
 e48:	80 0f       	add	r24, r16
 e4a:	91 1f       	adc	r25, r17
 e4c:	91 83       	std	Z+1, r25	; 0x01
 e4e:	80 83       	st	Z, r24
 e50:	85 e0       	ldi	r24, 0x05	; 5
 e52:	11 c0       	rjmp	.+34     	; 0xe76 <Endpoint_Read_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 e54:	6c d0       	rcall	.+216    	; 0xf2e <USB_USBTask>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 e56:	e7 db       	rcall	.-2098   	; 0x626 <Endpoint_WaitUntilReady>
 e58:	88 23       	and	r24, r24
 e5a:	49 f0       	breq	.+18     	; 0xe6e <Endpoint_Read_Stream_LE+0x88>
 e5c:	0c c0       	rjmp	.+24     	; 0xe76 <Endpoint_Read_Stream_LE+0x90>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 e5e:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 e62:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 e64:	08 94       	sec
 e66:	e1 08       	sbc	r14, r1
 e68:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
 e6a:	0f 5f       	subi	r16, 0xFF	; 255
 e6c:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 e6e:	e1 14       	cp	r14, r1
 e70:	f1 04       	cpc	r15, r1
 e72:	d9 f6       	brne	.-74     	; 0xe2a <Endpoint_Read_Stream_LE+0x44>
 e74:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 e76:	df 91       	pop	r29
 e78:	cf 91       	pop	r28
 e7a:	1f 91       	pop	r17
 e7c:	0f 91       	pop	r16
 e7e:	ff 90       	pop	r15
 e80:	ef 90       	pop	r14
 e82:	df 90       	pop	r13
 e84:	cf 90       	pop	r12
 e86:	bf 90       	pop	r11
 e88:	08 95       	ret

00000e8a <Endpoint_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 e8a:	bf 92       	push	r11
 e8c:	cf 92       	push	r12
 e8e:	df 92       	push	r13
 e90:	ef 92       	push	r14
 e92:	ff 92       	push	r15
 e94:	0f 93       	push	r16
 e96:	1f 93       	push	r17
 e98:	cf 93       	push	r28
 e9a:	df 93       	push	r29
 e9c:	18 2f       	mov	r17, r24
 e9e:	09 2f       	mov	r16, r25
 ea0:	7b 01       	movw	r14, r22
 ea2:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 ea4:	c0 db       	rcall	.-2176   	; 0x626 <Endpoint_WaitUntilReady>
 ea6:	b8 2e       	mov	r11, r24
 ea8:	88 23       	and	r24, r24
 eaa:	b1 f5       	brne	.+108    	; 0xf18 <Endpoint_Write_Stream_LE+0x8e>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 eac:	81 2f       	mov	r24, r17
 eae:	90 2f       	mov	r25, r16
 eb0:	9c 01       	movw	r18, r24
 eb2:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
 eb4:	c1 14       	cp	r12, r1
 eb6:	d1 04       	cpc	r13, r1
 eb8:	39 f0       	breq	.+14     	; 0xec8 <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
 eba:	f6 01       	movw	r30, r12
 ebc:	80 81       	ld	r24, Z
 ebe:	91 81       	ldd	r25, Z+1	; 0x01
 ec0:	e8 1a       	sub	r14, r24
 ec2:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 ec4:	c8 0f       	add	r28, r24
 ec6:	d9 1f       	adc	r29, r25
 ec8:	00 e0       	ldi	r16, 0x00	; 0
 eca:	10 e0       	ldi	r17, 0x00	; 0
 ecc:	22 c0       	rjmp	.+68     	; 0xf12 <Endpoint_Write_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 ece:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 ed2:	85 fd       	sbrc	r24, 5
 ed4:	16 c0       	rjmp	.+44     	; 0xf02 <Endpoint_Write_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 ed6:	80 91 e8 00 	lds	r24, 0x00E8
 eda:	8e 77       	andi	r24, 0x7E	; 126
 edc:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
 ee0:	c1 14       	cp	r12, r1
 ee2:	d1 04       	cpc	r13, r1
 ee4:	49 f0       	breq	.+18     	; 0xef8 <Endpoint_Write_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
 ee6:	f6 01       	movw	r30, r12
 ee8:	80 81       	ld	r24, Z
 eea:	91 81       	ldd	r25, Z+1	; 0x01
 eec:	80 0f       	add	r24, r16
 eee:	91 1f       	adc	r25, r17
 ef0:	91 83       	std	Z+1, r25	; 0x01
 ef2:	80 83       	st	Z, r24
 ef4:	85 e0       	ldi	r24, 0x05	; 5
 ef6:	11 c0       	rjmp	.+34     	; 0xf1a <Endpoint_Write_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 ef8:	1a d0       	rcall	.+52     	; 0xf2e <USB_USBTask>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 efa:	95 db       	rcall	.-2262   	; 0x626 <Endpoint_WaitUntilReady>
 efc:	88 23       	and	r24, r24
 efe:	49 f0       	breq	.+18     	; 0xf12 <Endpoint_Write_Stream_LE+0x88>
 f00:	0c c0       	rjmp	.+24     	; 0xf1a <Endpoint_Write_Stream_LE+0x90>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 f02:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 f04:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 f08:	08 94       	sec
 f0a:	e1 08       	sbc	r14, r1
 f0c:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
 f0e:	0f 5f       	subi	r16, 0xFF	; 255
 f10:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 f12:	e1 14       	cp	r14, r1
 f14:	f1 04       	cpc	r15, r1
 f16:	d9 f6       	brne	.-74     	; 0xece <Endpoint_Write_Stream_LE+0x44>
 f18:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 f1a:	df 91       	pop	r29
 f1c:	cf 91       	pop	r28
 f1e:	1f 91       	pop	r17
 f20:	0f 91       	pop	r16
 f22:	ff 90       	pop	r15
 f24:	ef 90       	pop	r14
 f26:	df 90       	pop	r13
 f28:	cf 90       	pop	r12
 f2a:	bf 90       	pop	r11
 f2c:	08 95       	ret

00000f2e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 f2e:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 f30:	80 91 65 01 	lds	r24, 0x0165
 f34:	88 23       	and	r24, r24
 f36:	61 f0       	breq	.+24     	; 0xf50 <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 f38:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 f3c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 f40:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 f44:	83 ff       	sbrs	r24, 3
 f46:	01 c0       	rjmp	.+2      	; 0xf4a <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
 f48:	c9 dc       	rcall	.-1646   	; 0x8dc <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 f4a:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 f4c:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 f50:	1f 91       	pop	r17
 f52:	08 95       	ret

00000f54 <_exit>:
 f54:	f8 94       	cli

00000f56 <__stop_program>:
 f56:	ff cf       	rjmp	.-2      	; 0xf56 <__stop_program>
